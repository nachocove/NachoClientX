1. Introduction
---------------
This document describes the extra build steps added to Xamarin NachoClient
solutions.


2. Build Info
-------------
The goal of build info is to produce tracking information for every build.
								   
Before each build, a Python script, mk_build_info.py, is run to create a
BuildInfo.cs file. The file contains the following field:

1. Version - A string with version number
2. BuildNumber - A string with a build number
3. Time - The time that this file is created. Roughly the time the build
   was started.
4. User - The username that starts the build. (Note that this is based on
   the user name local to the machine.)

The information is logged when NachoMail client is launched. It can also
be used to display version information in some "About this app" screen. (This
is not implemented.) The version is also the build_version field of telemetry
events.

By default, version is set to "DEV[<username>]" where <username> is the current
user of the build machine. For example, on my machine, the default version is
"DEV[henry]".

The default build number comes from a .build_number file in NachoClient.iOS/ or 
NachoClient.Android/. The build number in the file is automatically created
or incremented by mk_build_info.py. The build number in the file is the value
used in the last build. The value is incremented regardless whether the build
is successfully or not. So, there may be gaps in the values for successive builds.

Both version and build number can be overridden by environment variables VERSION
and BUILD. These environment variables are designed for official builds. Official
builds will be generated by Jenkins. Jenkins will either run make. make will run
mdtool which will invoke mk_build_info.py. So, Jenkins cannot pass command-line
options to mk_build_info.py (via make and mdtool). This is the reason we use
environment variable. For example, Jenkins can issue:

VERSION=1.0.1 BUILD=123 make -C NachoClientX/

where VERSION is determined by the branch name and BUILD comes from Jenkins's 
internal build number generator.

If only BUILD is provided, then the version is extracted from <ReleaseVersion>
in the project .csproj file. If VERSION is provided, then it is used for
version.


3. Log Settings
---------------
LogSettings.cs provides fine control of which subsystem is logged to console 
and / or telemetry system. This file is generated by mk_log_settings.py. The script
takes no command line argument and must be run in the project directory (e.g.
NachoClient.iOS/ or NachoCLient.Android/). If LogSettings.cs already exists,
the script takes no action. Otherwise, it generates a default LogSettings.cs
that developers can customize for their own need.

During clean, this file is deleted. You may want to keep a persistent copy.


4. Debug Symbol Upload
----------------------
After builds for iPhone device are finished, .dSYM debug symbols are uploaded
to HockeyApp using hockeyapp_upload.py. HockeyApp uses these .dSYM file to
symbolicate crash stack traces.

Xamarin does not produce .dSYM files for iPhone simulator builds. So, crash
reporting is disabled for those builds.

Each build requires a version and a build number for HockeyApp. The version
number is the CFShortVersionString field in Info.plist. This value should 
be set to the same value as <ReleaseVersion> in .csproj file. We use build number
0 to indicate a development. Note this is different from using "DEV[<username>]"
for version and an incrementing integer for build number.

The reason for using different naming system is that the use cases and requirements
are different.

For telemetry, we usually want to know the events for a particular developer / 
users. So, we embed the username into the build version. The "DEV" prefix will
be used for quickly separating developer telemetry events from field telemetry
events.

If we use "DEV[xxx]" for HockeyApp, we will have multiple developer versions and
each developer will need to check all other developer version for crashes that
he may need to investigate. For example, if A has a crash that B can fix, B
need to check both DEV[A] (and DEV[B]) to see all the crashes. For N developers,
we need to check N versions. Putting them into a single version simplifies
the process of notifying developers.

If you are working in a slow network, you may want to disable upload by
creating NachoClient.iOS/.skip_hockeyapp_upload. In Xamarin studio build
log, it should display:

Skipping HockeyApp upload.

The file is intentionally not added to .gitignore to constantly remind you about 
that your build cannot be symbolicated.

