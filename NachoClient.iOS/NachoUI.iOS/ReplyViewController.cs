// This file has been autogenerated from a class added in the UI designer.

using System;
using NachoCore;
using NachoCore.Model;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace NachoClient.iOS
{

    public partial class ReplyViewController : UIViewController
    {
        /* This object only called from "readMessage"  On seguepush, the method SetCurrentEmail() will be called
         * where we will get the current email message data (reply to field, subject; and the actual message itself
         * */
        AppDelegate appDelegate { get; set; }
        McEmailMessage currentMessage { get; set; }
    
        public void SetMessage (McEmailMessage ncemailmsg) {
            currentMessage = ncemailmsg;
        }

        void getReplyList(){
            // FIXME: add all logic to ensure that any change in the field is updated .. unless cancel hit
            txtReplyList.EditingDidBegin += delegate {
                txtComposeReply.ResignFirstResponder ();
            };

    
            this.txtReplyList.ShouldReturn += (textField) => { 
                if (txtReplyList.Text.Contains ("Hello")) {
                    Console.WriteLine ("Hello");    
                }
                Console.WriteLine (txtReplyList.Text);

                // Add checks to make sure these are valid email address formats...
                // evntually add syn to contacts DB to get more info and "help with autocomplete

                textField.ResignFirstResponder (); 
                return true;
            };
        }

        

        public override void TouchesBegan (NSSet touches, UIEvent evt)
        {
            this.ResignFirstResponder();
        }

        /*
         * protected override void OnKeyboardChanged (bool visible, float height)
        {
            //We "center" the popup when the keyboard appears/disappears
            var frame = container.Frame;
            if (visible)
                frame.Y -= height / 2;
            else
                frame.Y += height / 2;
            container.Frame = frame;
        }*/
        /*
            // to get keyboard up...
            txtMfg.EditingDidBegin += delegate {
                 txtDescription.ResignFirstResponder();
            }


         */

        
        void getSubject(){
            // add all logic to ensure that any change in the field is updated .. unless cancel hit
            this.txtSubjectField.EditingDidBegin += delegate {
                txtComposeReply.ResignFirstResponder ();
            };
            this.txtSubjectField.ShouldReturn += (textField) => { 
                if (txtSubjectField.Text.Contains ("Hello")) {
                    Console.WriteLine ("Hello");    
                }
                Console.WriteLine (txtSubjectField.Text);

                //make sure autocorrect is on in this field

                textField.ResignFirstResponder (); 
                return true;
            };

        }



        
        void getreply(){
            // add all logic to ensure that any change in the field is updated .. unless cancel hit

            this.txtComposeReply.ShouldEndEditing += (textField) => { 
                if (txtSubjectField.Text.Contains ("Hello")) {
                    Console.WriteLine ("Hello");    
                }
                Console.WriteLine (txtComposeReply.Text);

                //make sure autocorrect is on in this field
                // this resign is not getting triggered; need to find a way to determine when/how to resign here

                textField.ResignFirstResponder (); 
                return true;
            };

        }



        partial void btnSend (MonoTouch.Foundation.NSObject sender){
            Console.WriteLine("Sending email");
            txtComposeReply.ResignFirstResponder ();


            var email = new McEmailMessage () {
                AccountId = appDelegate.Account.Id,
                To = txtReplyList.Text,
                From = appDelegate.Account.EmailAddr,

                Subject = txtSubjectField.Text,
                Body = txtComposeReply.Text,
            };
            BackEnd.Instance.Db.Insert(BackEnd.DbActors.Ui, email);
            BackEnd.Instance.SendEmailCmd(appDelegate.Account, email.Id);
            // close this view and go back
            //
            this.NavigationController.PopViewControllerAnimated(true);

        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            txtReplyList.Text = currentMessage.ReplyTo;
            txtCopyList.Text = currentMessage.ReplyTo;
            txtSubjectField.Text = "Re :" + currentMessage.Subject;
            getReplyList ();
            getSubject ();
            getreply ();


            Console.WriteLine("replyview loaded");


        }
        public ReplyViewController (IntPtr handle) : base (handle)
        {
            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
        }
    }
}
