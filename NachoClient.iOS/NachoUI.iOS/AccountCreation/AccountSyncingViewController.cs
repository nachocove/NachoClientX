// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using NachoCore.Model;
using NachoCore;
using NachoCore.Utils;
using NachoPlatform;

namespace NachoClient.iOS
{

    #region Delegate

    public interface AccountSyncingViewControllerDelegate
    {
        void AccountSyncingViewControllerDidComplete (AccountSyncingViewController vc);
    }

    #endregion

    public partial class AccountSyncingViewController : NcUIViewController, ILoginEvents, ThemeAdopter
    {

        #region Properties

        private class AccountSyncingStatusMessage
        {
            public string Title;
            public string Details;
            public bool IsWorking;

            public AccountSyncingStatusMessage (string title, string details, bool isWorking)
            {
                Title = title;
                Details = details;
                IsWorking = isWorking;
            }
        }

        public AccountSyncingViewControllerDelegate AccountDelegate;
        private McAccount account;
        private bool IsVisible;
        private bool DismissOnVisible;
        private NcTimer DismissTimer;

        private static AccountSyncingStatusMessage SyncingMessage = new AccountSyncingStatusMessage ("Syncing...", "Syncing your inbox...", true);
        private static AccountSyncingStatusMessage SuccessMessage = new AccountSyncingStatusMessage ("Account Created", "Your account is ready!", false);
        private static AccountSyncingStatusMessage ErrorMessage = new AccountSyncingStatusMessage ("Account Created", "Sorry, we could not fully sync your inbox.  Please see Settings for more information", false);
        private static AccountSyncingStatusMessage NetworkMessage = new AccountSyncingStatusMessage ("Account Created", "Syncing will complete when network connectivity is restored", false);

        private AccountSyncingStatusMessage Message = SyncingMessage;

        public McAccount Account {
            get {
                return account;
            }

            set {
                account = value;
                LoginEvents.Owner = this;
                LoginEvents.AccountId = account.Id;
                LoginEvents.CheckBackendState ();
            }
        }

        #endregion

        #region Constructors

        public AccountSyncingViewController (IntPtr handle) : base (handle)
        {
            NavigationItem.HidesBackButton = true;
        }

        #endregion

        #region Theme

        public void AdoptTheme (Theme theme)
        {
            View.BackgroundColor = theme.AccountCreationBackgroundColor;
            statusLabel.Font = theme.DefaultFont.WithSize (statusLabel.Font.PointSize);
            statusLabel.TextColor = theme.AccountCreationTextColor;
        }

        #endregion

        #region iOS View Lifecycle

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            AdoptTheme (Theme.Active);
            Update ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            IsVisible = true;
            if (Message.IsWorking) {
                activityIndicatorView.StartAnimating ();
            }
            if (DismissOnVisible) {
                DismissAfterDelay ();
            }
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            IsVisible = false;
            activityIndicatorView.StopAnimating ();
        }

        #endregion

        #region User Actions

        partial void Skip (NSObject sender)
        {
            Log.Info (Log.LOG_UI, "AccountSyncingViewController user did skip, dismissing as if we were done");
            LoginEvents.Owner = null;
            CompleteAccount ();
            Dismiss ();
        }

        #endregion

        #region View Helpers

        void Update ()
        {
            if (IsViewLoaded) {
                NavigationItem.Title = Message.Title;
                statusLabel.Text = Message.Details;
                if (IsVisible) {
                    if (Message.IsWorking) {
                        activityIndicatorView.StartAnimating ();
                    } else {
                        activityIndicatorView.StopAnimating ();
                    }
                }
                if (Message.IsWorking) {
                    NavigationItem.RightBarButtonItem = skipButton;
                } else {
                    NavigationItem.RightBarButtonItem = null;
                }
            }
        }

        private void CompleteAccount ()
        {
            if (Account != null) {
                Account = Account.UpdateWithOCApply<McAccount> ((record) => {
                    var account = record as McAccount;
                    account.ConfigurationInProgress = McAccount.ConfigurationInProgressEnum.Done;
                    return true;
                });
            }
        }

        public void Complete ()
        {
            CompleteWithMessage (SuccessMessage);
        }

        void DismissAfterDelay ()
        {
            Log.Info (Log.LOG_UI, "AccountSyncingViewController starting dismiss timer");
            DismissTimer = new NcTimer ("AccountSyncViewControllerDismiss", (state) => {
                InvokeOnUIThread.Instance.Invoke (() => {
                    Dismiss ();
                });
            }, null, TimeSpan.FromSeconds (2), TimeSpan.Zero);

        }

        private void Dismiss ()
        {
            Log.Info (Log.LOG_UI, "AccountSyncingViewController dismissing by calling delegate");
            if (DismissTimer != null) {
                DismissTimer.Dispose ();
                DismissTimer = null;
            }
            AccountDelegate.AccountSyncingViewControllerDidComplete (this);
        }

        #endregion

        #region Backend Events

        public void CredReq (int accountId)
        {
            LoginEvents.Owner = null;
            CompleteWithMessage (ErrorMessage);
        }

        public void ServConfReq (int accountId, McAccount.AccountCapabilityEnum capabilities, BackEnd.AutoDFailureReasonEnum arg)
        {
            LoginEvents.Owner = null;
            CompleteWithMessage (ErrorMessage);
        }

        public void CertAskReq (int accountId, McAccount.AccountCapabilityEnum capabilities, System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
        {
            LoginEvents.Owner = null;
            CompleteWithMessage (ErrorMessage);
        }

        public void NetworkDown ()
        {
            LoginEvents.Owner = null;
            CompleteWithMessage (NetworkMessage);
        }

        public void PostAutoDPreInboxSync (int accountId)
        {
            // we don't care about this state, so do nothing wait for something else
        }

        public void PostAutoDPostInboxSync (int accountId)
        {
            LoginEvents.Owner = null;
            CompleteWithMessage (SuccessMessage);
        }
            
        public void ServerIndTooManyDevices (int acccountId)
        {
            LoginEvents.Owner = null;
            CompleteWithMessage (ErrorMessage);
        }

        public void ServerIndServerErrorRetryLater (int acccountId)
        {
            LoginEvents.Owner = null;
            CompleteWithMessage (ErrorMessage);
        }

        private void CompleteWithMessage (AccountSyncingStatusMessage message)
        {
            CompleteAccount ();
            Message = message;
            Update ();
            if (IsVisible) {
                Log.Info (Log.LOG_UI, "AccountSyncingViewController will set dismiss delay immediately");
                DismissAfterDelay ();
            } else {
                Log.Info (Log.LOG_UI, "AccountSyncingViewController will set dismiss delay on visible");
                DismissOnVisible = true;
            }
        }

        #endregion
    }
}
