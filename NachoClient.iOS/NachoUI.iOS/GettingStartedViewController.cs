// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CoreGraphics;
using NachoCore.Model;
using NachoCore;
using NachoCore.Utils;

namespace NachoClient.iOS
{

    public interface GettingStartedViewControllerDelegate
    {
        void GettingStartedViewControllerDidComplete (GettingStartedViewController vc);
    }

    public partial class GettingStartedViewController : UIViewController, AccountTypeViewControllerDelegate, AccountCredentialsViewControllerDelegate, AccountSyncingViewControllerDelegate
    {
        public GettingStartedViewControllerDelegate Delegate;
        public CGRect? AnimateFromLaunchImageFrame = null;
        private CGSize originalCircleImageSize;
        private nfloat originalCircleImageOffset;
        private UIStoryboard accountStoryboard;

        public GettingStartedViewController (IntPtr handle) : base (handle)
        {
            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            getStartedButton.Layer.CornerRadius = 6.0f;
            Util.ConfigureNavBar (false, NavigationController);
            var accountBeingConfigured = McAccount.GetAccountBeingConfigured ();
            if (accountBeingConfigured != null) {
                introLabel.Text = "Welcome Back!  We need to finish setting up your account.";
                getStartedButton.SetTitle ("Continue", UIControlState.Normal);
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (AnimateFromLaunchImageFrame != null) {
                View.LayoutIfNeeded ();
                originalCircleImageSize = circleImageView.Frame.Size;
                originalCircleImageOffset = circleVerticalSpaceConstraint.Constant;
                circleWidthContstraint.Constant = AnimateFromLaunchImageFrame.Value.Width;
                circleHeightConstraint.Constant = AnimateFromLaunchImageFrame.Value.Height;
                View.Superview.LayoutIfNeeded ();
                var frame = circleImageView.Superview.ConvertRectFromView (AnimateFromLaunchImageFrame.Value, View);
                circleVerticalSpaceConstraint.Constant = frame.Top - NavigationController.NavigationBar.Frame.Height - NavigationController.NavigationBar.Frame.Top;
                introLabel.Alpha = 0.0f;
                getStartedButton.Alpha = 0.0f;
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            if (AnimateFromLaunchImageFrame != null) {
                AnimateFromLaunchImageFrame = null;
                circleWidthContstraint.Constant = originalCircleImageSize.Width;
                circleHeightConstraint.Constant = originalCircleImageSize.Height;
                circleVerticalSpaceConstraint.Constant = originalCircleImageOffset;
                UIView.Animate (0.5, () => {
                    circleImageView.Superview.LayoutIfNeeded ();
                });
                UIView.Animate (0.2, 0.3, 0, () => {
                    introLabel.Alpha = 1.0f;
                    getStartedButton.Alpha = 1.0f;
                }, null);
            }
        }

        partial void getStarted (NSObject sender)
        {
            accountStoryboard = UIStoryboard.FromName ("AccountCreation", null);
            var accountBeingConfigured = McAccount.GetAccountBeingConfigured ();
            if (accountBeingConfigured != null){
                var vc = (AccountCredentialsViewController)accountStoryboard.InstantiateViewController ("AccountCredentialsViewController");
                vc.AccountDelegate = this;
                vc.Account = accountBeingConfigured;
                NavigationController.PushViewController (vc, true);
            }else{
                var vc = (AccountTypeViewController)accountStoryboard.InstantiateViewController ("AccountTypeViewController");
                vc.AccountDelegate = this;
                NavigationController.PushViewController (vc, true);
            }
        }

        public void AccountTypeViewControllerDidSelectService (AccountTypeViewController vc, McAccount.AccountServiceEnum service)
        {
            if (service == McAccount.AccountServiceEnum.GoogleDefault) {
                // Do the google thing
            } else if (service == McAccount.AccountServiceEnum.IMAP_SMTP) {
                // Show advanced settings
            } else {
                var credentialsViewController = (AccountCredentialsViewController)accountStoryboard.InstantiateViewController ("AccountCredentialsViewController");
                credentialsViewController.Service = service;
                credentialsViewController.AccountDelegate = this;
                NavigationController.PushViewController (credentialsViewController, true);
            }
        }

        public void AccountCredentialsViewControllerDidValidateAccount (AccountCredentialsViewController vc, McAccount account)
        {
            BackEnd.Instance.Start (account.Id);
            var syncingViewController = (AccountSyncingViewController)accountStoryboard.InstantiateViewController ("AccountSyncingViewController");
            syncingViewController.AccountDelegate = this;
            syncingViewController.Account = account;
            NavigationController.PushViewController (syncingViewController, true);
            // push tutorial view
        }

        public void AccountSyncingViewControllerDidComplete (AccountSyncingViewController vc)
        {
            // FIXME: Only set if null or device
            NcApplication.Instance.Account = vc.Account;
            LoginHelpers.SetSwitchToTime (vc.Account);
            Delegate.GettingStartedViewControllerDidComplete (this);
        }
    }
}
