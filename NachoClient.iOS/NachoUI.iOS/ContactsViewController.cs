// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog;
using Xamarin.Contacts;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;

namespace NachoClient.iOS
{
    public partial class ContactsViewController : UITableViewController
    {
        INachoContacts contacts;
        UIAlertView alert;

        public ContactsViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            TableView.AutoresizingMask = UIViewAutoresizing.FlexibleHeight | UIViewAutoresizing.FlexibleWidth;
            TableView.Frame = new RectangleF (0, 0, View.Frame.Width, View.Frame.Height);

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // We must request permission to access the user's address book
            // This will prompt the user on platforms that ask, or it will validate
            // manifest permissions on platforms that declare their required permissions.
            var book = new AddressBook ();
            book.RequestPermission ().ContinueWith (t => {
                if (!t.Result) {
                    alert = new UIAlertView ("Permission denied", "User has denied this app access to their contacts", null, "Close");
                    alert.Show ();
                } else {
                    // TODO: I'm sorry
                    if (Title.Equals ("AS Contacts")) {
                        contacts = new NachoContacts ();
                    } else {
                        contacts = new DeviceContacts ();
                    }
                    TableView.ReloadData ();
                }
            }, TaskScheduler.FromCurrentSynchronizationContext ());
        }

        public override int NumberOfSections (UITableView tableView)
        {
            return 1;
        }

        public override int RowsInSection (UITableView tableview, int section)
        {
            if (null == contacts) {
                return 0;
            } else {
                return contacts.Count ();
            }
        }

        static readonly NSString CellIdentifier = new NSString ("contactIdentifier");

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = tableView.DequeueReusableCell (CellIdentifier);
            if (cell == null) {
                cell = new UITableViewCell (UITableViewCellStyle.Subtitle, CellIdentifier);
            }

            NcContact contact = contacts.GetContact (indexPath.Row);

            cell.TextLabel.Text = contact.LastName;
            cell.DetailTextLabel.Text = contact.FirstName;

            return cell;
        }
    }
}
