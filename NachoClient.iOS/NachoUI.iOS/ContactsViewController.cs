// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog;
using Xamarin.Contacts;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{

    public partial class ContactsViewController : NcUITableViewController
    {
        INachoContacts contacts;
        List<McContactEmailAddressAttribute> searchResults = null;

        public ContactsViewController (IntPtr handle) : base (handle)
        {
        }

        /// <summary>
        /// Setup the search bar & auto-complete handler.
        /// Setup the navigation hooks for the sidebar controller.
        /// Request permission for the device address book (really, here?)
        /// Tables cells and search cells both trigger segues to a detail page.
        /// </summary>
        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

//            TableView.AutoresizingMask = UIViewAutoresizing.FlexibleHeight | UIViewAutoresizing.FlexibleWidth;
//            TableView.Frame = new RectangleF (0, 0, View.Frame.Width, View.Frame.Height);

            // Manages the search bar & auto-complete table.
            SearchDisplayController.Delegate = new SearchDisplayDelegate (this);

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcContactManager.Instance.ContactsChanged += ContactsChangedCallback;
            contacts = NcContactManager.Instance.GetNachoContacts ();
            TableView.ReloadData ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcContactManager.Instance.ContactsChanged -= ContactsChangedCallback;
        }

        public void ContactsChangedCallback (object sender, EventArgs e)
        {
            contacts = NcContactManager.Instance.GetNachoContacts ();
            TableView.ReloadData ();
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("ContactsToContact")) {
                var h = sender as SegueHolder;
                var c = (McContact) h.value;
                ContactViewController destinationController = (ContactViewController)segue.DestinationViewController;
                destinationController.contact = c;
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        public override int NumberOfSections (UITableView tableView)
        {
            return 1;
        }

        public override int RowsInSection (UITableView tableview, int section)
        {
            if (SearchDisplayController.SearchResultsTableView == tableview) {
                return ((null == searchResults) ? 0 : searchResults.Count ());
            }
            return ((null == contacts) ? 0 : contacts.Count ());
        }

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            McContact contact;
            if (SearchDisplayController.SearchResultsTableView == tableView) {
                contact = searchResults.ElementAt (indexPath.Row).GetContact ();
            } else {
                contact = contacts.GetContactIndex (indexPath.Row).GetContact ();
            }

            UITableViewCell cell = null;
            var displayName = contact.GetDisplayName();
            var displayEmailAddress = contact.GetEmailAddress();

            // Both empty
            if (String.IsNullOrEmpty (displayName) && String.IsNullOrEmpty (displayEmailAddress)) {
                cell = TableView.DequeueReusableCell ("Basic");
                NcAssert.True (null != cell);
                cell.TextLabel.Text = "Contact has no name or email address";
                cell.TextLabel.TextColor = UIColor.LightGray;
                cell.TextLabel.Font = A.Font_AvenirNextRegular14;
                return cell;
            }

            // Name empty
            if (String.IsNullOrEmpty (displayName)) {
                cell = TableView.DequeueReusableCell ("Basic");
                NcAssert.True (null != cell);
                cell.TextLabel.Text = displayEmailAddress;
                cell.TextLabel.TextColor = A.Color_NachoBlack;
                cell.TextLabel.Font = A.Font_AvenirNextRegular14;
                return cell;
            }

            // Email empty
            if (String.IsNullOrEmpty (displayEmailAddress)) {
                cell = TableView.DequeueReusableCell ("Subtitle");
                NcAssert.True (null != cell);
                cell.TextLabel.Text = displayName;
                cell.DetailTextLabel.Text = "Contact has no email address";
                cell.TextLabel.TextColor = A.Color_NachoBlack;
                cell.TextLabel.Font = A.Font_AvenirNextRegular14;
                cell.DetailTextLabel.TextColor = UIColor.LightGray;
                cell.DetailTextLabel.Font = A.Font_AvenirNextRegular12;
                return cell;
            }

            // Everything
            cell = TableView.DequeueReusableCell ("Subtitle");
            NcAssert.True (null != cell);
            cell.TextLabel.Text = displayName;
            cell.DetailTextLabel.Text = displayEmailAddress;
            cell.TextLabel.TextColor = A.Color_NachoBlack;
            cell.TextLabel.Font = A.Font_AvenirNextRegular14;
            cell.DetailTextLabel.TextColor = UIColor.Gray;
            cell.DetailTextLabel.Font = A.Font_AvenirNextRegular12;
            return cell;  

        }

        public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {
            McContact contact;

            if (SearchDisplayController.SearchResultsTableView == tableView) {
                var contactEmailAttribute = searchResults [indexPath.Row];
                contact = McContact.QueryById<McContact> ((int)contactEmailAttribute.ContactId);
            } else {
                contact = contacts.GetContactIndex (indexPath.Row).GetContact ();
            }
            PerformSegue ("ContactsToContact", new SegueHolder (contact));
        }

        /// <summary>
        /// Updates the search results.
        /// Return false if an asynch update is triggers.
        /// For async, the table and view should be updated in UpdateSearchResultsCallback.  
        /// </summary>
        /// <returns><c>true</c>, if search results are updated, <c>false</c> otherwise.</returns>
        /// <param name="forSearchOption">Index of the selected tab.</param>
        /// <param name="forSearchString">The prefix string to search for.</param>
        public bool UpdateSearchResults (int forSearchOption, string forSearchString)
        {
            // TODO: Make this work like EAS
            var account = NcModel.Instance.Db.Table<McAccount> ().First ();
            searchResults = McContact.SearchAllContactItems (account.Id, forSearchString);
            return true;
        }

        /// <summary>
        /// Updates the search results async.
        /// </summary>
        public void UpdateSearchResultsCallback ()
        {
            // Totally a dummy routines that exists to remind us how to trigger 
            // the update after updating the searchResult list of contacts.
            if (null != SearchDisplayController.SearchResultsTableView) {
                SearchDisplayController.SearchResultsTableView.ReloadData ();
            }
        }

        public class SearchDisplayDelegate : UISearchDisplayDelegate
        {
            ContactsViewController v;

            private SearchDisplayDelegate ()
            {
            }

            public SearchDisplayDelegate (ContactsViewController owner)
            {
                v = owner;
            }

            public override bool ShouldReloadForSearchScope (UISearchDisplayController controller, int forSearchOption)
            {
                // TODO: Trigger asynch search & return false
                string searchString = controller.SearchBar.Text;
                return v.UpdateSearchResults (forSearchOption, searchString);
            }

            public override bool ShouldReloadForSearchString (UISearchDisplayController controller, string forSearchString)
            {
                // TODO: Trigger asynch search & return false
                int searchOption = controller.SearchBar.SelectedScopeButtonIndex;
                return v.UpdateSearchResults (searchOption, forSearchString);
            }
        }
    }
}
