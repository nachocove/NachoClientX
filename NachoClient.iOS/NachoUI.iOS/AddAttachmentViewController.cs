// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using System.IO;
using System.Drawing;
using System.Collections.Generic;

using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class AddAttachmentViewController : NcUIViewController , IUcAttachmentBlockDelegate, INachoFileChooserParent
    {
        public AddAttachmentViewController (IntPtr handle) : base (handle)
        {
        }

        public McAttachment attachment;
        protected List<UcAttachmentCell> list = new List<UcAttachmentCell> ();
        protected int accountId;
        UcAttachmentBlock attachmentView;
        protected McAccount account;

        UIColor separatorColor = A.Color_NachoSeparator;
        protected static float SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected int LINE_OFFSET = 30;
        protected int CELL_HEIGHT = 44;
        protected float TEXT_LINE_HEIGHT = 19.124f;


        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            account = NcModel.Instance.Db.Table<McAccount> ().First ();

            addAttachmentButton.SetTitle ("Attach Files", UIControlState.Normal);
            addAttachmentButton.Font = A.Font_AvenirNextDemiBold17;
            addAttachmentButton.SizeToFit ();

            var b1 = new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace);
            var b2 = new UIBarButtonItem (addAttachmentButton);
            var b3 = new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace);
            this.SetToolbarItems (new UIBarButtonItem[] { b1, b2, b3 }, false);
            this.NavigationController.Toolbar.BarTintColor = A.Color_NachoBlack;

            addAttachmentButton.TouchUpInside += (object sender, EventArgs e) => {
                attachmentView.Hidden = false;
                attachmentView.SetCompact(false);
                attachmentView.ConfigureView ();
                attachmentView.PromptForAttachment("event");
            };

            CreateAttachmentView ();


        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = false;
            }
                
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {

            if (segue.Identifier.Equals ("AddAttachmentToAttachment")) {
                var dc = (INachoFileChooser)segue.DestinationViewController;
                dc.SetOwner (this);
                return;
            }
            if (segue.Identifier.Equals ("AddAttachmentsToFiles")) {
                var dc = (INachoFileChooser)segue.DestinationViewController;
                dc.SetOwner (this);
                return;
            }
            Log.Error (Log.LOG_CALENDAR, "segue.Identifier: {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        protected void CreateAttachmentView ()
        {
            attachmentView = new UcAttachmentBlock (this, account.Id, View.Frame.Width);
           
            //View
            View.BackgroundColor = A.Color_NachoNowBackground;
            View.AddSubviews (new UIView[] {
                attachmentView
            }); 
        }

        public UIView AddLine (float offset, float yVal, float width, UIColor color)
        {
            var lineUIView = new UIView (new RectangleF (offset, yVal, width, .5f));
            lineUIView.BackgroundColor = color;
            return (lineUIView);
        }

        /// IUcAttachmentBlock delegate
        public void PerformSegueForAttachmentBlock (string identifier, SegueHolder segueHolder)
        {
            PerformSegue (identifier, segueHolder);
        }

        /// IUcAttachmentBlock delegate
        public void DisplayAttachmentForAttachmentBlock (McAttachment attachment)
        {
            PlatformHelpers.DisplayAttachment (this, attachment);
        }

        /// IUcAttachmentBlock delegate
        public void PresentViewControllerForAttachmentBlock (UIViewController viewControllerToPresent, bool animated, NSAction completionHandler)
        {
            this.PresentViewController (viewControllerToPresent, animated, completionHandler);
        }

        /// IUcAttachmentBlock delegate
        public void AttachmentBlockNeedsLayout (UcAttachmentBlock view)
        {

            LayoutView ();
        }

        public void LayoutView (){
            var yOffset = 30f;
            if (!attachmentView.Hidden) {
                AdjustY (attachmentView, yOffset);
                yOffset += attachmentView.Frame.Height; 
            }
        }

        protected void AdjustY (UIView view, float yOffset)
        {
            var frame = view.Frame;
            frame.Y = yOffset;
            view.Frame = frame;
        }

        /// <summary>
        /// INachoFileChooserParent delegate
        /// </summary>
        public void SelectFile (INachoFileChooser vc, McAbstrObject obj)
        {
            // Attachment
            var a = obj as McAttachment;
            if (null != a) {
                attachmentView.Append (a);
                vc.DismissFileChooser (true, null);
                return;
            }

            // File
            var file = obj as McFile;
            if (null != file) {
                var attachment = new McAttachment ();
                attachment.DisplayName = file.DisplayName;
                attachment.AccountId = account.Id;
                attachment.Insert ();
                var guidString = Guid.NewGuid ().ToString ("N");
                // TODO: Decide on copy, move, delete, etc
                File.Copy (file.FilePath (), McAttachment.TempPath (guidString));
                //                File.Move (file.FilePath (), McAttachment.TempPath (guidString));
                //                file.Delete ();
                attachment.SaveFromTemp (guidString);
                attachment.Update ();
                attachmentView.Append (attachment);
                vc.DismissFileChooser (true, null);
                return;
            }
            NcAssert.CaseError ();
        }

        /// <summary>
        /// INachoFileChooserParent delegate
        /// </summary>
        public void DismissChildFileChooser (INachoFileChooser vc)
        {
            vc.DismissFileChooser (true, null);
        }
 

    }
}