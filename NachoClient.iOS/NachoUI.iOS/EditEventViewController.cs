// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using System.IO;
using CoreGraphics;
using System.Collections.Generic;
using MimeKit;

using NachoCore.Model;
using NachoCore.Utils;
using NachoPlatform;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

using NachoCore;
using NachoCore.ActiveSync;

namespace NachoClient.iOS
{
    public partial class EditEventViewController : NcUIViewController, INachoAttendeeListChooserDelegate, IUcAttachmentBlockDelegate, INachoFileChooserParent
    {
        protected INachoCalendarItemEditorParent owner;
        protected CalendarItemEditorAction action;
        protected McCalendar item;
        protected McCalendar c;
        protected DateTime startingDate;
        protected McFolder folder;
        protected McAccount account;
        protected NachoFolders calendars;
        protected bool calendarChanged;
        protected string TempPhone = "";
        protected int calendarIndex = 0;

        UITextField titleField;
        UITextView descriptionTextView;
        UILabel descriptionPlaceHolder;

        UIBarButtonItem doneButton;
        UIBarButtonItem cancelButton;

        UIView titleView;
        UIView descriptionView;

        UIView allDayView;
        UIView startView;
        UIView endView;

        UIView locationView;
        UITextField locationField;
        //UIView phoneView;
        //UILabel phoneDetailLabel;
        UcAttachmentBlock attachmentView;
        UIView attachmentBGView;
        UIView peopleView;

        UIView alertsView;

        UIView calendarView;

        UIView deleteView;

        DateTime startDate;
        DateTime endDate;

        UILabel startDateLabel;
        UILabel endDateLabel;

        UIColor separatorColor = A.Color_NachoBorderGray;
        protected static nfloat SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected int LINE_OFFSET = 30;
        protected int CELL_HEIGHT = 44;
        protected int START_PICKER_HEIGHT = 0;
        protected int END_PICKER_HEIGHT = 0;
        protected nfloat TEXT_LINE_HEIGHT = 19.124f;
        protected nfloat DESCRIPTION_OFFSET = 0f;
        protected nfloat DELETE_BUTTON_OFFSET = 0f;
        protected UIFont labelFont = A.Font_AvenirNextMedium14;

        protected nfloat keyboardHeight;
        protected bool startDateOpen = false;
        protected bool endDateOpen = false;
        protected bool startIsOpening = false;
        protected bool endIsOpening = false;
        protected bool endChanged = false;
        protected bool eventEditStarted = false;
        protected bool isRecurring = false;
        protected bool attachmentsInitialized = false;
        protected bool timesAreSet = true;

        protected UIView line1;
        protected UIView line2;
        protected UIView line3;
        protected UIView line4;
        protected UIView line5;
        protected UIView line6;
        protected UIView line7;
        protected UIView line8;
        protected UIView line9;
        protected UIView line10;
        protected UIView line11;
        protected UIView line12;
        protected UIView line13;
        protected UIView line14;
        protected UIView line15;
        protected UIView line16;
        protected UIView strikethrough;
        protected UIView endDivider;
        protected UIView startDivider;
        protected UIColor solidTextColor = A.Color_NachoDarkText;

        const int ALL_DAY_SWITCH_TAG = 200;
        const int START_DATE_TAG = 201;
        const int END_DATE_TAG = 202;
        const int LOCATION_DETAIL_TAG = 203;
        //const int PHONE_DETAIL_TAG = 204;
        const int ATTACHMENTS_DETAIL_TAG = 205;
        const int PEOPLE_DETAIL_TAG = 206;
        const int ALERT_DETAIL_TAG = 207;
        const int CAL_DETAIL_TAG = 210;

        const int EVENT_TITLE_LABEL_TAG = 101;
        const int EVENT_DESCRIPTION_LABEL_TAG = 102;
        const int EVENT_LOCATION_DETAIL_LABEL_TAG = 103;
        const int EVENT_WHEN_DETAIL_LABEL_TAG = 104;
        //const int EVENT_PHONE_DETAIL_BUTTON_TAG = 105;
        const int EVENT_ATTENDEE_TAG = 106;
        const int EVENT_ATTENDEE_DETAIL_TAG = 110;
        const int EVENT_ATTENDEE_LABEL_TAG = 120;
        const int EVENT_ATTACHMENT_DETAIL_TAG = 121;
  
        protected UIColor CELL_COMPONENT_BG_COLOR = UIColor.White;

        protected static TupleList<uint, string> minList = new TupleList<uint, string> {
            { 0, "None" },
            { 1, "At time of event" },
            { 5, "5 min before" },
            { 15, "15 min before" },
            { 30, "30 min before" },
            { 60, "1 hour before" },
            { 120, "2 hours before" },
            { 1440, "1 day before" },
            { 2880, "2 days before" },
            { 10080, "1 week before" },
        };

        public EditEventViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            var g = new UITapGestureRecognizer (() => View.EndEditing (true));
            contentView.AddGestureRecognizer (g);

            account = NcModel.Instance.Db.Table<McAccount> ().Where (x => x.AccountType == McAccount.AccountTypeEnum.Exchange).FirstOrDefault ();
            calendars = new NachoFolders (account.Id, NachoFolders.FilterForCalendars);

            switch (action) {
            case CalendarItemEditorAction.create:
                if (null == item) {
                    if (0001 != startingDate.Year) {
                        c = CalendarHelper.DefaultMeeting (startingDate, startingDate);
                    } else {
                        c = CalendarHelper.DefaultMeeting (DateTime.UtcNow, DateTime.UtcNow);
                    }
                } else {
                    c = item;
                }
                CreateEditEventView ();
                break;
            case CalendarItemEditorAction.edit:
                c = item;
                if (0 != c.recurrences.Count) {
                    isRecurring = true;
                }
                if (c.AllDayEvent) {
                    timesAreSet = false;
                }
                CreateEditEventView ();
                break;
            default:
                NcAssert.CaseError ();
                break;
            }
        }

        public void SetCalendarEvent (McEvent e, CalendarItemEditorAction action)
        {
            if (null == e) {
                this.item = null;
            } else {
                this.item = McCalendar.QueryById<McCalendar> (e.CalendarId);
            }
            this.action = action;
        }

        public void SetCalendarItem (McCalendar c)
        {
            if (null == c) {
                this.item = null;
                this.action = CalendarItemEditorAction.create;
                return;
            }

            if (0 == c.Id) {
                this.item = c;
                this.action = CalendarItemEditorAction.create;
                return;
            }

            this.item = c;
            this.action = CalendarItemEditorAction.edit;
        }

        public void SetStartingDate (DateTime startingDate)
        {
            this.startingDate = startingDate;
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;

            }
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillHideNotification);
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillShowNotification);
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
            }
            ConfigureEditEventView ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
            }
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        /// <summary>
        /// Interface INachoCalendarItemEditor
        /// </summary>
        /// <param name="owner">Owner.</param>
        public void SetOwner (INachoCalendarItemEditorParent owner)
        {
            this.owner = owner;
        }

        /// <summary>
        /// Interface INachoCalendarItemEditor
        /// </summary>
        /// <param name="animated">If set to <c>true</c> animated.</param>
        /// <param name="action">Action.</param>
        public void DismissCalendarItemEditor (bool animated, Action action)
        {
            owner = null;
            NavigationController.PopViewController (true);
        }

        protected string MyCalendarName (McCalendar c)
        {
            var candidates = McFolder.QueryByFolderEntryId<McCalendar> (account.Id, c.Id);
            if ((null == candidates) || (0 == candidates.Count)) {
                return "None";
            } else {
                return candidates.First ().DisplayName;
            }
        }

        public virtual bool HandlesKeyboardNotifications {
            get { return true; }
        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {
                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;
                //Start an animation, using values from the keyboard
                UIView.BeginAnimations ("AnimateForKeyboard");
                UIView.SetAnimationBeginsFromCurrentState (true);
                UIView.SetAnimationDuration (UIKeyboard.AnimationDurationFromNotification (notification));
                UIView.SetAnimationCurve ((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification (notification));
                //Pass the notification, calculating keyboard height, etc.
                bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                if (visible) {
                    var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                } else {
                    var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                }
                //Commit the animation
                UIView.CommitAnimations (); 
            }
        }

        protected virtual void OnKeyboardChanged (bool visible, nfloat height)
        {
            var newHeight = (visible ? height : 0);

            if (newHeight == keyboardHeight) {
                return;
            }
            keyboardHeight = newHeight;

            LayoutView ();
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("EditEventToEventAttendees")) {
                var dc = (EventAttendeeViewController)segue.DestinationViewController;
                ExtractValues ();
                dc.Setup (this, c.attendees, c, true, CalendarHelper.IsOrganizer (c.OrganizerEmail, account.EmailAddr));
                return;
            }

            if (segue.Identifier.Equals ("EditEventToAlert")) {
                var dc = (AlertChooserViewController)segue.DestinationViewController;
                dc.SetReminder (c.ReminderIsSet, c.Reminder);
                ExtractValues ();
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    uint reminder;
                    c.ReminderIsSet = dc.GetReminder (out reminder);
                    if (c.ReminderIsSet) {
                        c.Reminder = reminder;
                    }
                    ConfigureEditEventView ();
                };
                return;
            }

            if (segue.Identifier.Equals ("SegueToAddAttachment")) {
                var dc = (AddAttachmentViewController)segue.DestinationViewController;
                ExtractValues ();
                dc.SetOwner (this);
                return;
            }

            if (segue.Identifier.Equals ("EventToPhone")) {
                var dc = (PhoneViewController)segue.DestinationViewController;
                dc.SetPhone (TempPhone);
                ExtractValues ();
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    TempPhone = dc.GetPhone ();
                    ConfigureEditEventView ();
                };
                return;
            }

            if (segue.Identifier.Equals ("EditEventToCalendarChooser")) {
                var dc = (ChooseCalendarViewController)segue.DestinationViewController;
                ExtractValues ();
                dc.SetCalendars (calendars);
                dc.SetSelectedCalIndex (calendarIndex);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    calendarIndex = dc.GetCalIndex ();
                    calendarChanged = true;
                    ConfigureEditEventView ();
                };
                return;
            }

            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        protected void CreateEditEventView ()
        {
            scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height);

            doneButton = new UIBarButtonItem ();
            cancelButton = new UIBarButtonItem ();

            doneButton.Title = (CalendarItemEditorAction.create == action ? "Send" : "Done");
            doneButton.AccessibilityLabel = "Done";

            Util.SetAutomaticImageForButton (cancelButton, "icn-close");
            cancelButton.AccessibilityLabel = "Close";

            cancelButton.Clicked += (sender, e) => {
                View.EndEditing (true);
                if (eventEditStarted) {
                    NcAlertView.Show (this, "Are you sure?", "This event will not be saved.",
                        new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null),
                        new NcAlertAction ("Yes", NcAlertActionStyle.Destructive, () => {
                            DismissView ();
                        }));
                } else {
                    DismissView ();
                }
            };

            doneButton.Clicked += (sender, e) => {
                if (CanBeSaved ()) {
                    ExtractValues ();
                    SyncMeetingRequest ();
                    PrepareInvites ();
                    DismissView ();
                }
            };

            NavigationItem.LeftBarButtonItem = cancelButton;
            NavigationItem.RightBarButtonItem = doneButton;

            //Title
            titleView = new UIView (new CGRect (0, 30, SCREEN_WIDTH, CELL_HEIGHT));
            titleView.BackgroundColor = UIColor.White;

            titleField = new UITextField (new CGRect (15, 12.438f, SCREEN_WIDTH - 30, TEXT_LINE_HEIGHT));
            titleField.Font = labelFont;
            titleField.TextColor = solidTextColor;
            titleField.Placeholder = "Title";
            titleField.Tag = EVENT_TITLE_LABEL_TAG;
            titleField.ClearButtonMode = UITextFieldViewMode.Always;
            titleView.AddSubview (titleField);

            titleField.ShouldReturn += (textField) => {
                textField.ResignFirstResponder ();
                return true;
            };

            titleField.EditingDidBegin += (object sender, EventArgs e) => {
                eventEditStarted = true;
            };

            //Description
            descriptionView = new UIView (new CGRect (0, 74, SCREEN_WIDTH, CELL_HEIGHT + TEXT_LINE_HEIGHT));
            descriptionView.BackgroundColor = UIColor.White;

            descriptionPlaceHolder = new UILabel (new CGRect (15, 12.438f, SCREEN_WIDTH - 30, TEXT_LINE_HEIGHT));
            descriptionPlaceHolder.Text = "Description";
            descriptionPlaceHolder.Font = labelFont;
            descriptionPlaceHolder.TextColor = new UIColor (.8f, .8f, .8f, 1f);

            descriptionTextView = new UITextView (new CGRect (15, 12.438f, SCREEN_WIDTH - 30, TEXT_LINE_HEIGHT));
            descriptionTextView.Font = labelFont;
            descriptionTextView.TextColor = solidTextColor;
            descriptionTextView.BackgroundColor = UIColor.Clear;
            var beginningRange = new NSRange (0, 0);
            descriptionTextView.SelectedRange = beginningRange;
            descriptionTextView.ContentInset = new UIEdgeInsets (-7, -4, 0, 0);
            descriptionTextView.Tag = EVENT_DESCRIPTION_LABEL_TAG;

            descriptionTextView.Changed += (object sender, EventArgs e) => {
                eventEditStarted = true;
                descriptionPlaceHolder.Hidden = true;
                SelectionChanged (descriptionTextView);
            };
            descriptionTextView.Ended += (object sender, EventArgs e) => {
                if (!descriptionTextView.HasText) {
                    descriptionPlaceHolder.Hidden = false;
                }
            };
            descriptionView.AddSubview (descriptionTextView);
            descriptionView.AddSubview (descriptionPlaceHolder);


            //All Day Event
            allDayView = new UIView (new CGRect (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            allDayView.BackgroundColor = UIColor.White;
            UILabel allDayLabel = new UILabel (new CGRect (15, 12.438f, 50, TEXT_LINE_HEIGHT));
            allDayLabel.Text = "All Day";
            allDayLabel.Font = labelFont;
            allDayLabel.TextColor = solidTextColor;
            allDayView.AddSubview (allDayLabel);

            UISwitch allDaySwitch = new UISwitch ();
            allDaySwitch.Tag = ALL_DAY_SWITCH_TAG;
            allDaySwitch.SizeToFit ();
            allDaySwitch.OnTintColor = A.Color_NachoTeal;
            allDaySwitch.HorizontalAlignment = UIControlContentHorizontalAlignment.Right;
            allDaySwitch.Frame = new CGRect (SCREEN_WIDTH - allDaySwitch.Frame.Width - 15, 6.5f, allDaySwitch.Frame.Width, TEXT_LINE_HEIGHT);
            allDayView.AddSubview (allDaySwitch);


            //Start Time
            startView = new UIView (new CGRect (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 3) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            startView.BackgroundColor = UIColor.White;
            UILabel startLabel = new UILabel (new CGRect (15, 12.438f, 40, TEXT_LINE_HEIGHT));
            startLabel.Text = "Starts";
            startLabel.Font = labelFont;
            startLabel.TextColor = solidTextColor;
            startView.AddSubview (startLabel);

            startDateLabel = new UILabel ();
            startDateLabel.Tag = START_DATE_TAG;
            startDateLabel.SizeToFit ();
            startDateLabel.TextAlignment = UITextAlignment.Right;
            startDateLabel.Frame = new CGRect (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
            startDateLabel.Font = labelFont;
            startDateLabel.TextColor = A.Color_808080;
            startView.AddSubview (startDateLabel);

            startDatePicker.Frame = new CGRect (0, 44, SCREEN_WIDTH, START_PICKER_HEIGHT);
            startDatePicker.Hidden = true;
            startView.AddSubview (startDatePicker);

            startDatePicker.ValueChanged += (object sender, EventArgs e) => {
                eventEditStarted = true;
                DateTime date = startDatePicker.Date.ToDateTime ();
                if (allDaySwitch.On) { 
                    startDateLabel.Text = Pretty.FullDateString (date);
                } else {
                    startDateLabel.Text = Pretty.FullDateTimeString (date);
                }
                startDate = date;
                if (!endChanged && !allDaySwitch.On) {
                    endDate = date.AddHours (1);
                    endDatePicker.Date = endDate.ToNSDate ();
                    endDateLabel.Text = Pretty.FullTimeString (endDate);
                    endDateLabel.SizeToFit ();
                    endDateLabel.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                    endDateLabel.TextColor = A.Color_NachoTeal;
                }
                startDateLabel.SizeToFit ();
                startDateLabel.Frame = new CGRect (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                startDateLabel.TextColor = A.Color_NachoTeal;
                if (0 > endDate.CompareTo (startDate)) {
                    strikethrough.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                    strikethrough.Hidden = false;
                    endDateLabel.TextColor = A.Color_NachoRed;
                } else { 
                    strikethrough.Hidden = true;
                    endDateLabel.TextColor = A.Color_808080;
                }
            };
            startDivider = Util.AddHorizontalLine (15, CELL_HEIGHT, SCREEN_WIDTH, separatorColor);
            startDivider.Hidden = true;
            startView.AddSubview (startDivider);

            var startTap = new UITapGestureRecognizer ();
            startTap.AddTarget (() => {
                View.EndEditing (true);
                if (startDateOpen) {
                    ConfigureDateView ("startClose");
                    startDate = startDatePicker.Date.ToDateTime ();
                } else {
                    if (endDateOpen) {
                        ConfigureDateView ("endClose");
                    }
                    ConfigureDateView ("startOpen");
                }

            });
            startView.AddGestureRecognizer (startTap);


            //End Time
            endView = new UIView (new CGRect (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 4) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            endView.BackgroundColor = UIColor.White;
            UILabel endLabel = new UILabel (new CGRect (15, 12.438f, 30, TEXT_LINE_HEIGHT));
            endLabel.Text = "Until";
            endLabel.Font = labelFont;
            endLabel.TextColor = solidTextColor;
            endView.AddSubview (endLabel);

            endDateLabel = new UILabel ();
            endDateLabel.Tag = END_DATE_TAG;
            endDateLabel.SizeToFit ();
            endDateLabel.TextAlignment = UITextAlignment.Right;
            endDateLabel.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
            endDateLabel.Font = labelFont;
            endDateLabel.TextColor = A.Color_808080;
            endView.AddSubview (endDateLabel);

            endDatePicker.Frame = new CGRect (0, CELL_HEIGHT, SCREEN_WIDTH, END_PICKER_HEIGHT);
            endDatePicker.Hidden = true;
            endView.AddSubview (endDatePicker);

            endDatePicker.ValueChanged += (object sender, EventArgs e) => {
                eventEditStarted = true;
                endChanged = true;
                DateTime date = endDatePicker.Date.ToDateTime ();
                if (allDaySwitch.On) { 
                    endDateLabel.Text = Pretty.FullDateString (date);
                } else {
                    endDateLabel.Text = Pretty.FullDateTimeString (date);
                }
                endDate = date;
                endDateLabel.SizeToFit ();
                endDateLabel.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                if (0 > endDate.CompareTo (startDate)) {
                    strikethrough.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                    strikethrough.Hidden = false;
                    endDateLabel.TextColor = A.Color_NachoRed;
                } else { 
                    strikethrough.Hidden = true;
                    endDateLabel.TextColor = A.Color_NachoTeal;
                }
            };

            endDivider = Util.AddHorizontalLine (15, CELL_HEIGHT, SCREEN_WIDTH, separatorColor);
            startDivider.Hidden = true;
            endView.AddSubview (endDivider);

            var endTap = new UITapGestureRecognizer ();
            endTap.AddTarget (() => {
                View.EndEditing (true);
                if (endDateOpen) {
                    ConfigureDateView ("endClose");
                    endDate = endDatePicker.Date.ToDateTime ();
                    if (0 > endDate.CompareTo (startDate)) {
                        strikethrough.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                        strikethrough.Hidden = false;
                        endDateLabel.TextColor = A.Color_NachoRed;
                    } else { 
                        strikethrough.Hidden = true;
                        endDateLabel.TextColor = A.Color_808080;
                    }
                } else {
                    if (startDateOpen) {
                        ConfigureDateView ("startClose");
                    }
                    ConfigureDateView ("endOpen");
                }
            });
            endView.AddGestureRecognizer (endTap);

            allDaySwitch.ValueChanged += (object sender, EventArgs e) => {
                if (allDaySwitch.On) { 
                    startDateLabel.Text = Pretty.FullDateString (startDate);
                    startDateLabel.SizeToFit ();
                    startDateLabel.Frame = new CGRect (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                    endDateLabel.Text = Pretty.FullDateString (endDate);
                    endDateLabel.SizeToFit ();
                    endDateLabel.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                    strikethrough.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                    startDatePicker.Mode = UIDatePickerMode.Date;
                    endDatePicker.Mode = UIDatePickerMode.Date;
                } else {
                    if (!timesAreSet) {  //Special case in which the user changes an all day event to an event with a start and end time
                        var tempC = CalendarHelper.DefaultMeeting (startDate, endDate);
                        startDate = tempC.StartTime;
                        endDate = tempC.EndTime;
                        timesAreSet = !timesAreSet;
                    }
                    startDatePicker.Date = startDate.ToNSDate ();
                    startDatePicker.Mode = UIDatePickerMode.DateAndTime;
                    startDateLabel.Text = Pretty.FullDateTimeString (startDate);
                    startDateLabel.SizeToFit ();
                    startDateLabel.Frame = new CGRect (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);

                    endDatePicker.Date = endDate.ToNSDate ();
                    endDatePicker.Mode = UIDatePickerMode.DateAndTime;
                    endDateLabel.Text = Pretty.FullDateTimeString (endDate);
                    endDateLabel.SizeToFit ();
                    endDateLabel.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);

                    strikethrough.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                }
                eventEditStarted = true;
            };
            strikethrough = Util.AddHorizontalLine (0, CELL_HEIGHT / 2, SCREEN_WIDTH, A.Color_NachoRed);
            strikethrough.Hidden = true;
            endView.AddSubview (strikethrough);


            //Location
            locationView = new UIView (new CGRect (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            locationView.BackgroundColor = UIColor.White;

            locationField = new UITextField (new CGRect (15, 12.438f, SCREEN_WIDTH - 24, TEXT_LINE_HEIGHT));
            locationField.Font = labelFont;
            locationField.TextColor = solidTextColor;
            locationField.Tag = EVENT_LOCATION_DETAIL_LABEL_TAG;
            locationField.ClearButtonMode = UITextFieldViewMode.Always;
            locationField.Placeholder = "Location";
            locationView.AddSubview (locationField);

            locationField.ShouldReturn += (textField) => {
                textField.ResignFirstResponder ();
                return true;
            };
            locationField.EditingDidBegin += (object sender, EventArgs e) => {
                eventEditStarted = true;
            };


            //Phone
//            phoneView = new UIView (new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 6) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
//            phoneView.BackgroundColor = UIColor.White;
//
//            UILabel phoneLabel = new UILabel (new RectangleF (15, 12.438f, 55, TEXT_LINE_HEIGHT));
//            phoneLabel.Text = "Phone";
//            phoneLabel.Font = labelFont;
//            phoneLabel.TextColor = solidTextColor;
//            phoneView.AddSubview (phoneLabel);
//
//            Util.AddArrowAccessory (SCREEN_WIDTH - 15 - 12, CELL_HEIGHT / 2 - 6, 12, phoneView);
//
//            phoneDetailLabel = new UILabel ();
//            phoneDetailLabel.Text = "";
//            phoneDetailLabel.Tag = PHONE_DETAIL_TAG;
//            phoneDetailLabel.SizeToFit ();
//            phoneDetailLabel.TextAlignment = UITextAlignment.Right;
//            phoneDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - phoneDetailLabel.Frame.Width - 34, 12.438f, phoneDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
//            phoneDetailLabel.Font = labelFont;
//            phoneDetailLabel.TextColor = A.Color_808080;
//            phoneView.AddSubview (phoneDetailLabel);
//
//            var phoneTap = new UITapGestureRecognizer ();
//            phoneTap.AddTarget (() => {
//                PerformSegue ("EventToPhone", this);
//            });
//            //phoneView.AddGestureRecognizer (phoneTap);


            //Attachments
            attachmentView = new UcAttachmentBlock (this, account.Id, SCREEN_WIDTH, 44, true);
            attachmentView.Frame = new CGRect (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 6) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT);

            attachmentBGView = new UIView (new CGRect (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 6) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT * 2));
            attachmentBGView.BackgroundColor = CELL_COMPONENT_BG_COLOR;

            //People
            peopleView = new UIView (new CGRect (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 7) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            peopleView.BackgroundColor = CELL_COMPONENT_BG_COLOR;

            UILabel peopleLabel = new UILabel (new CGRect (15, 12.438f, 200, TEXT_LINE_HEIGHT));
            peopleLabel.Text = "Attendees (0)";
            peopleLabel.Tag = PEOPLE_DETAIL_TAG;
            peopleLabel.Font = labelFont;
            peopleLabel.TextColor = solidTextColor;
            peopleView.AddSubview (peopleLabel);

//            UIButton addPeopleButton = new UIButton (UIButtonType.System);
//            Util.SetOriginalImagesForButton (addPeopleButton, "email-add", "email-add-active");
//            addPeopleButton.SizeToFit ();
//            addPeopleButton.TouchUpInside += (object sender, EventArgs e) => {
//                PerformSegue ("EditEventToEventAttendees", this);
//            };
//
//            addPeopleButton.Frame = new RectangleF (peopleView.Frame.Width - addPeopleButton.Frame.Width - 15, 0, addPeopleButton.Frame.Width, 44);
//            peopleView.AddSubview (addPeopleButton);

            Util.AddArrowAccessory (SCREEN_WIDTH - 15 - 12, CELL_HEIGHT / 2 - 6, 12, peopleView);

            var peopleTap = new UITapGestureRecognizer ();
            peopleTap.AddTarget (() => {
                View.EndEditing (true);
                PerformSegue ("EditEventToEventAttendees", this);
            });
            peopleView.AddGestureRecognizer (peopleTap);


            //Alerts
            alertsView = new UIView (new CGRect (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 8) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            alertsView.BackgroundColor = UIColor.White;

            Util.AddArrowAccessory (SCREEN_WIDTH - 15 - 12, CELL_HEIGHT / 2 - 6, 12, alertsView);

            UILabel alertsLabel = new UILabel (new CGRect (15, 12.438f, 70, TEXT_LINE_HEIGHT));
            alertsLabel.Text = "Reminder";
            alertsLabel.Font = labelFont;
            alertsLabel.TextColor = solidTextColor;
            alertsView.AddSubview (alertsLabel);

            UILabel alertsDetailLabel = new UILabel ();
            alertsDetailLabel.Text = "None";
            alertsDetailLabel.Tag = ALERT_DETAIL_TAG;
            alertsDetailLabel.SizeToFit ();
            alertsDetailLabel.TextAlignment = UITextAlignment.Right;
            alertsDetailLabel.Frame = new CGRect (SCREEN_WIDTH - alertsDetailLabel.Frame.Width - 34, 12.438f, alertsDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            alertsDetailLabel.Font = labelFont;
            alertsDetailLabel.TextColor = A.Color_808080;
            alertsView.AddSubview (alertsDetailLabel);

            var alertTap = new UITapGestureRecognizer ();
            alertTap.AddTarget (() => {
                View.EndEditing (true);
                PerformSegue ("EditEventToAlert", this);
            });
            alertsView.AddGestureRecognizer (alertTap);

            //Calendar
            calendarView = new UIView (new CGRect (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            calendarView.BackgroundColor = CELL_COMPONENT_BG_COLOR;

            UILabel calendarLabel = new UILabel (new CGRect (15, 12.438f, 70, TEXT_LINE_HEIGHT));
            calendarLabel.Text = "Calendar";
            calendarLabel.Font = labelFont;
            calendarLabel.TextColor = solidTextColor;
            calendarView.AddSubview (calendarLabel);

            Util.AddArrowAccessory (SCREEN_WIDTH - 15 - 12, CELL_HEIGHT / 2 - 6, 12, calendarView);

            UILabel calendarDetailLabel = new UILabel ();
            calendarDetailLabel.Tag = CAL_DETAIL_TAG;
            calendarDetailLabel.TextAlignment = UITextAlignment.Right;
            calendarDetailLabel.Font = labelFont;
            calendarDetailLabel.TextColor = A.Color_808080;
            calendarView.AddSubview (calendarDetailLabel);

            var calTap = new UITapGestureRecognizer ();
            calTap.AddTarget (() => {
                View.EndEditing (true);
                PerformSegue ("EditEventToCalendarChooser", this);
            });
            calendarView.AddGestureRecognizer (calTap);

            deleteView = new UIView (new CGRect (0, (LINE_OFFSET * 6) + (CELL_HEIGHT * 10) + TEXT_LINE_HEIGHT, View.Frame.Width, CELL_HEIGHT));
            deleteView.Layer.BorderColor = separatorColor.CGColor;
            deleteView.Layer.BorderWidth = .5f;
            deleteView.BackgroundColor = CELL_COMPONENT_BG_COLOR;

            UILabel deleteLabel = new UILabel (new CGRect (25 + 24, 12.438f, 120, TEXT_LINE_HEIGHT));
            deleteLabel.Text = "Delete Event";
            deleteLabel.Font = labelFont;
            deleteLabel.TextColor = solidTextColor;
            deleteView.AddSubview (deleteLabel);

            UIImageView deleteIcon = new UIImageView (new CGRect (15, (CELL_HEIGHT / 2) - 12, 24, 24));
            deleteIcon.Image = UIImage.FromBundle ("email-delete-two");
            deleteView.AddSubview (deleteIcon);

            var deleteTap = new UITapGestureRecognizer ();
            deleteTap.AddTarget (onDeleteTap);
            deleteView.AddGestureRecognizer (deleteTap);
            deleteView.Hidden = true;

            //Content View
            contentView.Frame = new CGRect (0, 0, SCREEN_WIDTH, (LINE_OFFSET * 9) + (CELL_HEIGHT * 11) + TEXT_LINE_HEIGHT);
            contentView.BackgroundColor = A.Color_NachoNowBackground;
            contentView.AddSubviews (new UIView[] {
                titleView,
                descriptionView,
                allDayView,
                startView,
                endView,
                locationView,
                //phoneView,
                attachmentBGView,
                attachmentView,
                peopleView,
                alertsView,
                calendarView,
                deleteView
            }); 
            //LO
            line1 = Util.AddHorizontalLine (0, LINE_OFFSET, SCREEN_WIDTH, separatorColor);
            line2 = Util.AddHorizontalLine (15, LINE_OFFSET + CELL_HEIGHT, SCREEN_WIDTH, separatorColor);
            line3 = Util.AddHorizontalLine (0, LINE_OFFSET + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            line4 = Util.AddHorizontalLine (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line5 = Util.AddHorizontalLine (15, (LINE_OFFSET * 2) + (CELL_HEIGHT * 3) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line6 = Util.AddHorizontalLine (15, (LINE_OFFSET * 2) + (CELL_HEIGHT * 4) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line7 = Util.AddHorizontalLine (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            line8 = Util.AddHorizontalLine (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line9 = Util.AddHorizontalLine (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 6) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //line10 = Util.AddHorizontalLine (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 7) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line11 = Util.AddHorizontalLine (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 7) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line12 = Util.AddHorizontalLine (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 8) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            line13 = Util.AddHorizontalLine (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 8) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line14 = Util.AddHorizontalLine (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            line15 = Util.AddHorizontalLine (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line16 = Util.AddHorizontalLine (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 10) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            contentView.AddSubviews (new UIView[] {
                line1,
                line2,
                line3,
                line4,
                line5,
                line6,
                line7,
                line8,
                line9,
                //line10,
                line11,
                line12,
                line13,
                line14,
                line15,
                line16
            }); 

            //Scroll View
            scrollView.BackgroundColor = A.Color_NachoNowBackground;
            if (action == CalendarItemEditorAction.edit) {
                DELETE_BUTTON_OFFSET = TEXT_LINE_HEIGHT + CELL_HEIGHT;
            }
            scrollView.ContentSize = new CGSize (SCREEN_WIDTH, (LINE_OFFSET * 8) + (CELL_HEIGHT * 10) + DELETE_BUTTON_OFFSET);
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;
        }

        protected void onDeleteTap ()
        {
            NcActionSheet.Show (View, this,
                new NcAlertAction ("Delete Event",  NcAlertActionStyle.Destructive, () => {
                    DeleteEvent ();
                }),
                new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
        }

        protected void ConfigureEditEventView ()
        {
            if (action == CalendarItemEditorAction.create) {
                NavigationItem.Title = "New Event";
                deleteView.Hidden = true;
            } else {
                NavigationItem.Title = "Edit Event";
                deleteView.Hidden = false;
            }

            //title
            var titleFieldView = contentView.ViewWithTag (EVENT_TITLE_LABEL_TAG) as UITextField;
            titleFieldView.Text = c.Subject;

            //description
            var descriptionTextView = contentView.ViewWithTag (EVENT_DESCRIPTION_LABEL_TAG) as UITextView;
            descriptionTextView.Text = c.Description;
            if (descriptionTextView.HasText) {
                descriptionPlaceHolder.Hidden = true;
                descriptionTextView.SizeToFit ();
                descriptionTextView.Frame = new CGRect (15, 12.438f, SCREEN_WIDTH - 30, descriptionTextView.Frame.Height);
            }
            DESCRIPTION_OFFSET = descriptionTextView.Frame.Height;

            //all day event
            var allDaySwitchView = contentView.ViewWithTag (ALL_DAY_SWITCH_TAG) as UISwitch;
            allDaySwitchView.SetState (c.AllDayEvent, false);

            //start date
            var startDateLabelView = contentView.ViewWithTag (START_DATE_TAG) as UILabel;
            if (c.AllDayEvent) {
                startDateLabelView.Text = Pretty.FullDateString (c.StartTime);
                startDatePicker.Mode = UIDatePickerMode.Date;
            } else {
                startDateLabelView.Text = Pretty.FullDateTimeString (c.StartTime);
                startDatePicker.Mode = UIDatePickerMode.DateAndTime;
            }
            startDate = c.StartTime;
            startDatePicker.Date = c.StartTime.ToNSDate ();
            Util.ConstrainDatePicker (startDatePicker, startDate);
            startDateLabelView.SizeToFit ();
            startDateLabelView.Frame = new CGRect (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);

            //end date
            var endDateLabelView = contentView.ViewWithTag (END_DATE_TAG) as UILabel;
            if (c.AllDayEvent) {
                var endDay = CalendarHelper.ReturnAllDayEventEndTime (c.EndTime);
                endDateLabelView.Text = Pretty.FullDateString (endDay);
                endDatePicker.Mode = UIDatePickerMode.Date;
                endDate = endDay;
                endDatePicker.Date = endDay.ToNSDate ();
            } else {
                endDateLabelView.Text = Pretty.FullDateTimeString (c.EndTime);
                endDatePicker.Mode = UIDatePickerMode.DateAndTime;
                endDate = c.EndTime;
                endDatePicker.Date = c.EndTime.ToNSDate ();
            }
            Util.ConstrainDatePicker (endDatePicker, endDate);
            endDateLabelView.SizeToFit ();
            endDateLabelView.Frame = new CGRect (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);

            //location
            var locationFieldView = contentView.ViewWithTag (EVENT_LOCATION_DETAIL_LABEL_TAG) as UITextField;
            locationFieldView.Text = c.Location;

            //attachments view
            if (!attachmentsInitialized && null != this.item) {
                foreach (var attachment in this.item.attachments) {
                    attachmentView.Append (attachment);
                }
                attachmentsInitialized = true;
            }
            attachmentView.ConfigureView ();
            attachmentView.Hidden = false;

            //people view
            var peopleDetailLabelView = contentView.ViewWithTag (PEOPLE_DETAIL_TAG) as UILabel;
            peopleDetailLabelView.Text = (0 != c.attendees.Count ? "Attendees: (" + c.attendees.Count + ")" : "Attendees:");

            //alert view
            var alertDetailLabelView = contentView.ViewWithTag (ALERT_DETAIL_TAG) as UILabel;
            alertDetailLabelView.Text = Pretty.ReminderString (c.ReminderIsSet, c.Reminder);
            alertDetailLabelView.SizeToFit ();
            alertDetailLabelView.Frame = new CGRect (SCREEN_WIDTH - alertDetailLabelView.Frame.Width - 34, 12.438f, alertDetailLabelView.Frame.Width, TEXT_LINE_HEIGHT);

            //phone view
//            var phoneDetailLabelView = contentView.ViewWithTag (PHONE_DETAIL_TAG) as UILabel;
//            phoneDetailLabelView.Text = TempPhone;
//            phoneDetailLabelView.SizeToFit ();
//            phoneDetailLabelView.Frame = new RectangleF (SCREEN_WIDTH - phoneDetailLabelView.Frame.Width - 34, 12.438f, phoneDetailLabelView.Frame.Width, TEXT_LINE_HEIGHT);

            //calendar view
            var calFolder = new McFolder ();
            if (!calendarChanged) {
                if (action == CalendarItemEditorAction.create) {
                    // The initial setting of the calendar picker should be the default calendar folder.
                    // (In most cases, there is only one calendar folder.  But Hotmail does things
                    // differently, and choosing the correct folder is vital.)  Start with the first
                    // calendar in the list, regardless of its type.  But then look for a default
                    // calendar folder elsewhere in the calendar list.
                    calFolder = calendars.GetFolder (0);
                    for (int i = 1; i < calendars.Count (); ++i) {
                        var cal = calendars.GetFolder (i);
                        if (Xml.FolderHierarchy.TypeCode.DefaultCal_8 == cal.Type) {
                            calFolder = cal;
                            break;
                        }
                    }
                } else {
                    calFolder = GetCalendarFolder ();
                    if (null == calFolder) {
                        calFolder = calendars.GetFolder (0);
                    } 
                }
            } else {
                calFolder = calendars.GetFolder (calendarIndex);
            }
            SetCalIndex (calFolder);

            var calendarDetailLabelView = contentView.ViewWithTag (CAL_DETAIL_TAG) as UILabel;
            calendarDetailLabelView.Text = calendars.GetFolder (calendarIndex).DisplayName;
            calendarDetailLabelView.SizeToFit ();
            calendarDetailLabelView.Frame = new CGRect (SCREEN_WIDTH - calendarDetailLabelView.Frame.Width - 34, 12.438f, calendarDetailLabelView.Frame.Width, TEXT_LINE_HEIGHT);
        }

        protected McFolder GetCalendarFolder ()
        {
            for (var i = 0; i < calendars.Count (); i++) {
                var calFolderMap = McMapFolderFolderEntry.QueryByFolderIdFolderEntryIdClassCode (account.Id, (calendars.GetFolder (i)).Id, c.Id, c.GetClassCode ());
                if (null != calFolderMap) {
                    return calendars.GetFolderByFolderID (calFolderMap.FolderId);
                }
            }
            return null;
        }

        protected void SetCalIndex (McFolder folder)
        {
            for (var i = 0; i < calendars.Count (); i++) {
                if (folder.Id == (calendars.GetFolder (i)).Id) {
                    calendarIndex = i;
                    return;
                }
            }
        }

        protected void ConfigureDateView (string command)
        {
            if ("startOpen" == command) {
                START_PICKER_HEIGHT = 216;
                startIsOpening = true;
                startDivider.Hidden = false;
                ScrollToMakeVisible (startView);
                LayoutView ();
                startDateOpen = true;
            }
            if ("startClose" == command) {
                START_PICKER_HEIGHT = 0;
                startDatePicker.Hidden = true;
                startIsOpening = false;
                startDivider.Hidden = true;
                LayoutView ();
                startDateOpen = false;
                startDateLabel.TextColor = A.Color_808080;
            }
            if ("endOpen" == command) {
                END_PICKER_HEIGHT = 216;
                endIsOpening = true;
                endDivider.Hidden = false;
                ScrollToMakeVisible (endView);
                LayoutView ();
                endDateOpen = true;
            }
            if ("endClose" == command) {
                END_PICKER_HEIGHT = 0;
                endDatePicker.Hidden = true;
                endIsOpening = false;
                endDivider.Hidden = true;
                LayoutView ();
                endDateOpen = false;
                endDateLabel.TextColor = A.Color_808080;
            }
        }

        protected void ScrollToMakeVisible (UIView view)
        {
            if (view.Frame.Bottom + startDatePicker.Frame.Height - scrollView.ContentOffset.Y > scrollView.Frame.Height) {
                scrollView.SetContentOffset (new CGPoint (0, view.Frame.Top - (scrollView.Frame.Height - startDatePicker.Frame.Height - CELL_HEIGHT)), true);
            }
        }

        protected void AnimatePicker (int picker)
        {
            if (1 == picker) {
                UIView.Animate (.5, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        startDatePicker.Alpha = 1;
                    },
                    () => {
                        startDatePicker.Hidden = false;
                    }
                );
            }
            if (2 == picker) {
                UIView.Animate (.5, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        endDatePicker.Alpha = 1;
                    },
                    () => {
                        endDatePicker.Hidden = false;
                    }
                );
            }
        }

        protected void SelectionChanged (UITextView textView)
        {
            // We want to scroll the caret rect into view
            var caretRect = textView.GetCaretRectForPosition (textView.SelectedTextRange.End);
            caretRect.Size = new CGSize (caretRect.Size.Width, caretRect.Size.Height + textView.TextContainerInset.Bottom);
            // Make sure our textview is big enough to hold the text
            var frame = textView.Frame;
            var frameBefore = frame;
            frame.Size = new CGSize (textView.ContentSize.Width, textView.ContentSize.Height);
            var frameAfter = frame;
            if (frameBefore.Height < frameAfter.Height) {
                DESCRIPTION_OFFSET += TEXT_LINE_HEIGHT;
                LayoutView ();
            }
            if (frameBefore.Height > frameAfter.Height) {
                DESCRIPTION_OFFSET -= TEXT_LINE_HEIGHT;
                LayoutView ();
            }

            textView.Frame = frame;
            // And update our enclosing scrollview for the new content size
            scrollView.ContentSize = contentView.Frame.Size;
            // Adjust the caretRect to be in our enclosing scrollview, and then scroll it
            caretRect.Y += textView.Frame.Y;
            scrollView.ScrollRectToVisible (caretRect, true);
        }

        public void DismissView ()
        {
            NavigationController.PopViewController (true);
        }

        public class TupleList<T1, T2> : List<Tuple<T1, T2>>
        {
            public void Add (T1 item, T2 item2)
            {
                Add (new Tuple<T1, T2> (item, item2));
            }
        }

        public string UIntToString (uint min)
        {
            string time = "None";
            foreach (var pair in minList) {
                if (pair.Item1 == min) {
                    time = pair.Item2;
                }
            }
            return time;
        }

        protected void LayoutView ()
        {
            nfloat yOffset = 0f;

            UIView.Animate (0.2, () => {
            
                yOffset += 74;
                descriptionView.Frame = new CGRect (0, yOffset, SCREEN_WIDTH, CELL_HEIGHT + DESCRIPTION_OFFSET);
                yOffset += descriptionView.Frame.Height;

                AdjustY (line3, yOffset);

                yOffset += LINE_OFFSET;
                AdjustY (line4, yOffset);
                AdjustY (allDayView, yOffset);
                yOffset += CELL_HEIGHT;
                AdjustY (line5, yOffset);

                startView.Frame = new CGRect (0, yOffset, SCREEN_WIDTH, CELL_HEIGHT + START_PICKER_HEIGHT);
                yOffset += startView.Frame.Height;
                AdjustY (line6, yOffset);
                endView.Frame = new CGRect (0, yOffset, SCREEN_WIDTH, CELL_HEIGHT + END_PICKER_HEIGHT);
                yOffset += endView.Frame.Height;
                AdjustY (line7, yOffset);

                yOffset += LINE_OFFSET;
                AdjustY (line8, yOffset);
                AdjustY (locationView, yOffset);
                yOffset += locationView.Frame.Height;

                AdjustY (line9, yOffset);
//                AdjustY (phoneView, yOffset);
//                yOffset += phoneView.Frame.Height;
//
//                AdjustY (line10, yOffset);
                AdjustY (attachmentView, yOffset);
                AdjustY (attachmentBGView, yOffset);
                attachmentView.Layout ();
                yOffset += attachmentView.Frame.Height;

                AdjustY (line11, yOffset);
                AdjustY (peopleView, yOffset);
                yOffset += peopleView.Frame.Height;
                AdjustY (line12, yOffset);

                yOffset += LINE_OFFSET;
                AdjustY (line13, yOffset);
                AdjustY (alertsView, yOffset);
                yOffset += alertsView.Frame.Height;
                AdjustY (line14, yOffset);

                yOffset += LINE_OFFSET;
                AdjustY (line15, yOffset);
                AdjustY (calendarView, yOffset);
                yOffset += calendarView.Frame.Height;
                AdjustY (line16, yOffset);
                yOffset += LINE_OFFSET;

                if (action == CalendarItemEditorAction.edit) {
                    AdjustY (deleteView, yOffset);
                    yOffset += deleteView.Frame.Height + LINE_OFFSET;
                }
                scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
                contentView.Frame = new CGRect (0, 0, SCREEN_WIDTH, yOffset);
                scrollView.ContentSize = contentView.Frame.Size;

            },
                () => {
                    if (startIsOpening) {
                        AnimatePicker (1);
                    } 
                    if (endIsOpening) {
                        AnimatePicker (2);
                    } 

                });

        }

        protected void AdjustY (UIView view, nfloat yOffset)
        {
            var frame = view.Frame;
            frame.Y = yOffset;
            view.Frame = frame;
        }

        /// <summary>
        /// Check if the data that the user entered is valid and can be saved as an event.  If not,
        /// throw up a dialog explaining the problem to the user.
        /// </summary>
        /// <returns><c>true</c> if this instance can be saved; otherwise, <c>false</c>.</returns>
        protected bool CanBeSaved ()
        {
            if (string.IsNullOrEmpty (titleField.Text)) {
                NcAlertView.ShowMessage (this, "Cannot Save Event", "The title of the event must not be empty.");
                return false;
            }
            if (startDate > endDate) {
                NcAlertView.ShowMessage (this, "Cannot Save Event",
                    "The starting time must be no later than the ending time.");
                return false;
            }
            return true;
        }

        protected void ExtractValues ()
        {
            c.AccountId = account.Id;
            c.Subject = titleField.Text;
            c.Description = descriptionTextView.Text;
            var allDayEvent = ((UISwitch)contentView.ViewWithTag (ALL_DAY_SWITCH_TAG)).On;
            c.AllDayEvent = allDayEvent;
            if (allDayEvent) {
                // An all-day event is supposed to run midnight to midnight in the local time zone.
                c.StartTime = startDate.ToLocalTime ().Date.ToUniversalTime ();
                c.EndTime = endDate.ToLocalTime ().AddDays (1.0).Date.ToUniversalTime ();
            } else {
                c.StartTime = startDate;
                c.EndTime = endDate;
            }
            //c.attendees is already set via PullAttendees
            //c.Phone = phoneDetailLabel.Text;
            c.Location = locationField.Text;
            c.attachments.Clear ();
            c.attachments = attachmentView.AttachmentList;
                
            // Extras
            c.OrganizerName = Pretty.UserNameForAccount (account);
            c.OrganizerEmail = account.EmailAddr;
            c.DtStamp = DateTime.UtcNow;
            if (0 == c.attendees.Count) {
                c.MeetingStatusIsSet = true;
                c.MeetingStatus = NcMeetingStatus.Appointment;
                c.ResponseRequested = false;
                c.ResponseRequestedIsSet = true;
            } else {
                c.MeetingStatusIsSet = true;
                c.MeetingStatus = NcMeetingStatus.Meeting;
                c.ResponseRequested = true;
                c.ResponseRequestedIsSet = true;
            }

            // There is no UI for setting the BusyStatus.  For new events, set it to Free for
            // all-day events and Busy for other events.  If we don't explicitly set BusyStatus,
            // some servers will treat it as if it were Free, while others will act as if it
            // were Busy.
            if (!c.BusyStatusIsSet) {
                c.BusyStatus = allDayEvent ? NcBusyStatus.Free : NcBusyStatus.Busy;
                c.BusyStatusIsSet = true;
            }

            // The event always uses the local time zone.
            c.TimeZone = new AsTimeZone (CalendarHelper.SimplifiedLocalTimeZone (), c.StartTime).toEncodedTimeZone ();

            if (String.IsNullOrEmpty (c.UID)) {
                c.UID = System.Guid.NewGuid ().ToString ().Replace ("-", null).ToUpper ();
            }
        }

        protected void SyncMeetingRequest ()
        {

            if (0 == c.Id) {
                c.Insert (); // new entry
                folder = calendars.GetFolder (calendarIndex);
                folder.Link (c);
                BackEnd.Instance.CreateCalCmd (account.Id, c.Id, folder.Id);
            } else {
                c.RecurrencesGeneratedUntil = DateTime.MinValue; // Force regeneration of events
                c.Update ();
                var oldFolder = GetCalendarFolder ();
                var newFolder = calendars.GetFolder (calendarIndex);
                if (newFolder.Id != oldFolder.Id) {
                    BackEnd.Instance.MoveCalCmd (account.Id, c.Id, newFolder.Id);
                    oldFolder.Unlink (c);
                    newFolder.Link (c);
                }
                BackEnd.Instance.UpdateCalCmd (account.Id, c.Id);
            }
            c = McCalendar.QueryById<McCalendar> (c.Id);
        }

        protected void DeleteEvent ()
        {
            //remove item from db
            if (0 != c.attendees.Count) {
                PrepareCancelationNotices ();
            }
            BackEnd.Instance.DeleteCalCmd (account.Id, c.Id);
            var controllers = this.NavigationController.ViewControllers;
            int currentVC = controllers.Count () - 1; // take 0 indexing into account
            NavigationController.PopToViewController (controllers [currentVC - 2], true);
        }

        protected void PrepareCancelationNotices ()
        {
            var iCalCancelPart = CalendarHelper.MimeCancelFromCalendar (c);
            var mimeBody = CalendarHelper.CreateMime ("", iCalCancelPart, new List<McAttachment> ());

            CalendarHelper.SendMeetingCancelations (account, c, mimeBody);
        }

        /// <summary>
        /// Sends the message. Message (UID) must already exist in EAS.
        /// </summary>
        protected void PrepareInvites ()
        {
            var iCalPart = CalendarHelper.MimeRequestFromCalendar (c);
            var mimeBody = CalendarHelper.CreateMime (c.Description, iCalPart, c.attachments);

            CalendarHelper.SendInvites (account, c, null, null, mimeBody, null);
        }

        /// IUcAttachmentBlock delegate
        public void AttachmentBlockNeedsLayout (UcAttachmentBlock view)
        {
            LayoutView ();
        }

        /// IUcAttachmentBlock delegate
        public void PerformSegueForAttachmentBlock (string identifier, SegueHolder segueHolder)
        {
            PerformSegue (identifier, segueHolder);
        }

        /// IUcAttachmentBlock delegate
        public void DisplayAttachmentForAttachmentBlock (McAttachment attachment)
        {
            PlatformHelpers.DisplayAttachment (this, attachment);
        }

        /// IUcAttachmentBlock delegate
        public void PresentViewControllerForAttachmentBlock (UIViewController viewControllerToPresent, bool animated, Action completionHandler)
        {
            this.PresentViewController (viewControllerToPresent, animated, completionHandler);
        }

        public void UpdateAttendeeList (IList<McAttendee> attendees)
        {
            c.attendees = attendees;
        }

        public void DismissINachoAttendeeListChooser (INachoAttendeeListChooser vc)
        {
            NcAssert.CaseError ();
        }

        /// <summary>
        /// INachoFileChooserParent delegate
        /// </summary>
        public void SelectFile (INachoFileChooser vc, McAbstrObject obj)
        {
            var a = obj as McAttachment;
            if (null != a) {
                attachmentView.Append (a);
                this.DismissViewController (true, null);
                return;
            }

            var file = obj as McDocument;
            if (null != file) {
                var attachment = McAttachment.InsertSaveStart (account.Id);
                attachment.SetDisplayName (file.DisplayName);
                attachment.IsInline = true;
                attachment.UpdateFileCopy (file.GetFilePath ());
                attachmentView.Append (attachment);
                this.DismissViewController (true, null);
                return;
            }

            var note = obj as McNote;
            if (null != note) {
                var attachment = McAttachment.InsertSaveStart (account.Id);
                attachment.SetDisplayName (note.DisplayName + ".txt");
                attachment.IsInline = true;
                attachment.UpdateData (note.noteContent);
                attachmentView.Append (attachment);
                this.DismissViewController (true, null);
                return;
            }

            NcAssert.CaseError ();
        }

        /// <summary>
        /// INachoFileChooserParent delegate
        /// </summary>
        public void DismissChildFileChooser (INachoFileChooser vc)
        {
            vc.DismissFileChooser (true, null);
        }

        /// <summary>
        /// INachoFileChooserParent delegate
        /// </summary>
        public void Append (McAttachment attachment)
        {
            attachmentView.Append (attachment);
        }

        /// <summary>
        /// INachoFileChooserParent delegate
        /// </summary>
        public void DismissPhotoPicker ()
        {
            this.DismissViewController (true, null);
        }
    }
}
