// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Net;
using Foundation;
using UIKit;
using CoreGraphics;
using CoreAnimation;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;
using System.Linq;
using System.Collections.Generic;
using NachoPlatform;
using System.Net.Http;
using Xamarin.Auth;
using System.Threading.Tasks;

namespace NachoClient.iOS
{
    public partial class AdvancedLoginViewController : NcUIViewController, ILoginProtocol, INachoCredentialsDelegate, INachoCertificateResponderParent
    {
        ILoginFields loginFields;
        WaitingScreen waitingScreen;
        CertificateView certificateView;
        LoginProtocolControl loginProtocolControl;

        string email;
        string password;
        McAccount account;
        McAccount.AccountServiceEnum service;

        public enum ConnectCallbackStatusEnum
        {
            Connect,
            Support,
            StartOver,
            CredResponse,
            DuplicateAccount,
            ContinueToShowAdvanced,
        }

        void RemoveWindows ()
        {
            if (null != loginFields) {
                loginFields.View.RemoveFromSuperview ();
                loginFields = null;
            }
            if (null != waitingScreen) {
                waitingScreen.RemoveFromSuperview ();
                waitingScreen = null;
            }
            if (null != certificateView) {
                certificateView.RemoveFromSuperview ();
                certificateView = null;
            }
        }

        public delegate void onConnectCallback (ConnectCallbackStatusEnum status, McAccount account, string email, string password);

        public delegate void onValidateCallback (McCred creds, List<McServer> servers);

        public AdvancedLoginViewController (IntPtr handle) : base (handle)
        {
            service = McAccount.AccountServiceEnum.None;
        }

        public override void ViewDidLoad ()
        {
            Log.Info (Log.LOG_UI, "avl: ViewDidLoad");

            base.ViewDidLoad ();

            loginProtocolControl = new LoginProtocolControl (this);

            View.BackgroundColor = A.Color_NachoGreen;
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            NavigationItem.SetHidesBackButton (true, false);
            if (null != NavigationController) {
                NavigationController.SetNavigationBarHidden (false, false);
                NavigationController.NavigationBar.BackgroundColor = A.Color_NachoGreen;
                if (this.NavigationController.RespondsToSelector (new ObjCRuntime.Selector ("interactivePopGestureRecognizer"))) {
                    this.NavigationController.InteractivePopGestureRecognizer.Enabled = false;
                }
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != NavigationController) {
                NavigationController.SetNavigationBarHidden (false, false);
            }
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return true;
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            Log.Info (Log.LOG_UI, "avl: AdvanceLoginViewController ViewDidAppear");

            base.ViewDidAppear (animated);

            if (null == account) {
                // Configus interruptus?
                account = McAccount.GetAccountBeingConfigured ();
                if (null != account) {
                    Log.Info (Log.LOG_UI, "avl: AdvanceLoginViewController reloading account being configured");
                    email = account.EmailAddr;
                    service = account.AccountService;
                    password = LoginHelpers.GetPassword (account);
                    Log.Info (Log.LOG_UI, "avl: ViewDidAppear - LoggablePasswordSaltedHash {0}", McAccount.GetLoggablePassword (account, password));              
                    BackEnd.Instance.Start (account.Id);
                }
            }
                
            if (McAccount.AccountServiceEnum.None == service) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.NoService, "avl: AdvanceLoginViewController ViewDidAppear");
                return;
            }

            // User can visit support from advanced view before an account is created
            if (null == account) {
                switch (service) {
                case McAccount.AccountServiceEnum.Exchange:
                case McAccount.AccountServiceEnum.IMAP_SMTP:
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ShowAdvanced, "avl: AdvanceLoginViewController ViewDidAppear");
                    return;
                default:
                    return;
                }
            }

            if ((uint)LoginProtocolControl.States.FinishWait == loginProtocolControl.sm.State) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.TryAgain, "avl: AdvanceLoginViewController ViewDidAppear");
                return;
            }

            if ((uint)LoginProtocolControl.States.TutorialSupportWait == loginProtocolControl.sm.State) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.AllDone, "avl: AdvanceLoginViewController ViewDidAppear");
                EventFromEnum ();
                return;
            }

            // Kickstart if we are just starting out and we're still in the start state
            if ((uint)LoginProtocolControl.States.Start == loginProtocolControl.sm.State) {
                EventFromEnum ();
                return;
            }

        }

        public void FinishUp ()
        {
            if (null == waitingScreen) {
                waitingScreen = new WaitingScreen (new CGRect (0, 0, View.Frame.Width, View.Frame.Height), this);
                View.AddSubview (waitingScreen);
            } else {
                waitingScreen.Layer.RemoveAllAnimations ();
            }

            if (!LoginHelpers.HasViewedTutorial ()) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ShowTutorial, "avl: FinishUp");
            } else {
                waitingScreen.StartSyncedEmailAnimation (account.Id);
            }
        }

        public void FinishedSyncedEmailAnimation (int accountId)
        {
            RemoveWindows ();
            loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.AllDone, "avl: FinishedSyncedEmailAnimation");
        }

        public void PromptForService ()
        {
            PerformSegue ("SegueToAccountType", this);
        }

        // Google Apps and Office 365 have a single hard-wired
        // server.  If we get a server conf callback, it means
        // the domain associated with email couldn't be found.
        // In this case, we re-prompt for credentials with an
        // appropriate message.
        public void ShowServerConfCallback ()
        {
            switch (service) {
            case McAccount.AccountServiceEnum.GoogleExchange:
            case McAccount.AccountServiceEnum.Office365Exchange:
                PerformSegue ("SegueToAccountCredentials", new SegueHolder (NachoCredentialsRequestEnum.ServerConfCallback));
                break;
            default:
                ShowAdvancedConfiguration (LoginProtocolControl.Prompt.ServerConf);
                break;
            }
        }

        public void ShowAdvancedConfiguration (LoginProtocolControl.Prompt prompt)
        {
            RemoveWindows ();

            if (null != account) {
                BackEnd.Instance.Stop (account.Id);
            }

            // FIXME: Getting server conf callback for known servers
            var accountType = McAccount.GetAccountType (service);

            if ((service != McAccount.AccountServiceEnum.Exchange) && (service != McAccount.AccountServiceEnum.IMAP_SMTP)) {
                Log.Error (Log.LOG_UI, "avl: Showing advanced view for {0}", service);
            }

            var rect = new CGRect (0, 0, View.Frame.Width, View.Frame.Height);
            switch (accountType) {
            case McAccount.AccountTypeEnum.Exchange:
                loginFields = new ExchangeFields (account, prompt, email, password, rect, onConnect);
                break;
            case McAccount.AccountTypeEnum.IMAP_SMTP:
                loginFields = new IMapFields (account, prompt, email, password, rect, onConnect);
                break;
            default:
                NcAssert.CaseError ();
                break;
            }
            View.AddSubview (loginFields.View);
        }

        void onConnect (ConnectCallbackStatusEnum connect, McAccount account, string email, string password)
        {
            View.EndEditing (true);

            this.email = email;
            this.password = password;
            Log.Info (Log.LOG_UI, "avl: onConnect - LoggablePasswordSaltedHash {0}", McAccount.GetLoggablePassword (account, password));              
            switch (connect) {
            case ConnectCallbackStatusEnum.Connect:
                if (null == this.account) {
                    this.account = account;
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.AccountCreated, "avl: onConnect");
                } else {
                    this.account = account;
                    BackEnd.Instance.Stop (account.Id);
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.NotYetStarted, "avl: onConnect");
                }
                break;
            case ConnectCallbackStatusEnum.StartOver:
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.StartOver, "avl: onConnect");
                break;
            case ConnectCallbackStatusEnum.Support:
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ShowSupport, "avl: onConnect");
                break;
            case ConnectCallbackStatusEnum.DuplicateAccount:
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.DuplicateAccount, "avl: onConnect");
                break;
            case ConnectCallbackStatusEnum.CredResponse:
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.CredUpdate, "avl: onConnect");
                break;
            case ConnectCallbackStatusEnum.ContinueToShowAdvanced:
                break;
            }
        }

        public void ShowNoNetwork ()
        {
            NcAlertView.Show (this, null,
                String.Format ("No network connection. Please check that you have internet access."),
                new NcAlertAction ("Try again", () => {
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.TryAgain, "avl: ShowNoNetwork");

                }),
                new NcAlertAction ("Cancel", () => {
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.Quit, "avl: ShowNoNetwork");

                }));
            return;
        }

        public void ShowDuplicateAccount ()
        {
            NcAlertView.Show (this, null,
                String.Format ("This account already exists."),
                new NcAlertAction ("OK", () => {
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.Quit, "avl: ShowDuplicateAccount");

                }));
            return;
        }

        public void ShowCertAsk ()
        {
            RemoveWindows ();
            // FIXME: need to pass thru and handle the requested capabilities
            if (NcApplication.Instance.CertAskReqPreApproved (account.Id, McAccount.AccountCapabilityEnum.EmailSender)) {
                AcceptCertificate (account.Id);
                return;
            }
            certificateView = new CertificateView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height), this);
            certificateView.SetCertificateInformation (account.Id, McAccount.AccountCapabilityEnum.EmailSender);
            View.AddSubview (certificateView);
            View.BringSubviewToFront (certificateView);
            certificateView.ShowView ();
        }

        // INachoCertificateResponderParent
        public void DontAcceptCertificate (int accountId)
        {
            RemoveWindows ();
            NcApplication.Instance.CertAskResp (accountId, McAccount.AccountCapabilityEnum.EmailSender, false);
            loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.CertRejected, "avl: DontAcceptCertificate");
        }

        // INachoCertificateResponderParent
        public void AcceptCertificate (int accountId)
        {
            RemoveWindows ();
            NcApplication.Instance.CertAskResp (accountId, McAccount.AccountCapabilityEnum.EmailSender, true);
            loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.CertAccepted, "avl: AcceptCertificate");
        }

        public void ShowCertRejected ()
        {
            NcAlertView.Show (this, null,
                String.Format ("Cannot configure this account without accepting the certificate."),
                new NcAlertAction ("OK", () => {
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.Quit, "avl: ShowCertRejected");

                }));
            return;
        }

        public void Start ()
        {
            ShowWaitingScreen ("Verifying Your Server...");
            BackEnd.Instance.Start (account.Id);
        }

        public void UpdateUI ()
        {
            if (null == waitingScreen) {
                ShowWaitingScreen ("Syncing Your Inbox...");
            } else {
                waitingScreen.ShowView ("Syncing Your Inbox...");
            }
        }

        public void ShowWaitingScreen (string waitingMessage)
        {
            if (null == waitingScreen) {
                RemoveWindows ();
                waitingScreen = new WaitingScreen (new CGRect (0, 0, View.Frame.Width, View.Frame.Height), this);
                View.AddSubview (waitingScreen);
            }
            waitingScreen.ShowView (waitingMessage);
        }

        public void PromptForCredentials ()
        {
            RemoveWindows ();
            PerformSegue ("SegueToAccountCredentials", new SegueHolder (NachoCredentialsRequestEnum.InitialAsk));
        }

        public void ShowCredReq ()
        {
            switch (service) {
            case McAccount.AccountServiceEnum.Exchange:
            case McAccount.AccountServiceEnum.IMAP_SMTP:
                ShowAdvancedConfiguration (LoginProtocolControl.Prompt.CredRequest);
                break;
            default:
                RemoveWindows ();
                PerformSegue ("SegueToAccountCredentials", new SegueHolder (NachoCredentialsRequestEnum.CredReqCallback));
                break;
            }
        }

        public void StartSync ()
        {
            ShowWaitingScreen ("Verifying Your Server...");
            BackEnd.Instance.Start (account.Id);
        }

        public void ShowSupport ()
        {
            RemoveWindows ();
            PerformSegue ("SegueToSupport", this);
        }

        public void ShowTutorial ()
        {
            RemoveWindows ();
            PerformSegue ("SegueToHome", this);
        }

        public void Done ()
        {
            account.ConfigurationInProgress = McAccount.ConfigurationInProgressEnum.Done;
            account.Update ();

            // FIXME: Only set if null or device
            NcApplication.Instance.Account = account;
            LoginHelpers.SetSwitchToTime (account);

            RemoveWindows ();
            NavigationController.PopToRootViewController (true);
        }

        public void Quit ()
        {
            RemoveWorkInProgress (() => {
                RemoveWindows ();
                NavigationController.PopToRootViewController (false);
            });
        }

        public void StartOver ()
        {
            RemoveWorkInProgress (() => {
                RemoveWindows ();
                NavigationController.PopToRootViewController (false);
            });
        }

        protected void ServiceSelected (UIViewController vc, McAccount.AccountServiceEnum service)
        {
            vc.DismissViewController (true, () => {
                this.service = service;
                switch (service) {
                case McAccount.AccountServiceEnum.None:
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.Quit, "avl: ServiceSelected");
                    break;
                case McAccount.AccountServiceEnum.Exchange:
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ExchangePicked, "avl: ServiceSelected");
                    break;
                case McAccount.AccountServiceEnum.IMAP_SMTP:
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ImapPicked, "avl: ServiceSelected");
                    break;
                case McAccount.AccountServiceEnum.GoogleDefault:
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.GmailPicked, "avl: ServiceSelected");
                    break;
                default:
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.KnownServicePicked, "avl: ServiceSelected");
                    break;
                }
            });
        }

        public void CredentialsDismissed (UIViewController vc, bool startInAdvanced, string email, string password, NachoCredentialsRequestEnum why, bool startOver)
        {
            this.email = email;
            this.password = password;

            if (startInAdvanced) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ShowAdvanced, "avl: CredentialsDismissed");
                return;
            }
            if (startOver) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.StartOver, "avl: CredentialsDismissed");
                return;
            }

            // If the email address has changed,
            // remove the account being configured
            if (null != account) {
                if (!String.Equals (account.EmailAddr, email)) {
                    NcAccountHandler.Instance.RemoveAccount (account.Id);
                    account = null;
                }
            }

            // Does this email address exist in the db?  Complain if not the 'in progress' account
            if (LoginHelpers.ConfiguredAccountExists (email)) {
                Log.Info (Log.LOG_UI, "avl: CredentialsDismissed existing account: {0}", email);
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.DuplicateAccount, "avl: CredentialsDismissed");
                return;
            }

            // Is the email address unchanged & this a cred req?  Update creds & go.
            if (null != account) {
                if (NachoCredentialsRequestEnum.CredReqCallback == why) {
                    var cred = McCred.QueryByAccountId<McCred> (account.Id).Single ();
                    cred.UpdatePassword (password);
                    cred.Username = email;
                    cred.Update ();
                    BackEnd.Instance.CredResp (account.Id);
                    Log.Info (Log.LOG_UI, "avl: CredentialsDismissed - Updating creds - LoggablePasswordSaltedHash {0}", McAccount.GetLoggablePassword (account, password));              
                    Log.Info (Log.LOG_UI, "avl: UpdateCredentialsAndGo a/c updated {0}/{1}", account.Id, cred.Id);
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.CredUpdate, "avl: CredentialsDismissed");
                    ShowWaitingScreen ("Verifying Your Server...");
                    return;
                }
            }

            // Create or re-create the account if it's null.
            // If the user didn't change the email address, then the old account is still around.
            if (null == account) {
                account = NcAccountHandler.Instance.CreateAccount (service, email, password);
                Log.Info (Log.LOG_UI, "avl: CredentialsDismissed - Creating account - LoggablePasswordSaltedHash {0}", McAccount.GetLoggablePassword (account, password));              
                NcAccountHandler.Instance.MaybeCreateServersForIMAP (account, service);
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.AccountCreated, "avl: CredentialsDismissed");
            } else {
                var cred = McCred.QueryByAccountId<McCred> (account.Id).Single ();
                Log.Info (Log.LOG_UI, "avl: CredentialsDismissed - Updating password - LoggablePasswordSaltedHash {0}", McAccount.GetLoggablePassword (account, password));              
                cred.UpdatePassword (password);
                BackEnd.Instance.Stop (account.Id);
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ServerUpdate, "avl: CredentialsDismissed");
            }
              
        }

        private void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if (null == account) {
                return;
            }

            // Won't do anything if this isn't our account
            if ((null != s.Account) && (s.Account.Id != account.Id)) {
                return;
            }

            if (NcResult.SubKindEnum.Info_EmailMessageSetChanged == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Info_EmailMessageSetChanged Status Ind (AdvancedView)");
                EventFromEnum ();
                return;
            }
            if (NcResult.SubKindEnum.Info_InboxPingStarted == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Info_InboxPingStarted Status Ind (AdvancedView)");
                EventFromEnum ();
                return;
            }
            if (NcResult.SubKindEnum.Info_BackEndStateChanged == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Info_BackEndStateChanged Status Ind (Advanced View)");
                EventFromEnum ();
                return;
            }
            if (NcResult.SubKindEnum.Error_NetworkUnavailable == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Advanced Login status callback: Error_NetworkUnavailable");
                EventFromEnum ();
                return;
            }
            if (NcResult.SubKindEnum.Info_NetworkStatus == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Advanced Login status callback: Info_NetworkStatus");
                if (NachoCore.Utils.Network_Helpers.HasNetworkConnection ()) {
                    // FIXME: Kickstart if network status is restored
                }
                return;
            }
        }

        private void EventFromEnum ()
        {
            NcAssert.NotNull (account);

            if (!NachoCore.Utils.Network_Helpers.HasNetworkConnection ()) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.NoNetwork, "avl: EventFromEnum no network");
                return;
            }

            var accountId = account.Id;

            var senderState = BackEnd.Instance.BackEndState (accountId, McAccount.AccountCapabilityEnum.EmailSender);
            var readerState = BackEnd.Instance.BackEndState (accountId, McAccount.AccountCapabilityEnum.EmailReaderWriter);

            Log.Info (Log.LOG_UI, "avl: handleStatusEnums {0} sender={1} reader={2}", accountId, senderState, readerState);

            if ((BackEndStateEnum.ServerConfWait == senderState) || (BackEndStateEnum.ServerConfWait == readerState)) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ServerConfCallback, "avl: EventFromEnum server conf wait");
                return;
            }

            if ((BackEndStateEnum.CredWait == senderState) || (BackEndStateEnum.CredWait == readerState)) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.CredReqCallback, "avl: EventFromEnum cred req");
                return;
            }

            if ((BackEndStateEnum.CertAskWait == senderState) || (BackEndStateEnum.CertAskWait == readerState)) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.CertAskCallback, "avl: EventFromEnum cert ask");
                return;
            }

            if ((BackEndStateEnum.PostAutoDPreInboxSync == senderState) || (BackEndStateEnum.PostAutoDPreInboxSync == readerState)) {
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.PostAutoDPreInboxSync, "avl: EventFromEnum pre inbox sync");
                return;
            }

            if ((BackEndStateEnum.PostAutoDPostInboxSync == senderState) || (BackEndStateEnum.PostAutoDPostInboxSync == readerState)) {
                Log.Info (Log.LOG_UI, "avl: status enums PostAutoDPostInboxSync");
                if ((BackEndStateEnum.PostAutoDPostInboxSync == senderState) && (BackEndStateEnum.PostAutoDPostInboxSync == readerState)) {
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.PostAutoDPostInboxSync, "avl: EventFromEnum post inbox sync");
                }
                return;
            }

            if ((BackEndStateEnum.Running == senderState) || (BackEndStateEnum.Running == readerState)) {
                Log.Info (Log.LOG_UI, "avl: status enums running");
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.Running, "avl: EventFromEnum running");
                return;
            }

            if ((BackEndStateEnum.NotYetStarted == senderState) || (BackEndStateEnum.NotYetStarted == readerState)) {
                // Trust that things will start soon.
                Log.Info (Log.LOG_UI, "avl: status enums notyetstarted");
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.NotYetStarted, "avl: EventFromEnum not started");
                return;
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("SegueToAccountType")) {
                var vc = (AccountTypeViewController)segue.DestinationViewController;
                vc.ServiceSelected = ServiceSelected;
                return;
            }
            if (segue.Identifier.Equals ("SegueToAccountCredentials")) {
                var vc = (AccountCredentialsViewController)segue.DestinationViewController;
                var holder = (SegueHolder)sender;
                var reason = (NachoCredentialsRequestEnum)holder.value;
                vc.Setup (this, service, reason, email, password);
                return;
            }
            if (segue.Identifier.Equals ("SegueToSupport")) {
                return;
            }
            if (segue.Identifier.Equals ("SegueToHome")) {
                return;
            }
            if (segue.Identifier.Equals ("SegueToTabController")) {
                return;
            }
        }

        [Action ("UnwindAccountCredentialsViewController:")]
        public void UnwindAccountCredentialsViewController (UIStoryboardSegue segue)
        {
            var transition = CATransition.CreateAnimation ();

            transition.Duration = 0.3;
            transition.Type = CATransition.TransitionFade;

            segue.SourceViewController.NavigationController.View.Layer.AddAnimation (transition, CALayer.Transition);
            segue.SourceViewController.NavigationController.PopViewController (false);
        }

        // On quit or start over
        void RemoveWorkInProgress (Action postCleanup)
        {
            if (null == account) {
                postCleanup ();
                return;
            }
            NcAccountHandler.Instance.RemoveAccount (account.Id);
            account = null;
            postCleanup ();
        }

        /// <summary>
        /// The user hits the Advanced Login button on the wait screen
        /// </summary>
        public void ReturnToAdvanceView ()
        {
            if (CanShowAdvanced ()) {
                waitingScreen.DismissView ();
                loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ShowAdvanced, "avl: ReturnToAdvanceView stopped");
            }
        }

        public bool CanShowAdvanced ()
        {
            return (McAccount.AccountServiceEnum.Exchange == service) || (McAccount.AccountServiceEnum.IMAP_SMTP == service);
        }

        public void SegueToSupport ()
        {
            waitingScreen.DismissView ();
            loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.ShowSupport, "avl: onConnect");
        }

        protected override void OnKeyboardChanged ()
        {
            // Maybe called from keyboard handler because
            // the notification is still alive when account
            // information is being gathered.  Avoid crash!

            if (null != loginFields) {
                loginFields.Layout (View.Frame.Height - keyboardHeight);
            }
        }

        public override bool ShouldAutorotate ()
        {
            return false;
        }

        public void StartGoogleLogin ()
        {
            var scopes = new List<string> ();
            scopes.Add ("email");
            scopes.Add ("profile");
            scopes.Add ("https://mail.google.com");
            scopes.Add ("https://www.googleapis.com/auth/calendar");
            scopes.Add ("https://www.google.com/m8/feeds/");
            var auth = new NachoCore.Utils.GoogleOAuth2Authenticator (
                           clientId: GoogleOAuthConstants.ClientId,
                           clientSecret: GoogleOAuthConstants.ClientSecret,
                           scope: String.Join (" ", scopes.ToArray ()),
                           accessTokenUrl: new Uri ("https://accounts.google.com/o/oauth2/token"),
                           authorizeUrl: new Uri ("https://accounts.google.com/o/oauth2/auth"),
                           redirectUrl: new Uri ("http://www.nachocove.com/authorization_callback"),
                           loginHint: null);

            auth.AllowCancel = true;

            // If authorization succeeds or is canceled, .Completed will be fired.
            auth.Completed += (s, e) => {
                DismissViewController (true, () => {
                    if (!e.IsAuthenticated) {
                        loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.Quit, "avl: onConnect");
                        return;
                    }

                    string access_token;
                    e.Account.Properties.TryGetValue ("access_token", out access_token);

                    string refresh_token;
                    e.Account.Properties.TryGetValue ("refresh_token", out refresh_token);

                    string expires_in;
                    e.Account.Properties.TryGetValue ("expires_in", out expires_in);
                    Log.Info (Log.LOG_SYS, "OAUTH2 Token acquired. expires_in={0}", expires_in);

                    int expires = 0;
                    string expiresString = "0";
                    DateTime expirationDateTime = DateTime.UtcNow;
                    if (e.Account.Properties.TryGetValue ("expires", out expiresString)) {
                        if (int.TryParse (expiresString, out expires)) {
                            expirationDateTime = expirationDateTime.AddSeconds (expires);
                        }
                    }

                    var url = String.Format ("https://www.googleapis.com/oauth2/v1/userinfo?access_token={0}", access_token);
                    var userInfoString = new WebClient ().DownloadString (url);

                    var userInfo = Newtonsoft.Json.Linq.JObject.Parse (userInfoString);

                    service = McAccount.AccountServiceEnum.GoogleDefault;

                    if (LoginHelpers.ConfiguredAccountExists ((string)userInfo ["email"])) {
                        Log.Info (Log.LOG_UI, "avl: AppDelegate DidSignInForUser existing account: {0}", userInfo.Property ("email"));
                        loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.Quit, "avl: DidSignInForUser");
                        return;
                    }

                    account = NcAccountHandler.Instance.CreateAccount (service,
                        (string)userInfo ["email"],
                        access_token,
                        refresh_token,
                        expirationDateTime);
                    NcAccountHandler.Instance.MaybeCreateServersForIMAP (account, service);

                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.AccountCreated, "avl: DidSignInForUser");

                    Newtonsoft.Json.Linq.JToken picture;
                    if (userInfo.TryGetValue ("picture", out picture)) {
                        var imageUrlString = ((string)picture).Replace ("/photo.jpg", "/s40-c-k/photo.jpg");
                        var imageUrl = new NSUrl (imageUrlString);
                        FetchGooglePortrait (account, imageUrl);
                    }

                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.AccountCreated, "avl: onConnect");
                });
            };

            auth.Error += (object sender, AuthenticatorErrorEventArgs e) => {
                DismissViewController (true, () => {
                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.Quit, "avl: onConnect");
                });
            };

            UIViewController vc = auth.GetUI ();
            this.PresentViewController (vc, true, null);
        }

        async void FetchGooglePortrait (McAccount account, NSUrl imageUrl)
        {
            try {
                var httpClient = new HttpClient ();
                byte[] contents = await httpClient.GetByteArrayAsync (imageUrl);
                var portrait = McPortrait.InsertFile (account.Id, contents);
                account.DisplayPortraitId = portrait.Id;
                account.Update ();
            } catch (Exception e) {
                Log.Info (Log.LOG_UI, "avl: FetchGooglePortrait {0}", e);
            }
        }

    }
}

