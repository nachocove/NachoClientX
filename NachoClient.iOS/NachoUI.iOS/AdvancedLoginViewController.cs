// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using UIKit;
using CoreGraphics;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;
using System.Linq;
using System.Collections.Generic;
using NachoPlatform;

namespace NachoClient.iOS
{
    public partial class AdvancedLoginViewController : NcUIViewController, INachoCertificateResponderParent
    {
        protected nfloat CELL_HEIGHT = 44;
        protected nfloat keyboardHeight;

        List<AdvancedTextField> inputViews = new List<AdvancedTextField> ();

        UILabel errorMessage;

        AdvancedTextField emailView;
        AdvancedTextField serverView;
        AdvancedTextField domainView;
        AdvancedTextField usernameView;
        AdvancedTextField passwordView;
        UIView emailWhiteInset;
        UIView domainWhiteInset;
        UIButton connectButton;
        UIButton customerSupportButton;
        UIButton advancedButton;
        UIButton restartButton;

        UIScrollView scrollView;
        UIView contentView;
        nfloat yOffset;

        private bool hasSyncedEmail = false;

        string gOriginalPassword = "";

        AccountSettings theAccount;

        public UIView loadingCover;
        private WaitingScreen waitScreen;
        private CertificateView certificateView;

        public enum LoginStatus
        {
            ValidateSuccessful,
            BadServer,
            InvalidEmail,
            InvalidServerName,
            BadUsername,
            BadCredentials,
            AcceptCertificate,
            ServerConf,
            NoNetwork,
            EnterInfo,
            TouchConnect,
        };

        string presetEmailAddress = "";
        string presetPassword = "";
        bool showAdvanced = false;
        bool stayInAdvanced = false;

        public void SetAdvanced (string emailAddress, string password)
        {
            presetEmailAddress = emailAddress;
            presetPassword = password;
            showAdvanced = true;
        }

        public AdvancedLoginViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            CreateView ();

            waitScreen = new WaitingScreen (View.Frame);
            waitScreen.SetOwner (this);
            waitScreen.CreateView ();
            View.Add (waitScreen);

            certificateView = new CertificateView (View.Frame);
            certificateView.SetOwner (this);
            certificateView.CreateView ();
            View.Add (certificateView);

            RefreshTheAccount ();
            RefreshUI ();

            // Preset only if we haven't got an account set up yet
            if (String.IsNullOrEmpty (emailView.textField.Text)) {
                if (null == theAccount.Account) {
                    emailView.textField.Text = presetEmailAddress;
                }
            }
            if (String.IsNullOrEmpty (passwordView.textField.Text)) {
                if (null == theAccount.Account) {
                    passwordView.textField.Text = presetPassword;
                    gOriginalPassword = presetPassword;
                }
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                if (this.NavigationController.NavigationBarHidden == true) {
                    this.NavigationController.NavigationBarHidden = false; 
                }
                NavigationItem.SetHidesBackButton (true, false);
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            base.ViewWillAppear (animated);
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;

            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillHideNotification);
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillShowNotification);
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
            }

            if (null != theAccount.Credentials) {
                showAdvanced |= theAccount.Credentials.UserSpecifiedUsername;
            }
            if (null != theAccount.Server) {
                showAdvanced |= (null != theAccount.Server.UserSpecifiedServerName);
            }
 
            // Layout before waitScreen.ShowView() hides the nav bar
            LayoutView ();

            if (!stayInAdvanced && IsBackEndRunning ()) {
                if (IsAutoDComplete ()) {
                    handleStatusEnums ();
                } else {
                    waitScreen.ShowView ();
                }
            } else {
                NavigationItem.Title = "Account Setup";
                loadingCover.Hidden = true;
                handleStatusEnums ();
            }

            base.ViewDidAppear (animated);
        }

        public override bool ShouldAutorotate ()
        {
            return false;
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("SegueToSupport")) {
                // On return, don't automatically
                // restart the waiting cover view.
                stayInAdvanced = true;
                return;
            }
        }

        private void CreateView ()
        {
            if (null != this.NavigationController) {
                NavigationController.NavigationBar.Opaque = true;
                NavigationController.NavigationBar.BackgroundColor = A.Color_NachoGreen.ColorWithAlpha (1.0f);
                NavigationController.NavigationBar.Translucent = false;
            }

            scrollView = new UIScrollView (View.Frame);
            scrollView.BackgroundColor = A.Color_NachoNowBackground;
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;
            View.AddSubview (scrollView);

            contentView = new UIView (View.Frame);
            contentView.BackgroundColor = A.Color_NachoNowBackground;
            scrollView.AddSubview (contentView);

            yOffset = 15f;
            errorMessage = new UILabel (new CGRect (20, 15, View.Frame.Width - 40, 50));
            errorMessage.Font = A.Font_AvenirNextRegular17;
            errorMessage.BackgroundColor = A.Color_NachoNowBackground;
            errorMessage.TextColor = A.Color_NachoRed;
            errorMessage.Lines = 2;
            errorMessage.TextAlignment = UITextAlignment.Center;
            contentView.AddSubview (errorMessage);

            yOffset = errorMessage.Frame.Bottom + 15;

            emailView = new AdvancedTextField ("Email", "joe@bigdog.com", true, new CGRect (0, yOffset, View.Frame.Width + 1, CELL_HEIGHT));
            contentView.AddSubview (emailView);
            yOffset += CELL_HEIGHT;

            emailView.textField.EditingChanged += (object sender, EventArgs e) => {
                haveEnteredEmailAndPass ();
            };

            passwordView = new AdvancedTextField ("Password", "******", true, new CGRect (0, yOffset, View.Frame.Width + 1, CELL_HEIGHT));
            passwordView.textField.SecureTextEntry = true;
            contentView.AddSubview (passwordView);
            yOffset += CELL_HEIGHT;

            passwordView.textField.EditingChanged += (object sender, EventArgs e) => {
                haveEnteredEmailAndPass ();
            };

            // Jeff prefers that we override iOS's removal of a secure string when editing begins.
            passwordView.textField.ShouldChangeCharacters += delegate(UITextField textField, NSRange range, string replacementString) {
                var updatedString = textField.Text.Substring (0, (int)range.Location) + replacementString + textField.Text.Substring ((int)(range.Location + range.Length));
                textField.Text = updatedString;
                haveEnteredEmailAndPass ();
                return false;
            };

            emailWhiteInset = new UIView (new CGRect (0, emailView.Frame.Top + (CELL_HEIGHT / 2), 15, CELL_HEIGHT));
            emailWhiteInset.BackgroundColor = UIColor.White;
            contentView.AddSubview (emailWhiteInset);

            yOffset += 25;

            serverView = new AdvancedTextField ("Server", "Server", true, new CGRect (0, yOffset, View.Frame.Width + 1, CELL_HEIGHT));
            contentView.AddSubview (serverView);
            yOffset += CELL_HEIGHT;

            yOffset += 25;

            domainView = new AdvancedTextField ("Domain", "Domain", true, new CGRect (0, yOffset, View.Frame.Width + 1, CELL_HEIGHT));
            contentView.AddSubview (domainView);
            yOffset += CELL_HEIGHT;

            usernameView = new AdvancedTextField ("Username", "Username", true, new CGRect (0, yOffset, View.Frame.Width + 1, CELL_HEIGHT));
            contentView.AddSubview (usernameView);
            yOffset += CELL_HEIGHT;

            domainWhiteInset = new UIView (new CGRect (0, domainView.Frame.Top + (CELL_HEIGHT / 2), 15, CELL_HEIGHT));
            domainWhiteInset.BackgroundColor = UIColor.White;
            contentView.AddSubview (domainWhiteInset);

            yOffset += 25;

            connectButton = new UIButton (new CGRect (25, yOffset, View.Frame.Width - 50, 46));
            connectButton.AccessibilityLabel = "Connect";
            connectButton.BackgroundColor = A.Color_NachoTeal;
            connectButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            connectButton.SetTitle ("Connect", UIControlState.Normal);
            connectButton.TitleLabel.TextColor = UIColor.White;
            connectButton.TitleLabel.Font = A.Font_AvenirNextDemiBold17;
            connectButton.Layer.CornerRadius = 4f;
            connectButton.Layer.MasksToBounds = true;
            connectButton.TouchUpInside += onConnect;

            contentView.AddSubview (connectButton);

            yOffset = connectButton.Frame.Bottom + 15;

            advancedButton = new UIButton (new CGRect (50, yOffset, View.Frame.Width - 100, 20));
            advancedButton.AccessibilityLabel = "Advanced Sign In";
            advancedButton.BackgroundColor = A.Color_NachoNowBackground;
            advancedButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            advancedButton.SetTitle ("Advanced Sign In", UIControlState.Normal);
            advancedButton.SetTitleColor (A.Color_NachoGreen, UIControlState.Normal);
            advancedButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            advancedButton.TouchUpInside += (object sender, EventArgs e) => {
                View.EndEditing (true);
                showAdvanced = true;
                handleStatusEnums ();
            };
            contentView.AddSubview (advancedButton);
            yOffset = advancedButton.Frame.Bottom + 20;

            customerSupportButton = new UIButton (new CGRect (50, yOffset, View.Frame.Width - 100, 20));
            customerSupportButton.AccessibilityLabel = "Customer Support";
            customerSupportButton.BackgroundColor = A.Color_NachoNowBackground;
            customerSupportButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            customerSupportButton.SetTitle ("Customer Support", UIControlState.Normal);
            customerSupportButton.SetTitleColor (A.Color_NachoGreen, UIControlState.Normal);
            customerSupportButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            customerSupportButton.TouchUpInside += (object sender, EventArgs e) => {
                View.EndEditing (true);
                PerformSegue ("SegueToSupport", this);
            };
            contentView.AddSubview (customerSupportButton);
            yOffset = customerSupportButton.Frame.Bottom + 20;

            restartButton = new UIButton (new CGRect (50, yOffset, View.Frame.Width - 100, 20));
            restartButton.AccessibilityLabel = "Start Over";
            restartButton.BackgroundColor = A.Color_NachoNowBackground;
            restartButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            restartButton.SetTitle ("Start Over", UIControlState.Normal);
            restartButton.SetTitleColor (A.Color_NachoGreen, UIControlState.Normal);
            restartButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            restartButton.TouchUpInside += (object sender, EventArgs e) => {
                View.EndEditing (true);
                onStartOver ();
            };
            contentView.AddSubview (restartButton);
            yOffset = restartButton.Frame.Bottom + 20;

            loadingCover = new UIView (View.Frame);
            loadingCover.BackgroundColor = A.Color_NachoGreen;
            contentView.Add (loadingCover);

            inputViews.Add (emailView);
            inputViews.Add (serverView);
            inputViews.Add (domainView);
            inputViews.Add (usernameView);
            inputViews.Add (passwordView);
        }

        void onStartOver ()
        {
            stayInAdvanced = false;
            if (!IsNcAppicationAccountSet ()) {
                // Remove our local copies
                NcModel.Instance.RunInTransaction (() => {
                    if (null != theAccount) {
                        if (null != theAccount.Account) {
                            theAccount.Account.Delete ();
                        }
                        if (null != theAccount.Credentials) {
                            theAccount.Credentials.Delete ();
                        }
                        if (null != theAccount.Server) {
                            theAccount.Server.Delete ();
                        }
                    }
                });
            }
            Action action = () => {
                NcAccountHandler.Instance.RemoveAccount ();
                InvokeOnMainThread (() => {
                    // go back to main screen
                    NcUIRedirector.Instance.GoBackToMainScreen ();                        
                });
            };
            NcTask.Run (action, "RemoveAccount");
        }

        void onConnect (object sender, EventArgs e)
        {
            View.EndEditing (true);

            stayInAdvanced = false;

            // Checks for valid user, password, and server
            if (!canUserConnect ()) {
                return; // error has been displayed
            }

            // Setup the account is there isn't one yet
            var freshAccount = (null == theAccount.Account);

            if (freshAccount) {
                Log.Info (Log.LOG_UI, "avl: onConnect new account");
                var appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
                NcAccountHandler.Instance.CreateAccount (McAccount.AccountServiceEnum.None, emailView.textField.Text, passwordView.textField.Text);
                NcAssert.True (IsNcAppicationAccountSet ());
                RefreshTheAccount ();
            } 

            // Save the stuff on the screen (pre-validated by canUserConnect())
            SaveUserSettings ();

            // If only password has changed & backend is in CredWait, do cred resp
            if (!freshAccount) {
                if (!String.Equals (gOriginalPassword, passwordView.textField.Text, StringComparison.Ordinal)) {
                    Log.Info (Log.LOG_UI, "avl: onConnect retry password");
                    BackEndStateEnum backEndState = BackEnd.Instance.BackEndState (theAccount.Account.Id);
                    if (BackEndStateEnum.CredWait == backEndState) {
                        BackEnd.Instance.CredResp (theAccount.Account.Id);
                        waitScreen.SetLoadingText ("Verifying Your Credentials...");
                        waitScreen.ShowView ();
                        return;
                    }
                }
            }

            BackEnd.Instance.Stop (theAccount.Account.Id);

            // A null server record will re-start auto-d on Backend.Start()
            // Delete the server record if the user didn't enter the server name
            if ((null != theAccount.Server) && (null == theAccount.Server.UserSpecifiedServerName)) {
                DeleteTheServer ("onConnect");
            }
            if (null == theAccount.Server) {
                LoginHelpers.SetAutoDCompleted (theAccount.Account.Id, false);
            }
            waitScreen.SetLoadingText ("Verifying Your Server...");
            BackEnd.Instance.Start (theAccount.Account.Id);
            waitScreen.ShowView ();
        }

        protected void ConfigureView (LoginStatus currentStatus, string nuance = "")
        {
            haveEnteredEmailAndPass ();
            RefreshTheServer ();

            switch (currentStatus) {
            case LoginStatus.BadCredentials:
                errorMessage.Text = "There seems to be a problem with your credentials.";
                errorMessage.TextColor = A.Color_NachoRed;
                setTextToRed (new AdvancedTextField[] {
                    emailView,
                    domainView,
                    usernameView,
                    passwordView
                });
                break;
            case LoginStatus.ValidateSuccessful:
                setTextToRed (new AdvancedTextField[] { });
                break;
            case LoginStatus.InvalidEmail:
                if (String.IsNullOrEmpty (nuance)) {
                    errorMessage.Text = "The email address you entered is not formatted correctly.";
                } else {
                    errorMessage.Text = nuance;
                }
                errorMessage.TextColor = A.Color_NachoRed;
                setTextToRed (new AdvancedTextField[] { emailView });
                break;
            case LoginStatus.AcceptCertificate:
                errorMessage.Text = "Accept Certificate?";
                errorMessage.TextColor = A.Color_NachoGreen;
                break;
            case LoginStatus.BadServer:
                errorMessage.Text = "The server name you entered is not valid. Please fix and try again.";
                errorMessage.TextColor = A.Color_NachoRed;
                setTextToRed (new AdvancedTextField[] { serverView });
                break;
            case LoginStatus.ServerConf:
                if (null == theAccount.Server) {
                    errorMessage.Text = "We had a problem finding the server for '" + theAccount.Account.EmailAddr + "'.";
                } else if (null == theAccount.Server.UserSpecifiedServerName) {
                    errorMessage.Text = "We had a problem finding the server '" + theAccount.Server.Host + "'.";
                } else {
                    errorMessage.Text = "We had a problem finding the server '" + theAccount.Server.UserSpecifiedServerName + "'.";
                }
                errorMessage.TextColor = A.Color_NachoRed;
                if (!String.IsNullOrEmpty (serverView.textField.Text)) {
                    setTextToRed (new AdvancedTextField[] { serverView });
                } else {
                    setTextToRed (new AdvancedTextField[] { emailView });
                }
                showAdvanced = true;
                break;
            case LoginStatus.EnterInfo:
                errorMessage.Text = "Please fill out the required credentials.";
                errorMessage.TextColor = A.Color_NachoGreen;
                setTextToRed (new AdvancedTextField[] { });
                break;
            case LoginStatus.TouchConnect:
                errorMessage.Text = "Touch Connect to continue";
                errorMessage.TextColor = A.Color_NachoGreen;
                setTextToRed (new AdvancedTextField[] { });
                break;
            case LoginStatus.BadUsername:
                errorMessage.TextColor = A.Color_NachoRed;
                if (!String.IsNullOrEmpty (usernameView.textField.Text)) {
                    setTextToRed (new AdvancedTextField[] { domainView, usernameView });
                    errorMessage.Text = "There seems to be a problem with your user name.";
                } else {
                    setTextToRed (new AdvancedTextField[] { emailView });
                    errorMessage.Text = "There seems to be a problem with your email.";
                }
                break;
            case LoginStatus.NoNetwork:
                errorMessage.Text = "No network connection. Please check that you have internet access.";
                errorMessage.TextColor = A.Color_NachoRed;
                setTextToRed (new AdvancedTextField[] { });
                break;
            case LoginStatus.InvalidServerName:
                if (String.IsNullOrEmpty (nuance)) {
                    errorMessage.Text = "Invalid server name. Please check that you typed it in correctly.";
                } else {
                    errorMessage.Text = nuance;
                }
                errorMessage.TextColor = A.Color_NachoRed;
                setTextToRed (new AdvancedTextField[] { serverView });
                break;
            }

            Log.Info (Log.LOG_UI, "avl: status={0} {1}", currentStatus, errorMessage.Text);

            LayoutView ();
        }

        /// <summary>
        /// The user hits the Advanced Login button on the wait screen
        /// </summary>
        public void ReturnToAdvanceView ()
        {
            showAdvanced = true;
            stayInAdvanced = true;
            stopBeIfRunning ();
            handleStatusEnums ();
            waitScreen.DismissView ();
        }

        void LayoutView ()
        {
            yOffset = 15f;

            ViewFramer.Create (errorMessage).Y (yOffset);
            yOffset = errorMessage.Frame.Bottom + 15;

            ViewFramer.Create (emailView).Y (yOffset);
            yOffset += CELL_HEIGHT;

            ViewFramer.Create (passwordView).Y (yOffset);
            yOffset += CELL_HEIGHT;

            ViewFramer.Create (emailWhiteInset).Y (emailView.Frame.Top + (CELL_HEIGHT / 2));
            yOffset += 20;

            if (showAdvanced) {
                ViewFramer.Create (serverView).Y (yOffset);
                yOffset += CELL_HEIGHT;

                yOffset += 20;

                ViewFramer.Create (domainView).Y (yOffset);
                yOffset += CELL_HEIGHT;

                ViewFramer.Create (usernameView).Y (yOffset);
                yOffset += CELL_HEIGHT;

                ViewFramer.Create (domainWhiteInset).Y (domainView.Frame.Top + (CELL_HEIGHT / 2));
                yOffset += 20;
            }
            serverView.Hidden = !showAdvanced;
            domainView.Hidden = !showAdvanced;
            usernameView.Hidden = !showAdvanced;
            domainWhiteInset.Hidden = !showAdvanced;

            ViewFramer.Create (connectButton).Y (yOffset);
            yOffset = connectButton.Frame.Bottom + 20;

            if (showAdvanced) {
                advancedButton.Hidden = true;
            } else {
                advancedButton.Hidden = false;
                ViewFramer.Create (advancedButton).Y (yOffset);
                yOffset = advancedButton.Frame.Bottom + 20;
            }

            ViewFramer.Create (customerSupportButton).Y (yOffset);
            yOffset = customerSupportButton.Frame.Bottom + 20;

            ViewFramer.Create (restartButton).Y (yOffset);
            yOffset = restartButton.Frame.Bottom + 20;

            scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            var contentFrame = new CGRect (0, 0, View.Frame.Width, yOffset);
            contentView.Frame = contentFrame;
            scrollView.ContentSize = contentFrame.Size;
        }

        private bool haveEnteredEmailAndPass ()
        {
            if (0 == emailView.textField.Text.Length || 0 == passwordView.textField.Text.Length) {
                connectButton.Enabled = false;
                connectButton.Alpha = .5f;
                return false;
            } else {
                connectButton.Enabled = true;
                connectButton.Alpha = 1.0f;
                return true;
            }
        }

        private void handleStatusEnums ()
        {
            if (!IsNcAppicationAccountSet ()) {
                Log.Info (Log.LOG_UI, "avl: handleStatusEnums account not set");
                ConfigureView (LoginStatus.EnterInfo);
                haveEnteredEmailAndPass ();
                return;
            }

            var accountId = theAccount.Account.Id;
            BackEndStateEnum backEndState = BackEnd.Instance.BackEndState (accountId);
            Log.Info (Log.LOG_UI, "avl: handleStatusEnums {0}={1}", accountId, backEndState);

            switch (backEndState) {
            case BackEndStateEnum.ServerConfWait:
                Log.Info (Log.LOG_UI, "avl: ServerConfWait Auto-D-State-Enum On Page Load");
                stopBeIfRunning ();
                ConfigureView (LoginStatus.ServerConf);
                break;
            case BackEndStateEnum.CredWait:
                Log.Info (Log.LOG_UI, "avl: CredWait Auto-D-State-Enum On Page Load");
                ConfigureView (LoginStatus.BadCredentials);
                break;
            case BackEndStateEnum.CertAskWait:
                Log.Info (Log.LOG_UI, "avl: CertAskWait Auto-D-State-Enum On Page Load");
                ConfigureView (LoginStatus.AcceptCertificate);
                certificateCallbackHandler ();
                waitScreen.ShowView ();
                break;
            case BackEndStateEnum.PostAutoDPreInboxSync:
                Log.Info (Log.LOG_UI, "avl: PostAutoDPreInboxSync Auto-D-State-Enum On Page Load");
                LoginHelpers.SetAutoDCompleted (accountId, true);
                ConfigureView (LoginStatus.TouchConnect);
                if (!stayInAdvanced) {
                    waitScreen.SetLoadingText ("Syncing Your Inbox...");
                    waitScreen.ShowView ();
                }
                break;
            case BackEndStateEnum.PostAutoDPostInboxSync:
                Log.Info (Log.LOG_UI, "avl: PostAutoDPostInboxSync Auto-D-State-Enum On Page Load");
                LoginHelpers.SetFirstSyncCompleted (accountId, true);
                PerformSegue (StartupViewController.NextSegue (), this);
                break;
            case BackEndStateEnum.Running:
                Log.Info (Log.LOG_UI, "avl: Running Auto-D-State-Enum On Page Load");
                ConfigureView (LoginStatus.TouchConnect);
                if (!stayInAdvanced) {
                    waitScreen.ShowView ();
                }
                break;
            default:
                ConfigureView (LoginStatus.EnterInfo);
                break;
            }
        }

        /// <summary>
        /// Refreshs the account.  These are static for the life of this view
        /// </summary>
        private void RefreshTheAccount ()
        {
            theAccount = new AccountSettings ();
            if (IsNcAppicationAccountSet ()) {
                // Reload the currently active account record
                var accountId = GetNcApplicationAccountId ();
                theAccount.Account = McAccount.QueryById<McAccount> (accountId);
                theAccount.Credentials = McCred.QueryByAccountId<McCred> (accountId).SingleOrDefault ();
                gOriginalPassword = theAccount.Credentials.GetPassword ();
                Log.Info (Log.LOG_UI, "avl: refresh the account");
            }
        }

        /// <summary>
        /// Refreshs the server.  The server potentially changes
        /// </summary>
        private void RefreshTheServer ()
        {
            if (null != theAccount.Account) {
                theAccount.Server = McServer.QueryByAccountId<McServer> (theAccount.Account.Id).SingleOrDefault ();
                if (null != theAccount.Server) {
                    if (null == theAccount.Server.UserSpecifiedServerName) {
                        serverView.textField.Text = theAccount.Server.Host;
                        Log.Info (Log.LOG_UI, "avl: refresh server {0}", serverView.textField.Text);
                    } else {
                        serverView.textField.Text = theAccount.Server.UserSpecifiedServerName;
                        Log.Info (Log.LOG_UI, "avl: refresh user defined server {0}", serverView.textField.Text);
                    }
                    return;
                }
            }
            Log.Info (Log.LOG_UI, "avl: refresh no server");
            serverView.textField.Text = "";
        }

        private void RefreshUI ()
        {
            foreach (var v in inputViews) {
                v.textField.Text = "";
                v.textField.TextColor = UIColor.Black;
            }
            errorMessage.Text = "";
            gOriginalPassword = "";

            if (null != theAccount.Account) {
                emailView.textField.Text = theAccount.Account.EmailAddr;
            }

            if (null != theAccount.Credentials) {
                if (theAccount.Credentials.UserSpecifiedUsername) {
                    string domain, username;
                    McCred.Split (theAccount.Credentials.Username, out domain, out username);
                    usernameView.textField.Text = username;
                    domainView.textField.Text = domain;
                   
                }
                passwordView.textField.Text = theAccount.Credentials.GetPassword ();
            }

            if (null != theAccount.Server) {
                if (null == theAccount.Server.UserSpecifiedServerName) {
                    serverView.textField.Text = theAccount.Server.Host;
                } else {
                    serverView.textField.Text = theAccount.Server.UserSpecifiedServerName;
                }
            }
        }

        /// <summary>
        /// Updates McCred and McAccount from the UI
        /// in both theAccount and the database.
        /// </summary>
        private void SaveUserSettings ()
        {
            NcAssert.NotNull (theAccount.Account);
            NcAssert.NotNull (theAccount.Credentials);

            // Save email & password
            theAccount.Account.EmailAddr = emailView.textField.Text;
            theAccount.Credentials.UpdatePassword (passwordView.textField.Text);

            // If the user clears the username, we'll let them start over
            if (String.IsNullOrEmpty (domainView.textField.Text) && String.IsNullOrEmpty (usernameView.textField.Text)) {
                theAccount.Credentials.UserSpecifiedUsername = false;
                theAccount.Credentials.Username = theAccount.Account.EmailAddr;
            } else {
                // Otherwise, we'll use what they've entered
                theAccount.Credentials.UserSpecifiedUsername = true;
                theAccount.Credentials.Username = McCred.Join (domainView.textField.Text, usernameView.textField.Text);
            }

            // Update the database
            theAccount.Account.Update ();
            theAccount.Credentials.Update ();
            Log.Info (Log.LOG_UI, "avl: a/c updated {0}/{1} username={2}", theAccount.Account.Id, theAccount.Credentials.Id, theAccount.Credentials.UserSpecifiedUsername);

            SaveServerSettings ();
        }

        /// <summary>
        /// Saves the server settings.
        /// </summary>
        private void SaveServerSettings ()
        {
            // if there is a server record and the text is empty, delete the server record. Let the user start over.
            if (String.IsNullOrEmpty (serverView.textField.Text)) {
                DeleteTheServer ("user cleared server");
                return;
            }

            // did the server came from the back end, we're done
            if (null != theAccount.Server) {
                if (null == theAccount.Server.UserSpecifiedServerName) {
                    if (String.Equals (theAccount.Server.Host, serverView.textField.Text, StringComparison.OrdinalIgnoreCase)) {
                        Log.Info (Log.LOG_UI, "avl: user did not enter server name");
                        return;
                    }
                }
            }

            // the user specified the host name, save it
            if (null == theAccount.Server) {
                theAccount.Server = new McServer () { AccountId = theAccount.Account.Id };
                theAccount.Server.Insert ();
            }
            var temp = new McServer ();
            var result = EmailHelper.ParseServer (ref temp, serverView.textField.Text);
            NcAssert.True (EmailHelper.ParseServerWhyEnum.Success_0 == result);
            if (!theAccount.Server.IsSameServer (temp)) {
                theAccount.Server.CopyFrom (temp);
                theAccount.Server.UserSpecifiedServerName = serverView.textField.Text;
                theAccount.Server.UsedBefore = false;
                theAccount.Server.Update ();
                Log.Info (Log.LOG_UI, "avl: update server {0}", theAccount.Server.UserSpecifiedServerName);
            }
        }

        private void DeleteTheServer (string message)
        {
            if (null != theAccount.Server) {
                if (null == theAccount.Server.UserSpecifiedServerName) {
                    Log.Info (Log.LOG_UI, "avl: delete server {0} {1}", message, theAccount.Server.BaseUriString ());
                } else {
                    Log.Info (Log.LOG_UI, "avl: delete user defined server {0} {1}", message, theAccount.Server.UserSpecifiedServerName);
                }
                theAccount.Server.Delete ();
                theAccount.Server = null;
            }
        }

        private void setTextToRed (AdvancedTextField[] whichViews)
        {
            foreach (var textView in inputViews) {
                if (whichViews.Contains (textView)) {
                    textView.textField.TextColor = A.Color_NachoRed;
                } else {
                    textView.textField.TextColor = UIColor.Black;
                }
            }
        }

        private bool canUserConnect ()
        {
            if (!haveEnteredEmailAndPass ()) {
                return false;
            }
            string serviceName;
            var emailAddress = emailView.textField.Text;
            if (EmailHelper.IsServiceUnsupported (emailAddress, out serviceName)) {
                var nuance = String.Format ("Nacho Mail does not support {0} yet.", serviceName);
                ConfigureView (LoginStatus.InvalidEmail, nuance);
                return false;
            }
            if (!String.IsNullOrEmpty (serverView.textField.Text)) {
                if (EmailHelper.ParseServerWhyEnum.Success_0 != EmailHelper.IsValidServer (serverView.textField.Text)) {
                    ConfigureView (LoginStatus.InvalidServerName);
                    return false;
                }
            }
            if (!NachoCore.Utils.Network_Helpers.HasNetworkConnection ()) {
                ConfigureView (LoginStatus.NoNetwork);
                return false;
            }
            return true;
        }

        private void stopBeIfRunning ()
        {
            BackEnd.Instance.Stop (theAccount.Account.Id);
        }

        bool IsBackEndRunning ()
        {
            if (null == theAccount.Account) {
                return false;
            }
            NcAssert.True (IsNcAppicationAccountSet ());
            BackEndStateEnum backEndState = BackEnd.Instance.BackEndState (theAccount.Account.Id);
            Log.Info (Log.LOG_UI, "avl:  isrunning state {0}", backEndState);
            if (BackEndStateEnum.NotYetStarted == backEndState) {
                return true;
            }
            if (BackEndStateEnum.Running == backEndState) {
                return true;
            }
            return IsAutoDComplete ();
        }

        bool IsAutoDComplete ()
        {
            if (null == theAccount.Account) {
                return false;
            }
            NcAssert.True (IsNcAppicationAccountSet ());
            BackEndStateEnum backEndState = BackEnd.Instance.BackEndState (theAccount.Account.Id);
            if (BackEndStateEnum.PostAutoDPostInboxSync == backEndState) {
                return true;
            }
            if (BackEndStateEnum.PostAutoDPreInboxSync == backEndState) {
                return true;
            }
            return false;
        }

        bool IsNcAppicationAccountSet ()
        {
            return (null != NcApplication.Instance.Account);
        }

        int GetNcApplicationAccountId ()
        {
            NcAssert.True (IsNcAppicationAccountSet ());
            return NcApplication.Instance.Account.Id;
        }

        protected virtual bool HandlesKeyboardNotifications {
            get { return true; }
        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {
                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;
                //Start an animation, using values from the keyboard
                UIView.BeginAnimations ("AnimateForKeyboard");
                UIView.SetAnimationBeginsFromCurrentState (true);
                UIView.SetAnimationDuration (UIKeyboard.AnimationDurationFromNotification (notification));
                UIView.SetAnimationCurve ((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification (notification));
                //Pass the notification, calculating keyboard height, etc.
                bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                if (visible) {
                    var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                } else {
                    var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                }
                //Commit the animation
                UIView.CommitAnimations (); 
            }
        }

        protected virtual void OnKeyboardChanged (bool visible, nfloat height)
        {
            var newHeight = (visible ? height : 0);

            if (newHeight == keyboardHeight) {
                return;
            }

            keyboardHeight = newHeight;
            LayoutView ();
            scrollView.SetContentOffset (new CGPoint (0, -scrollView.ContentInset.Top), false);
        }

        private void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if (NcResult.SubKindEnum.Info_EmailMessageSetChanged == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Info_EmailMessageSetChanged Status Ind (AdvancedView)");
                SyncCompleted ();
            }
            if (NcResult.SubKindEnum.Info_InboxPingStarted == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Info_InboxPingStarted Status Ind (AdvancedView)");
                SyncCompleted ();
            }
            if (NcResult.SubKindEnum.Info_AsAutoDComplete == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Auto-D-Completed Status Ind (Advanced View)");
                waitScreen.SetLoadingText ("Syncing Your Inbox...");
                RefreshTheServer ();
                LoginHelpers.SetAutoDCompleted (theAccount.Account.Id, true);
                if (!LoginHelpers.HasViewedTutorial (theAccount.Account.Id)) {
                    PerformSegue (StartupViewController.NextSegue (), this);
                }
            }
            if (NcResult.SubKindEnum.Error_NetworkUnavailable == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Advanced Login status callback: Error_NetworkUnavailable");
                ConfigureView (LoginStatus.NoNetwork);
                waitScreen.DismissView ();
                stopBeIfRunning ();
            }
            if (NcResult.SubKindEnum.Error_ServerConfReqCallback == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: ServerConfReq Status Ind (Adv. View)");
                ConfigureView (LoginStatus.ServerConf);
                waitScreen.DismissView ();
                stopBeIfRunning ();
            }
            if (NcResult.SubKindEnum.Info_CredReqCallback == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: CredReqCallback Status Ind (Adv. View)");
                ConfigureView (LoginStatus.BadCredentials);
                waitScreen.DismissView ();
            }
            if (NcResult.SubKindEnum.Error_CertAskReqCallback == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: CertAskCallback Status Ind");
                ConfigureView (LoginStatus.AcceptCertificate);
                certificateCallbackHandler ();
            }
            if (NcResult.SubKindEnum.Info_NetworkStatus == s.Status.SubKind) {
                Log.Info (Log.LOG_UI, "avl: Advanced Login status callback: Info_NetworkStatus");
                if (!NachoCore.Utils.Network_Helpers.HasNetworkConnection ()) {
                    ConfigureView (LoginStatus.NoNetwork);
                    waitScreen.DismissView ();
                    stopBeIfRunning ();
                }
            }
        }

        private void certificateCallbackHandler ()
        {
            setTextToRed (new AdvancedTextField[]{ });
            certificateView.SetCertificateInformation ();
            certificateView.ShowView ();
            waitScreen.InvalidateAutomaticSegueTimer ();
        }

        // INachoCertificateResponderParent
        public void DontAcceptCertificate ()
        {
            ConfigureView (LoginStatus.EnterInfo);
            NcApplication.Instance.CertAskResp (theAccount.Account.Id, false);
            waitScreen.DismissView ();
        }

        // INachoCertificateResponderParent
        public void AcceptCertificate ()
        {
            ConfigureView (LoginStatus.AcceptCertificate);
            NcApplication.Instance.CertAskResp (theAccount.Account.Id, true);
            waitScreen.InitializeAutomaticSegueTimer ();
        }

        private void SyncCompleted ()
        {
            LoginHelpers.SetFirstSyncCompleted (theAccount.Account.Id, true);
            if (!hasSyncedEmail) {
                waitScreen.Layer.RemoveAllAnimations ();
                waitScreen.StartSyncedEmailAnimation ();
                hasSyncedEmail = true;
            }
        }

        private class AccountSettings
        {
            public McAccount Account { get; set; }

            public McCred Credentials { get; set; }

            public McServer Server { get; set; }
        }
    }

    public class AdvancedTextField : UIView
    {
        protected nfloat INSET = 15;

        public UITextField textField;

        public AdvancedTextField (string labelText, string placeHolder, bool hasBorder, CGRect rect) : base (rect)
        {
            UIView inputBox = this;

            inputBox.BackgroundColor = UIColor.White;
            if (hasBorder) {
                inputBox.Layer.BorderColor = A.Color_NachoBorderGray.CGColor;
                inputBox.Layer.BorderWidth = .4f;
            }

            UILabel cellLefthandLabel = new UILabel (new CGRect (INSET, 0, 80, rect.Height));
            cellLefthandLabel.Text = labelText;
            cellLefthandLabel.BackgroundColor = UIColor.White;
            cellLefthandLabel.TextColor = A.Color_NachoGreen;
            cellLefthandLabel.Font = A.Font_AvenirNextMedium14;
            inputBox.Add (cellLefthandLabel);

            textField = new UITextField ();
            textField.Frame = new CGRect (120, 0, inputBox.Frame.Width - 120 - 1, rect.Height);
            textField.ClearButtonMode = UITextFieldViewMode.WhileEditing;
            textField.BackgroundColor = UIColor.White;
            textField.Placeholder = placeHolder;
            textField.Font = A.Font_AvenirNextRegular14;
            textField.AutocapitalizationType = UITextAutocapitalizationType.None;
            textField.AutocorrectionType = UITextAutocorrectionType.No;
            textField.AccessibilityLabel = labelText;
            inputBox.Add (textField);

            textField.ShouldReturn += (field) => {
                field.TextColor = UIColor.Black;
                inputBox.EndEditing (true);
                return true;
            };
            textField.EditingDidEnd += (object sender, EventArgs e) => {
                // Dummy event for triggering UI monitoring
            };
        }
    }

}

