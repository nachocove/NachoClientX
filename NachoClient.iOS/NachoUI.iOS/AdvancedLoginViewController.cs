// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;
using System.Linq;
using System.Collections.Generic;
using NachoPlatform;

namespace NachoClient.iOS
{
    public partial class AdvancedLoginViewController : NcUIViewController
    {
        protected int LINE_OFFSET = 25;
        protected float CELL_HEIGHT = 44;
        protected float INSET = 15;
        protected float TOP_CELL_YVAL = 95;
        protected static float SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected float keyboardHeight;

        const int GRAY_BACKGROUND_TAG = 20;
        const int CUSTOM_CERTIFICATE_TAG = 21;

        UITextField emailText = new UITextField ();
        UITextField serverText = new UITextField ();
        UITextField domainText = new UITextField ();
        UITextField usernameText = new UITextField ();
        UITextField passwordText = new UITextField ();
        List<UITextField> inputFields = new List<UITextField> ();
        UIScrollView scrollView;
        UILabel errorMessage;
        UITextView statusMessage;
        UIButton cancelValidation;
        UIActivityIndicatorView theSpinner;
        UIView cancelLine;
        UIView statusView;
        UIButton genericSystemButton;
        UIButton connectButton;
        UIColor systemBlue;
        AccountSettings theAccount;
        McServer serverToValidate;
        AppDelegate appDelegate;

        public enum errorMessageEnum
        {
            Server,
            RequiredFields,
            InvalidEmail,
            Username,
            Credentials,
            Certificate,
            ServerConf,
            Network,
            FirstTime}

        ;

        public AdvancedLoginViewController (IntPtr handle) : base (handle)
        {
            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            generateSystemBlue ();
            createWaitingView ();
            createScrollView ();
            createInputFieldList ();
            theAccount = new AccountSettings ();
            loadSettingsForAccount ();
            addErrorLabel ();
            addCells ();
            fillInKnownFields ();
            configureKeyboards ();
            handleStatusEnums ();
            addConnectButton ();
            haveEnteredEmailAndPass ();
            addCustomerSupportButton ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;

            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillHideNotification);
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillShowNotification);
            }
        }

        public void generateSystemBlue ()
        {
            genericSystemButton = new UIButton (UIButtonType.System);
            systemBlue = genericSystemButton.CurrentTitleColor;
        }

        public void createScrollView ()
        {
            scrollView = new UIScrollView (View.Frame);
            scrollView.BackgroundColor = A.Color_NachoNowBackground;
            scrollView.ContentSize = new SizeF (View.Frame.Width, View.Frame.Height - 64);
            View.Add (scrollView);
        }

        public void createInputFieldList ()
        {
            inputFields.Add (emailText);
            inputFields.Add (serverText);
            inputFields.Add (domainText);
            inputFields.Add (usernameText);
            inputFields.Add (passwordText);
        }

        public void layoutView ()
        {
            scrollView.Frame = new RectangleF (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
        }

        public void createWaitingView ()
        {
            statusView = new UIView (new System.Drawing.RectangleF (60, 100, View.Frame.Width - 120, 146));
            statusView.Tag = 50;
            statusView.Layer.CornerRadius = 7.0f;
            statusView.BackgroundColor = UIColor.White;
            statusView.Alpha = 1.0f;
            statusMessage = new UITextView (new System.Drawing.RectangleF (8, 2, statusView.Frame.Width - 16, statusView.Frame.Height / 2.4f));
            statusMessage.BackgroundColor = UIColor.White;
            statusMessage.Alpha = 1.0f;
            statusMessage.Font = UIFont.SystemFontOfSize (17);
            statusMessage.TextColor = UIColor.Black;
            statusMessage.Text = "Locating Your Server...";
            statusMessage.TextAlignment = UITextAlignment.Center;
            statusView.AddSubview (statusMessage);

            theSpinner = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);
            theSpinner.Alpha = 1.0f;
            theSpinner.HidesWhenStopped = true;
            theSpinner.Tag = 1;
            theSpinner.Frame = new System.Drawing.RectangleF (statusView.Frame.Width / 2 - 20, 50, 40, 40);
            theSpinner.Color = systemBlue;
            theSpinner.StartAnimating ();
            statusView.AddSubview (theSpinner);

            cancelLine = new UIView (new System.Drawing.RectangleF (0, 105, statusView.Frame.Width, .5f));
            cancelLine.BackgroundColor = UIColor.LightGray;
            cancelLine.Tag = 2;
            statusView.AddSubview (cancelLine);

            cancelValidation = new UIButton (new System.Drawing.RectangleF (0, 106, statusView.Frame.Width, 40));
            cancelValidation.Tag = 3;
            cancelValidation.Layer.CornerRadius = 10.0f;
            cancelValidation.BackgroundColor = UIColor.White;
            cancelValidation.TitleLabel.TextAlignment = UITextAlignment.Center;
            cancelValidation.SetTitle ("Cancel", UIControlState.Normal);
            cancelValidation.TitleLabel.TextColor = systemBlue;
            cancelValidation.TouchUpInside += (object sender, EventArgs e) => {

                setErrorMessage (errorMessageEnum.FirstTime);
                setTextToRed (new UITextField[] { });
                dismissWaitingView ();
            };
            statusView.Add (cancelValidation);
        }

        public void showWaitingView ()
        {

            UIView greyBackground = new UIView (new System.Drawing.RectangleF (0, 0, View.Frame.Width, View.Frame.Height));
            greyBackground.BackgroundColor = UIColor.DarkGray;
            greyBackground.Alpha = .4f;
            greyBackground.Tag = 69;
            View.Add (greyBackground);

            cancelValidation = new UIButton (new System.Drawing.RectangleF (0, 106, statusView.Frame.Width, 40));
            cancelValidation.Tag = 3;
            cancelValidation.Layer.CornerRadius = 10.0f;
            cancelValidation.BackgroundColor = UIColor.White;
            cancelValidation.TitleLabel.TextAlignment = UITextAlignment.Center;
            cancelValidation.SetTitle ("Cancel", UIControlState.Normal);
            cancelValidation.TitleLabel.TextColor = systemBlue;
            cancelValidation.TouchUpInside += (object sender, EventArgs e) => {
                stopBeIfRunning ();
                setErrorMessage (errorMessageEnum.FirstTime);
                setTextToRed (new UITextField[] { });
                dismissWaitingView ();
            };

            statusView.Add (cancelValidation);
            View.AddSubview (statusView);
        }

        public void dismissWaitingView ()
        {
            UIView statusWindow = View.ViewWithTag (50);
            UIView grayBackground = View.ViewWithTag (69);
            UIActivityIndicatorView spinner = (UIActivityIndicatorView)View.ViewWithTag (100);

            if (null != statusWindow) {
                statusWindow.RemoveFromSuperview ();
            }
            if (null != grayBackground) {
                grayBackground.RemoveFromSuperview ();
            }
            if (null != spinner) {
                spinner.RemoveFromSuperview ();
            }
        }

        public void addConnectButton ()
        {
            connectButton = new UIButton (new RectangleF (30, 389, View.Frame.Width - 60, CELL_HEIGHT));
            connectButton.BackgroundColor = A.Color_NachoGreen;
            connectButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            connectButton.SetTitle ("Connect To NachoMail", UIControlState.Normal);
            connectButton.TitleLabel.TextColor = UIColor.White;
            connectButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            connectButton.TouchUpInside += (object sender, EventArgs e) => {
                if (canUserConnect ()) {
                    if (!LoginHelpers.IsCurrentAccountSet ()) {
                        basicEnterFullConfiguration ();
                    } else {
                        if (haveEnteredHost ()) {
                            if (isValidHost ()) {
                                showWaitingView ();
                                tryValidateConfig ();
                            }
                        } else {
                            showWaitingView ();
                            tryAutoD ();
                        }
                    }
                }
            };
            scrollView.Add (connectButton);
        }

        public bool haveEnteredEmailAndPass ()
        {
            if (0 == emailText.Text.Length || 0 == passwordText.Text.Length) {
                enableConnect (false);
                return false;
            } else {
                enableConnect (true);
                return true;
            }
        }

        public void enableConnect (bool shouldWe)
        {
            if (true == shouldWe) {
                connectButton.Enabled = true;
                connectButton.Alpha = 1.0f;
            } else {
                connectButton.Enabled = false;
                connectButton.Alpha = .5f;
            }
        }

        public void addCustomerSupportButton ()
        {
            UIButton customerSupportButton = new UIButton (new RectangleF (30, 439, View.Frame.Width - 60, CELL_HEIGHT));
            customerSupportButton.BackgroundColor = A.Color_NachoGreen;
            customerSupportButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            customerSupportButton.SetTitle ("Customer Support", UIControlState.Normal);
            customerSupportButton.TitleLabel.TextColor = UIColor.White;
            customerSupportButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            customerSupportButton.TouchUpInside += (object sender, EventArgs e) => {
                PerformSegue ("AdvancedLoginToSupport", this);
            };
            scrollView.Add (customerSupportButton);
        }

        public void addErrorLabel ()
        {
            errorMessage = new UILabel (new RectangleF (20, 20, View.Frame.Width - 40, 50));
            errorMessage.Font = A.Font_AvenirNextRegular17;
            errorMessage.TextColor = A.Color_NachoRed;
            errorMessage.Lines = 2;
            errorMessage.TextAlignment = UITextAlignment.Center;
            if (LoginHelpers.IsCurrentAccountSet ()) {
                if (!LoginHelpers.HasProvidedCreds (LoginHelpers.GetCurrentAccountId ())) {
                    setErrorMessage (errorMessageEnum.FirstTime);
                }
            }

            scrollView.Add (errorMessage);
        }

        public void addCells ()
        {
            AddInputCell ("Email", emailText, "joe@bigdog.com", TOP_CELL_YVAL, true);
            AddInputCell ("Server", serverText, "Required", TOP_CELL_YVAL + 69, true);
            AddInputCell ("Domain", domainText, "Optional", TOP_CELL_YVAL + 138, true);
            AddInputCell ("Username", usernameText, "Required", TOP_CELL_YVAL + 182, false);
            AddInputCell ("Password", passwordText, "******", TOP_CELL_YVAL + 226, true);
            UIView whiteInset = new UIView (new RectangleF (0, TOP_CELL_YVAL + 139, 15, 90));
            whiteInset.BackgroundColor = UIColor.White;
            scrollView.Add (whiteInset);
        }

        public void configureKeyboards ()
        {
            usernameText.ShouldReturn += (textField) => {
                textField.ResignFirstResponder ();
                return true;
            };
            usernameText.AutocapitalizationType = UITextAutocapitalizationType.None;
            usernameText.AutocorrectionType = UITextAutocorrectionType.No;

            emailText.ShouldReturn += (textField) => {
                haveEnteredEmailAndPass ();
                textField.ResignFirstResponder ();
                return true;
            };
            emailText.AutocapitalizationType = UITextAutocapitalizationType.None;
            emailText.AutocorrectionType = UITextAutocorrectionType.No;

            domainText.ShouldReturn += (textField) => {
                textField.ResignFirstResponder ();
                return true;
            };
            domainText.AutocapitalizationType = UITextAutocapitalizationType.None;
            domainText.AutocorrectionType = UITextAutocorrectionType.No;

            serverText.ShouldReturn += (textField) => {
                textField.ResignFirstResponder ();
                return true;
            };
            serverText.AutocapitalizationType = UITextAutocapitalizationType.None;
            serverText.AutocorrectionType = UITextAutocorrectionType.No;

            passwordText.SecureTextEntry = true;
            passwordText.ShouldReturn += (textField) => {
                haveEnteredEmailAndPass ();
                textField.ResignFirstResponder ();
                return true;
            };
            passwordText.AutocapitalizationType = UITextAutocapitalizationType.None;
            passwordText.AutocorrectionType = UITextAutocorrectionType.No;
        }

        public void handleStatusEnums ()
        {
            if (LoginHelpers.IsCurrentAccountSet ()) {
                NachoCore.ActiveSync.AsProtoControl protoControl = new NachoCore.ActiveSync.AsProtoControl (BackEnd.Instance, LoginHelpers.GetCurrentAccountId ());
                if (protoControl != null) {
                    BackEndAutoDStateEnum AutoDState = protoControl.AutoDState;
                    switch (AutoDState) {
                    case BackEndAutoDStateEnum.ServerConfWait:
                        setErrorMessage (errorMessageEnum.ServerConf);
                        setTextToRed (new UITextField[] { emailText });
                        //BE.ServConf response?
                        stopBeIfRunning ();
                        return;

                    case BackEndAutoDStateEnum.CredWait:
                        setErrorMessage (errorMessageEnum.Credentials);
                        setTextToRed (new UITextField[] { usernameText, passwordText });
                        stopBeIfRunning ();
                        return;

                    case BackEndAutoDStateEnum.CertAskWait:
                        setErrorMessage (errorMessageEnum.Certificate);
                        showWaitingView ();
                        certificateCallbackHandler ();
                        return;

                    case BackEndAutoDStateEnum.PostAutoDPreFsync:
                        //FIXME change this message?
                        errorMessage.Text = "Waiting for Folder-Sync.";
                        showWaitingView ();
                        statusMessage.TextColor = systemBlue;
                        statusMessage.Text = "Found Your Server...";
                        return;

                    case BackEndAutoDStateEnum.PostAutoDPostFSync:
                        LoginHelpers.SetFirstSyncCompleted (LoginHelpers.GetCurrentAccountId (), true);
                        if (LoginHelpers.HasViewedTutorial (LoginHelpers.GetCurrentAccountId ())) {
                            PerformSegue ("AdvancedLoginToNachoNow", this);
                        } else {
                            PerformSegue ("AdvancedLoginToHome", this);
                        }
                        return;

                    case BackEndAutoDStateEnum.Running:
                        //FIXME change this message?
                        errorMessage.Text = "Auto-D is running.";
                        showWaitingView ();
                        return;
                    }
                }
            }
        }

        public void AddInputCell (string labelText, UITextField textInput, string placeHolder, float yVal, bool hasBorder)
        {
            UIView inputBox = new UIView (new RectangleF (0, yVal, View.Frame.Width + 1, CELL_HEIGHT));
            inputBox.BackgroundColor = UIColor.White;
            if (hasBorder) {
                inputBox.Layer.BorderColor = UIColor.LightGray.CGColor;
                inputBox.Layer.BorderWidth = .4f;
            }

            UILabel cellLefthandLabel = new UILabel (new RectangleF (INSET, 0, 80, CELL_HEIGHT));
            cellLefthandLabel.Text = labelText;
            cellLefthandLabel.BackgroundColor = UIColor.White;
            cellLefthandLabel.TextColor = A.Color_NachoGreen;
            cellLefthandLabel.Font = A.Font_AvenirNextMedium14;
            inputBox.Add (cellLefthandLabel);

            textInput.Frame = new RectangleF (120, 0, inputBox.Frame.Width - 100, inputBox.Frame.Height);
            textInput.BackgroundColor = UIColor.White;
            textInput.Placeholder = placeHolder;
            textInput.Font = A.Font_AvenirNextRegular14;
            inputBox.Add (textInput);

            scrollView.Add (inputBox);
        }

        public void fillInKnownFields ()
        {
            if (LoginHelpers.IsCurrentAccountSet ()) {
                if (LoginHelpers.HasProvidedCreds (LoginHelpers.GetCurrentAccountId ())) {
                    emailText.Text = theAccount.Account.EmailAddr;
                    usernameText.Text = theAccount.Credentials.Username;
                    passwordText.Text = theAccount.Credentials.Password;
                    if (null != theAccount.Server) {
                        serverText.Text = theAccount.Server.Host;
                    }
                }
            }
        }

        public void loadSettingsForAccount ()
        {
            if (LoginHelpers.IsCurrentAccountSet ()) {
                if (LoginHelpers.HasProvidedCreds (LoginHelpers.GetCurrentAccountId ())) {
                    theAccount.Account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
                    theAccount.Credentials = McCred.QueryById<McCred> (theAccount.Account.CredId);
                    theAccount.Server = McServer.QueryById<McServer> (theAccount.Account.ServerId);
                }
            }
        }

        public void setUsersSettings ()
        {
            theAccount.Account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
            theAccount.Credentials = McCred.QueryById<McCred> (theAccount.Account.CredId); 

            // theAccount.Account = McAccount.QueryById<McAccount> (accountId);
            // McCred theCred = McCred.QueryById<McCred> (theAccount.Account.CredId); 
            //theAccount.Credentials = McCred.QueryById<McCred> (theAccount.Account.CredId);
            if (usernameText.Text.Length > 0) {
                theAccount.Credentials.Username = usernameText.Text;
            } else {
                theAccount.Credentials.Username = emailText.Text;
            }

            theAccount.Credentials.Password = passwordText.Text;
            theAccount.Credentials.Update ();
            theAccount.Account.CredId = theAccount.Credentials.Id;
            theAccount.Account.EmailAddr = emailText.Text;
            theAccount.Account.Update ();
        }

        public void  basicEnterFullConfiguration ()
        {
            string credUserName = "";
            NcModel.Instance.RunInTransaction (() => {
                // Need to regex-validate UI inputs.
                // You will always need to supply user credentials (until certs, for sure).
                if (usernameText.Text.Length == 0) {
                    credUserName = emailText.Text;
                } else {
                    credUserName = usernameText.Text;
                }
                var cred = new McCred () { Username = credUserName, Password = passwordText.Text };
                cred.Insert ();
                theAccount.Credentials = cred;
                int serverId = 0;
                if (haveEnteredHost () && isValidHost ()) {
                    var server = new McServer () { Host = serverText.Text };
                    server.Insert ();
                    serverId = server.Id;
                }
                // You will always need to supply the user's email address.
                appDelegate.Account = new McAccount () { EmailAddr = emailText.Text };
                // The account object is the "top", pointing to credential, server, and opaque protocol state.
                appDelegate.Account.CredId = cred.Id;
                appDelegate.Account.ServerId = serverId;
                appDelegate.Account.Insert ();
                theAccount.Account = appDelegate.Account;
                LoginHelpers.SetHasProvidedCreds (appDelegate.Account.Id, true);
            });

            startBe ();
            showWaitingView ();
        }

        public void tryAutoD ()
        {
            setUsersSettings ();
            startBe ();
        }

        public void tryValidateConfig ()
        {
            setUsersSettings ();
            serverToValidate = new McServer ();
            serverToValidate.Host = serverText.Text;
            BackEnd.Instance.ValidateConfig (LoginHelpers.GetCurrentAccountId (), serverToValidate, theAccount.Credentials);
        }

        public void setTextToRed (UITextField[] whichFields)
        {
            foreach (var textField in inputFields) {
                textField.TextColor = UIColor.Black;
                for (int i = 0; i < whichFields.Count (); i++) {
                    if (textField == whichFields [i]) {
                        textField.TextColor = A.Color_NachoRed;
                    }
                }
            }
        }

        public bool haveEnteredHost ()
        {
            if (0 == serverText.Text.Length) {
                return false;
            } else {
                return true;
            }
        }

        public bool hasNetworkConnection ()
        {
            if (NcCommStatus.Instance.Status != NetStatusStatusEnum.Up) {
                return false;
            } else {
                return true;
            }
        }

        public bool canUserConnect ()
        {
            if (!haveEnteredEmailAndPass ()) {
                setErrorMessage (errorMessageEnum.RequiredFields);
                return false;
            }

            if (!isValidEmail (emailText.Text)) {
                setErrorMessage (errorMessageEnum.InvalidEmail);
                return false;
            }

            if (!hasNetworkConnection ()) {
                setErrorMessage (errorMessageEnum.Network);
                return false;
            }
            return true;
        }

        bool isValidEmail (string email)
        {
            RegexUtilities regexUtil = new RegexUtilities ();
            return regexUtil.IsValidEmail (email);
        }

        public bool isValidHost ()
        {
            UriHostNameType hostnameURI = Uri.CheckHostName (serverText.Text);
            if (hostnameURI == UriHostNameType.Dns || hostnameURI == UriHostNameType.IPv4 || hostnameURI == UriHostNameType.IPv6) {
                return true;
            } else {
                UIAlertView badHost = new UIAlertView ();
                badHost.Title = "Bad Server Name";
                badHost.Message = "Please check that the server name is entered correctly.";
                badHost.AddButton ("Ok");
                badHost.Clicked += (object sender, UIButtonEventArgs e) => {
                };
                badHost.Show ();
                errorMessage.Text = "Invalid server name. Please check that you typed it in correctly.";
                setTextToRed (new UITextField[] { serverText });
                return false;
            }
        }

        public void stopBeIfRunning ()
        {
            BackEnd.Instance.Stop (LoginHelpers.GetCurrentAccountId ());
        }

        public void startBe ()
        {
            BackEnd.Instance.Stop (LoginHelpers.GetCurrentAccountId ());
            BackEnd.Instance.Start (LoginHelpers.GetCurrentAccountId ());
        }
        public virtual bool HandlesKeyboardNotifications {
            get { return true; }
        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {
                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;
                //Start an animation, using values from the keyboard
                UIView.BeginAnimations ("AnimateForKeyboard");
                UIView.SetAnimationBeginsFromCurrentState (true);
                UIView.SetAnimationDuration (UIKeyboard.AnimationDurationFromNotification (notification));
                UIView.SetAnimationCurve ((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification (notification));
                //Pass the notification, calculating keyboard height, etc.
                bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                if (visible) {
                    var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                } else {
                    var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                }
                //Commit the animation
                UIView.CommitAnimations (); 
            }
        }

        protected virtual void OnKeyboardChanged (bool visible, float height)
        {
            var newHeight = (visible ? height : 0);

            if (newHeight == keyboardHeight) {
                return;
            }
            keyboardHeight = newHeight;

            layoutView ();
        }

        public void setErrorMessage (errorMessageEnum whatType)
        {
            switch (whatType) {
            case errorMessageEnum.Credentials:
                errorMessage.Text = "There seems to be a problem with your credentials.";
                errorMessage.TextColor = A.Color_NachoRed;
                return;
            case errorMessageEnum.RequiredFields:
                errorMessage.Text = "You must enter an email address and password.";
                errorMessage.TextColor = A.Color_NachoRed;
                return;
            case errorMessageEnum.InvalidEmail:
                errorMessage.Text = "The email address you entered is not formatted correctly.";
                errorMessage.TextColor = A.Color_NachoRed;
                return;
            case errorMessageEnum.Certificate:
                errorMessage.Text = "Accept Certificate?";
                errorMessage.TextColor = A.Color_NachoGreen;
                return;
            case errorMessageEnum.Server:
                errorMessage.Text = "The server name you entered is not valid. Please fix and try again.";
                errorMessage.TextColor = A.Color_NachoRed;
                return;
            case errorMessageEnum.ServerConf:
                errorMessage.Text = "Looks like we had a problem finding '" + theAccount.Account.EmailAddr + "'.";
                errorMessage.TextColor = A.Color_NachoRed;
                return;
            case errorMessageEnum.FirstTime:
                errorMessage.Text = "Please fill out the required credentials.";
                errorMessage.TextColor = A.Color_NachoGreen;
                return;
            case errorMessageEnum.Username:
                errorMessage.Text = "There seems to be a problem with your user name.";
                errorMessage.TextColor = A.Color_NachoRed;
                return;
            case errorMessageEnum.Network:
                errorMessage.Text = "No network connection. Please check that you have internet access.";
                errorMessage.TextColor = A.Color_NachoRed;
                return;
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if (NcResult.SubKindEnum.Info_FolderSyncSucceeded == s.Status.SubKind) {
                LoginHelpers.SetFirstSyncCompleted (LoginHelpers.GetCurrentAccountId (), true);
                dismissWaitingView ();
                if (LoginHelpers.HasViewedTutorial (LoginHelpers.GetCurrentAccountId ())) {
                    PerformSegue ("AdvancedLoginToNachoNow", this);
                } else {
                    //FIXME Segue issues what type of Segue to use? No NavBar if coming from basic
                    PerformSegue ("AdvancedLoginToHome", this);
                }
            }
            if (NcResult.SubKindEnum.Info_AsAutoDComplete == s.Status.SubKind) {
                statusMessage.TextColor = systemBlue;
                statusMessage.Text = "Found Your Server...";
                theAccount.Server = McServer.QueryById<McServer> (1);
                serverText.Text = theAccount.Server.Host;
            }
            if (NcResult.SubKindEnum.Error_NetworkUnavailable == s.Status.SubKind) {
                setErrorMessage (errorMessageEnum.Network);
                setTextToRed (new UITextField[] { });
                dismissWaitingView ();
                //FIXME do we want to stop BE in this case?
                stopBeIfRunning ();
            }
            if (NcResult.SubKindEnum.Info_ValidateConfigSucceeded == s.Status.SubKind) {
                setTextToRed (new UITextField[] { });
                var account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
                if (0 == account.ServerId) {
                    serverToValidate.Insert ();
                    account.ServerId = serverToValidate.Id;
                    account.Update ();
                } else {
                    var server = McServer.QueryById<McServer> (account.ServerId);
                    serverToValidate.Id = server.Id;
                    serverToValidate.Update ();
                }
                loadSettingsForAccount ();
                startBe ();
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedComm == s.Status.SubKind) {
                setTextToRed (new UITextField[] { serverText });
                setErrorMessage (errorMessageEnum.Server);
                dismissWaitingView ();
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedAuth == s.Status.SubKind) {
                setErrorMessage (errorMessageEnum.Credentials);
                setTextToRed (new UITextField[] { usernameText, passwordText });
                dismissWaitingView ();
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedUser == s.Status.SubKind) {
                setErrorMessage (errorMessageEnum.Username);
                setTextToRed (new UITextField[] { usernameText });
                dismissWaitingView ();
            }
            if (NcResult.SubKindEnum.Error_ServerConfReqCallback == s.Status.SubKind) {
                setErrorMessage (errorMessageEnum.ServerConf);
                setTextToRed (new UITextField[] { emailText });
                dismissWaitingView ();
                stopBeIfRunning ();
            }
            if (NcResult.SubKindEnum.Info_CredReqCallback == s.Status.SubKind) {
                setErrorMessage (errorMessageEnum.Credentials);
                setTextToRed (new UITextField[] { usernameText, passwordText });
                dismissWaitingView ();
                stopBeIfRunning ();
            }
            if (NcResult.SubKindEnum.Error_CertAskReqCallback == s.Status.SubKind) {
                setErrorMessage (errorMessageEnum.Certificate);
                certificateCallbackHandler ();
            }
        }

        public void certificateCallbackHandler ()
        {
            string certificateInformation = "";
            var certToBeExamined = BackEnd.Instance.ServerCertToBeExamined (LoginHelpers.GetCurrentAccountId ());
            certificateInformation = CertificateHelper.formatCertificateData (certToBeExamined);
            createCustomCertificateAlert (certificateInformation);
        }

        public void acceptCertificate ()
        {
            NcApplication.Instance.CertAskResp (LoginHelpers.GetCurrentAccountId (), true);
        }

        public void dismissCustomCertificate ()
        {
            setTextToRed (new UITextField[] { });
            UIView grayBackground = View.ViewWithTag (GRAY_BACKGROUND_TAG);
            UIView customCertificateView = View.ViewWithTag (CUSTOM_CERTIFICATE_TAG);

            if (null != grayBackground) {
                grayBackground.RemoveFromSuperview ();
            }
            if (null != customCertificateView) {
                customCertificateView.RemoveFromSuperview ();
            }
        }

        //FIXME Only temporary until segues / Navigation controller issue gets taken care of
        public bool hasNavBar ()
        {
            if (null != NavigationController) {
                return true;
            } else {
                return false;
            }
        }

        public void createCustomCertificateAlert (string certInformation)
        {
            //FIXME Only temporary until segues / Navigation controller issue gets taken care of
            float SCREEN_HEIGHT;
            if (hasNavBar ()) {
                SCREEN_HEIGHT = UIScreen.MainScreen.Bounds.Height - 64f;
            } else {
                SCREEN_HEIGHT = UIScreen.MainScreen.Bounds.Height;
            }
            //Grey Background to mimic UIAlertView blurry background
            UIView greyBackground = new UIView (new System.Drawing.RectangleF (0, 0, View.Frame.Width, SCREEN_HEIGHT));
            greyBackground.Tag = GRAY_BACKGROUND_TAG;
            greyBackground.BackgroundColor = UIColor.DarkGray;
            greyBackground.Alpha = .4f;
            View.Add (greyBackground);

            //Create main certificate view container
            UIView certificateView = new UIView (new RectangleF (20, 20, View.Frame.Width - 40, SCREEN_HEIGHT - 40));
            certificateView.Tag = CUSTOM_CERTIFICATE_TAG;
            certificateView.BackgroundColor = UIColor.White;
            certificateView.Layer.CornerRadius = 7.0f;
            certificateView.Alpha = 1.0f;
            //Create title: Larger text at top of view
            UITextView certificateViewTitle = new UITextView (new System.Drawing.RectangleF (8, 2, certificateView.Frame.Width - 16, 40));
            certificateViewTitle.BackgroundColor = UIColor.White;
            certificateViewTitle.Alpha = 1.0f;
            certificateViewTitle.Font = UIFont.SystemFontOfSize (17);
            certificateViewTitle.TextColor = systemBlue;
            certificateViewTitle.Text = "Trust This Certifcate?";
            certificateViewTitle.TextAlignment = UITextAlignment.Center;
            certificateView.Add (certificateViewTitle);

            UILabel descriptionOfProblem = new UILabel (new RectangleF (15, 47, certificateView.Frame.Width - 30, 230));
            descriptionOfProblem.Text = "You have asked Nacho Mail to connect securely to a server but we can't confirm" +
            " that your connection is secure. \n\n Normally, when you try to connect securely, the server will present" +
            " trusted identification to prove that you are going to the right place.  However, this server's identity" +
            " can't be verified. \n\n If you usually connect to this site without problems, this problem could mean that" +
            " someone is trying to impersonate the server and you shouldn't continue.";
            descriptionOfProblem.TextColor = UIColor.Black;
            descriptionOfProblem.Font = A.Font_AvenirNextMedium12;
            descriptionOfProblem.Alpha = 1.0f;
            descriptionOfProblem.BackgroundColor = UIColor.White;
            descriptionOfProblem.Lines = 50;
            certificateView.Add (descriptionOfProblem);

            //Create certificate body: Main body of text giving all information about the certificate
            UITextView certificateInformation = new UITextView (new System.Drawing.RectangleF (15, 47 + 236, certificateView.Frame.Width - 30, certificateView.Frame.Height - 100 - 230 - 6));
            certificateInformation.BackgroundColor = UIColor.White;
            certificateInformation.TextColor = UIColor.Black;
            certificateInformation.Font = A.Font_AvenirNextRegular12;
            certificateInformation.Alpha = 1.0f;
            certificateInformation.TextAlignment = UITextAlignment.Left;
            certificateInformation.Text = certInformation;
            certificateView.Add (certificateInformation);

            //Create trust button: Button on bottom-left side of view that says "Trust"
            UIButton trustCertificateButton = new UIButton (new RectangleF (0, certificateView.Frame.Height - 44, certificateView.Frame.Width / 2, 44));
            trustCertificateButton.Layer.CornerRadius = 10.0f;
            trustCertificateButton.BackgroundColor = UIColor.White;
            trustCertificateButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            trustCertificateButton.SetTitle ("Trust", UIControlState.Normal);
            trustCertificateButton.TitleLabel.TextColor = systemBlue;
            trustCertificateButton.TouchUpInside += (object sender, EventArgs e) => {
                dismissCustomCertificate ();
                setErrorMessage (errorMessageEnum.FirstTime);
                acceptCertificate ();
            };
            certificateView.Add (trustCertificateButton);

            //Create cancel button: Button on bottom-right side of view that says "Cancel"
            UIButton dontTrustCertificateButton = new UIButton (new RectangleF (certificateView.Frame.Width / 2, certificateView.Frame.Height - 44, certificateView.Frame.Width / 2, 44));
            dontTrustCertificateButton.Layer.CornerRadius = 10.0f;
            dontTrustCertificateButton.BackgroundColor = UIColor.White;
            dontTrustCertificateButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            dontTrustCertificateButton.SetTitle ("Cancel", UIControlState.Normal);
            dontTrustCertificateButton.TitleLabel.TextColor = systemBlue;
            dontTrustCertificateButton.TouchUpInside += (object sender, EventArgs e) => {
                dismissCustomCertificate ();
                setErrorMessage (errorMessageEnum.FirstTime);
                dismissWaitingView();
            };
            certificateView.Add (dontTrustCertificateButton);

            UIView horizontalLineAboveButtons = new UIView (new RectangleF (0, certificateView.Frame.Height - 45, certificateView.Frame.Width, .5f));
            horizontalLineAboveButtons.BackgroundColor = UIColor.LightGray;
            certificateView.Add (horizontalLineAboveButtons);

            UIView verticalLineBetweenButtons = new UIView (new RectangleF (certificateView.Frame.Width / 2, certificateView.Frame.Height - 45, .5f, 45));
            verticalLineBetweenButtons.BackgroundColor = UIColor.LightGray;
            certificateView.Add (verticalLineBetweenButtons);

            UIView horizontalLineAfterDescriptionOfProblem = new UIView (new RectangleF (15, 47 + 236, certificateView.Frame.Width - 30, .5f));
            horizontalLineAfterDescriptionOfProblem.BackgroundColor = UIColor.LightGray;
            certificateView.Add (horizontalLineAfterDescriptionOfProblem);

            View.Add (certificateView);
        }

        public class AccountSettings
        {
            public string EmailAddress { get; set; }
            //public int AccountId { get; set; }
            //public int CredId { get; set; }
            public McAccount Account { get; set; }

            public McCred Credentials { get; set; }

            public McServer Server { get; set; }

            public AccountSettings ()
            {

            }
        }
    }
}
