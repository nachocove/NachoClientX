// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;

using Foundation;
using UIKit;

using NachoCore.Model;
using NachoCore.Utils;
using CoreGraphics;
using NachoCore;

namespace NachoClient.iOS
{
    public partial class NachoTabBarController : UITabBarController, IUINavigationControllerDelegate, ThemeAdopter
    {

        InboxViewController InboxViewController;
        FoldersViewController AllMailViewController;
        CalendarViewController CalendarViewController;
        ContactsViewController ContactsViewController;
        GeneralSettingsViewController SettingsViewController;
        ChatsViewController ChatsViewController;

        bool IsVisible = false;
        bool HasPendingLocalNotification = false;

        NSObject LocalNotificationListener;

        public NachoTabBarController () : base ()
        {
            LocalNotificationListener = NSNotificationCenter.DefaultCenter.AddObserver (NotificationsHandler.LocalNotificationReceivedNotificationName, HandleLocalNotificationReceivedNotification);
        }

        #region Theme

        Theme adoptedTheme;

        public void AdoptTheme (Theme theme)
        {
            if (theme != adoptedTheme) {
                adoptedTheme = theme;
                TabBar.Translucent = !theme.IsTabBarOpaque;
            }
        }

        #endregion

        #region View Lifecyle

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            InboxViewController = new InboxViewController () { IsLongLived = true };
            AllMailViewController = new FoldersViewController ();
            CalendarViewController = new CalendarViewController ();
            ContactsViewController = new ContactsViewController ();
            SettingsViewController = new GeneralSettingsViewController () { IsLongLived = true };

            //var nowNavController = CreateAccountSwitchingNavigationController (new NachoNowViewController () { IsLongLived = true });
            //nachoNowItem = nowNavController.TabBarItem = MakeTabBarItem ("Hot", "nav-hot");

            var inboxNavController = CreateAccountSwitchingNavigationController (InboxViewController);
            inboxNavController.TabBarItem = MakeTabBarItem (NSBundle.MainBundle.LocalizedString ("Inbox (main tab)", ""), "nav-inbox");

            var allMailNavController = CreateAccountSwitchingNavigationController (AllMailViewController);
            allMailNavController.TabBarItem = MakeTabBarItem (NSBundle.MainBundle.LocalizedString ("All Mail (main tab)", ""), "nav-mail");

            var calendarNavController = CreateAccountSwitchingNavigationController (CalendarViewController);
            calendarNavController.TabBarItem = MakeTabBarItem (NSBundle.MainBundle.LocalizedString ("Calendar (main tab)", ""), "nav-calendar");

            var contactsNavController = CreateAccountSwitchingNavigationController (ContactsViewController);
            contactsNavController.TabBarItem = MakeTabBarItem (NSBundle.MainBundle.LocalizedString ("Contacts (main tab)", ""), "nav-contacts");

            var settingsNavController = new UINavigationController (SettingsViewController);
            settingsNavController.TabBarItem = MakeTabBarItem (NSBundle.MainBundle.LocalizedString ("Settings (main tab)", ""), "more-settings");

            ViewControllers = new UIViewController [] {
                //nowNavController,
                inboxNavController,
                allMailNavController,
                calendarNavController,
                contactsNavController,
                settingsNavController
            };

            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
        }

        // Fires only when app starts; not on all fg events
        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            AdoptTheme (Theme.Active);
            UpdateSettingsBadge ();
            UpdateChatsBadge ();
            IsVisible = true;
            if (HasPendingLocalNotification) {
                HasPendingLocalNotification = false;
                HandleNotifications ();
            }
        }

        public override void ViewDidDisappear (bool animated)
        {
            IsVisible = false;
            base.ViewDidDisappear (animated);
        }

        #endregion

        #region Navigation Controller Delegate

        [Export ("navigationController:willShowViewController:animated:")]
        public void WillShowViewController (UINavigationController navigationController, UIViewController viewController, bool animated)
        {
            SwitchAccountControl accountSwitcher = null;
            bool showsAccountSwitcher = false;
            if (navigationController.NavigationBar is NachoNavigationBar) {
                var nachoBar = navigationController.NavigationBar as NachoNavigationBar;
                if (nachoBar.NavigationController == null) {
                    nachoBar.NavigationController = new WeakReference<UINavigationController> (navigationController);
                }
                accountSwitcher = nachoBar.AccountSwitcher;
                showsAccountSwitcher = viewController is IAccountSwitching;
            }
            if (accountSwitcher != null) {
                IUIViewControllerTransitionCoordinator coordinator = null;
                if (animated) {
                    coordinator = viewController.GetTransitionCoordinator ();
                }
                accountSwitcher.SetHidden (!showsAccountSwitcher, animationCoordinator: coordinator);
            }
        }

        #endregion

        #region Managing Tabs

        void SwitchTo (UIViewController rootViewController)
        {
            var navigationController = rootViewController.NavigationController;
            navigationController.PopToRootViewController (false);
            SelectedViewController = navigationController;
        }

        UINavigationController CreateAccountSwitchingNavigationController (UIViewController rootViewController)
        {
            var navController = new UINavigationController (typeof (NachoNavigationBar), typeof (UIToolbar));
            navController.ViewControllers = new UIViewController [] { rootViewController };
            navController.Delegate = this;
            return navController;
        }

        protected UITabBarItem MakeTabBarItem (string title, string imageName)
        {
            using (var image = UIImage.FromBundle (imageName).WithColor (Theme.Active.TabBarTintColor).ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal)) {
                using (var selectedImage = UIImage.FromBundle (imageName + "-active").ImageWithRenderingMode (UIImageRenderingMode.AlwaysTemplate)) {
                    return new UITabBarItem (title, image, selectedImage);
                }
            }
        }

        #endregion

        #region System Events

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            //if (NcResult.SubKindEnum.Info_StatusBarHeightChanged == s.Status.SubKind) {
            //    LayoutMoreTable ();
            //}
            if (NcResult.SubKindEnum.Info_UserInterventionFlagChanged == s.Status.SubKind) {
                UpdateSettingsBadge ();
            }
            if (NcResult.SubKindEnum.Error_PasswordWillExpire == s.Status.SubKind) {
                UpdateSettingsBadge ();
            }
            if (NcResult.SubKindEnum.Info_McCredPasswordChanged == s.Status.SubKind) {
                UpdateSettingsBadge ();
            }
            if (NcResult.SubKindEnum.Info_ChatMessageAdded == s.Status.SubKind || NcResult.SubKindEnum.Info_EmailMessageMarkedReadSucceeded == s.Status.SubKind || NcResult.SubKindEnum.Info_AccountChanged == s.Status.SubKind) {
                UpdateChatsBadge ();
            }
        }

        #endregion

        #region Tab Badging

        protected void UpdateSettingsBadge ()
        {
            var showNotificationBadge = LoginHelpers.ShouldAlertUser ();
            var settingsItem = SettingsViewController.NavigationController.TabBarItem;
            settingsItem.BadgeValue = (showNotificationBadge ? @"!" : null);
        }

        protected void UpdateChatsBadge ()
        {
            if (ChatsViewController != null) {
                var chatsItem = ChatsViewController.NavigationController.TabBarItem;
                int unreadCount = 0;
                if (NcApplication.Instance.Account.AccountType == McAccount.AccountTypeEnum.Unified) {
                    unreadCount = McChat.UnreadMessageCountForUnified ();
                } else {
                    unreadCount = McChat.UnreadMessageCountForAccount (NcApplication.Instance.Account.Id);
                }
                if (unreadCount > 0) {
                    chatsItem.BadgeValue = unreadCount.ToString ();
                } else {
                    chatsItem.BadgeValue = null;
                }
            }
        }

        #endregion

        #region Dealing with Notifications

        public void HandleLocalNotificationReceivedNotification (NSNotification notification)
        {
            if (IsVisible) {
                HandleNotifications ();
            } else {
                HasPendingLocalNotification = true;
            }
        }

        public void HandleNotifications ()
        {
            var eventNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NotificationsHandler.EventNotificationKey);
            var emailNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NotificationsHandler.EmailNotificationKey);
            var chatNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NotificationsHandler.ChatNotificationKey);
            var eventNotification = eventNotifications.FirstOrDefault ();
            var emailNotification = emailNotifications.FirstOrDefault ();
            var chatNotification = chatNotifications.FirstOrDefault ();
            if (null != eventNotification) {
                var eventId = int.Parse (eventNotification.Value);
                var e = McEvent.QueryById<McEvent> (eventId);
                eventNotification.Delete ();
                if (null != e) {
                    if (SwitchToObjectAccount (e)) {
                        ShowEvent (e);
                    }
                }
            }else if (null != emailNotification) {
                var messageId = int.Parse (emailNotification.Value);
                var m = McEmailMessage.QueryById<McEmailMessage> (messageId);
                emailNotification.Delete ();
                if (null != m) {
                    if (SwitchToObjectAccount (m)) {
                        ShowMessage (m);
                    }
                }
            }else if (null != chatNotification) {
                var parts = chatNotification.Value.Split (',');
                var chatId = int.Parse (parts [0]);
                var messageId = int.Parse (parts [1]);
                var chat = McChat.QueryById<McChat> (chatId);
                var message = McChatMessage.EmailMessageInChat (chatId, messageId);
                chatNotification.Delete ();
                if (null != chat && null != message && ChatsViewController != null) {
                    if (SwitchToObjectAccount (message)) {
                        ShowChat (chat);
                    }
                }
            }
        }

        bool SwitchToObjectAccount (McAbstrObjectPerAcc obj)
        {
            var notificationAccount = McAccount.QueryById<McAccount> (obj.AccountId);
            if (null == notificationAccount) {
                Log.Error (Log.LOG_UI, "MaybeSwitchToNotificationAccount: no account for {0}", obj.Id);
                return false;
            }
            if (NcApplication.Instance.Account.ContainsAccount (notificationAccount.Id)) {
                return true;
            }
            // We'll get a callback to SwitchToAccount
            NcApplication.Instance.Account = notificationAccount;
            return true;
        }

        #endregion

        #region Private Helpers

        void ShowMessage (McEmailMessage message)
        {
            SwitchTo (InboxViewController);
            InboxViewController.ShowMessage (message);
        }

        void ShowEvent (McEvent calendarEvent)
        {
            SwitchTo (CalendarViewController);
            CalendarViewController.ShowEvent (calendarEvent);
        }

        void ShowChat (McChat chat)
        {
            SwitchTo (ChatsViewController);
            ChatsViewController.ShowChat (chat);
        }

        #endregion
    }

    public static class UIView_Debugging
    {
        [System.Runtime.InteropServices.DllImport(ObjCRuntime.Constants.ObjectiveCLibrary, EntryPoint="objc_msgSend")]
        private static extern IntPtr IntPtr_objc_msgSend (IntPtr receiver, IntPtr selector);

        public static string RecursiveDescription (this UIView view)
        {
            return ((NSString)ObjCRuntime.Runtime.GetNSObject(IntPtr_objc_msgSend(view.Handle, new ObjCRuntime.Selector ("recursiveDescription").Handle))).ToString ();

        }
    }
}
