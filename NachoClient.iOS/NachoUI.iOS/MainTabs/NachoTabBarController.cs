// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;

using Foundation;
using UIKit;

using NachoCore.Model;
using NachoCore.Utils;
using CoreGraphics;
using NachoCore;

namespace NachoClient.iOS
{
    public partial class NachoTabBarController : UITabBarController, IUINavigationControllerDelegate, ThemeAdopter
    {
        protected static string TabBarOrderKey = "TabBarOrder";

        // UI elements needed to customize the "More" tab.
        protected UITableView moreTableView;
        protected UIScrollView moreScrollView;
        protected static NachoTabBarController instance;

        public NachoTabBarController () : base ()
        {
        }

        protected UITabBarItem nachoNowItem;
        protected UITabBarItem settingsItem;
        protected UITabBarItem foldersItem;
        protected UITabBarItem inboxItem;
        protected UITabBarItem chatsItem;

        #region Theme

        Theme adoptedTheme;

        public void AdoptTheme (Theme theme)
        {
            if (theme != adoptedTheme) {
                adoptedTheme = theme;
                TabBar.Translucent = !theme.IsTabBarOpaque;
            }
        }

        #endregion

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            //var nowNavController = CreateAccountSwitchingNavigationController (new NachoNowViewController () { IsLongLived = true });
            //nachoNowItem = nowNavController.TabBarItem = MakeTabBarItem ("Hot", "nav-hot");

            var inboxNavController = CreateAccountSwitchingNavigationController (new InboxViewController () { IsLongLived = true });
            inboxItem = inboxNavController.TabBarItem = MakeTabBarItem ("Inbox", "nav-inbox");

            var foldersNavController = CreateAccountSwitchingNavigationController (new FoldersViewController ());
            foldersItem = foldersNavController.TabBarItem = MakeTabBarItem ("All Mail", "nav-mail");

            var calendarNavController = CreateAccountSwitchingNavigationController (new CalendarViewController ());
            calendarNavController.TabBarItem = MakeTabBarItem ("Calendar", "nav-calendar");

            var contactsNavController = CreateAccountSwitchingNavigationController (new ContactListViewController ());
            contactsNavController.TabBarItem = MakeTabBarItem ("Contacts", "nav-contacts");

            var settingsNavController = new UINavigationController (new GeneralSettingsViewController () { IsLongLived = true });
            settingsItem = settingsNavController.TabBarItem = MakeTabBarItem ("Settings", "more-settings");

            ViewControllers = new UIViewController[] {
                //nowNavController,
                inboxNavController,
                foldersNavController,
                calendarNavController,
                contactsNavController,
                settingsNavController
            };

            instance = this;

            ViewControllerSelected += ViewControllerSelectedHandler;
            ShouldSelectViewController += ViewControllerShouldSelectHandler;

            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;

            // This code is for testing purposes only.  It must never be compiled as part of a product build.
            // Change "#if false" to "#if true" when you want to run this code in the simulator, then discard
            // the change when you are done testing.  The committed version of the file must always have
            // "#if false".
            #if false
            var existingControllers = new List<UIViewController> (ViewControllers);
            existingControllers.Add (new ManageItemsViewController ());
            ViewControllers = existingControllers.ToArray ();
            // Use the same icons as the Settings tab.
            SetTabBarItem ("NachoClient.iOS.ManageItemsViewController", "Manage", "more-settings", "more-settings-active");
            #endif
        }

        UINavigationController CreateAccountSwitchingNavigationController (UIViewController rootViewController)
        {
            var navController = new UINavigationController (typeof(NachoNavigationBar), typeof(UIToolbar));
            navController.ViewControllers = new UIViewController[] { rootViewController };
            navController.Delegate = this;
            return navController;
        }

        [Export ("navigationController:willShowViewController:animated:")]
        public void WillShowViewController (UINavigationController navigationController, UIViewController viewController, bool animated)
        {
            SwitchAccountControl accountSwitcher = null;
            bool showsAccountSwitcher = false;
            if (navigationController.NavigationBar is NachoNavigationBar) {
                var nachoBar = navigationController.NavigationBar as NachoNavigationBar;
                if (nachoBar.NavigationController == null) {
                    nachoBar.NavigationController = new WeakReference<UINavigationController> (navigationController);
                }
                accountSwitcher = nachoBar.AccountSwitcher;
                showsAccountSwitcher = viewController is IAccountSwitching;
            }
            if (accountSwitcher != null){
                IUIViewControllerTransitionCoordinator coordinator = null;
                if (animated) {
                    coordinator = viewController.GetTransitionCoordinator ();
                }
                accountSwitcher.SetHidden (!showsAccountSwitcher, animationCoordinator: coordinator);
            }
        }
            

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            AdoptTheme (Theme.Active);
            UpdateNotificationBadge ();
            UpdateChatsBadge ();
        }

        // Fires only when app starts; not on all fg events
        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            View.BackgroundColor = A.Color_NachoGreen;

            var eventNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.EventNotificationKey);
            if (0 != eventNotifications.Count) {
                Log.Info (Log.LOG_UI, "NachoTabBarController: SwitchToNachoNow for event notification");
                SwitchToNachoNow ();
            }

            var emailNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.EmailNotificationKey);
            if (0 != emailNotifications.Count) {
                Log.Info (Log.LOG_UI, "NachoTabBarController: SwitchToNachoNow for email notification");
                SwitchToNachoNow ();
            }

            var chatNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.ChatNotificationKey);
            if (0 != chatNotifications.Count) {
                Log.Info (Log.LOG_UI, "NachoTabBarController: SwitchToNachoNow for chat notification");
                SwitchToNachoNow ();
            }
        }

        protected UINavigationController FindTabRoot (UITabBarItem item)
        {
            foreach (var viewController in ViewControllers) {
                if (item == viewController.TabBarItem) {
                    var vc = (UINavigationController)viewController;
                    return vc;
                }
            }
            return null;
        }

        protected UIViewController FindViewController (UINavigationController vc)
        {
            foreach (var v in vc.ViewControllers) {
                if (v is NachoNowViewController) {
                    return v;
                }
            }
            return null;
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            //if (NcResult.SubKindEnum.Info_StatusBarHeightChanged == s.Status.SubKind) {
            //    LayoutMoreTable ();
            //}
            if (NcResult.SubKindEnum.Info_UserInterventionFlagChanged == s.Status.SubKind) {
                UpdateNotificationBadge ();
            }
            if (NcResult.SubKindEnum.Error_PasswordWillExpire == s.Status.SubKind) {
                UpdateNotificationBadge ();
            }
            if (NcResult.SubKindEnum.Info_McCredPasswordChanged == s.Status.SubKind) {
                UpdateNotificationBadge ();
            }
            if (NcResult.SubKindEnum.Info_ChatMessageAdded == s.Status.SubKind || NcResult.SubKindEnum.Info_EmailMessageMarkedReadSucceeded == s.Status.SubKind || NcResult.SubKindEnum.Info_AccountChanged == s.Status.SubKind) {
                UpdateChatsBadge ();
            }
        }

        public void SwitchToNachoNow ()
        {
            var navigationController = FindTabRoot (nachoNowItem);
            if (0 == navigationController.ViewControllers.Length) {
                navigationController = MoreNavigationController;
            }
            var nachoNowViewController = (NachoNowViewController)FindViewController (navigationController);
            this.SelectedViewController = navigationController;
            if (null != nachoNowViewController) {
                Log.Info (Log.LOG_UI, "SwitchToNachoNow HandleNotifications");
                nachoNowViewController.HandleNotifications ();
            } else {
                Log.Info (Log.LOG_UI, "SwitchToNachoNow view controller is null");
            }
        }

        void SwitchTo (UITabBarItem item)
        {
            var tab = FindTabRoot (item);
            tab.PopToRootViewController (false);
            this.SelectedViewController = tab;
        }

        public void SwitchToFolders ()
        {
            SwitchTo (foldersItem);
        }

        public void SwitchToInbox ()
        {
            SwitchTo (inboxItem);
        }

        protected string GetTabBarItemTypeName (UIViewController vc)
        {
            if (vc is UINavigationController) {
                return ((UINavigationController)vc).TopViewController.GetType ().ToString ();
            } else {
                return vc.GetType ().ToString ();
            }
        }

        protected void SaveCustomTabBarOrder (UITabBarCustomizeChangeEventArgs e)
        {
            if (e.Changed) {
                var tabOrderArray = new List<String> ();
                foreach (var viewController in e.ViewControllers) {
                    tabOrderArray.Add (GetTabBarItemTypeName (viewController));                  
                }
                NSArray stringArray = NSArray.FromStrings (tabOrderArray.ToArray ());
                NSUserDefaults.StandardUserDefaults [TabBarOrderKey] = stringArray;
            }
        }

        protected void RestoreCustomTabBarOrder ()
        {
            var tabBarOrder = NSUserDefaults.StandardUserDefaults.StringArrayForKey (TabBarOrderKey);
            if (null == tabBarOrder) {
                return;
            }
            var orderedNameList = new List<string> (tabBarOrder);
            if (!orderedNameList.Contains ("NachoClient.iOS.ChatsViewController")) {
                if (orderedNameList.Count > 2) {
                    orderedNameList.Insert (2, "NachoClient.iOS.ChatsViewController");
                } else {
                    orderedNameList.Add ("NachoClient.iOS.ChatsViewController");
                }
                NSUserDefaults.StandardUserDefaults [TabBarOrderKey] = NSArray.FromStrings (orderedNameList.ToArray ());
            }
            var initialList = ViewControllers;
            var orderedList = new List<UIViewController> ();
            foreach (var typeName in orderedNameList) {
                for (int i = 0; i < initialList.Length; i++) {
                    var vc = initialList [i];
                    if ((null != vc) && (typeName == GetTabBarItemTypeName (vc))) {
                        orderedList.Add (vc);
                        initialList [i] = null;
                    }
                }
            }
            foreach (var vc in initialList) {
                if (null != vc) {
                    orderedList.Add (vc);
                }
            }
            ViewControllers = orderedList.ToArray ();
        }

        protected UITabBarItem MakeTabBarItem (string title, string imageName)
        {
            using (var image = UIImage.FromBundle (imageName).WithColor(Theme.Active.TabBarTintColor).ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal)) {
                using (var selectedImage = UIImage.FromBundle (imageName + "-active").ImageWithRenderingMode (UIImageRenderingMode.AlwaysTemplate)) {
                    return new UITabBarItem (title, image, selectedImage);
                }
            }
        }

        protected bool IsItemVisible (UITabBarItem item)
        {
            nint visibleItems = 5; // default

            if (null != moreTableView) {
                visibleItems = ViewControllers.Length - moreTableView.NumberOfRowsInSection (0);
            }

            for (int i = 0; i < ViewControllers.Length; i++) {
                if (ViewControllers [i].TabBarItem == item) {
                    return (i < visibleItems);
                }
            }
            return false;
        }

        protected void UpdateNotificationBadge ()
        {
            var showNotificationBadge = LoginHelpers.ShouldAlertUser ();

            settingsItem.BadgeValue = (showNotificationBadge ? @"!" : null);

            if (MoreNavigationController != null) {
                if (!IsItemVisible (settingsItem)) {
                    MoreNavigationController.TabBarItem.BadgeValue = (showNotificationBadge ? @"!" : null);
                } else {
                    MoreNavigationController.TabBarItem.BadgeValue = null;
                }
            }
        }

        protected void UpdateChatsBadge ()
        {
            if (chatsItem != null) {
                int unreadCount = 0;
                if (NcApplication.Instance.Account.AccountType == McAccount.AccountTypeEnum.Unified) {
                    unreadCount = McChat.UnreadMessageCountForUnified ();
                } else {
                    unreadCount = McChat.UnreadMessageCountForAccount (NcApplication.Instance.Account.Id);
                }
                if (unreadCount > 0) {
                    chatsItem.BadgeValue = unreadCount.ToString ();
                } else {
                    chatsItem.BadgeValue = null;
                }
            }
        }

        protected void InsertAccountInfoIntoMoreTab ()
        {
            var moreTabController = MoreNavigationController.TopViewController;

            moreTableView = (UITableView)moreTabController.View;
            moreTableView.TintColor = A.Color_NachoGreen;

            moreTableView.ScrollEnabled = false;

            moreScrollView = new UIScrollView (View.Frame);

            moreScrollView.BackgroundColor = A.Color_NachoBackgroundGray;

            moreTableView.Frame = new CGRect (
                A.Card_Horizontal_Indent, A.Card_Vertical_Indent,
                moreScrollView.Frame.Width - 2 * A.Card_Horizontal_Indent, moreScrollView.Bounds.Height - 2 * A.Card_Vertical_Indent);
            moreTableView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth;
            moreTableView.Layer.CornerRadius = A.Card_Corner_Radius;
            moreTableView.Layer.MasksToBounds = true;
            moreTableView.Layer.BorderWidth = A.Card_Border_Width;
            moreTableView.Layer.BorderColor = A.Card_Border_Color;

            moreScrollView.AddSubview (moreTableView);
            moreTabController.View = moreScrollView;

            LayoutMoreTable ();
        }

        // ViewDidAppear is not reliable
        protected void LayoutMoreTable ()
        {
            if (null != moreTableView) {
                var tableHeight = (moreTableView.NumberOfRowsInSection (0) * 44);
                moreTableView.Frame = new CGRect (moreTableView.Frame.X, moreTableView.Frame.Y, moreTableView.Frame.Width, tableHeight);
            }

            moreScrollView.ContentSize = new CGSize (moreScrollView.Bounds.Width, moreTableView.Frame.Bottom + A.Card_Vertical_Indent);
        }

        protected void ViewControllerSelectedHandler (object sender, UITabBarSelectionEventArgs e)
        {
            if (e.ViewController == MoreNavigationController) {
                LayoutMoreTable ();
                // Tweak the table cells to be closer to what we want.  We would like to
                // make other changes, but this event is triggered at the wrong time, so
                // those other changes won't stick.  The one change that does seem to stick
                // is to hide the arrow on the right side of the cell.
                foreach (var cell in ((UITableView)moreTableView).VisibleCells) {
                    if (3 == cell.Subviews.Length && cell.Subviews [2] is UIButton) {
                        cell.Subviews [2].Hidden = true;
                        cell.TextLabel.Font = A.Font_AvenirNextMedium14;
                    }
                }
            }
        }

        protected bool ViewControllerShouldSelectHandler (UITabBarController tabBarController, UIViewController viewController)
        {
            if (viewController == MoreNavigationController) {
                // The user has tapped on the "More" tab in the tab bar.
                // Pop all pushed subviews so the "More" menu is on top.
                MoreNavigationController.PopToRootViewController (false);
            }
            return true;
        }
            
    }

    public static class UIView_Debugging
    {
        [System.Runtime.InteropServices.DllImport(ObjCRuntime.Constants.ObjectiveCLibrary, EntryPoint="objc_msgSend")]
        private static extern IntPtr IntPtr_objc_msgSend (IntPtr receiver, IntPtr selector);

        public static string RecursiveDescription (this UIView view)
        {
            return ((NSString)ObjCRuntime.Runtime.GetNSObject(IntPtr_objc_msgSend(view.Handle, new ObjCRuntime.Selector ("recursiveDescription").Handle))).ToString ();

        }
    }
}
