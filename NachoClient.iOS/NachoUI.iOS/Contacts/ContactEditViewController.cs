// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using CoreGraphics;
using Foundation;
using UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using MimeKit;
using System.Text.RegularExpressions;
using NachoCore.ActiveSync;

namespace NachoClient.iOS
{
    public partial class ContactEditViewController : NcUIViewControllerNoLeaks, INachoLabelChooserParent
    {
        protected enum BlockType
        {
            Phone,
            Email,
            None,
            Misc,
            Date,
            Address,
            IMAddress,
            Relationship,
        }

        public enum ControllerType
        {
            Add,
            Edit,
        }

        public ControllerType controllerType = ControllerType.Edit;

        protected BlockType editingBlockType;

        protected nfloat moreButtonIndent;
        protected static readonly nfloat HORIZONTAL_INDENT = 30;
        protected nfloat CELL_HEIGHT = 44;

        //////////////////////////////////////////////////////////////////////////////////////////////////////
        /// If you add a new editable field, make sure you update CompareContactsOnEditableFields() as well
        //////////////////////////////////////////////////////////////////////////////////////////////////////
        protected List<PhoneCell> phoneCellList = new List<PhoneCell> ();
        protected List<EmailCell> emailCellList = new List<EmailCell> ();
        protected List<DateCell> dateCellList = new List<DateCell> ();
        protected List<AddressCell> addressCellList = new List<AddressCell> ();
        protected List<IMAddressCell> imAddressCellList = new List<IMAddressCell> ();
        protected List<RelationshipCell> relationshipCellList = new List<RelationshipCell> ();
        protected List<MiscCell> miscCellList = new List<MiscCell> ();

        protected PhoneCell editingPhoneCell;
        protected EmailCell editingEmailCell;
        protected DateCell editingDateCell;
        protected AddressCell editingAddressCell;
        protected IMAddressCell editingIMAddressCell;
        protected RelationshipCell editingRelationshipCell;
        protected MiscCell editingMiscCell;

        protected UIBarButtonItem cancelButton;
        protected UIBarButtonItem doneButton;

        public McContact contact;
        public McAccount account;
        protected McContact contactCopy;

        protected nfloat yOffset;

        protected const int HEADER_INITIALS_CIRCLE_TAG = 100;
        protected const int HEADER_PORTRAIT_TAG = 101;
        protected const int HEADER_NAME_TEXT_FIELD_TAG = 102;
        protected const int HEADER_TITLE_TEXT_FIELD_TAG = 103;
        protected const int HEADER_COMPANY_TEXT_FIELD = 104;

        protected const int HEADER_VIEW_TAG = 106;
        protected const int HEADER_COMPANY_VIEW_TAG = 108;
        protected const int HEADER_NAME_EDIT_VIEW_TAG = 109;

        protected const int FIRST_NAME_TAG = 1;
        protected const int MIDDLE_NAME_TAG = 2;
        protected const int LAST_NAME_TAG = 3;
        protected const int HEADER_MORE_BUTTON = 4;
        protected const int SUFFIX_TAG = 5;

        protected const int MORE_VIEW_DEFAULT_BUTTON_TAG = 1000;
        protected const int MORE_VIEW_DELETE_BUTTON_TAG = 2000;

        UIScrollView scrollView;
        UIView contentView;

        protected UILabel contactNameLabel;
        protected UITextField firstNameField;
        protected UITextField middleNameField;
        protected UITextField lastNameField;
        protected UITextField suffixField;

        /// PhoneView Section
        protected UIView phoneView;
        protected UIButton addPhoneButton;

        /// EmailView Section
        protected UIView emailView;
        protected UIButton addEmailButton;

        //NameView Section
        protected UIView nameView;
        protected UIButton addNameButton;

        //DateView section
        protected UIView dateView;
        protected UIButton addDateButton;
        protected bool shouldScrollToDateView = false;

        //Address section
        protected UIView addressView;
        protected UIButton addAddressButton;
        protected bool shouldScrollToAddressView = false;

        //IMAddress section
        protected UIView imAddressView;
        protected UIButton addIMAddressButton;

        //Relationship section
        protected UIView relationshipView;
        protected UIButton addRelationshipButton;

        //Misc. section
        protected UIView miscView;
        protected UIButton addMiscButton;

        //Notes Section
        protected UIView notesView;
        protected UITextView notesTextView;

        //Delete section
        protected UIButton deleteContactButton;

        //MoreView section
        protected UIView theMoreView;
        protected UIView viewCover;

        public override void ViewDidLoad ()
        {
            scrollView = new UIScrollView (View.Bounds);
            contentView = new UIView (scrollView.Bounds);
            scrollView.AddSubview (contentView);
            View.AddSubview (scrollView);

            moreButtonIndent = View.Frame.Width - 40;

            switch (controllerType) {
            case ControllerType.Edit:
                CopyOriginalContact ();
                break;
            case ControllerType.Add:
                CreateNewContact ();
                break;
            }

            base.ViewDidLoad ();
        }

        public ContactEditViewController () : base ()
        {
        }

        public ContactEditViewController (IntPtr handle) : base (handle)
        {
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        protected string GetDisplayNameFromCopy ()
        {
            var name = contactCopy.GetDisplayName ();
            return string.IsNullOrEmpty (name) ? "" : name;
        }

        protected override void CreateViewHierarchy ()
        {
            nfloat internalOffset = 0;

            cancelButton = new NcUIBarButtonItem ();
            using (var image = UIImage.FromBundle ("icn-close")) {
                cancelButton.Image = image;
            }
            cancelButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Cancel", "");
            cancelButton.Clicked += CancelButtonClicked;
            cancelButton.TintColor = A.Color_NachoBlue;
            NavigationItem.SetLeftBarButtonItem (cancelButton, true);

            switch (controllerType) {
            case ControllerType.Add:
                NavigationItem.Title = NSBundle.MainBundle.LocalizedString ("Add Contact (title)", "View title when adding a new contact");
                break;
            case ControllerType.Edit:
                NavigationItem.Title = NSBundle.MainBundle.LocalizedString ("Edit Contact (title)", "View title when editing a contact");
                break;
            }

            doneButton = new NcUIBarButtonItem ();
            doneButton.Title = NSBundle.MainBundle.LocalizedString ("Save", "");
            doneButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Save", "");
            doneButton.Clicked += DoneButtonClicked;
            NavigationItem.SetRightBarButtonItem (doneButton, true);

            contentView.BackgroundColor = A.Color_NachoBackgroundGray;
            scrollView.BackgroundColor = A.Color_NachoBackgroundGray;
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;

            scrollView.AddSubview (contentView);
            View.AddSubview (scrollView);

            phoneView = new UIView (new CGRect (0, 0, 0, 0));
            emailView = new UIView (new CGRect (0, 0, 0, 0));
            dateView = new UIView (new CGRect (0, 0, 0, 0));

            yOffset = A.Card_Vertical_Indent;

            contactNameLabel = new UILabel (new CGRect (HORIZONTAL_INDENT, yOffset, View.Frame.Width - (HORIZONTAL_INDENT * 2), 16));
            contactNameLabel.Font = A.Font_AvenirNextDemiBold17;
            contactNameLabel.TextColor = A.Color_NachoBlack;
            contactNameLabel.TextAlignment = UITextAlignment.Left;
            contactNameLabel.Tag = HEADER_NAME_TEXT_FIELD_TAG;
            contactNameLabel.Text = GetDisplayNameFromCopy ();
            contentView.AddSubview (contactNameLabel);

            yOffset = contactNameLabel.Frame.Bottom + 10;

            UIView headerView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 110));
            headerView.BackgroundColor = UIColor.White;
            headerView.Layer.BorderColor = A.Card_Border_Color;
            headerView.Layer.BorderWidth = A.Card_Border_Width;
            headerView.Tag = HEADER_VIEW_TAG;
            contentView.AddSubview (headerView);

            UILabel initialsCircleLabel = new UILabel (new CGRect (HORIZONTAL_INDENT, 18, 60, 60));
            initialsCircleLabel.Font = A.Font_AvenirNextRegular24;
            initialsCircleLabel.BackgroundColor = A.Color_NachoLightText;
            initialsCircleLabel.TextColor = UIColor.White;
            initialsCircleLabel.TextAlignment = UITextAlignment.Center;
            initialsCircleLabel.LineBreakMode = UILineBreakMode.Clip;
            initialsCircleLabel.Layer.CornerRadius = HORIZONTAL_INDENT;
            initialsCircleLabel.Layer.MasksToBounds = true;
            initialsCircleLabel.Layer.BorderColor = A.Card_Border_Color;
            initialsCircleLabel.Layer.BorderWidth = A.Card_Border_Width;
            initialsCircleLabel.Tag = HEADER_INITIALS_CIRCLE_TAG;
            headerView.AddSubview (initialsCircleLabel);

            UIImageView userImageView = new UIImageView (new CGRect (HORIZONTAL_INDENT, 18, 60, 60));
            userImageView.Layer.BorderColor = A.Card_Border_Color;
            userImageView.Layer.BorderWidth = A.Card_Border_Width;
            userImageView.Layer.CornerRadius = HORIZONTAL_INDENT;
            userImageView.Layer.MasksToBounds = true;
            userImageView.Tag = HEADER_PORTRAIT_TAG;
            userImageView.Hidden = true;
            headerView.AddSubview (userImageView);

            UIView headerNameEditView = new UIView (new CGRect (initialsCircleLabel.Frame.Right + 26, 0, View.Frame.Width - 115, (CELL_HEIGHT * 4)));
            headerNameEditView.BackgroundColor = UIColor.White;
            headerNameEditView.Tag = HEADER_NAME_EDIT_VIEW_TAG;
            headerNameEditView.Hidden = false;

            firstNameField = new UITextField (new CGRect (0, 18, headerNameEditView.Frame.Width, 16));
            firstNameField.Font = A.Font_AvenirNextMedium14;
            firstNameField.TextColor = A.Color_NachoGreen;
            firstNameField.TextAlignment = UITextAlignment.Left;
            firstNameField.Placeholder = NSBundle.MainBundle.LocalizedString ("First Name", "");
            firstNameField.Tag = FIRST_NAME_TAG;
            firstNameField.ShouldChangeCharacters += NameChanged;
            firstNameField.EditingDidEnd += NameEditingEnded;
            firstNameField.ShouldReturn += NameFieldReturn;
            headerNameEditView.AddSubview (firstNameField);

            Util.AddHorizontalLine (0, firstNameField.Frame.Bottom + 10, headerNameEditView.Frame.Width, A.Color_NachoBorderGray, headerNameEditView);

            middleNameField = new UITextField (new CGRect (0, firstNameField.Frame.Bottom + 28, headerNameEditView.Frame.Width, 16));
            middleNameField.Font = A.Font_AvenirNextMedium14;
            middleNameField.TextColor = A.Color_NachoGreen;
            middleNameField.TextAlignment = UITextAlignment.Left;
            middleNameField.Placeholder = NSBundle.MainBundle.LocalizedString ("Middle Name", "");
            middleNameField.Tag = MIDDLE_NAME_TAG;
            middleNameField.ShouldChangeCharacters += NameChanged;
            middleNameField.EditingDidEnd += NameEditingEnded;
            middleNameField.ShouldReturn += NameFieldReturn;
            headerNameEditView.AddSubview (middleNameField);

            Util.AddHorizontalLine (0, middleNameField.Frame.Bottom + 10, headerNameEditView.Frame.Width, A.Color_NachoBorderGray, headerNameEditView);

            lastNameField = new UITextField (new CGRect (0, middleNameField.Frame.Bottom + 28, headerNameEditView.Frame.Width, 16));
            lastNameField.Font = A.Font_AvenirNextMedium14;
            lastNameField.TextColor = A.Color_NachoGreen;
            lastNameField.TextAlignment = UITextAlignment.Left;
            lastNameField.Tag = LAST_NAME_TAG;
            lastNameField.Placeholder = NSBundle.MainBundle.LocalizedString ("Last Name", "");
            lastNameField.ShouldChangeCharacters += NameChanged;
            lastNameField.EditingDidEnd += NameEditingEnded;
            lastNameField.ShouldReturn += NameFieldReturn;
            headerNameEditView.AddSubview (lastNameField);
            Util.AddHorizontalLine (0, lastNameField.Frame.Bottom + 10, headerNameEditView.Frame.Width, A.Color_NachoBorderGray, headerNameEditView);

            suffixField = new UITextField (new CGRect (0, lastNameField.Frame.Bottom + 28, headerNameEditView.Frame.Width, 16));
            suffixField.Font = A.Font_AvenirNextMedium14;
            suffixField.TextColor = A.Color_NachoGreen;
            suffixField.TextAlignment = UITextAlignment.Left;
            suffixField.Tag = SUFFIX_TAG;
            suffixField.Placeholder = NSBundle.MainBundle.LocalizedString ("Suffix", "");
            suffixField.ShouldChangeCharacters += NameChanged;
            suffixField.EditingDidEnd += NameEditingEnded;
            suffixField.ShouldReturn += NameFieldReturn;
            headerNameEditView.AddSubview (suffixField);

            Util.AddHorizontalLine (0, suffixField.Frame.Bottom + 8, headerNameEditView.Frame.Width, A.Color_NachoBorderGray, headerNameEditView);

            headerView.AddSubview (headerNameEditView);

            UIView headerCompanyView = new UIView (new CGRect (initialsCircleLabel.Frame.Right + 26, headerNameEditView.Frame.Bottom, 204, CELL_HEIGHT));
            headerCompanyView.BackgroundColor = UIColor.White;
            headerCompanyView.Tag = HEADER_COMPANY_VIEW_TAG;
            headerView.AddSubview (headerCompanyView);

            UITextField headerCompanyTextField = new UITextField (new CGRect (0, 14, 204, 16));
            headerCompanyTextField.Font = A.Font_AvenirNextMedium14;
            headerCompanyTextField.TextColor = A.Color_NachoGreen;
            headerCompanyTextField.TextAlignment = UITextAlignment.Left;
            headerCompanyTextField.Tag = HEADER_COMPANY_TEXT_FIELD;
            headerCompanyTextField.SpellCheckingType = UITextSpellCheckingType.No;
            headerCompanyTextField.Placeholder = NSBundle.MainBundle.LocalizedString ("Company", "");
            headerCompanyTextField.EditingDidEnd += CompanyEditingEnded;
            headerCompanyView.AddSubview (headerCompanyTextField);

            yOffset = headerView.Frame.Bottom + A.Card_Vertical_Indent;

            phoneView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 200));
            phoneView.BackgroundColor = UIColor.White;
            contentView.AddSubview (phoneView);

            addPhoneButton = AddNewButton (NSBundle.MainBundle.LocalizedString ("Add Phone", "Button title for adding a contact phone"), AddPhoneTouchUpInside, phoneView);

            foreach (var p in contactCopy.PhoneNumbers) {
                PhoneCell phone = new PhoneCell (internalOffset, this, p);
                phoneCellList.Add (phone);
                phoneView.AddSubview (phone);
                internalOffset += CELL_HEIGHT;
            }
            phoneCellList.Sort ();
            yOffset = phoneView.Frame.Bottom + A.Card_Vertical_Indent;

            emailView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 200));
            emailView.BackgroundColor = UIColor.White;
            addEmailButton = AddNewButton (NSBundle.MainBundle.LocalizedString ("Add Email", "Button title for adding a contact email"), AddEmailTouchUpInside, emailView);
            contentView.AddSubview (emailView);

            internalOffset = 0;
            foreach (var e in contactCopy.EmailAddresses) {
                EmailCell eCell = new EmailCell (internalOffset, this, e);
                emailCellList.Add (eCell);
                emailView.AddSubview (eCell);
                internalOffset += CELL_HEIGHT;
            }
            yOffset = emailView.Frame.Bottom + 20;

            dateView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 200));
            dateView.BackgroundColor = UIColor.White;
            contentView.AddSubview (dateView);

            addDateButton = AddNewButton (NSBundle.MainBundle.LocalizedString ("Add Date", "Button title for adding a contact date"), AddDateTouchUpInside, dateView);

            internalOffset = 0;
            foreach (var d in contactCopy.Dates) {
                DateCell dCell = new DateCell (internalOffset, this, d);
                dateCellList.Add (dCell);
                dateView.AddSubview (dCell);
                internalOffset += CELL_HEIGHT;
            }
            yOffset = dateView.Frame.Bottom + 20;

            addressView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 200));
            addressView.BackgroundColor = UIColor.White;
            contentView.AddSubview (addressView);

            addAddressButton = AddNewButton (NSBundle.MainBundle.LocalizedString ("Add Address", "Button title for adding a contact address"), AddAddressTouchUpInside, addressView);

            internalOffset = 0;
            foreach (var a in contactCopy.Addresses) {
                AddressCell aCell = new AddressCell (internalOffset, this, a);
                addressCellList.Add (aCell);
                addressView.AddSubview (aCell);
                internalOffset += CELL_HEIGHT;
            }
            yOffset = addressView.Frame.Bottom + 20;

            imAddressView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 200));
            imAddressView.BackgroundColor = UIColor.White;
            contentView.AddSubview (imAddressView);

            addIMAddressButton = AddNewButton (NSBundle.MainBundle.LocalizedString ("Add IM Address", "Button title for adding a contact IM address"), AddIMAddressTouchUpInside, imAddressView);

            internalOffset = 0;
            foreach (var im in contactCopy.IMAddresses) {
                IMAddressCell imCell = new IMAddressCell (internalOffset, this, im);
                imAddressCellList.Add (imCell);
                imAddressView.AddSubview (imCell);
                internalOffset += CELL_HEIGHT;
            }
            yOffset = imAddressView.Frame.Bottom + 20;

            relationshipView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 200));
            relationshipView.BackgroundColor = UIColor.White;
            contentView.AddSubview (relationshipView);

            addRelationshipButton = AddNewButton (NSBundle.MainBundle.LocalizedString ("Add Relationship", "Button title for adding a contact relationship"), AddRelationshipTouchUpInside, relationshipView);

            internalOffset = 0;
            foreach (var r in contactCopy.Relationships) {
                RelationshipCell rCell = new RelationshipCell (internalOffset, this, r);
                relationshipCellList.Add (rCell);
                relationshipView.AddSubview (rCell);
                internalOffset += CELL_HEIGHT;
            }

            yOffset = relationshipView.Frame.Bottom + 20;

            miscView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 200));
            miscView.BackgroundColor = UIColor.White;
            contentView.AddSubview (miscView);

            addMiscButton = AddNewButton (NSBundle.MainBundle.LocalizedString ("Add Other", "Button title for adding a contact other field"), AddMiscTouchUpInside, miscView);

            internalOffset = 0;
            foreach (var taken in ContactsHelper.GetTakenMiscNames (contactCopy)) {
                MiscCell mCell = new MiscCell (internalOffset, this, taken, ContactsHelper.MiscContactAttributeNameToValue (taken, contactCopy));
                miscCellList.Add (mCell);
                miscView.AddSubview (mCell);
                internalOffset += CELL_HEIGHT;
            }

            yOffset = miscView.Frame.Bottom + 20;

            notesView = new UIView (new CGRect (0, yOffset, View.Frame.Width, CELL_HEIGHT * 4));
            notesView.BackgroundColor = UIColor.White;
            contentView.AddSubview (notesView);

            UILabel notesLabel = new UILabel (new CGRect (27, 8, 100, 15));
            notesLabel.Text = NSBundle.MainBundle.LocalizedString ("Notes (contact edit)", "Section header for notes on contact edit page");
            notesLabel.TextColor = UIColor.DarkGray;
            notesLabel.Font = A.Font_AvenirNextMedium14;
            notesLabel.SizeToFit ();
            notesView.AddSubview (notesLabel);

            var line = Util.AddHorizontalLine (28, notesLabel.Frame.Bottom + 3, notesView.Frame.Width - 28, A.Color_NachoBackgroundGray);
            notesView.AddSubview (line);

            notesTextView = new UITextView (new CGRect (22, line.Frame.Bottom + 2, View.Frame.Width - 60, notesView.Frame.Height - (line.Frame.Bottom + 10)));
            notesTextView.Font = A.Font_AvenirNextMedium14;
            notesTextView.TextColor = A.Color_NachoGreen;
            notesTextView.TextAlignment = UITextAlignment.Left;
            notesTextView.AutocapitalizationType = UITextAutocapitalizationType.None;
            notesTextView.AutocorrectionType = UITextAutocorrectionType.No;
            notesTextView.Text = GetNotesText ();
            notesView.AddSubview (notesTextView);

            yOffset = notesView.Frame.Bottom + CELL_HEIGHT;

            deleteContactButton = new UIButton (new CGRect (0, yOffset, View.Frame.Width, CELL_HEIGHT));
            deleteContactButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Delete", "");
            deleteContactButton.BackgroundColor = UIColor.White;
            deleteContactButton.TouchUpInside += DeleteContactButtonTouchUpInside;
            contentView.AddSubview (deleteContactButton);

            UIImageView deleteContactIcon = new UIImageView (UIImage.FromBundle ("email-delete"));
            deleteContactIcon.Frame = new CGRect (25, 10, deleteContactIcon.Frame.Width, deleteContactIcon.Frame.Height);
            deleteContactButton.AddSubview (deleteContactIcon);

            UILabel deleteContactLabel = new UILabel (new CGRect (deleteContactIcon.Frame.Right + 10, 14, 150, 16));
            deleteContactLabel.Text = NSBundle.MainBundle.LocalizedString ("Delete Contact", "Button title for deleting a contact");
            deleteContactLabel.Font = A.Font_AvenirNextMedium14;
            deleteContactLabel.TextAlignment = UITextAlignment.Left;
            deleteContactLabel.TextColor = A.Color_NachoGreen;
            deleteContactButton.AddSubview (deleteContactLabel);

            yOffset = deleteContactButton.Frame.Bottom + 20;

            viewCover = new UIView (View.Frame);
            viewCover.BackgroundColor = UIColor.Clear;
            viewCover.Hidden = true;
            viewCover.UserInteractionEnabled = true;
            UITapGestureRecognizer viewCoverTapped = new UITapGestureRecognizer (() => ToggleMoreView ());
            viewCover.AddGestureRecognizer (viewCoverTapped);
            contentView.AddSubview (viewCover);

            theMoreView = MoreView ();
            contentView.AddSubview (theMoreView);
        }

        protected void LayoutView ()
        {
            UIView headerView = (UIView)View.ViewWithTag (HEADER_VIEW_TAG);
            UIView headerNameEditView = (UIView)headerView.ViewWithTag (HEADER_NAME_EDIT_VIEW_TAG);
            UIView headerCompanyView = (UIView)headerView.ViewWithTag (HEADER_COMPANY_VIEW_TAG);

            AdjustY (headerCompanyView, headerNameEditView.Frame.Bottom);
            SetViewHeight (headerView, headerCompanyView.Frame.Bottom);

            if (null != phoneView) {
                AdjustY (phoneView, headerView.Frame.Bottom + 20);
                SetViewHeight (phoneView, (phoneCellList.Count + 1) * CELL_HEIGHT);
                AdjustY (addPhoneButton, phoneCellList.Count * CELL_HEIGHT);
                ShiftCells (BlockType.Phone);
                yOffset = phoneView.Frame.Bottom + 20;
            }

            if (null != emailView) {
                AdjustY (emailView, phoneView.Frame.Bottom + 20);
                SetViewHeight (emailView, (emailCellList.Count + 1) * CELL_HEIGHT);
                AdjustY (addEmailButton, emailCellList.Count * CELL_HEIGHT);
                ShiftCells (BlockType.Email);
                yOffset = emailView.Frame.Bottom + 20;
            }

            if (null != dateView) {
                AdjustY (dateView, emailView.Frame.Bottom + 20);

                nfloat off = 0;
                foreach (var d in dateCellList) {
                    AdjustY (d, off);
                    off += d.Frame.Height;
                }
                AdjustY (addDateButton, off);
                SetViewHeight (dateView, addDateButton.Frame.Bottom);
                yOffset = dateView.Frame.Bottom + 20;
            }

            if (null != addressView) {
                AdjustY (addressView, dateView.Frame.Bottom + 20);
                nfloat off = 0;
                foreach (var ac in addressCellList) {
                    AdjustY (ac, off);
                    off += ac.Frame.Height;
                }
                AdjustY (addAddressButton, off);
                SetViewHeight (addressView, addAddressButton.Frame.Bottom);
                yOffset = addressView.Frame.Bottom + 20;
            }


            if (null != imAddressView && null != addIMAddressButton) {
                AdjustY (imAddressView, addressView.Frame.Bottom + 20);
                AdjustY (addIMAddressButton, imAddressCellList.Count * CELL_HEIGHT);
                SetViewHeight (imAddressView, addIMAddressButton.Frame.Bottom);
                ShiftCells (BlockType.IMAddress);
                yOffset = imAddressView.Frame.Bottom + 20;
            }

            if (null != relationshipView && null != relationshipView) {
                AdjustY (relationshipView, imAddressView.Frame.Bottom + 20);
                AdjustY (addRelationshipButton, relationshipCellList.Count * CELL_HEIGHT);
                SetViewHeight (relationshipView, addRelationshipButton.Frame.Bottom);
                ShiftCells (BlockType.Relationship);
                yOffset = relationshipView.Frame.Bottom + 20;
            }

            if (null != miscView && null != miscView) {
                AdjustY (miscView, relationshipView.Frame.Bottom + 20);
                AdjustY (addMiscButton, miscCellList.Count * CELL_HEIGHT);
                SetViewHeight (miscView, addMiscButton.Frame.Bottom);
                ShiftCells (BlockType.Misc);
                yOffset = miscView.Frame.Bottom + 20;
            }

            if (null != notesView) {
                AdjustY (notesView, yOffset);
                yOffset = notesView.Frame.Bottom + 20;
            }

            if (null != deleteContactButton) {
                if (!deleteContactButton.Hidden) {
                    AdjustY (deleteContactButton, yOffset);
                    yOffset = deleteContactButton.Frame.Bottom + 20;
                }
            }

            scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            contentView.Frame = new CGRect (0, 0, View.Frame.Width, yOffset);
            scrollView.ContentSize = contentView.Frame.Size;

            if (null != theMoreView) {
                if (!theMoreView.Hidden) {
                    scrollView.ScrollRectToVisible (theMoreView.Frame, true);
                }
            }

            if (shouldScrollToDateView) {
                var tempFrame = dateView.Frame;
                tempFrame.Y += editingDateCell.dateView.Frame.Y;
                scrollView.ScrollRectToVisible (tempFrame, true);
                shouldScrollToDateView = false;
            }

            if (shouldScrollToAddressView) {
                scrollView.ScrollRectToVisible (addressView.Frame, true);
                shouldScrollToAddressView = false;
            }

            if (null != notesView) {
                if (notesTextView.IsFirstResponder) {
                    var tempFrame = notesView.Frame;
                    tempFrame.Y += 100;
                    scrollView.ScrollRectToVisible (tempFrame, true);
                }
            }
        }

        protected void NameEditingEnded (object sender, EventArgs e)
        {
            contactCopy.FirstName = firstNameField.Text.Trim ();
            contactCopy.MiddleName = middleNameField.Text.Trim ();
            contactCopy.LastName = lastNameField.Text.Trim ();
            contactCopy.Suffix = suffixField.Text.Trim ();
            ConfigureAndLayout ();
        }

        protected bool NameFieldReturn (UITextField whatField)
        {
            switch (whatField.Tag) {
            case FIRST_NAME_TAG:
                middleNameField.BecomeFirstResponder ();
                break;
            case MIDDLE_NAME_TAG:
                lastNameField.BecomeFirstResponder ();
                break;
            case LAST_NAME_TAG:
                suffixField.BecomeFirstResponder ();
                break;
            case SUFFIX_TAG:
                suffixField.ResignFirstResponder ();
                break;
            }
            return true;
        }

        protected bool NameChanged (UITextField whatField, NSRange range, string replacement)
        {
            string firstName = firstNameField.Text;
            string middleName = middleNameField.Text;
            string lastName = lastNameField.Text;
            string suffix = suffixField.Text;

            switch (whatField.Tag) {
            case FIRST_NAME_TAG:
                if (string.IsNullOrEmpty (replacement)) {
                    firstName = firstName.Remove ((int)range.Location, 1);
                } else {
                    firstName += replacement;
                }
                break;
            case MIDDLE_NAME_TAG:
                if (string.IsNullOrEmpty (replacement)) {
                    middleName = middleName.Remove ((int)range.Location, 1);
                } else {
                    middleName += replacement;
                }
                break;
            case LAST_NAME_TAG:
                if (string.IsNullOrEmpty (replacement)) {
                    lastName = lastName.Remove ((int)range.Location, 1);
                } else {
                    lastName += replacement;
                }
                break;
            case SUFFIX_TAG:
                if (string.IsNullOrEmpty (replacement)) {
                    suffix = suffix.Remove ((int)range.Location, 1);
                } else {
                    suffix += replacement;
                }
                break;
            }
            contactNameLabel.Text =
                firstName +
            (middleName.Length > 0 ? " " : "") +
            middleName +
            (lastName.Length > 0 ? " " : "") +
            lastName +
            " " + suffix;
            return true;
        }

        protected void CompanyEditingEnded (object sender, EventArgs e)
        {
            UITextField companyField = (UITextField)View.ViewWithTag (HEADER_COMPANY_TEXT_FIELD);
            contactCopy.CompanyName = companyField.Text;
        }

        protected UIButton AddNewButton (string title, EventHandler action, UIView parent)
        {
            UIButton addButton = new UIButton (new CGRect (0, parent.Frame.Bottom, View.Frame.Width, CELL_HEIGHT));
            addButton.AccessibilityLabel = title;
            addButton.BackgroundColor = UIColor.White;
            addButton.TouchUpInside += action;
            parent.AddSubview (addButton);

            UILabel addLabel = new UILabel (new CGRect (28, 14, 150, 16));
            addLabel.Text = title;
            addLabel.Font = A.Font_AvenirNextMedium14;
            addLabel.TextAlignment = UITextAlignment.Left;
            addLabel.TextColor = A.Color_NachoGreen;
            addButton.AddSubview (addLabel);

            UIImageView addIcon = new UIImageView (UIImage.FromBundle ("email-add"));
            addIcon.Frame = new CGRect (moreButtonIndent + 8, 14, addIcon.Frame.Width, addIcon.Frame.Height);
            addButton.AddSubview (addIcon);

            return addButton;
        }

        protected void CreateNewContact ()
        {
            contactCopy = new McContact ();
            contactCopy.AccountId = account.Id;
            contactCopy.Source = McAbstrItem.ItemSource.ActiveSync;
        }

        protected void CopyOriginalContact ()
        {
            contactCopy = new McContact ();
            contactCopy.AccountId = contact.AccountId;
            contactCopy.Source = contact.Source;
            ContactsHelper.CopyContact (contact, ref contactCopy);
        }

        protected void SetViewHeight (UIView view, nfloat height)
        {
            var frame = view.Frame;
            frame.Height = height;
            view.Frame = frame;
        }

        public void SelectLabel (List<string> labelList)
        {
            var destinationController = new LabelSelectionViewController ();

            destinationController.SetLabelList (labelList);
            switch (editingBlockType) {
            case BlockType.Phone:
                destinationController.SetSelectedName (editingPhoneCell.phoneAttribute.Name);
                break;
            case BlockType.Email:
                destinationController.SetSelectedName (editingEmailCell.emailAttribute.Name);
                break;
            case BlockType.Date:
                destinationController.SetSelectedName (editingDateCell.dateAttribute.Name);
                break;
            case BlockType.Address:
                destinationController.SetSelectedName (editingAddressCell.addressAttribute.Name);
                break;
            case BlockType.IMAddress:
                destinationController.SetSelectedName (editingIMAddressCell.imAddressAttribute.Name);
                break;
            case BlockType.Relationship:
                destinationController.SetSelectedName (editingRelationshipCell.relationshipAttribute.Name);
                break;
            case BlockType.Misc:
                destinationController.SetSelectedName (editingMiscCell.Name);
                break;
            }
            destinationController.SetOwner (this, contactCopy.AccountId);
            PresentViewController (destinationController, true, null);
        }

        protected override void OnKeyboardChanged ()
        {
            LayoutView ();
        }

        public void PrepareForDismissal (string selectedLabel)
        {
            switch (editingBlockType) {
            case BlockType.Phone:
                editingPhoneCell.phoneAttribute.Name = selectedLabel;
                editingPhoneCell.phoneAttribute.Label = ContactsHelper.ExchangeNameToLabel (selectedLabel);
                editingPhoneCell.ConfigureView ();
                break;
            case BlockType.Email:
                editingEmailCell.emailAttribute.Name = selectedLabel;
                editingEmailCell.emailAttribute.Label = ContactsHelper.ExchangeNameToLabel (selectedLabel);
                editingEmailCell.ConfigureView ();
                break;
            case BlockType.Date:
                editingDateCell.dateAttribute.Name = selectedLabel;
                editingDateCell.dateAttribute.Label = ContactsHelper.ExchangeNameToLabel (selectedLabel);
                editingDateCell.ConfigureView ();
                break;
            case BlockType.Address:
                editingAddressCell.addressAttribute.Name = selectedLabel;
                editingAddressCell.addressAttribute.Label = ContactsHelper.ExchangeNameToLabel (selectedLabel);
                editingAddressCell.ConfigureView ();
                break;
            case BlockType.IMAddress:
                editingIMAddressCell.imAddressAttribute.Name = selectedLabel;
                editingIMAddressCell.imAddressAttribute.Label = ContactsHelper.ExchangeNameToLabel (selectedLabel);
                editingIMAddressCell.ConfigureView ();
                break;
            case BlockType.Relationship:
                editingRelationshipCell.relationshipAttribute.Name = selectedLabel;
                editingRelationshipCell.relationshipAttribute.Label = ContactsHelper.ExchangeNameToLabel (selectedLabel);
                editingRelationshipCell.ConfigureView ();
                break;
            case BlockType.Misc:
                ClearPreviousValue (editingMiscCell);
                editingMiscCell.Name = selectedLabel;
                SetUpdatedValue (editingMiscCell);
                editingMiscCell.ConfigureView ();
                break;
            }
            return;
        }

        protected void ClearPreviousValue (MiscCell forCell)
        {
            switch (forCell.Name) {
            case Xml.Contacts.Alias:
                contactCopy.Alias = null;
                break;
            case Xml.Contacts.Department:
                contactCopy.Department = null;
                break;
            case Xml.Contacts.FileAs:
                contactCopy.FileAs = null;
                break;
            case Xml.Contacts.JobTitle:
                contactCopy.JobTitle = null;
                break;
            case Xml.Contacts.OfficeLocation:
                contactCopy.OfficeLocation = null;
                break;
            case Xml.Contacts.Title:
                contactCopy.Title = null;
                break;
            case Xml.Contacts.WebPage:
                contactCopy.WebPage = null;
                break;
            case Xml.Contacts2.AccountName:
                contactCopy.AccountName = null;
                break;
            case Xml.Contacts2.CustomerId:
                contactCopy.CustomerId = null;
                break;
            case Xml.Contacts2.GovernmentId:
                contactCopy.GovernmentId = null;
                break;
            case Xml.Contacts2.MMS:
                contactCopy.MMS = null;
                break;
            case Xml.Contacts2.NickName:
                contactCopy.NickName = null;
                break;
            default:
                Log.Warn (Log.LOG_UI, "Clearing unknown contact misc. field {0}", forCell.Name);
                break;
            }
        }

        protected void CancelButtonClicked (object sender, EventArgs e)
        {
            View.EndEditing (true);

            McContact origContact = contact;
            if (null == origContact) {
                origContact = new McContact ();
            }
            if (!McContact.CompareOnEditableFields (origContact, contactCopy)) {
                NcAlertView.Show (this, NSBundle.MainBundle.LocalizedString ("Discard Changes? (contact)", "Confirmation message title when discarding contact edits"), NSBundle.MainBundle.LocalizedString ("Going back will discard your changes. Are you sure?", "Confirmation message when discarding contact edits"),
                    new NcAlertAction (NSBundle.MainBundle.LocalizedString ("Cancel", ""), NcAlertActionStyle.Cancel, null),
                    new NcAlertAction (NSBundle.MainBundle.LocalizedString ("Yes", ""), NcAlertActionStyle.Destructive, () => {
                        NavigationController.PopViewController (true);
                    }));
            } else {
                NavigationController.PopViewController (true);
            }
        }

        private bool HasInvalidEmail ()
        {
            bool badEmailFlag = false;
            foreach (var e in emailCellList) {
                if ((!string.IsNullOrEmpty (e.editField.Text)) &&
                    (!new RegexUtilities ().IsValidEmail (e.editField.Text))) {
                    e.editField.TextColor = A.Color_NachoRed;
                    badEmailFlag = true;
                }
            }
            return badEmailFlag;
        }

        protected void DoneButtonClicked (object sender, EventArgs e)
        {
            View.EndEditing (true);
            foreach (var d in dateCellList) {
                if (!d.dateView.Hidden) {
                    d.Dismiss ();
                }
            }
            bool hasData = UpdateContact ();
            if (HasInvalidEmail ()) {
                NcAlertView.ShowMessage (this, NSBundle.MainBundle.LocalizedString ("Incorrect E-mail Address", ""),
                    NSBundle.MainBundle.LocalizedString ("At least one of the e-mail addresses is in an invalid format.", ""));
                LayoutView ();
            } else if (!hasData) {
                // nothing added
                NcAlertView.ShowMessage (this, NSBundle.MainBundle.LocalizedString ("Nothing To Save", ""),
                    NSBundle.MainBundle.LocalizedString ("No data. There is nothing to save.", ""));
                LayoutView ();
            } else {
                switch (controllerType) {
                case ControllerType.Edit:
                    NcModel.Instance.RunInTransaction (() => {
                        SaveNotesText ();
                        contact.DeleteAncillary ();
                        contact.Addresses.Clear ();
                        contact.Categories.Clear ();
                        contact.EmailAddresses.Clear ();
                        contact.Relationships.Clear ();
                        contact.PhoneNumbers.Clear ();
                        contact.IMAddresses.Clear ();
                        contact.Dates.Clear ();
                        ContactsHelper.CopyContact (contactCopy, ref contact);
                        contact.Update ();
                    });
                    NachoCore.BackEnd.Instance.UpdateContactCmd (contact.AccountId, contact.Id);
                    NachoCore.Index.Indexer.Instance.Add (contact);
                    break;
                case ControllerType.Add:
                    SaveNotesText ();
                    contactCopy.Insert ();
                    McFolder f = McFolder.GetDefaultContactFolder (contactCopy.AccountId);
                    f.Link (contactCopy);
                    NachoCore.BackEnd.Instance.CreateContactCmd (contactCopy.AccountId, contactCopy.Id, f.Id);
                    break;
                }
                Log.Info (Log.LOG_CONTACTS, "CallDirectory needs update becaue of UI save");
                CallDirectory.Instance.RequestUpdate ();
                NavigationController.PopViewController (true);
            }
        }

        protected void SaveNotesText ()
        {
            McBody contactBody = McBody.QueryById<McBody> (contactCopy.BodyId);
            if (null != contactBody) {
                contactBody.UpdateData (notesTextView.Text);
            } else {
                contactCopy.BodyId = McBody.InsertFile (contactCopy.AccountId, McAbstrFileDesc.BodyTypeEnum.PlainText_1, notesTextView.Text).Id;
            }
        }

        protected string GetNotesText ()
        {
            McBody contactBody = McBody.QueryById<McBody> (contactCopy.BodyId);
            if (null != contactBody) {
                return contactBody.GetContentsString ();
            }
            return "";
        }

        protected void SetUpdatedValue (MiscCell forCell)
        {
            switch (forCell.Name) {
            case Xml.Contacts.Alias:
                contactCopy.Alias = editingMiscCell.Value;
                break;
            case Xml.Contacts.Department:
                contactCopy.Department = editingMiscCell.Value;
                break;
            case Xml.Contacts.FileAs:
                contactCopy.FileAs = editingMiscCell.Value;
                break;
            case Xml.Contacts.JobTitle:
                contactCopy.JobTitle = editingMiscCell.Value;
                break;
            case Xml.Contacts.OfficeLocation:
                contactCopy.OfficeLocation = editingMiscCell.Value;
                break;
            case Xml.Contacts.Title:
                contactCopy.Title = editingMiscCell.Value;
                break;
            case Xml.Contacts.WebPage:
                contactCopy.WebPage = editingMiscCell.Value;
                break;
            case Xml.Contacts2.AccountName:
                contactCopy.AccountName = editingMiscCell.Value;
                break;
            case Xml.Contacts2.CustomerId:
                contactCopy.CustomerId = editingMiscCell.Value;
                break;
            case Xml.Contacts2.GovernmentId:
                contactCopy.GovernmentId = editingMiscCell.Value;
                break;
            case Xml.Contacts2.MMS:
                contactCopy.MMS = editingMiscCell.Value;
                break;
            case Xml.Contacts2.NickName:
                contactCopy.NickName = editingMiscCell.Value;
                break;
            default:
                Log.Warn (Log.LOG_UI, "Setting unknown contact misc. field {0}", forCell.Name);
                break;
            }
        }

        protected bool UpdateContact ()
        {
            bool hasData = false;
            foreach (var p in phoneCellList) {
                if (string.IsNullOrEmpty (p.editField.Text)) {
                    contactCopy.PhoneNumbers.Remove (p.phoneAttribute);
                } else {
                    p.phoneAttribute.Value = p.editField.Text;
                    hasData = true;
                }
            }
            foreach (var e in emailCellList) {
                if (string.IsNullOrEmpty (e.editField.Text)) {
                    contactCopy.EmailAddresses.Remove (e.emailAttribute);
                } else if (new RegexUtilities ().IsValidEmail (e.editField.Text)) {
                    e.emailAttribute.Value = e.editField.Text;
                    hasData = true;
                    McEmailAddress email = McEmailAddress.QueryById<McEmailAddress> (e.emailAttribute.EmailAddress);
                    if (null == email) {
                        contactCopy.EmailAddresses.Remove (e.emailAttribute);
                        e.emailAttribute = contactCopy.AddEmailAddressAttribute (
                            e.emailAttribute.AccountId,
                            e.emailAttribute.Name,
                            e.emailAttribute.Label,
                            e.emailAttribute.Value
                        );
                    }
                }
            }

            foreach (var d in dateCellList) {
                if (DateTime.MinValue == d.dateAttribute.Value) {
                    contactCopy.Dates.Remove (d.dateAttribute);
                } else {
                    hasData = true;
                }
            }

            foreach (var im in imAddressCellList) {
                if (string.IsNullOrEmpty (im.editField.Text)) {
                    contactCopy.IMAddresses.Remove (im.imAddressAttribute);
                } else {
                    hasData = true;
                }
            }

            foreach (var r in relationshipCellList) {
                if (string.IsNullOrEmpty (r.editField.Text)) {
                    contactCopy.Relationships.Remove (r.relationshipAttribute);
                } else {
                    r.relationshipAttribute.Value = r.editField.Text;
                    hasData = true;
                }
            }

            foreach (var m in miscCellList) {
                if (string.IsNullOrEmpty (m.editField.Text)) {
                    editingMiscCell = m;
                    ClearPreviousValue (m);
                } else {
                    m.Value = m.editField.Text;
                    editingMiscCell = m;
                    SetUpdatedValue (m);
                    hasData = true;
                }
            }
            if (((contactCopy.FirstName != null) && (contactCopy.FirstName != "")) ||
                ((contactCopy.MiddleName != null) && (contactCopy.MiddleName != "")) ||
                ((contactCopy.LastName != null) && (contactCopy.LastName != "")) ||
                ((contactCopy.Suffix != null) && (contactCopy.Suffix != "")) ||
                ((contactCopy.CompanyName != null) && (contactCopy.CompanyName != "")) ||
                ((contactCopy.Alias != null) && (contactCopy.Alias != "")) ||
                ((contactCopy.Department != null) && (contactCopy.Department != "")) ||
                ((contactCopy.FileAs != null) && (contactCopy.FileAs != "")) ||
                ((contactCopy.JobTitle != null) && (contactCopy.JobTitle != "")) ||
                ((contactCopy.OfficeLocation != null) && (contactCopy.OfficeLocation != "")) ||
                ((contactCopy.Title != null) && (contactCopy.Title != "")) ||
                ((contactCopy.WebPage != null) && (contactCopy.WebPage != "")) ||
                ((contactCopy.AccountName != null) && (contactCopy.AccountName != "")) ||
                ((contactCopy.CustomerId != null) && (contactCopy.CustomerId != "")) ||
                ((contactCopy.GovernmentId != null) && (contactCopy.GovernmentId != "")) ||
                ((contactCopy.MMS != null) && (contactCopy.MMS != "")) ||
                ((contactCopy.NickName != null) && (contactCopy.NickName != "")) ||
                ((contactCopy.YomiCompanyName != null) && (contactCopy.YomiCompanyName != "")) ||
                ((contactCopy.YomiFirstName != null) && (contactCopy.YomiFirstName != "")) ||
                ((contactCopy.YomiLastName != null) && (contactCopy.YomiLastName != ""))) {
                hasData = true;
            }
            return hasData;
        }

        protected void DeleteContactButtonTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);

            NcAlertView.Show (this, NSBundle.MainBundle.LocalizedString ("Delete Contact (title)", "Title for alert confirmation when deleting contact"),
                NSBundle.MainBundle.LocalizedString ("Are you sure that you want to delete this contact? This operation cannot be undone.", "Message for confirmation when deleting contact"),
                new NcAlertAction (NSBundle.MainBundle.LocalizedString ("Cancel", ""), NcAlertActionStyle.Cancel, null),
                new NcAlertAction (NSBundle.MainBundle.LocalizedString ("Delete", ""), NcAlertActionStyle.Destructive, () => {
                    BackEnd.Instance.DeleteContactCmd (contact.AccountId, contact.Id);
                    NavigationController.PopToRootViewController (true);
                }));
        }

        protected void AddPhoneTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);

            if (0 == ContactsHelper.GetAvailablePhoneNames (contactCopy).Count) {
                DisplayNoMoreSlotsAlert ("Phones", "Phone");
                return;
            }

            var phoneAttribute = contactCopy.AddOrUpdatePhoneNumberAttribute (contactCopy.AccountId,
                                     ContactsHelper.GetAvailablePhoneNames (contactCopy).First (),
                                     ContactsHelper.ExchangeNameToLabel (ContactsHelper.GetAvailablePhoneNames (contactCopy).First ()),
                                     ""
                                 );
            PhoneCell newPhoneCell = new PhoneCell (phoneCellList.Count * CELL_HEIGHT, this, phoneAttribute);
            phoneCellList.Add (newPhoneCell);
            phoneView.AddSubview (newPhoneCell);

            LayoutView ();
        }

        protected void AddEmailTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);

            if (0 == ContactsHelper.GetAvailableEmailNames (contactCopy).Count) {
                DisplayNoMoreSlotsAlert ("Emails", "Email");
                return;
            }

            var emailAttribute = contactCopy.AddOrUpdateEmailAddressAttribute (contactCopy.AccountId,
                                     ContactsHelper.GetAvailableEmailNames (contactCopy).First (),
                                     ContactsHelper.ExchangeNameToLabel (ContactsHelper.GetAvailableEmailNames (contactCopy).First ()),
                                     ""
                                 );
            EmailCell newEmailCell = new EmailCell (emailCellList.Count * CELL_HEIGHT, this, emailAttribute);
            emailCellList.Add (newEmailCell);
            emailView.AddSubview (newEmailCell);

            LayoutView ();
        }

        protected void AddDateTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);

            if (0 == ContactsHelper.GetAvailableDateNames (contactCopy).Count) {
                DisplayNoMoreSlotsAlert ("Dates", "Dates");
                return;
            }

            var dateAttribute = contactCopy.AddDateAttribute (contactCopy.AccountId,
                                    ContactsHelper.GetAvailableDateNames (contactCopy).First (),
                                    ContactsHelper.GetAvailableDateNames (contactCopy).First (),
                                    DateTime.Now);
            DateCell newDateCell = new DateCell (dateCellList.Count * CELL_HEIGHT, this, dateAttribute);
            dateCellList.Add (newDateCell);
            dateView.AddSubview (newDateCell);

            LayoutView ();
        }

        protected void AddAddressTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);

            if (0 == ContactsHelper.GetAvailableAddressNames (contactCopy).Count) {
                DisplayNoMoreSlotsAlert ("Addresses", "Address");
                return;
            }


            var addressAttribute = new McContactAddressAttribute ();
            addressAttribute.AccountId = contactCopy.AccountId;
            addressAttribute.Name = ContactsHelper.GetAvailableAddressNames (contactCopy).First ();
            addressAttribute.Label = ContactsHelper.GetAvailableAddressNames (contactCopy).First ();

            addressAttribute = contactCopy.AddAddressAttribute (addressAttribute.AccountId,
                addressAttribute.Name,
                addressAttribute.Label,
                addressAttribute);
            AddressCell addressCell = new AddressCell (addressCellList.Count * CELL_HEIGHT, this, addressAttribute);
            addressCellList.Add (addressCell);
            addressView.AddSubview (addressCell);

            yOffset += CELL_HEIGHT;

            shouldScrollToAddressView = true;
            LayoutView ();
        }

        protected void AddIMAddressTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);

            if (0 == ContactsHelper.GetAvailableIMAddressNames (contactCopy).Count) {
                DisplayNoMoreSlotsAlert ("Addresses", "Address");
                return;
            }

            var imAddressAttribute = contactCopy.AddIMAddressAttribute (contactCopy.AccountId,
                                         ContactsHelper.GetAvailableIMAddressNames (contactCopy).First (),
                                         ContactsHelper.ExchangeNameToLabel (ContactsHelper.GetAvailableIMAddressNames (contactCopy).First ()),
                                         "");
            IMAddressCell imAddressCell = new IMAddressCell (imAddressCellList.Count * CELL_HEIGHT, this, imAddressAttribute);
            imAddressCellList.Add (imAddressCell);
            imAddressView.AddSubview (imAddressCell);

            LayoutView ();
        }



        protected void AddRelationshipTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);

            if (0 == ContactsHelper.GetAvailableRelationshipNames (contactCopy).Count) {
                DisplayNoMoreSlotsAlert ("Relationships", "Relationships");
                return;
            }

            string nextRelationshipName = ContactsHelper.GetAvailableRelationshipNames (contactCopy).First ();
            McContactStringAttribute relationshipAttribute;

            if (Xml.Contacts.Child != nextRelationshipName) {
                relationshipAttribute = contactCopy.AddRelationshipAttribute (contactCopy.AccountId,
                    nextRelationshipName,
                    ContactsHelper.ExchangeNameToLabel (nextRelationshipName),
                    "");
            } else {
                relationshipAttribute = contactCopy.AddChildAttribute (contactCopy.AccountId,
                    nextRelationshipName,
                    ContactsHelper.ExchangeNameToLabel (nextRelationshipName),
                    "");
            }
            RelationshipCell relationshipCell = new RelationshipCell (relationshipCellList.Count * CELL_HEIGHT, this, relationshipAttribute);
            relationshipCellList.Add (relationshipCell);
            relationshipView.AddSubview (relationshipCell);

            LayoutView ();
        }

        protected void AddMiscTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);

            if (0 == ContactsHelper.GetAvailableMiscNames (TakenMiscNames ()).Count) {
                DisplayNoMoreSlotsAlert ("Items", "Items");
                return;
            }

            string newMiscName = ContactsHelper.GetAvailableMiscNames (TakenMiscNames ()).First ();

            MiscCell newMiscCell = new MiscCell (miscCellList.Count * CELL_HEIGHT, this, newMiscName, "");
            miscCellList.Add (newMiscCell);
            miscView.AddSubview (newMiscCell);

            LayoutView ();
        }

        protected UIButton labelChooserButton (int tag)
        {
            UIButton chooserButton = new UIButton (new CGRect (0, 0, 105, CELL_HEIGHT));
            chooserButton.BackgroundColor = UIColor.White;
            chooserButton.Tag = tag;

            UIImageView defaultImageView = new UIImageView (UIImage.FromBundle ("contacts-marker"));
            defaultImageView.Frame = new CGRect (10, 14, defaultImageView.Frame.Width, defaultImageView.Frame.Height);
            defaultImageView.Tag = chooserButton.Tag + 1000;
            chooserButton.AddSubview (defaultImageView);

            UILabel buttonLabel = new UILabel (new CGRect (defaultImageView.Frame.Right + 6, 13, 54, 14));
            buttonLabel.Font = A.Font_AvenirNextRegular12;
            buttonLabel.TextColor = UIColor.DarkGray;
            buttonLabel.TextAlignment = UITextAlignment.Left;
            buttonLabel.Tag = chooserButton.Tag + 2000;
            chooserButton.AddSubview (buttonLabel);

            UIImageView arrowImageView = new UIImageView (UIImage.FromBundle ("gen-dropdown"));
            arrowImageView.Frame = new CGRect (buttonLabel.Frame.Right + 5, 8, arrowImageView.Frame.Width, arrowImageView.Frame.Height);
            arrowImageView.Tag = chooserButton.Tag + 3000;
            chooserButton.AddSubview (arrowImageView);

            return chooserButton;
        }

        protected override void ConfigureAndLayout ()
        {
            UIColor userBackgroundColor = Util.GetContactColor (contactCopy);

            UILabel headerInitialsLabel = (UILabel)View.ViewWithTag (HEADER_INITIALS_CIRCLE_TAG);
            UIImageView headerPortraitImageView = (UIImageView)View.ViewWithTag (HEADER_PORTRAIT_TAG);

            headerInitialsLabel.Hidden = true;
            headerPortraitImageView.Hidden = true;

            if (0 == contactCopy.PortraitId) {
                headerInitialsLabel.BackgroundColor = userBackgroundColor;
                headerInitialsLabel.Text = contactCopy.Initials;
                headerInitialsLabel.Hidden = false;
            } else {
                headerPortraitImageView.Image = Util.ContactToPortraitImage (contactCopy);
                headerPortraitImageView.Hidden = false;
            }

            var headerCompany = (UITextField)View.ViewWithTag (HEADER_COMPANY_TEXT_FIELD);

            contactNameLabel.Text = GetDisplayNameFromCopy ();

            headerCompany.Text = contactCopy.CompanyName;

            var headerNameEditView = (UIView)View.ViewWithTag (HEADER_NAME_EDIT_VIEW_TAG);
            var firstName = (UITextField)headerNameEditView.ViewWithTag (FIRST_NAME_TAG);
            var middleName = (UITextField)headerNameEditView.ViewWithTag (MIDDLE_NAME_TAG);
            var lastName = (UITextField)headerNameEditView.ViewWithTag (LAST_NAME_TAG);
            var suffixField = (UITextField)headerNameEditView.ViewWithTag (SUFFIX_TAG);

            firstName.Text = contactCopy.FirstName;
            middleName.Text = contactCopy.MiddleName;
            lastName.Text = contactCopy.LastName;
            suffixField.Text = contactCopy.Suffix;

            McBody contactBody = McBody.QueryById<McBody> (contactCopy.BodyId);
            if (null != contactBody) {
                notesTextView.Text = contactBody.GetContentsString ();
            }

            if (ControllerType.Add == controllerType) {
                deleteContactButton.Hidden = true;
            }

            LayoutView ();
        }


        protected void AdjustY (UIView view, nfloat yOffset)
        {
            var frame = view.Frame;
            frame.Y = yOffset;
            view.Frame = frame;
        }

        protected void ShiftCells (BlockType whatType)
        {
            nfloat offset = 0;
            switch (whatType) {
            case BlockType.Address:
                foreach (var a in addressCellList) {
                    AdjustY (a, offset);
                    offset += CELL_HEIGHT;
                }
                break;
            case BlockType.Date:
                foreach (var d in dateCellList) {
                    AdjustY (d, offset);
                    offset += CELL_HEIGHT;
                }
                break;
            case BlockType.Email:
                foreach (var e in emailCellList) {
                    AdjustY (e, offset);
                    offset += CELL_HEIGHT;
                }
                break;
            case BlockType.IMAddress:
                foreach (var i in imAddressCellList) {
                    AdjustY (i, offset);
                    offset += CELL_HEIGHT;
                }
                break;
            case BlockType.Misc:
                foreach (var m in miscCellList) {
                    AdjustY (m, offset);
                    offset += CELL_HEIGHT;
                }
                break;
            case BlockType.Phone:
                foreach (var p in phoneCellList) {
                    AdjustY (p, offset);
                    offset += CELL_HEIGHT;
                }
                break;
            case BlockType.Relationship:
                foreach (var r in relationshipCellList) {
                    AdjustY (r, offset);
                    offset += CELL_HEIGHT;
                }
                break;
            }

        }

        protected override void Cleanup ()
        {
            //Add Buttons for each block
            addPhoneButton.TouchUpInside -= AddPhoneTouchUpInside;
            addEmailButton.TouchUpInside -= AddEmailTouchUpInside;
            addDateButton.TouchUpInside -= AddDateTouchUpInside;
            addAddressButton.TouchUpInside -= AddAddressTouchUpInside;
            addIMAddressButton.TouchUpInside -= AddIMAddressTouchUpInside;
            addRelationshipButton.TouchUpInside -= AddRelationshipTouchUpInside;
            addMiscButton.TouchUpInside -= AddMiscTouchUpInside;

            addPhoneButton = null;
            addEmailButton = null;
            addDateButton = null;
            addAddressButton = null;
            addIMAddressButton = null;
            addRelationshipButton = null;
            addMiscButton = null;

            //Buttons on the (...) more view
            UIButton moreDefaultButton = (UIButton)theMoreView.ViewWithTag (MORE_VIEW_DEFAULT_BUTTON_TAG);
            UIButton moreDeleteButton = (UIButton)theMoreView.ViewWithTag (MORE_VIEW_DELETE_BUTTON_TAG);

            moreDefaultButton.TouchUpInside -= DefaultButtonClicked;
            moreDeleteButton.TouchUpInside -= DeleteButtonClicked;

            moreDefaultButton = null;
            moreDeleteButton = null;

            //Delete Contact Button
            deleteContactButton.TouchUpInside -= DeleteContactButtonTouchUpInside;
            deleteContactButton = null;

            //NavBar Buttons
            cancelButton.Clicked -= CancelButtonClicked;
            doneButton.Clicked -= DoneButtonClicked;

            cancelButton = null;
            doneButton = null;

            contact = null;
            contactCopy = null;
            foreach (var p in phoneCellList) {
                p.Cleanup ();
            }
            foreach (var e in emailCellList) {
                e.Cleanup ();
            }
            foreach (var d in dateCellList) {
                d.Cleanup ();
            }
            foreach (var a in addressCellList) {
                a.Cleanup ();
            }
            foreach (var im in imAddressCellList) {
                im.Cleanup ();
            }
            foreach (var r in relationshipCellList) {
                r.Cleanup ();
            }
            foreach (var m in miscCellList) {
                m.Cleanup ();
            }
        }

        protected class PhoneCellView : UIView
        {
            public string name;
            public string label;
        }

        protected class EditCell : UIView
        {
            protected const int BUTTON_TAG = 1000;
            protected ContactEditViewController owner;
            public UITextField editField;
            protected UIButton labelButton;
            public UIButton moreButton;

            protected nfloat yOffset;


            protected EditCell (nfloat yOffset, ContactEditViewController owner)
            {
                this.yOffset = yOffset;
                this.owner = owner;
            }

            public virtual void CreateView ()
            {
                this.Frame = new CGRect (0, yOffset, owner.View.Frame.Width, owner.CELL_HEIGHT);
                this.BackgroundColor = UIColor.White;

                labelButton = owner.labelChooserButton (BUTTON_TAG);
                this.AddSubview (labelButton);

                editField = new UITextField (new CGRect (labelButton.Frame.Right + 18, 0, 135, owner.CELL_HEIGHT));
                editField.Font = A.Font_AvenirNextMedium14;
                editField.TextColor = A.Color_NachoGreen;
                editField.TextAlignment = UITextAlignment.Left;
                editField.ClearButtonMode = UITextFieldViewMode.WhileEditing;
                editField.Tag = BUTTON_TAG + 2000;
                this.AddSubview (editField);

                moreButton = new UIButton (new CGRect (owner.moreButtonIndent, 7, 30, 30));
                moreButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("More", "");
                moreButton.SetImage (UIImage.FromBundle ("contacts-more-options"), UIControlState.Normal);
                moreButton.SetImage (UIImage.FromBundle ("contacts-more-options-active"), UIControlState.Selected);
                moreButton.Tag = BUTTON_TAG + 3000;
                this.AddSubview (moreButton);

                Util.AddHorizontalLine (28, this.Frame.Height - 1, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, this);
            }
        }

        protected UIView MoreView ()
        {
            UIView backgroundCover = new UIView (View.Frame);
            backgroundCover.BackgroundColor = UIColor.LightGray.ColorWithAlpha (.1f);

            UIView moreView = new UIView (new CGRect (View.Frame.Width - 220, -28, 165, 102));
            moreView.BackgroundColor = A.Color_NachoGreen;
            moreView.Layer.CornerRadius = 6.0f;
            moreView.Hidden = true;

            UIButton defaultButton = new UIButton (new CGRect (1, 0, moreView.Frame.Width - 2, (moreView.Frame.Height / 2) - 1));
            defaultButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Default", "");

            defaultButton.BackgroundColor = A.Color_NachoGreen;
            defaultButton.Tag = MORE_VIEW_DEFAULT_BUTTON_TAG;
            defaultButton.TouchUpInside += DefaultButtonClicked;
            defaultButton.Layer.CornerRadius = 6.0f;
            moreView.AddSubview (defaultButton);

            UIImageView defaultImageView = new UIImageView (UIImage.FromBundle ("contacts-default"));
            defaultImageView.Frame = new CGRect (18, 14, defaultImageView.Frame.Width, defaultImageView.Frame.Height);
            defaultButton.AddSubview (defaultImageView);

            UILabel defaultLabel = new UILabel (new CGRect (defaultImageView.Frame.Right + 10, 18, 100, 15));
            defaultLabel.Font = A.Font_AvenirNextMedium14;
            defaultLabel.TextColor = UIColor.White;
            defaultLabel.Text = NSBundle.MainBundle.LocalizedString ("Set As Default", "");
            defaultButton.AddSubview (defaultLabel);

            Util.AddHorizontalLine (18, defaultButton.Frame.Bottom, moreView.Frame.Width - (18 * 2), UIColor.LightGray.ColorWithAlpha (.8f), moreView);

            UIButton deleteButton = new UIButton (new CGRect (0, moreView.Frame.Height / 2 + 1, moreView.Frame.Width, (moreView.Frame.Height / 2) - 1));
            deleteButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Delete", "");
            deleteButton.BackgroundColor = A.Color_NachoGreen;
            deleteButton.Tag = MORE_VIEW_DELETE_BUTTON_TAG;
            deleteButton.TouchUpInside += DeleteButtonClicked;
            deleteButton.Layer.CornerRadius = 6.0f;
            moreView.AddSubview (deleteButton);

            UIImageView deleteImageView = new UIImageView (UIImage.FromBundle ("gen-delete-all"));
            deleteImageView.Frame = new CGRect (18, 13, deleteImageView.Frame.Width, deleteImageView.Frame.Height);
            deleteButton.AddSubview (deleteImageView);

            UILabel deleteLabel = new UILabel (new CGRect (deleteImageView.Frame.Right + 10, 18, 100, 15));
            deleteLabel.Font = A.Font_AvenirNextMedium14;
            deleteLabel.TextColor = UIColor.White;
            deleteLabel.Text = NSBundle.MainBundle.LocalizedString ("Delete", "");
            deleteButton.AddSubview (deleteLabel);

            UIImageView aarowImageView = new UIImageView (UIImage.FromBundle ("contacts-popup-arrow"));
            aarowImageView.Frame = new CGRect (moreView.Frame.Width,
                (moreView.Frame.Height / 2) - (aarowImageView.Frame.Height / 2),
                aarowImageView.Frame.Width,
                aarowImageView.Frame.Height);
            moreView.AddSubview (aarowImageView);

            return moreView;
        }

        protected void MoreButtonClicked ()
        {
            UpdateContact ();
            switch (editingBlockType) {
            case BlockType.Phone:
                CGRect moreFrame = theMoreView.Frame;
                moreFrame.X = moreFrame.X;
                moreFrame.Y = (phoneView.Frame.Y - 28) + editingPhoneCell.Frame.Y;
                theMoreView.Frame = moreFrame;
                break;
            case BlockType.Email:
                CGRect emailMoreFrame = theMoreView.Frame;
                emailMoreFrame.X = emailMoreFrame.X;
                emailMoreFrame.Y = (emailView.Frame.Y - 28) + editingEmailCell.Frame.Y;
                theMoreView.Frame = emailMoreFrame;
                break;
            case BlockType.Address:
                CGRect addressMoreFrame = theMoreView.Frame;
                addressMoreFrame.X = addressMoreFrame.X;
                addressMoreFrame.Y = (addressView.Frame.Y - 28) + editingAddressCell.Frame.Y;
                theMoreView.Frame = addressMoreFrame;
                break;
            }

            ToggleMoreView ();
        }

        protected void ToggleMoreView ()
        {
            View.EndEditing (true);
            viewCover.Hidden = !viewCover.Hidden;
            theMoreView.Hidden = !theMoreView.Hidden;
            LayoutView ();
            scrollView.ScrollEnabled = !scrollView.ScrollEnabled;

            switch (editingBlockType) {
            case BlockType.Phone:
                editingPhoneCell.moreButton.Selected = !editingPhoneCell.moreButton.Selected;
                break;
            case BlockType.Email:
                editingEmailCell.moreButton.Selected = !editingEmailCell.moreButton.Selected;
                break;
            case BlockType.Address:
                editingAddressCell.moreButton.Selected = !editingAddressCell.moreButton.Selected;
                break;
            }
        }

        protected void DeleteButtonClicked (object sender, EventArgs e)
        {
            ToggleMoreView ();

            switch (editingBlockType) {
            case BlockType.Phone:
                editingPhoneCell.RemoveFromSuperview ();
                contactCopy.PhoneNumbers.Remove (editingPhoneCell.phoneAttribute);
                phoneCellList.Remove (editingPhoneCell);
                LayoutView ();
                break;
            case BlockType.Email:
                editingEmailCell.RemoveFromSuperview ();
                contactCopy.EmailAddresses.Remove (editingEmailCell.emailAttribute);
                emailCellList.Remove (editingEmailCell);
                LayoutView ();
                break;
            case BlockType.Address:
                editingAddressCell.TrashButtonClicked ();
                break;
            }
        }

        protected void DefaultButtonClicked (object sender, EventArgs e)
        {
            ToggleMoreView ();

            switch (editingBlockType) {
            case BlockType.Phone:
                editingPhoneCell.phoneAttribute.IsDefault = true;
                foreach (var pc in phoneCellList) {
                    if (pc.phoneAttribute.Name != editingPhoneCell.phoneAttribute.Name) {
                        pc.phoneAttribute.IsDefault = false;
                    }
                }
                ConfigurePhoneCells ();
                break;
            case BlockType.Email:
                editingEmailCell.emailAttribute.IsDefault = true;
                foreach (var ec in emailCellList) {
                    if (ec.emailAttribute.Name != editingEmailCell.emailAttribute.Name) {
                        ec.emailAttribute.IsDefault = false;
                    }
                }
                ConfigureEmailCells ();
                break;
            case BlockType.Address:
                editingAddressCell.addressAttribute.IsDefault = true;
                foreach (var ac in addressCellList) {
                    if (ac.addressAttribute.Name != editingAddressCell.addressAttribute.Name) {
                        ac.addressAttribute.IsDefault = false;
                    }
                    ac.ConfigureView ();
                }
                break;
            }
        }

        protected class PhoneCell : EditCell, IComparable<PhoneCell>
        {
            public McContactStringAttribute phoneAttribute;

            public PhoneCell (nfloat yOffset, ContactEditViewController owner, McContactStringAttribute phoneAttribute) : base (yOffset, owner)
            {
                this.phoneAttribute = phoneAttribute;
                CreateView ();
                ConfigureView ();
            }

            public override void CreateView ()
            {
                base.CreateView ();

                labelButton.TouchUpInside += PhoneLabelClicked;

                editField.KeyboardType = UIKeyboardType.PhonePad;
                editField.Placeholder = NSBundle.MainBundle.LocalizedString ("Phone Number", "");
                editField.EditingDidEnd += EditingEnded;
                moreButton.TouchUpInside += MoreButtonClicked;
            }

            protected void EditingEnded (object sender, EventArgs e)
            {
                phoneAttribute.Value = editField.Text;
            }

            public void ConfigureView ()
            {
                UIImageView defaultImageView = (UIImageView)labelButton.ViewWithTag (BUTTON_TAG + 1000);
                defaultImageView.Hidden = !phoneAttribute.IsDefault;

                UILabel labelButtonLabel = (UILabel)labelButton.ViewWithTag (BUTTON_TAG + 2000);
                labelButtonLabel.Text = phoneAttribute.Label;

                editField.Text = phoneAttribute.Value;
            }

            protected void PhoneLabelClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.Phone;
                owner.editingPhoneCell = this;
                owner.SelectLabel (ContactsHelper.GetAvailablePhoneNames (owner.contactCopy));
            }

            protected void MoreButtonClicked (object sender, EventArgs e)
            {
                owner.editingPhoneCell = this;
                owner.editingBlockType = BlockType.Phone;
                owner.MoreButtonClicked ();
            }

            protected void DefaultButtonClicked (object sender, EventArgs e)
            {
                foreach (var p in owner.contactCopy.PhoneNumbers) {
                    p.IsDefault = false;
                }
                phoneAttribute.IsDefault = true;

                owner.ConfigurePhoneCells ();
            }

            public int CompareTo (PhoneCell other)
            {
                string name = phoneAttribute.Name;
                int phonePriority = ContactsHelper.PhoneNames.IndexOf (name);

                string otherName = other.phoneAttribute.Name;
                int otherPriority = ContactsHelper.PhoneNames.IndexOf (otherName);

                return phonePriority.CompareTo (otherPriority);
            }

            public void Cleanup ()
            {
                editField.EditingDidEnd -= EditingEnded;
                labelButton.TouchUpInside -= PhoneLabelClicked;
                moreButton.TouchUpInside -= MoreButtonClicked;

                editField = null;
                labelButton = null;
                moreButton = null;

                this.RemoveFromSuperview ();
            }
        }

        protected class EmailCell : EditCell
        {
            public McContactEmailAddressAttribute emailAttribute;

            public EmailCell (nfloat yOffset, ContactEditViewController owner, McContactEmailAddressAttribute emailAttribute) : base (yOffset, owner)
            {
                this.emailAttribute = emailAttribute;
                CreateView ();
                ConfigureView ();
            }

            public override void CreateView ()
            {
                base.CreateView ();
                editField.KeyboardType = UIKeyboardType.EmailAddress;
                editField.Placeholder = NSBundle.MainBundle.LocalizedString ("Email Address", "");
                editField.EditingDidEnd += EditingEnded;
                labelButton.TouchUpInside += EmailLabelClicked;
                moreButton.TouchUpInside += MoreButtonClicked;
            }

            protected void EditingEnded (object sender, EventArgs e)
            {
                emailAttribute.Value = editField.Text;
            }

            public void ConfigureView ()
            {
                UIImageView defaultImageView = (UIImageView)labelButton.ViewWithTag (BUTTON_TAG + 1000);
                defaultImageView.Hidden = !emailAttribute.IsDefault;

                UILabel labelButtonLabel = (UILabel)labelButton.ViewWithTag (BUTTON_TAG + 2000);
                labelButtonLabel.Text = emailAttribute.Label;

                string emailToDisplay = "";
                if (0 != emailAttribute.EmailAddress) {
                    emailToDisplay = McEmailAddress.QueryById<McEmailAddress> (emailAttribute.EmailAddress).CanonicalEmailAddress;
                }
                editField.Text = emailToDisplay;
            }

            protected void MoreButtonClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingEmailCell = this;
                owner.editingBlockType = BlockType.Email;
                owner.MoreButtonClicked ();
            }

            protected void EmailLabelClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.Email;
                owner.editingEmailCell = this;
                owner.SelectLabel (ContactsHelper.GetAvailableEmailNames (owner.contactCopy));
            }

            public void Cleanup ()
            {
                editField.EditingDidEnd -= EditingEnded;
                labelButton.TouchUpInside -= EmailLabelClicked;
                moreButton.TouchUpInside -= MoreButtonClicked;

                editField = null;
                labelButton = null;
                moreButton = null;

                this.RemoveFromSuperview ();
            }
        }

        protected class DateCell : UIView
        {
            protected const int BUTTON_TAG = 1000;
            protected ContactEditViewController owner;

            public UIView dateView;
            protected UILabel dateLabel;
            protected UIDatePicker datePicker;

            protected UITapGestureRecognizer dateLabelTap;
            protected UITapGestureRecognizer.Token dateLabelTapToken;
            public McContactDateAttribute dateAttribute;

            protected UIButton labelButton;
            protected UIButton trashButton;

            protected nfloat yOffset;


            public DateCell (nfloat yOffset, ContactEditViewController owner, McContactDateAttribute dateAttribute)
            {
                this.yOffset = yOffset;
                this.owner = owner;
                this.dateAttribute = dateAttribute;
                CreateView ();
                ConfigureView ();
            }

            public void CreateView ()
            {
                this.Frame = new CGRect (0, yOffset, owner.View.Frame.Width, owner.CELL_HEIGHT);
                this.BackgroundColor = UIColor.White;

                labelButton = owner.labelChooserButton (BUTTON_TAG);
                labelButton.TouchUpInside += DateLabelClicked;
                this.AddSubview (labelButton);

                dateLabel = new UILabel (new CGRect (labelButton.Frame.Right + 18, 0, 150, 44));
                dateLabel.Font = A.Font_AvenirNextMedium14;
                dateLabel.TextColor = A.Color_NachoGreen;
                dateLabel.TextAlignment = UITextAlignment.Left;
                dateLabel.UserInteractionEnabled = true;
                this.AddSubview (dateLabel);

                dateLabelTap = new UITapGestureRecognizer ();
                dateLabelTap.NumberOfTapsRequired = 1;
                dateLabelTapToken = dateLabelTap.AddTarget (DateClicked);
                dateLabel.AddGestureRecognizer (dateLabelTap);

                dateView = new UIView (new CGRect (0, owner.CELL_HEIGHT, owner.View.Frame.Width, 216));
                dateView.BackgroundColor = UIColor.White;
                dateView.Hidden = true;
                Util.AddHorizontalLine (28, dateView.Frame.Height - 1, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, dateView);
                this.AddSubview (dateView);

                datePicker = new UIDatePicker (new CGRect (0, 0, owner.View.Frame.Width, 216));
                datePicker.Mode = UIDatePickerMode.Date;
                // This date picker is used to select birthdays, so set the minimum date to 110 years in the past.
                Util.ConstrainDatePicker (datePicker, DateTime.UtcNow.AddYears (-110));
                dateView.AddSubview (datePicker);

                trashButton = new UIButton (new CGRect (owner.moreButtonIndent, 7, 30, 30));
                trashButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Delete", "");
                UIImage x = UIImage.FromBundle ("gen-trash");
                trashButton.SetImage (x, UIControlState.Normal);
                trashButton.Tag = BUTTON_TAG + 3000;
                trashButton.TouchUpInside += TrashButtonClicked;
                this.AddSubview (trashButton);

                Util.AddHorizontalLine (28, this.Frame.Height - 1, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, this);
            }

            public void ConfigureView ()
            {
                UIImageView defaultImageView = (UIImageView)labelButton.ViewWithTag (BUTTON_TAG + 1000);
                defaultImageView.Hidden = true;

                UILabel labelButtonLabel = (UILabel)labelButton.ViewWithTag (BUTTON_TAG + 2000);
                labelButtonLabel.Text = dateAttribute.Label;

                dateLabel.Text = dateAttribute.Value.ToShortDateString ();

                LayoutView ();
            }

            protected void LayoutView ()
            {
                if (dateView.Hidden == true) {
                    owner.SetViewHeight (this, owner.CELL_HEIGHT);
                    owner.AdjustY (owner.addDateButton, this.Frame.Bottom);
                    owner.LayoutView ();

                } else {
                    owner.SetViewHeight (this, owner.CELL_HEIGHT + dateView.Frame.Height);
                    owner.AdjustY (owner.addDateButton, this.Frame.Bottom);
                    owner.LayoutView ();
                }
            }

            protected void DateClicked ()
            {
                owner.View.EndEditing (true);
                owner.editingDateCell = this;
                owner.shouldScrollToDateView = true;
                if (dateView.Hidden) {
                    dateView.Hidden = false;
                    if (DateTime.MinValue != dateAttribute.Value) {
                        var d = dateAttribute.Value;
                        var localDate = new DateTime (d.Year, d.Month, d.Day, 0, 0, 0, DateTimeKind.Local);
                        this.datePicker.Date = localDate.ToUniversalTime ().ToNSDate ();
                    }
                    this.dateLabel.TextColor = A.Color_NachoTeal;
                    LayoutView ();
                } else {
                    Dismiss ();
                    dateView.Hidden = true;
                    this.dateLabel.TextColor = A.Color_NachoGreen;
                    ConfigureView ();
                    LayoutView ();
                }
            }

            public void Dismiss ()
            {
                // The user selected a date/time in the local time zone.  (The picker only showed the date, but
                // there was also a hidden time component.)  But datePicker.Date returns a date/time in UTC, which
                // might be on a different date.  So we need to convert back to local time, extract the date,
                // then construct a new DateTime with that date in UTC.
                DateTime selectedDate = datePicker.Date.ToDateTime ().ToLocalTime ().Date;
                dateAttribute.Value = new DateTime (selectedDate.Year, selectedDate.Month, selectedDate.Day, 0, 0, 0, DateTimeKind.Utc);
            }

            protected void TrashButtonClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.None;
                this.RemoveFromSuperview ();
                owner.contactCopy.Dates.Remove (this.dateAttribute);
                owner.dateCellList.Remove (this);
                owner.LayoutView ();
            }

            protected void DateLabelClicked (object sender, EventArgs e)
            {
                // See comment in DateClicked(), above.
                DateTime selectedDate = datePicker.Date.ToDateTime ().ToLocalTime ().Date;
                dateAttribute.Value = new DateTime (selectedDate.Year, selectedDate.Month, selectedDate.Day, 0, 0, 0, DateTimeKind.Utc);
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.Date;
                owner.editingDateCell = this;
                owner.SelectLabel (ContactsHelper.GetAvailableDateNames (owner.contactCopy));
            }

            public void Cleanup ()
            {
                labelButton.TouchUpInside -= DateLabelClicked;
                trashButton.TouchUpInside -= TrashButtonClicked;

                dateLabelTap.RemoveTarget (dateLabelTapToken);
                dateLabelTap.ShouldRecognizeSimultaneously = null;
                dateLabel.RemoveGestureRecognizer (dateLabelTap);

                this.RemoveFromSuperview ();
            }
        }

        protected class AddressCell : UIView
        {
            protected const int BUTTON_TAG = 1000;

            protected ContactEditViewController owner;
            public McContactAddressAttribute addressAttribute;

            protected UITextField streetTextField;
            protected UITextField cityTextField;
            protected UITextField stateTextField;
            protected UITextField zipTextField;
            protected UITextField countryTextField;

            protected UIButton labelButton;
            public UIButton moreButton;

            protected UIView editAddressView;

            protected UIImageView disclosureImageView;

            protected nfloat yOffset;

            public AddressCell (nfloat yOffset, ContactEditViewController owner, McContactAddressAttribute addressAttribute)
            {
                this.yOffset = yOffset;
                this.owner = owner;
                this.addressAttribute = addressAttribute;
                CreateView ();
                ConfigureView ();
            }

            public void CreateView ()
            {
                this.Frame = new CGRect (0, yOffset, owner.View.Frame.Width, owner.CELL_HEIGHT);
                this.BackgroundColor = UIColor.White;

                labelButton = owner.labelChooserButton (BUTTON_TAG);
                labelButton.TouchUpInside += AddressLabelClicked;
                this.AddSubview (labelButton);

                moreButton = new UIButton (new CGRect (owner.moreButtonIndent, 6, 30, 30));
                moreButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("More", "");
                moreButton.SetImage (UIImage.FromBundle ("contacts-more-options"), UIControlState.Normal);
                moreButton.SetImage (UIImage.FromBundle ("contacts-more-options-active"), UIControlState.Selected);
                moreButton.TouchUpInside += MoreButtonClicked;
                this.AddSubview (moreButton);

                Util.AddHorizontalLine (28, owner.CELL_HEIGHT - 1, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, this);

                editAddressView = new UIView (new CGRect (0, owner.CELL_HEIGHT, owner.View.Frame.Width, owner.CELL_HEIGHT * 5));
                editAddressView.BackgroundColor = UIColor.White;
                this.AddSubview (editAddressView);

                streetTextField = owner.ConfigureAddressTextField (new CGRect (HORIZONTAL_INDENT, 0, 250, owner.CELL_HEIGHT - 1), "Street");
                streetTextField.EditingDidEnd += EditingEnded;
                streetTextField.ShouldReturn += (textField) => {
                    cityTextField.BecomeFirstResponder ();
                    return true;
                };
                editAddressView.AddSubview (streetTextField);

                Util.AddHorizontalLine (28, streetTextField.Frame.Bottom, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, editAddressView);

                cityTextField = owner.ConfigureAddressTextField (new CGRect (HORIZONTAL_INDENT, owner.CELL_HEIGHT, 250, owner.CELL_HEIGHT - 1), "City");
                cityTextField.EditingDidEnd += EditingEnded;
                cityTextField.ShouldReturn += (textField) => {
                    stateTextField.BecomeFirstResponder ();
                    return true;
                };
                editAddressView.AddSubview (cityTextField);

                Util.AddHorizontalLine (28, cityTextField.Frame.Bottom, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, editAddressView);

                stateTextField = owner.ConfigureAddressTextField (new CGRect (HORIZONTAL_INDENT, (owner.CELL_HEIGHT * 2), 250, owner.CELL_HEIGHT - 1), "State");
                stateTextField.EditingDidEnd += EditingEnded;
                stateTextField.ShouldReturn += (textField) => {
                    zipTextField.BecomeFirstResponder ();
                    return true;
                };
                editAddressView.AddSubview (stateTextField);

                Util.AddHorizontalLine (28, stateTextField.Frame.Bottom, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, editAddressView);

                zipTextField = owner.ConfigureAddressTextField (new CGRect (HORIZONTAL_INDENT, (owner.CELL_HEIGHT * 3), 250, owner.CELL_HEIGHT - 1), "Zip Code");
                zipTextField.EditingDidEnd += EditingEnded;
                zipTextField.ShouldReturn += (textField) => {
                    countryTextField.BecomeFirstResponder ();
                    return true;
                };
                editAddressView.AddSubview (zipTextField);

                Util.AddHorizontalLine (28, zipTextField.Frame.Bottom, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, editAddressView);

                countryTextField = owner.ConfigureAddressTextField (new CGRect (HORIZONTAL_INDENT, (owner.CELL_HEIGHT * 4), 250, owner.CELL_HEIGHT - 1), "Country");
                countryTextField.EditingDidEnd += EditingEnded;
                countryTextField.ShouldReturn += (textField) => {
                    owner.View.EndEditing (true);
                    return true;
                };
                editAddressView.AddSubview (countryTextField);

                Util.AddHorizontalLine (28, countryTextField.Frame.Bottom, owner.View.Frame.Width - 28, A.Color_NachoBackgroundGray, editAddressView);
            }

            public void ConfigureView ()
            {
                UIImageView defaultImageView = (UIImageView)labelButton.ViewWithTag (BUTTON_TAG + 1000);
                defaultImageView.Hidden = !addressAttribute.IsDefault;

                UILabel labelButtonLabel = (UILabel)labelButton.ViewWithTag (BUTTON_TAG + 2000);
                labelButtonLabel.Text = addressAttribute.Name;

                streetTextField.Text = addressAttribute.Street;
                cityTextField.Text = addressAttribute.City;
                stateTextField.Text = addressAttribute.State;
                zipTextField.Text = addressAttribute.PostalCode;
                countryTextField.Text = addressAttribute.Country;

                LayoutView ();
            }

            protected void LayoutView ()
            {
                owner.SetViewHeight (this, owner.CELL_HEIGHT + editAddressView.Frame.Height);
                owner.LayoutView ();
            }

            protected void MoreButtonClicked (object sender, EventArgs e)
            {
                owner.editingBlockType = BlockType.Address;
                owner.editingAddressCell = this;
                owner.MoreButtonClicked ();
            }

            public void TrashButtonClicked ()
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.None;
                this.RemoveFromSuperview ();
                owner.contactCopy.Addresses.Remove (this.addressAttribute);
                owner.addressCellList.Remove (this);
                owner.LayoutView ();
            }

            protected void AddressLabelClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.Address;
                owner.editingAddressCell = this;
                owner.SelectLabel (ContactsHelper.GetAvailableAddressNames (owner.contactCopy));
            }

            protected void EditingEnded (object sender, EventArgs e)
            {
                addressAttribute.Street = streetTextField.Text;
                addressAttribute.City = cityTextField.Text;
                addressAttribute.State = stateTextField.Text;
                addressAttribute.PostalCode = zipTextField.Text;
                addressAttribute.Country = countryTextField.Text;
            }

            public void Cleanup ()
            {
                streetTextField.EditingDidEnd -= EditingEnded;
                cityTextField.EditingDidEnd -= EditingEnded;
                stateTextField.EditingDidEnd -= EditingEnded;
                zipTextField.EditingDidEnd -= EditingEnded;
                countryTextField.EditingDidEnd -= EditingEnded;

                labelButton.TouchUpInside -= AddressLabelClicked;
                moreButton.TouchUpInside -= MoreButtonClicked;

                labelButton = null;
                moreButton = null;

                this.RemoveFromSuperview ();
            }
        }

        protected class IMAddressCell : EditCell
        {
            public McContactStringAttribute imAddressAttribute;

            public IMAddressCell (nfloat yOffset, ContactEditViewController owner, McContactStringAttribute imAddressAttribute) : base (yOffset, owner)
            {
                this.imAddressAttribute = imAddressAttribute;
                CreateView ();
                ConfigureView ();
            }

            public override void CreateView ()
            {
                base.CreateView ();

                imAddressAttribute.Type = McContactStringType.IMAddress;
                UIImage x = UIImage.FromBundle ("gen-trash");

                moreButton.SetImage (x, UIControlState.Normal);

                editField.KeyboardType = UIKeyboardType.Default;
                editField.Placeholder = NSBundle.MainBundle.LocalizedString ("IM Address", "");
                editField.EditingDidEnd += EditingEnded;

                labelButton.TouchUpInside += LabelClicked;
                moreButton.TouchUpInside += TrashButtonClicked;
            }

            public void ConfigureView ()
            {
                UIImageView defaultImageView = (UIImageView)labelButton.ViewWithTag (BUTTON_TAG + 1000);
                defaultImageView.Hidden = true;

                UILabel labelButtonLabel = (UILabel)labelButton.ViewWithTag (BUTTON_TAG + 2000);
                labelButtonLabel.Text = ContactsHelper.ExchangeNameToLabel (imAddressAttribute.Name);

                editField.Text = imAddressAttribute.Value;
            }

            protected void EditingEnded (object sender, EventArgs e)
            {
                imAddressAttribute.Value = editField.Text;
            }

            protected void LabelClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.IMAddress;
                owner.editingIMAddressCell = this;
                owner.SelectLabel (ContactsHelper.GetAvailableIMAddressNames (owner.contactCopy));
            }

            protected void TrashButtonClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingIMAddressCell = this;
                owner.editingBlockType = BlockType.IMAddress;
                this.RemoveFromSuperview ();
                owner.contactCopy.IMAddresses.Remove (this.imAddressAttribute);
                owner.imAddressCellList.Remove (this);
                owner.LayoutView ();
            }

            public void Cleanup ()
            {
                editField.EditingDidEnd -= EditingEnded;
                labelButton.TouchUpInside -= LabelClicked;

                editField = null;
                labelButton = null;

                this.RemoveFromSuperview ();
            }
        }

        protected class RelationshipCell : EditCell
        {
            public McContactStringAttribute relationshipAttribute;

            public RelationshipCell (nfloat yOffset, ContactEditViewController owner, McContactStringAttribute relationshipAttribute) : base (yOffset, owner)
            {
                this.relationshipAttribute = relationshipAttribute;
                CreateView ();
                ConfigureView ();
            }

            public override void CreateView ()
            {
                base.CreateView ();
                relationshipAttribute.Type = McContactStringType.Relationship;
                UIImage x = UIImage.FromBundle ("gen-trash");

                moreButton.SetImage (x, UIControlState.Normal);

                editField.KeyboardType = UIKeyboardType.Default;
                editField.Placeholder = NSBundle.MainBundle.LocalizedString ("Name (contact relationship)", "Placeholder for relationship field");
                editField.EditingDidEnd += EditingEnded;

                labelButton.TouchUpInside += LabelClicked;
                moreButton.TouchUpInside += TrashButtonClicked;
            }

            public void ConfigureView ()
            {
                UIImageView defaultImageView = (UIImageView)labelButton.ViewWithTag (BUTTON_TAG + 1000);
                defaultImageView.Hidden = true;

                UILabel labelButtonLabel = (UILabel)labelButton.ViewWithTag (BUTTON_TAG + 2000);
                labelButtonLabel.Text = ContactsHelper.ExchangeNameToLabel (relationshipAttribute.Name);

                editField.Text = relationshipAttribute.Value;
            }

            protected void EditingEnded (object sender, EventArgs e)
            {
                relationshipAttribute.Value = editField.Text;
            }

            protected void LabelClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.Relationship;
                owner.editingRelationshipCell = this;
                owner.SelectLabel (ContactsHelper.GetAvailableRelationshipNames (owner.contactCopy));
            }

            protected void TrashButtonClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.None;
                this.RemoveFromSuperview ();
                owner.contactCopy.Relationships.Remove (this.relationshipAttribute);
                owner.relationshipCellList.Remove (this);
                owner.LayoutView ();
            }

            public void Cleanup ()
            {
                editField.EditingDidEnd -= EditingEnded;
                labelButton.TouchUpInside -= LabelClicked;

                editField = null;
                labelButton = null;
                moreButton = null;

                this.RemoveFromSuperview ();
            }
        }

        protected class MiscCell : EditCell
        {
            public string Name;
            public string Value;
            public Xml.Contacts Type;

            public MiscCell (nfloat yOffset, ContactEditViewController owner, string Name, string Value) : base (yOffset, owner)
            {
                this.Name = Name;
                this.Value = Value;
                CreateView ();
                ConfigureView ();
            }

            public override void CreateView ()
            {
                base.CreateView ();

                UIImage x = UIImage.FromBundle ("gen-trash");
                moreButton.SetImage (x, UIControlState.Normal);

                editField.KeyboardType = UIKeyboardType.Default;
                editField.Placeholder = NSBundle.MainBundle.LocalizedString ("Value", "");
                editField.EditingDidEnd += EditingEnded;

                labelButton.TouchUpInside += LabelClicked;
                moreButton.TouchUpInside += TrashButtonClicked;
            }

            public void ConfigureView ()
            {
                UIImageView defaultImageView = (UIImageView)labelButton.ViewWithTag (BUTTON_TAG + 1000);
                defaultImageView.Hidden = true;

                UILabel labelButtonLabel = (UILabel)labelButton.ViewWithTag (BUTTON_TAG + 2000);
                labelButtonLabel.Text = ContactsHelper.ExchangeNameToLabel (Name);

                editField.Text = Value;
            }

            protected void EditingEnded (object sender, EventArgs e)
            {
                Value = editField.Text;
            }

            protected void LabelClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingBlockType = BlockType.Misc;
                owner.editingMiscCell = this;
                owner.SelectLabel (ContactsHelper.GetAvailableMiscNames (owner.TakenMiscNames ()));
            }

            protected void TrashButtonClicked (object sender, EventArgs e)
            {
                owner.View.EndEditing (true);
                owner.editingMiscCell = this;
                owner.editingBlockType = BlockType.Misc;
                this.RemoveFromSuperview ();
                owner.ClearPreviousValue (this);
                owner.miscCellList.Remove (this);
                owner.LayoutView ();
            }

            public void Cleanup ()
            {
                editField.EditingDidEnd -= EditingEnded;
                labelButton.TouchUpInside -= LabelClicked;

                editField = null;
                labelButton = null;

                this.RemoveFromSuperview ();
            }
        }

        protected List<string> TakenMiscNames ()
        {
            List<string> takenNames = new List<string> ();
            foreach (var m in miscCellList) {
                takenNames.Add (m.Name);
            }
            return takenNames;
        }

        protected void ConfigurePhoneCells ()
        {
            foreach (var pc in phoneCellList) {
                pc.ConfigureView ();
            }
        }

        protected void ConfigureEmailCells ()
        {
            foreach (var ec in emailCellList) {
                ec.ConfigureView ();
            }
        }

        protected void DisplayNoMoreSlotsAlert (string headerPlural, string msgSingular)
        {
            NcAlertView.ShowMessage (this, string.Format ("No Available {0}", headerPlural),
                string.Format ("There are no more {0} slots available for this contact.", msgSingular));
            return;
        }

        protected UITextField ConfigureAddressTextField (CGRect frame, string placeholder)
        {
            UITextField addressTextField = new UITextField (frame);
            addressTextField.Font = A.Font_AvenirNextMedium14;
            addressTextField.TextColor = A.Color_NachoGreen;
            addressTextField.TextAlignment = UITextAlignment.Left;
            addressTextField.ClearButtonMode = UITextFieldViewMode.WhileEditing;
            addressTextField.Placeholder = placeholder;
            addressTextField.AutocapitalizationType = UITextAutocapitalizationType.None;
            addressTextField.AutocorrectionType = UITextAutocorrectionType.No;

            return addressTextField;
        }
    }
}