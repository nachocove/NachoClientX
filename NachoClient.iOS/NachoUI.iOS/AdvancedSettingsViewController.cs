// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;

using CoreGraphics;
using Foundation;
using UIKit;

using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class AdvancedSettingsViewController : NcUIViewControllerNoLeaks
	{
        McAccount account;
        ILoginFields loginFields;

        UIView greyBackground;

        McCred TestCred;
        List<McServer> SavedList;
        List<McServer> ServerList;

		public AdvancedSettingsViewController (IntPtr handle) : base (handle)
		{
		}

        public void Setup(McAccount account) {
            this.account = account;
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        protected override void CreateViewHierarchy ()
        {
            NavigationItem.Title = NcServiceHelper.AccountServiceName (account.AccountService);
                
            var rect = new CGRect (0, 0, View.Frame.Width, View.Frame.Height);
            switch (account.AccountType) {
            case McAccount.AccountTypeEnum.Exchange:
                loginFields = new ExchangeFields (account, LoginProtocolControl.Prompt.EditInfo, rect, onValidate);
                break;
            case McAccount.AccountTypeEnum.IMAP_SMTP:
                loginFields = new IMapFields (account, LoginProtocolControl.Prompt.EditInfo, rect, onValidate);
                break;
            default:
                NcAssert.CaseError ();
                break;
            }
            View.AddSubview (loginFields.View);
        }

        protected override void ConfigureAndLayout ()
        {
        }

        protected override void Cleanup ()
        {
        }


        void ShowStatusView ()
        {
            greyBackground = new UIView (NavigationController.View.Frame);
            greyBackground.BackgroundColor = UIColor.DarkGray.ColorWithAlpha (0.4f);
            View.Add (greyBackground);

            UIView statusView = new UIView (new CGRect (View.Frame.Width / 6, View.Frame.Height / 2 - 150, View.Frame.Width * 2 / 3, 150));
            statusView.Layer.CornerRadius = 7.0f;
            statusView.BackgroundColor = UIColor.White;
            statusView.Alpha = 1.0f;

            UITextView statusMessage = new UITextView (new CGRect (8, 2, statusView.Frame.Width - 16, statusView.Frame.Height / 2.4f));
            statusMessage.BackgroundColor = UIColor.White;
            statusMessage.Alpha = 1.0f;
            statusMessage.Font = UIFont.SystemFontOfSize (17);
            statusMessage.TextColor = UIColor.Black;
            statusMessage.Text = "Validating Credentials";
            statusMessage.TextAlignment = UITextAlignment.Center;
            statusMessage.Editable = false;
            statusView.AddSubview (statusMessage);

            UIActivityIndicatorView theSpinner = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);
            theSpinner.Alpha = 1.0f;
            theSpinner.HidesWhenStopped = true;
            theSpinner.Frame = new CGRect (statusView.Frame.Width / 2 - 20, 50, 40, 40);
            theSpinner.Color = A.Color_SystemBlue;
            theSpinner.StartAnimating ();

            statusView.AddSubview (theSpinner);

            UIView cancelLine = new UIView (new CGRect (0, 105, statusView.Frame.Width, .5f));
            cancelLine.BackgroundColor = A.Color_NachoLightBorderGray;
            statusView.AddSubview (cancelLine);

            UIButton cancelValidation = new UIButton (new CGRect (0, 106, statusView.Frame.Width, 40));
            cancelValidation.Layer.CornerRadius = 10.0f;
            cancelValidation.BackgroundColor = UIColor.White;
            cancelValidation.TitleLabel.TextAlignment = UITextAlignment.Center;
            cancelValidation.SetTitle ("Cancel", UIControlState.Normal);
            cancelValidation.AccessibilityLabel = "Cancel";
            cancelValidation.SetTitleColor (A.Color_SystemBlue, UIControlState.Normal);
            statusView.AddSubview (cancelValidation);

            cancelValidation.TouchUpInside += CancelValidationButtonClicked;

            statusView.AddSubview (cancelValidation);

            greyBackground.AddSubview (statusView);
            NavigationController.View.AddSubview (greyBackground);
        }

        void HideStatusView ()
        {
            greyBackground.RemoveFromSuperview ();
            greyBackground = null;
        }

        void onValidate(McCred cred, List<McServer> servers)
        {
            View.EndEditing (true);

            TestCred = cred;
            SavedList = servers;
            ServerList = new List<McServer> (servers);

            ShowStatusView ();
            StartNextValidation ();
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        protected override void OnKeyboardChanged ()
        {
            if (null != loginFields) {
                loginFields.Layout (View.Frame.Height - keyboardHeight);
            }
        }

        bool StartNextValidation ()
        {
            var server = ServerList.FirstOrDefault ();
            if (null == server) {
                return false;
            }
            ServerList.RemoveAt (0);

            if (!BackEnd.Instance.ValidateConfig (account.Id, server, TestCred).isOK ()) {
                HandleAccountIssue ("Network Error", "A network issue is preventing your changes from being validated. Would you like to save your changes anyway?");
                return false;
            }

            return true;
        }

        void CancelButton_Clicked (object sender, EventArgs e)
        {
            View.EndEditing (true);
            NavigationController.PopViewController (true);
        }

        void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if ((null == s.Account) || (s.Account.Id != account.Id)) {
                return;
            }

            if (NcResult.SubKindEnum.Info_ValidateConfigSucceeded == s.Status.SubKind) {
                if (!StartNextValidation ()) {
                    SavePasswordAndExit ();
                }
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedComm == s.Status.SubKind) {
                HandleAccountIssue ("Validation Failed", "This account may not be able to send or receive emails. Save anyway?");
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedAuth == s.Status.SubKind) {
                HandleAccountIssue ("Invalid Credentials", "User name or password is incorrect. No emails can be sent or recieved. Save anyway?");
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedUser == s.Status.SubKind) {
                HandleAccountIssue ("Invalid Username", "User name is incorrect. No emails can be sent or received. Save anyway?");
            }
        }

        void HandleAccountIssue (string title, string message)
        {
            HideStatusView ();
            NcAlertView.Show (this, title, message,
                new NcAlertAction ("Save", () => {
                    SavePasswordAndExit ();
                }),
                new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
        }

        void SavePasswordAndExit ()
        {
            loginFields.Validated (TestCred, SavedList);

            BackEnd.Instance.CredResp (account.Id);

            foreach (var server in SavedList) {
                BackEnd.Instance.ServerConfResp (account.Id, server.Capabilities, false);
            }

            HideStatusView ();
            View.EndEditing (true);
            NavigationController.PopViewController (true);
        }

        protected void CancelValidationButtonClicked (object sender, EventArgs e)
        {
            HideStatusView ();
            BackEnd.Instance.CancelValidateConfig (account.Id);

            NcAlertView.Show (this, "Validation Cancelled",
                "Your settings have not been validated. Would you like to save them anyway?",
                new NcAlertAction ("Save", () => {
                    SavePasswordAndExit ();
                }),
                new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
        }
	}
}
