// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;

namespace NachoClient.iOS
{
    public partial class MessageActionViewController : DialogViewController
    {
        public List<McEmailMessage> messageThread;
        public ReadMessageViewController owner;

        public MessageActionViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            Pushing = true;
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            ReloadRoot ();
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {

            if (segue.Identifier.Equals ("ActionToCompose")) {
                ComposeViewController destinationController = (ComposeViewController)segue.DestinationViewController;
                destinationController.ActionThread = messageThread;
                destinationController.Action = (NSString) sender;
            }
        }

        void ReloadRoot ()
        {
            var root = new RootElement ("Action");
            root.UnevenRows = true;

            var message = messageThread.First ();

            Section section;
            if (null == message.Subject) {
                section = new Section ();
            } else {
                section = new Section (message.Subject);
            }
            root.Add (section);

            section.Add (new StringElement ("Reply", new NSAction (delegate {
                Reply (message.AccountId, message.Id);
            })));


            section.Add (new StringElement ("Reply All", new NSAction (delegate {
                ReplyAll (message.AccountId, message.Id);
            })));

            section.Add (new StringElement ("Forward", new NSAction (delegate {
                Forward (message.AccountId, message.Id);
            })));


            section.Add (new StringElement ("Delete", new NSAction (delegate {
                Delete (message.AccountId, message.Id);
            })));

            section = new Section ("Move message to....");
            root.Add (section);

            var folders = new NachoFolders (NachoFolders.FilterForEmail);
            for (int i = 0; i < folders.Count (); i++) {
                var folder = folders.GetFolder (i);
                section.Add (new StringElement (folder.DisplayName, new NSAction (delegate {
                    MoveMessage (message.AccountId, message.Id, folder.Id);
                })));
            }

            Root = root;
        }

        void Reply (int accountId, int messageId)
        {
            PerformSegue ("ActionToCompose", ComposeViewController.Reply);
        }

        void ReplyAll (int accountId, int messageId)
        {
            PerformSegue ("ActionToCompose", ComposeViewController.ReplyAll);
        }

        void Forward (int accountId, int messageId)
        {
            PerformSegue ("ActionToCompose", ComposeViewController.Forward);
        }

        void Delete (int accountId, int messageId)
        {
            // TODO: Push account in UI
            // We only have one account, for now.
            var account = BackEnd.Instance.Db.Table<McAccount> ().First();
            BackEnd.Instance.DeleteEmailCmd(account,  messageId);
            if (null != owner) {
                owner.messageDeleted = true;
            }
            NavigationController.PopViewControllerAnimated (true);
        }

        void MoveMessage (int accountId, int messageId, int destinationFolderId)
        {
            // TODO: Push account in UI
            // We only have one account, for now.
            var account = BackEnd.Instance.Db.Table<McAccount> ().First ();
            BackEnd.Instance.MoveItemCmd(account, messageId, destinationFolderId);
            NavigationController.PopViewControllerAnimated (true);
        }
    }
}
