// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Text;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog;
using NachoCore;
using MimeKit;

namespace NachoClient.iOS
{
    public partial class ReadMessageViewController : DialogViewController
    {
        public int messageIndex;
        public INachoEmailMessages messages;

        public ReadMessageViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            Pushing = true;
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            ReloadRoot ();
        }

        protected void ReloadRoot ()
        {
            var root = new RootElement ("Message");

            var section = new Section ();
            root.Add (section);

            var m = messages.GetEmailMessage (messageIndex);

            if (null != m.From) {
                section.Add (new StringElement ("From: " + m.From));
            }
            if (null != m.Subject) {
                section.Add (new StringElement ("Subject: " + m.Subject));
            }

            if (null != m.To) {
                string[] toList = m.To.Split (new Char [] { ',' });
                foreach (var s in toList) {
                    section.Add (new StringElement ("To: " + s));
                }
            }
            if (null != m.DisplayTo) {
                string[] displayToList = m.DisplayTo.Split (new Char[] { ';' });
                foreach (var s in displayToList) {
                    section.Add (new StringElement ("Display To: " + s));
                }
            }
            if (null != m.Cc) {
                string[] CcList = m.Cc.Split (new Char [] { ',' });
                foreach (var s in CcList) {
                    section.Add (new StringElement ("Cc: " + s));
                }
            }

            if (null != m.Body) {
                var bodySource = new MemoryStream (Encoding.UTF8.GetBytes (m.Body));
                var bodyParser = new MimeParser (bodySource, MimeFormat.Default);
                var message = bodyParser.ParseMessage ();
                RenderMessage (message, section);
            }

            Root = root;


        }

        void RenderMessage (MimeMessage message, Section section)
        {
            RenderMimeEntity (message.Body, section);
        }

        void RenderMimeEntity (MimeEntity entity, Section section)
        {
            if (entity is MessagePart) {
                // This entity is an attached message/rfc822 mime part.
                var messagePart = (MessagePart)entity;
                // If you'd like to render this inline instead of treating
                // it as an attachment, you would just continue to recurse:
                RenderMessage (messagePart.Message, section);
                return;
            }
            if (entity is Multipart) {
                // This entity is a multipart container.
                var multipart = (Multipart)entity;
                foreach (var subpart in multipart) {
                    RenderMimeEntity (subpart, section);
                }
                return;
            }

            // Everything that isn't either a MessagePart or a Multipart is a MimePart
            var part = (MimePart)entity;

            // Don't render anything that is explicitly marked as an attachment.
//            if (part.IsAttachment)
//                return;

            if (part is TextPart) {
                // This is a mime part with textual content.
                var text = (TextPart)part;

                if (text.ContentType.Matches ("text", "html")) {
                    RenderHtml (text.Text, section);
                } else {
                    RenderText (text.Text, section);
                }
                return;
            }
            if (entity.ContentType.Matches ("image", "*")) {
                using (var content = new MemoryStream ()) {
                    // If the content is base64 encoded (which it probably is), decode it.
                    part.ContentObject.DecodeTo (content);
                    RenderImage (content, section);
                }
                return;
            }

            NachoCore.Utils.Log.Error ("Unhandled Render: {0}\n", part);
        }

        void RenderHtml (string html, Section section)
        {
//            var e = new HtmlStringElement ("", html);
//            section.Add (e);

            int i = 0;

            var web = new UIWebView (UIScreen.MainScreen.Bounds) {
                BackgroundColor = UIColor.White,
                ScalesPageToFit = true,
                AutoresizingMask = UIViewAutoresizing.All
            };
            web.LoadStarted += delegate {
                // this is called several times
                if (i++ == 0) {
                    ;
                }
            };
            web.LoadFinished += delegate {
                if (--i == 0) {
                    // we stopped loading
                    web.StopLoading ();
//                    web.Dispose ();
                }
            };
            web.LoadError += (webview, args) => {
                // we stopped loading
                if (web != null) {
                    web.LoadHtmlString (String.Format ("<html><center><font size=+5 color='red'>{0}:<br>{1}</font></center></html>", "An error occurred:", args.Error.LocalizedDescription), null);
                }
            };
            web.ShouldStartLoad += delegate(UIWebView webView, NSUrlRequest request, UIWebViewNavigationType navigationType) {
                if (UIWebViewNavigationType.LinkClicked == navigationType) {
                    UIApplication.SharedApplication.OpenUrl (request.Url);
                    return false;
                }
                return true;
            };

            web.LoadHtmlString (html, null);
            var e = new UIViewElement ("", web, true);
            section.Add (e);

        }

        void RenderText (string text, Section section)
        {
            var e = new MultilineElement (text);
            section.Add (e);
        }

        void RenderImage (MemoryStream imageStream, Section section)
        {
            var data = NSData.FromStream (imageStream);
            var image = UIImage.LoadFromData (data);
            var e = new ImageElement (image);
            section.Add (e);
        }
    }
}
