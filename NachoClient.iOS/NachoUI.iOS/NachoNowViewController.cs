// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using iCarouselBinding;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;

namespace NachoClient.iOS
{
    public class FolderHolder : NSObject
    {
        public McFolder folder { get; private set; }

        public FolderHolder (McFolder f)
        {
            folder = f;
        }
    }

    public class ConversationHolder : NSObject
    {
        public List<McEmailMessage> conversation { get; private set; }

        public ConversationHolder(List<McEmailMessage> c)
        {
            conversation = c;
        }
    }

    public partial class NachoNowViewController : UIViewController
    {
        bool wrap = true;
        NachoFolders folders;
        TableViewDataSource dataSource;

        public NachoNowViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // Tableview
            dataSource = new TableViewDataSource ();
            folderDataTableview.DataSource = dataSource;
            folderDataTableview.Delegate = new TableViewDelegate (this);
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            folders = new NachoFolders (NachoFolders.FilterForEmail);
            UpdateTableView (0);

            // configure carousel
            Carousel.DataSource = new CarouselDataSource (this);
            Carousel.Delegate = new CarouselDelegate (this);  
            Carousel.Type = iCarouselType.CoverFlow2;
            Carousel.ContentOffset = new SizeF (0f, 0f);
        }

        public void UpdateTableView (int folderIndex)
        {
            if (folders.Count () <= folderIndex) {
                dataSource.ReloadMessages (folderDataTableview, null);
            } else {
                dataSource.ReloadMessages (folderDataTableview, folders.GetFolder (folderIndex));
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "NachoNowToMessageList") {
                var folderHolder = (FolderHolder)sender;
                var messageListViewController = (MessageListViewController)segue.DestinationViewController;
                var messageList = new NachoEmailMessages (folderHolder.folder);
                messageListViewController.SetEmailMessages (messageList);
            }

            if (segue.Identifier == "NachoNowToMessage") {
                var readMessageViewController = (ReadMessageViewController)segue.DestinationViewController;
                readMessageViewController.messages = dataSource.messages;
                readMessageViewController.ThreadIndex = folderDataTableview.IndexPathForSelectedRow.Row;
            }

            if (segue.Identifier == "NachoNowToMessageView") {
                var dvc = (MessageViewController)segue.DestinationViewController;
                dvc.messages = dataSource.messages;
                dvc.ThreadIndex = folderDataTableview.IndexPathForSelectedRow.Row;
            }
        }

        public class TableViewDataSource : UITableViewDataSource
        {
            public NachoEmailMessages messages;

            public TableViewDataSource ()
            {
                messages = null;
            }

            public void ReloadMessages (UITableView tableView, McFolder folder)
            {
                messages = new NachoEmailMessages (folder);
                tableView.ReloadData ();
            }

            public override int NumberOfSections (UITableView tableView)
            {
                return 1;
            }

            public override int RowsInSection (UITableView tableView, int section)
            {
                if (null == messages) {
                    return 0;
                } else {
                    return messages.Count ();
                }
            }

            public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
            {
                var cell = tableView.DequeueReusableCell ("cell");
                if (null == cell) {
                    cell = new UITableViewCell (UITableViewCellStyle.Subtitle, "cell");
                }
                var thread = messages.GetEmailThread (indexPath.Row);
                var message = thread.First ();
                cell.TextLabel.Text = message.From;
                cell.DetailTextLabel.Text = message.Subject;
                cell.SelectionStyle = UITableViewCellSelectionStyle.None;
                return cell;
            }

        }

        public class TableViewDelegate : UITableViewDelegate
        {
            NachoNowViewController owner;

            public TableViewDelegate(NachoNowViewController o)
            {
                owner = o;
            }

            public override void RowSelected (UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath)
            {
                var conversation = owner.dataSource.messages.GetEmailThread (indexPath.Row);
                owner.PerformSegue ("NachoNowToMessageView", new ConversationHolder (conversation));
            }

        }

        public class CarouselDataSource : iCarouselDataSource
        {
            NachoNowViewController owner;

            public CarouselDataSource (NachoNowViewController o)
            {
                owner = o;
            }

            public override uint NumberOfItemsInCarousel (iCarousel carousel)
            {
                return (uint)owner.folders.Count ();
            }

            public override UIView ViewForItemAtIndex (iCarousel carousel, uint index, UIView view)
            {
                var folder = owner.folders.GetFolder ((int)index);

                //create new view if no view is available for recycling
                if (view == null) {
                    var v = new UIImageView (new RectangleF (0f, 0f, 200.0f, 200.0f));
                    v.Image = UIImage.FromBundle ("page.png");
                    v.ContentMode = UIViewContentMode.Center;
                    var l = new UILabel (v.Bounds);
                    l.BackgroundColor = UIColor.Clear;
                    l.TextAlignment = UITextAlignment.Center;
                    l.Font = l.Font.WithSize (30f);
                    l.Tag = 1;
                    l.Text = folder.DisplayName;
                    v.AddSubview (l);
                    return v;
                }
                var label = (UILabel)view.ViewWithTag (1);
                label.Text = folder.DisplayName;
                return view;
            }

            public override uint NumberOfPlaceholdersInCarousel (iCarousel carousel)
            {
                return 2;
            }

            public override UIView PlaceholderViewAtIndex (iCarousel carousel, uint index, UIView view)
            {
                UILabel label = null;
                UIImageView imageView = null;

                //create new view if no view is available for recycling
                if (null == view) {
                    //don't do anything specific to the index within
                    //this `if (view == nil) {...}` statement because the view will be
                    //recycled and used with other index values later
                    imageView = new UIImageView (new RectangleF (0f, 0f, 200.0f, 200.0f));
                    imageView.Image = UIImage.FromBundle ("page.png");
                    imageView.ContentMode = UIViewContentMode.Center;
                    label = new UILabel (imageView.Bounds);
                    label.BackgroundColor = UIColor.Clear;
                    label.TextAlignment = UITextAlignment.Center;
                    label.Font = label.Font.WithSize (50f);
                    label.Tag = 1;
                    imageView.AddSubview (label);
                } else {
                    label = (UILabel)view.ViewWithTag (1);
                    imageView = (UIImageView)view;
                }
                //set item label
                //remember to always set any properties of your carousel item
                //views outside of the `if (view == nil) {...}` check otherwise
                //you'll get weird issues with carousel item content appearing
                //in the wrong place in the carousel
                label.Text = (index == 0) ? "[" : "]";

                return imageView;
            }
        }

        public class CarouselDelegate : iCarouselDelegate
        {
            NachoNowViewController owner;

            public CarouselDelegate (NachoNowViewController o)
            {
                owner = o;
            }
            //            public override MonoTouch.CoreAnimation.CATransform3D ItemTransformForOffset (iCarousel carousel, float offset, MonoTouch.CoreAnimation.CATransform3D transform)
            //            {
            //                // implement 'flip3D' style carousel
            //                transform = CATransform3D.MakeRotation (((float)Math.PI) / 8.0f, 0.0f, 1.0f, 0.0f);
            //                return CATransform3D.MakeTranslation (0f, 0f, offset * carousel.ItemWidth);
            //            }
            /// <summary>
            /// Called when the Item is touched.
            /// </summary>
            public override void DidSelectItemAtIndex (iCarousel carousel, int index)
            {
                var folder = owner.folders.GetFolder (index);
                owner.PerformSegue ("NachoNowToMessageList", new FolderHolder (folder));
            }

            public override void CarouselWillBeginDragging (iCarousel carousel)
            {
                UIView.BeginAnimations (null);
                UIView.SetAnimationDuration (0.5f);
                owner.folderDataTableview.Alpha = 0f;
                UIView.CommitAnimations ();
            }

            public override void CarouselDidEndDragging (iCarousel carousel, bool decelerate)
            {
                owner.UpdateTableView (carousel.CurrentItemIndex);
                UIView.BeginAnimations (null);
                UIView.SetAnimationCurve (UIViewAnimationCurve.EaseIn);
                UIView.SetAnimationDuration (0.5f);
                owner.folderDataTableview.Alpha = 1f;
                UIView.CommitAnimations ();
            }

            /// <summary>
            /// Values for option.
            /// </summary>
            public override float ValueForOption (iCarousel carousel, iCarouselOption option, float value)
            {
                // customize carousel display
                switch (option) {
                case iCarouselOption.Wrap:
                    // normally you would hard-code this to true or false
                    return (owner.wrap ? 1.0f : 0.0f);
                case iCarouselOption.Spacing:
                    // add a bit of spacing between the item views
                    return value * 1.05f;
                case iCarouselOption.FadeMax:
                    if (iCarouselType.Custom == carousel.Type) {
                        return 0.0f;
                    }
                    return value;
                default:
                    return value;
                }

            }
        }
    }
}
