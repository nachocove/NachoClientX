// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using iCarouselBinding;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using MCSwipeTableViewCellBinding;
using MonoTouch.Dialog;
using NachoCore.Brain;

namespace NachoClient.iOS
{
    public partial class NachoNowViewController : NcUIViewController, INachoMessageEditorParent, INachoFolderChooserParent, INachoCalendarItemEditorParent, ICalendarTableViewSourceDelegate
    {
        public bool wrap = false;
        public INachoEmailMessages priorityInbox;
        protected CalendarTableViewSource calendarSource;
        UIPanGestureRecognizer calendarPanGestureRecognizer = null;
        UITapGestureRecognizer calendarCloseTapGestureRecognizer = null;
        UITapGestureRecognizer carouselTapGestureRecognizer = null;

        protected INachoEmailMessages inbox;
        protected iCarousel inboxCarousel;

        public NachoNowViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            Util.ConfigureNavBar (false, NavigationController);

            CalendarHelper.ExpandRecurrences ();

            var nachoButton = new UIBarButtonItem ();
            Util.SetOriginalImageForButton (nachoButton, "nav-nachonow");
            nachoButton.Clicked += (object sender, EventArgs e) => {
                UIView.Animate (1, 0, UIViewAnimationOptions.CurveEaseOut,
                    () => {
                        ConfigureBasicView ();
                    },
                    () => {
                    });
                carouselView.ScrollToItemAtIndex (0, true);
                inboxCarousel.ScrollToItemAtIndex (0, true);
            };

            var composeButton = new UIBarButtonItem ();
            Util.SetOriginalImageForButton (composeButton, "contact-newemail");
            composeButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("NachoNowToCompose", new SegueHolder (null));
            };

            var newMeetingButton = new UIBarButtonItem ();
            Util.SetOriginalImageForButton (newMeetingButton, "cal-add");
            newMeetingButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("NachoNowToEditEventView", new SegueHolder (null));
            };

            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { composeButton, newMeetingButton };
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] {
                A.RevealButton (this),
                nachoButton,
            };

            carouselTapGestureRecognizer = new UITapGestureRecognizer ();
            carouselTapGestureRecognizer.NumberOfTapsRequired = 2;
            carouselTapGestureRecognizer.AddTarget (this, new MonoTouch.ObjCRuntime.Selector ("CarouselTapSelector:"));
            carouselTapGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            carouselTapGestureRecognizer.ShouldReceiveTouch += (UIGestureRecognizer r, UITouch t) => {
                if (t.View is UIControl) {
                    return false;
                } else {
                    return true;
                }
            };
            carouselView.AddGestureRecognizer (carouselTapGestureRecognizer);

            priorityInbox = NcEmailManager.PriorityInbox ();

            // configure carousel
            carouselView.DataSource = new HotListCarouselDataSource (this);
            carouselView.Delegate = new HotListCarouselDelegate (this);  
            carouselView.Type = iCarouselType.Linear;
            carouselView.Vertical = false;
            carouselView.ContentOffset = new SizeF (0f, 0f);
            carouselView.BackgroundColor = UIColor.Clear;

            inbox = NcEmailManager.Inbox ();

            inboxCarousel = new iCarousel ();
            inboxCarousel.Frame = new RectangleF (0, View.Frame.Height - INBOX_ROW_HEIGHT, 320, INBOX_ROW_HEIGHT);
            inboxCarousel.DataSource = new InboxCarouselDataSource (this, inbox);
            inboxCarousel.Delegate = new InboxCarouselDelegate (this, inbox);  
            inboxCarousel.Type = iCarouselType.Linear;
            inboxCarousel.Vertical = false;
            inboxCarousel.ContentOffset = new SizeF (0f, 0f);
            inboxCarousel.BackgroundColor = UIColor.Clear;
            View.AddSubview (inboxCarousel);

            calendarTableView.SeparatorStyle = UITableViewCellSeparatorStyle.SingleLine;

            calendarSource = new CalendarTableViewSource ();
            calendarSource.owner = this;
            calendarSource.SetCalendar (NcEventManager.Instance);
            calendarTableView.Source = calendarSource;

            // Set up gesture recognizers; they'll be enabled and disabled as needed

            // Pan the calendar down from the top
            calendarPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                calendarPan (obj);
            });
            calendarPanGestureRecognizer.Enabled = false;
            calendarPanGestureRecognizer.MaximumNumberOfTouches = 1;
            calendarPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            calendarView.AddGestureRecognizer (calendarPanGestureRecognizer);

            // Tap the calendar thumb to hid the calendar again
            calendarCloseTapGestureRecognizer = new UITapGestureRecognizer ((UITapGestureRecognizer obj) => {
                calendarThumbTouch (obj);
            });
            calendarCloseView.UserInteractionEnabled = true;
            calendarCloseTapGestureRecognizer.Enabled = false;
            calendarCloseView.AddGestureRecognizer (calendarCloseTapGestureRecognizer);

            View.BackgroundColor = A.Color_NachoBackgroundGray;

            ConfigureBasicView ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            if (null != this.NavigationController) {
                NavigationController.SetToolbarItems (null, false);
                this.NavigationController.ToolbarHidden = true;
                this.NavigationController.NavigationBarHidden = false;
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
        }

        // After viewing a message, when returning to Now, after Now's ViewWillAppear
        // is called, layout is called again but the toolbar size is still factored in,
        // so the inboxCarousel is put in the wrong spot.  Can't figure it out.  So...
        public override void ViewWillLayoutSubviews ()
        {
            base.ViewWillLayoutSubviews ();
            inboxCarousel.Frame = inboxNormalSize ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        ///        NachoNowToCalendar(null)
        ///        NachoNowToCalendarItem (index path)
        ///        NachoNowToCompose (null)
        ///        NachoNowToContacts (null)
        ///        NachoNowToMessageAction (index path)
        ///        NachoNowToMessageList (inbox folder)
        ///        NachoNowToMessageList(deferred folder)
        ///        NachoNowToMessagePriority  (index path)
        ///        NachoNowToMessageView (index path)
        ///
        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "NachoNowToCalendar") {
                return; // Nothing to do
            }
            if (segue.Identifier == "NachoNowToEditEventView") {
                var vc = (EditEventViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                var c = holder.value as McCalendar;
                if (null == c) { 
                    vc.SetCalendarItem (null, CalendarItemEditorAction.create);
                } else {
                    vc.SetCalendarItem (c, CalendarItemEditorAction.create);
                }
                vc.SetOwner (this);
                return;
            }
            if (segue.Identifier == "NachoNowToEventView") {
                var vc = (EventViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                var c = holder.value as McCalendar;
                vc.SetCalendarItem (c, CalendarItemEditorAction.view);
                vc.SetOwner (this);
                return;
            }
            if (segue.Identifier == "NachoNowToCompose") {
                var vc = (MessageComposeViewController)segue.DestinationViewController;
                var h = sender as SegueHolder;
                if (null == h) {
                    // Composing a message
                    vc.Action = null;
                    vc.ActionThread = null;
                } else {
                    vc.Action = (string)h.value;
                    vc.ActionThread = (McEmailMessageThread)h.value2;
                }
                vc.SetOwner (this);
                return;
            }

            if (segue.Identifier == "NachoNowToMessageList") {
                var holder = (SegueHolder)sender;
                var messageList = (INachoEmailMessages)holder.value;
                var messageListViewController = (MessageListViewController)segue.DestinationViewController;
                messageListViewController.SetEmailMessages (messageList);
                return;
            }
            if (segue.Identifier == "NachoNowToMessageView") {
                var vc = (MessageViewController)segue.DestinationViewController;
                var holder = (SegueHolder)sender;
                vc.thread = holder.value as McEmailMessageThread;                
                return;
            }
            if (segue.Identifier == "NachoNowToMessagePriority") {
                var vc = (MessagePriorityViewController)segue.DestinationViewController;
                var holder = (SegueHolder)sender;
                vc.thread = holder.value as McEmailMessageThread;
                vc.SetOwner (this);
                return;
            }
            if (segue.Identifier == "NachoNowToMessageAction") {
                var vc = (MessageActionViewController)segue.DestinationViewController;
                var h = sender as SegueHolder;
                vc.SetOwner (this, h);
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_EmailMessageSetChanged == s.Status.SubKind) {
                priorityInbox.Refresh ();
                carouselView.ReloadData ();
                inbox.Refresh ();
                inboxCarousel.ReloadData ();
            }
            if (NcResult.SubKindEnum.Info_CalendarSetChanged == s.Status.SubKind) {
                calendarSource.Refresh ();
                calendarTableView.ReloadData ();
            }
            if (NcResult.SubKindEnum.Info_EmailMessageScoreUpdated == s.Status.SubKind) {
                priorityInbox.Refresh ();
                carouselView.ReloadData ();
                inbox.Refresh ();
                inboxCarousel.ReloadData ();
            }
        }

        protected void DisableGestureRecognizers ()
        {
            calendarPanGestureRecognizer.Enabled = false;
            calendarCloseTapGestureRecognizer.Enabled = false;
            carouselTapGestureRecognizer.Enabled = false;
        }

        /// <summary>
        /// Show event, inbox, and hot list
        /// </summary>
        protected void ConfigureBasicView ()
        {
            DisableGestureRecognizers ();

            calendarSource.SetCompactMode (true);
            calendarView.Frame = calendarSmallSize ();
            calendarTableView.ScrollEnabled = false;
            calendarThumbView.Hidden = false;
            calendarCloseView.Hidden = true;
            calendarTableView.ReloadData ();
            calendarSource.ScrollToNearestEvent (calendarTableView, DateTime.UtcNow);

            carouselView.Frame = carouselNormalSize ();
            carouselView.Alpha = 1.0f;

            inboxCarousel.ReloadData ();
            inboxCarousel.Frame = inboxNormalSize ();

            // Enabled gestures
            calendarPanGestureRecognizer.Enabled = true;
            carouselTapGestureRecognizer.Enabled = true;
        }

        int INBOX_ROW_HEIGHT = 69;
        int CALENDAR_VIEW_HEIGHT = (69 + 22);
        float calendarStartingY;

        protected RectangleF carouselNormalSize ()
        {
            var rect = View.Frame;
            rect.Height = rect.Height - (INBOX_ROW_HEIGHT + CALENDAR_VIEW_HEIGHT + 20);
            rect.Y = CALENDAR_VIEW_HEIGHT;
            return rect;
        }

        protected RectangleF inboxNormalSize ()
        {
            var rect = View.Frame;
            rect.Height = INBOX_ROW_HEIGHT;
            rect.Y = carouselView.Frame.Bottom + 10;
            return rect;
        }

        /// Grows from top of View
        protected RectangleF calendarSmallSize ()
        {
            var parentFrame = View.Frame;
            var inboxFrame = new RectangleF ();
            inboxFrame.Y = 0;
            inboxFrame.Height = CALENDAR_VIEW_HEIGHT;
            inboxFrame.X = parentFrame.X;
            inboxFrame.Width = parentFrame.Width;
            return inboxFrame;
        }

        protected RectangleF calendarFullSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 0, parentFrame.Width, parentFrame.Height);
            return rect;
        }

        protected double calendarPercentOpen (float yOffset)
        {
            var fullSize = calendarFullSize ();
            var Height = calendarStartingY + yOffset;
            return  Height / fullSize.Height;
        }

        /// Positive means growing
        protected RectangleF calendarAdjustedSize (float yOffset)
        {
            var smallSize = calendarSmallSize ();
            var fullSize = calendarFullSize ();
            // Compute new size
            var rect = fullSize;
            rect.Height = calendarStartingY + yOffset;
            // Don't get smaller than small size
            if (rect.Height < smallSize.Height) {
                return smallSize;
            }
            if (rect.Height > fullSize.Height) {
                return fullSize;
            }
            return rect;
        }

        protected void calendarPan (UIPanGestureRecognizer obj)
        {
            if (UIGestureRecognizerState.Began == obj.State) {
                calendarStartingY = calendarTableView.Frame.Bottom;
                View.BringSubviewToFront (calendarView);
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                // yOffset is negative when going up!
                var yOffset = obj.TranslationInView (calendarTableView).Y;
                calendarView.Frame = calendarAdjustedSize (yOffset);
                calendarView.SetNeedsDisplay ();
                return;
            }
            if (UIGestureRecognizerState.Ended == obj.State) {
                // Should we expand or contract?
                Double duration;
                var yOffset = obj.TranslationInView (calendarTableView).Y;
                var percentOpen = calendarPercentOpen (yOffset);
                if (percentOpen > 0.7f) {
                    duration = Math.Max (0.1, 1.0 - percentOpen);
                    UIView.Animate (duration, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            PerformSegue ("NachoNowToCalendar", new SegueHolder (null));
                        },
                        () => {
                        }
                    );
                } else {
                    duration = percentOpen;
                    UIView.Animate (duration, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureBasicView ();
                        },
                        () => {
                        }
                    );
                }
                return;
            }
        }

        protected void calendarThumbTouch (UITapGestureRecognizer obj)
        {
            UIView.Animate (0.2, 0, UIViewAnimationOptions.CurveEaseIn,
                () => {
                    ConfigureBasicView ();
                },
                () => {
                }
            );
        }

        [MonoTouch.Foundation.Export ("CarouselTapSelector:")]
        public void OnDoubleTapCarousel (UIGestureRecognizer sender)
        {
            // FIXME: What to do on double tap?
        }

        ///  IMessageTableViewSourceDelegate
        public void PerformSegueForDelegate (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        public void SendRunningLateMessage (int calendarIndex)
        {
            NcAssert.CaseError ();
        }

        ///  IMessageTableViewSourceDelegate
        public void MessageThreadSelected (McEmailMessageThread messageThread)
        {
            PerformSegue ("NachoNowToMessageList", new SegueHolder (NcEmailManager.Inbox ()));
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void DismissChildMessageEditor (INachoMessageEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissMessageEditor (false, null);
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void CreateTaskForEmailMessage (INachoMessageEditor vc, McEmailMessageThread thread)
        {
            var m = thread.SingleMessageSpecialCase ();
            var t = CalendarHelper.CreateTask (m);
            vc.SetOwner (null);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                PerformSegue ("", new SegueHolder (t));
            }));
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void CreateMeetingEmailForMessage (INachoMessageEditor vc, McEmailMessageThread thread)
        {
            var m = thread.SingleMessageSpecialCase ();
            var c = CalendarHelper.CreateMeeting (m);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                PerformSegue ("NachoNowToEditEventView", new SegueHolder (c));
            }));
        }

        /// <summary>
        /// INachoFolderChooser Delegate
        /// </summary>
        public void DismissChildFolderChooser (INachoFolderChooser vc)
        {
            vc.SetOwner (null, null);
            vc.DismissFolderChooser (false, null);
        }

        /// <summary>
        /// INachoFolderChooser Delegate
        /// </summary>
        public void FolderSelected (INachoFolderChooser vc, McFolder folder, object cookie)
        {
            var segueHolder = (SegueHolder)cookie;
            var messageThread = (McEmailMessageThread)segueHolder.value;
            var message = messageThread.SingleMessageSpecialCase ();
            NcEmailArchiver.Move (message, folder);
            vc.DismissFolderChooser (true, null);
        }

        /// <summary>
        /// INachoCalendarItemEditorParent delegate
        /// </summary>
        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (false, null);
        }

        public void ReloadHotListData ()
        {
            carouselView.ReloadData ();
        }
    }
}
