// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using CoreGraphics;
using System.Collections.Generic;
using Foundation;
using UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore.Brain;

namespace NachoClient.iOS
{
    public partial class NachoNowViewController : NachoWrappedTableViewController, SwipeActionsViewDelegate
    {

        #region Properties

        UIBarButtonItem NewMessageItem;
        UIBarButtonItem NewMeetingItem;

        McAccount Account;
        SwitchAccountButton SwitchAccountButton;

        HotEventView HotEventView;
        McEvent HotEvent;
        NcTimer CalendarUpdateTimer;

        bool IsListeningForStatusInd;

        #endregion

        #region Constructors

        public NachoNowViewController () : base (UITableViewStyle.Grouped)
        {
            AutomaticallyAdjustsScrollViewInsets = false;

            using (var image = UIImage.FromBundle ("contact-newemail")) {
                NewMessageItem = new NcUIBarButtonItem (image, UIBarButtonItemStyle.Plain, NewEmailMessage);
                NewMessageItem.AccessibilityLabel = "New message";
            }
            using (var image = UIImage.FromBundle ("cal-add")) {
                NewMeetingItem = new NcUIBarButtonItem (image, UIBarButtonItemStyle.Plain, NewMeeting);
                NewMeetingItem.AccessibilityLabel = "New meeting";
            }
            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { NewMessageItem, NewMeetingItem };
        }

        #endregion

        #region View Lifecycle

        public override void LoadView ()
        {
            base.LoadView ();
            TableView.BackgroundColor = A.Color_NachoBackgroundGray;
            View.BackgroundColor = A.Color_NachoBackgroundGray;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            SwitchAccountButton = new SwitchAccountButton (SwitchAccountButtonPressed);
            NavigationItem.TitleView = SwitchAccountButton;

            HotEventView = new HotEventView (new CGRect (0, 0, View.Frame.Width, HotEventView.PreferredHeight));
            HotEventView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth;
            HotEventView.Action = ShowHotEvent;
            HotEventView.SwipeView.Delegate = this;
            View.AddSubview (HotEventView);

            // Have the event manager keep the McEvents accurate for at least the next seven days.
            NcEventManager.AddEventWindow (this, new TimeSpan (7, 0, 0, 0));

            SwitchToAccount (NcApplication.Instance.Account);

            ReloadCalendar ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            StartListeningForStatusInd ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            PermissionManager.DealWithNotificationPermission ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
        }

        public override void ViewDidDisappear (bool animated)
        {
            StopListeningForStatusInd ();
            if (CalendarUpdateTimer != null) {
                CalendarUpdateTimer.Dispose ();
                CalendarUpdateTimer = null;
            }
            base.ViewDidDisappear (animated);
        }

        #endregion

        #region User Actions

        void NewEmailMessage (object sender, EventArgs e)
        {
            ComposeMessage ();
        }

        void NewMeeting (object sender, EventArgs e)
        {
            EditEvent (null);
        }

        void SwitchAccountButtonPressed ()
        {
            SwitchAccountViewController.ShowDropdown (this, SwitchToAccount);
        }

        void ShowHotEvent ()
        {
            ShowEvent (HotEvent);
        }

        #endregion

        #region Calendar Event

        void ReloadCalendar ()
        {
            DateTime nextUpdateTime;
            HotEvent = CalendarHelper.CurrentOrNextEvent (out nextUpdateTime);
            if (!HotEvent.IsValid ()) {
                HotEvent = null;
            }
            HotEventView.Event = HotEvent;

            // set timer to update when the next event will happen
            var timeUntilNextUpdate = nextUpdateTime - DateTime.UtcNow;
            if (timeUntilNextUpdate < TimeSpan.Zero) {
                timeUntilNextUpdate = TimeSpan.Zero;
            }
            if (CalendarUpdateTimer != null) {
                CalendarUpdateTimer.Dispose ();
            }
            CalendarUpdateTimer = new NcTimer ("HotEventView", CalendarUpdateTimerFired, null, timeUntilNextUpdate, TimeSpan.Zero);
        }

        void CalendarUpdateTimerFired (object state)
        {
            CalendarUpdateTimer = null;
            BeginInvokeOnMainThread (ReloadCalendar);
        }

        public List<SwipeAction> ActionsForViewSwipingRight (SwipeActionsView view)
        {
            if (view == HotEventView.SwipeView) {
                if (HotEvent != null && !String.IsNullOrEmpty (HotEvent.OrganizerEmail)) {
                    return new List<SwipeAction> (new SwipeAction[] {
                        new BasicSwipeAction("I'm late", UIImage.FromBundle(A.File_NachoSwipeLate), A.Color_NachoSwipeLate, SendImLateMessage) 
                    });
                }
            }
            return null;
        }

        public List<SwipeAction> ActionsForViewSwipingLeft (SwipeActionsView view)
        {
            if (view == HotEventView.SwipeView) {
                if (HotEvent != null && !String.IsNullOrEmpty (HotEvent.OrganizerEmail)) {
                    return new List<SwipeAction> (new SwipeAction[] {
                        new BasicSwipeAction("Forward", UIImage.FromBundle(A.File_NachoSwipeForward), A.Color_NachoeSwipeForward, ForwardHotEvent) 
                    });
                }
            }
            return null;
        }

        public void SwipeViewWillBeginShowingActions (SwipeActionsView view)
        {
        }

        public void SwipeViewDidEndShowingActions (SwipeActionsView view)
        {
        }

        public void SwipeViewDidSelectAction (SwipeActionsView view, SwipeAction action)
        {
            if (view == HotEventView.SwipeView) {
                (action as BasicSwipeAction).Action ();
            }
        }

        #endregion

        #region Dealing with Notifications
       
        // Called from NachoTabBarController
        // if we need to handle a notification.
        public void HandleNotifications ()
        {
            NavigationController.PopToViewController (this, false);
            // If we have a pending notification, bring up the event detail view
            var eventNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.EventNotificationKey);
            var eventNotification = eventNotifications.FirstOrDefault ();
            if (null != eventNotification) {
                var eventId = int.Parse (eventNotification.Value);
                var e = McEvent.QueryById<McEvent> (eventId);
                eventNotification.Delete ();
                if (null != e) {
                    if (MaybeSwitchToNotificationAccount (e)) {
                        ShowEvent (e);
                    }
                }
            }
            var emailNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.EmailNotificationKey);
            var emailNotification = emailNotifications.FirstOrDefault ();
            if (null != emailNotification) {
                var messageId = int.Parse (emailNotification.Value);
                var m = McEmailMessage.QueryById<McEmailMessage> (messageId);
                emailNotification.Delete ();
                if (null != m) {
                    if (MaybeSwitchToNotificationAccount (m)) {
                        var t = new McEmailMessageThread ();
                        t.FirstMessageId = messageId;
                        t.MessageCount = 1;
                        ShowMessage (t);
                    }
                }
                return;
            }
            var chatNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.ChatNotificationKey);
            var chatNotification = chatNotifications.FirstOrDefault ();
            if (null != chatNotification) {
                var parts = chatNotification.Value.Split (',');
                var chatId = int.Parse (parts [0]);
                var messageId = int.Parse (parts [1]);
                var chat = McChat.QueryById<McChat> (chatId);
                var message = McChatMessage.EmailMessageInChat (chatId, messageId);
                chatNotification.Delete ();
                if (null != chat && null != message) {
                    if (MaybeSwitchToNotificationAccount (message)) {
                        var chatViewController = new ChatMessagesViewController ();
                        chatViewController.Chat = chat;
                        chatViewController.Account = McAccount.QueryById<McAccount> (chat.AccountId);
                        NavigationController.PushViewController (chatViewController, true);
                    }
                }
                return;
            }
        }

        bool MaybeSwitchToNotificationAccount (McAbstrObjectPerAcc obj)
        {
            var notificationAccount = McAccount.QueryById<McAccount> (obj.AccountId);
            if (null == notificationAccount) {
                Log.Error (Log.LOG_UI, "MaybeSwitchToNotificationAccount: no account for {0}", obj.Id);
                return false;
            }
            if (NcApplication.Instance.Account.ContainsAccount (notificationAccount.Id)) {
                return true;
            }
            NcApplication.Instance.Account = notificationAccount;
            SwitchToAccount (notificationAccount);
            return true;
        }

        #endregion

        #region System Events

        void StartListeningForStatusInd ()
        {
            if (!IsListeningForStatusInd) {
                IsListeningForStatusInd = true;
                NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            }
        }

        void StopListeningForStatusInd ()
        {
            if (IsListeningForStatusInd) {
                NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
                IsListeningForStatusInd = false;
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;


            switch (s.Status.SubKind){
            case NcResult.SubKindEnum.Info_EventSetChanged:
            case NcResult.SubKindEnum.Info_SystemTimeZoneChanged:
                ReloadCalendar ();
                break;
            case NcResult.SubKindEnum.Info_ExecutionContextChanged:
                if (NcApplication.ExecutionContextEnum.Foreground == NcApplication.Instance.ExecutionContext) {
                    ReloadCalendar ();
                }
                break;
            }

            if (s.AppliesToAccount (Account)) {
                switch (s.Status.SubKind) {
                case NcResult.SubKindEnum.Info_EmailMessageSetChanged:
                case NcResult.SubKindEnum.Info_EmailMessageScoreUpdated:
                case NcResult.SubKindEnum.Info_EmailMessageSetFlagSucceeded:
                case NcResult.SubKindEnum.Info_EmailMessageClearFlagSucceeded:
                case NcResult.SubKindEnum.Info_SystemTimeZoneChanged:
                    // RefreshPriorityInboxIfVisible ();
                    break;
                case NcResult.SubKindEnum.Error_SyncFailed:
                case NcResult.SubKindEnum.Info_SyncSucceeded:
                    // cancelRefreshTimer ();
                    break;
                }
            }
        }

        #endregion

        #region Private Helpers

        void SendImLateMessage ()
        {
            var calendarInvite = CalendarHelper.GetMcCalendarRootForEvent (HotEvent.Id);
            if (null != calendarInvite) {
                if (!String.IsNullOrEmpty (calendarInvite.OrganizerEmail)) {
                    var account = McAccount.EmailAccountForCalendar (calendarInvite);
                    var message = McEmailMessage.MessageWithSubject (account, calendarInvite.Subject);
                    message.To = calendarInvite.OrganizerEmail;
                    var composeViewController = new MessageComposeViewController (account);
                    composeViewController.Composer.Message = message;
                    composeViewController.Composer.InitialText = "Running late";
                    composeViewController.Present ();
                }
            }
        }

        void ForwardHotEvent ()
        {
            var calendarInvite = CalendarHelper.GetMcCalendarRootForEvent (HotEvent.Id);
            if (null != calendarInvite) {
                var account = McAccount.EmailAccountForCalendar (calendarInvite);
                var composeViewController = new MessageComposeViewController (account);
                composeViewController.Composer.RelatedCalendarItem = calendarInvite;
                composeViewController.Composer.Message = McEmailMessage.MessageWithSubject (account, "Fwd: " + calendarInvite.Subject);
                composeViewController.Present ();

            }
        }

        private void ComposeMessage ()
        {
            var composeViewController = new MessageComposeViewController (NcApplication.Instance.DefaultEmailAccount);
            composeViewController.Present ();
        }

        void EditEvent (McCalendar calendarEvent)
        {
            var vc = new EditEventViewController ();
            vc.SetCalendarItem (calendarEvent);
            var navigationController = new UINavigationController (vc);
            Util.ConfigureNavBar (false, navigationController);
            PresentViewController (navigationController, true, null);
        }

        void ShowMessage (McEmailMessageThread thread)
        {
            var messageViewController = new MessageViewController ();
            messageViewController.SetSingleMessageThread (thread);
            NavigationController.PushViewController (messageViewController, true);
        }

        void ShowEvent (McEvent calendarEvent)
        {
            var vc = new EventViewController ();
            vc.SetCalendarItem (calendarEvent);
            NavigationController.PushViewController (vc, true);
        }

        void SwitchToAccount (McAccount account)
        {
//            if (IsViewLoaded) {
//                using (NcAbate.UIAbatement ()) {
                    Account = account;
                    SwitchAccountButton.SetAccountImage (account);
//                }
//            }
        }

        private void ComposeResponse (McEmailMessageThread thread, EmailHelper.Action action)
        {
            var message = thread.FirstMessageSpecialCase ();
            var account = McAccount.EmailAccountForMessage (message);
            var composeViewController = new MessageComposeViewController (account);
            composeViewController.Composer.Kind = action;
            composeViewController.Composer.RelatedThread = thread;
            composeViewController.Present ();
        }

        #endregion

    }
}
