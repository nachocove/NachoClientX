// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using iCarouselBinding;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using MCSwipeTableViewCellBinding;
using MonoTouch.Dialog;

namespace NachoClient.iOS
{
    public partial class NachoNowViewController : NcUIViewController, INachoMessageEditorParent, INachoFolderChooserParent, INachoCalendarItemEditorParent, IMessageTableViewSourceDelegate
    {
        public bool wrap = false;
        protected INachoEmailMessages priorityInbox;
        protected MessageTableViewSource inboxSource;
        protected CalendarTableViewSource calendarSource;
        UIPanGestureRecognizer inboxPanGestureRecognizer = null;
        UIPanGestureRecognizer calendarPanGestureRecognizer = null;
        //        UIPanGestureRecognizer calendarThumbPanGestureRecognizer = null;
        UITapGestureRecognizer calendarThumbTapGestureRecognizer = null;

        public NachoNowViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // Multiple buttons on the left side

            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };

            nachoButton.Clicked += (object sender, EventArgs e) => {
                UIView.Animate (1, 0, UIViewAnimationOptions.CurveEaseOut,
                    () => {
                        ConfigureBasicView ();
                    },
                    () => {
                    });
                carouselView.ScrollToItemAtIndex (0, true);
            };

            cancelButton.Clicked += (object sender, EventArgs e) => {
                if (null != inboxSource) {
                    inboxSource.MultiSelectCancel (inboxTableView);
                }
            };

            deleteButton.Clicked += (object sender, EventArgs e) => {
                if (null != inboxSource) {
                    inboxSource.MultiSelectDelete (inboxTableView);
                }
            };

            saveButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("NachoNowToMessageAction", this);
            };

            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { composeButton };

            var carouselTouched = new UITapGestureRecognizer ();
            carouselTouched.NumberOfTapsRequired = 1;
            carouselTouched.AddTarget (this, new MonoTouch.ObjCRuntime.Selector ("CarouselTapSelector:"));
            carouselTouched.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            carouselView.AddGestureRecognizer (carouselTouched);

            priorityInbox = NcEmailManager.PriorityInbox ();

            // configure carousel
            carouselView.DataSource = new CarouselDataSource (this);
            carouselView.Delegate = new CarouselDelegate (this);  
            carouselView.Type = iCarouselType.Linear;
            carouselView.Vertical = false;
            carouselView.ContentOffset = new SizeF (0f, 0f);
            carouselView.BackgroundColor = UIColor.LightGray;
            View.BackgroundColor = UIColor.LightGray;

            inboxTableView.SeparatorStyle = UITableViewCellSeparatorStyle.SingleLine;
            calendarTableView.SeparatorStyle = UITableViewCellSeparatorStyle.SingleLine;

            inboxSource = new MessageTableViewSource ();
            inboxSource.owner = this;
            inboxSource.SetEmailMessages (NcEmailManager.Inbox ());
            inboxTableView.Source = inboxSource;

            calendarSource = new CalendarTableViewSource ();
            calendarSource.owner = this;
            calendarSource.SetCalendar (NcCalendarManager.Instance);
            calendarTableView.Source = calendarSource;

            // Set up gesture recognizers; they'll be enabled and disabled as needed

            // Pan the inbox up from the bottom
            inboxPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                inboxPan (obj);
            });
            inboxPanGestureRecognizer.Enabled = false;
            inboxPanGestureRecognizer.MaximumNumberOfTouches = 1;
            inboxTableView.AddGestureRecognizer (inboxPanGestureRecognizer);

            // Pan the calendar down from the top
            calendarPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                calendarPan (obj);
            });
            calendarPanGestureRecognizer.Enabled = false;
            calendarPanGestureRecognizer.MaximumNumberOfTouches = 1;
            calendarView.AddGestureRecognizer (calendarPanGestureRecognizer);

            // Tap the calendar thumb to hid the calendar again
            calendarThumbTapGestureRecognizer = new UITapGestureRecognizer ((UITapGestureRecognizer obj) => {
                calendarThumbTouch (obj);
            });
            calendarThumbView.UserInteractionEnabled = true;
            calendarThumbTapGestureRecognizer.Enabled = false;
            calendarThumbView.AddGestureRecognizer (calendarThumbTapGestureRecognizer);

            ConfigureBasicView ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            carouselView.ReloadData ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
        }

        protected void DisableGestureRecognizers ()
        {
            inboxPanGestureRecognizer.Enabled = false;
            calendarPanGestureRecognizer.Enabled = false;
            calendarThumbTapGestureRecognizer.Enabled = false;
        }

        /// <summary>
        /// Show event, inbox, and hot list
        /// </summary>
        protected void ConfigureBasicView ()
        {
            DisableGestureRecognizers ();

            // Disable scroll & multi-select when inbox is small
            inboxTableView.ScrollEnabled = false;
            inboxSource.MultiSelectEnable (inboxTableView, false);
            inboxTableView.ScrollToRow (NSIndexPath.FromRowSection (0, 0), UITableViewScrollPosition.Top, false);
            inboxTableView.Frame = inboxSmallSize ();

            inboxTableView.Layer.CornerRadius = 5;
            inboxTableView.Layer.MasksToBounds = true;

//            calendarTableView.ScrollToRow (NSIndexPath.FromRowSection (0, 0), UITableViewScrollPosition.Top, false);
            calendarView.Frame = calendarSmallSize ();
            calendarTableView.ScrollEnabled = false;

            carouselView.Frame = carouselNormalSize ();

            // Enabled gestures
            inboxPanGestureRecognizer.Enabled = true;
            calendarPanGestureRecognizer.Enabled = true;
        }

        /// <summary>
        /// Message list view in full screen
        /// </summary>
        protected void ConfigureMessageListView ()
        {
            DisableGestureRecognizers ();
            inboxSource.MultiSelectEnable (inboxTableView, true);
            inboxTableView.Frame = inboxFullSize ();
            inboxTableView.ScrollEnabled = true;

            carouselView.Frame = carouselSmallSize ();

            inboxTableView.Layer.CornerRadius = 0;
            inboxTableView.Layer.MasksToBounds = false;
        }

        protected void ConfigureCalendarListView ()
        {
            DisableGestureRecognizers ();
            calendarView.Frame = calendarFullSize ();
            calendarTableView.ScrollEnabled = true;
            calendarThumbTapGestureRecognizer.Enabled = true;

            carouselView.Frame = carouselSmallSize ();
        }

        int INBOX_ROW_HEIGHT = 116;
        int CALENDAR_VIEW_HEIGHT = 112;
        float inboxStartingY;
        float calendarStartingY;

        protected RectangleF carouselNormalSize ()
        {
            var rect = View.Frame;
            rect.Height = rect.Height - (INBOX_ROW_HEIGHT + CALENDAR_VIEW_HEIGHT);
            rect.Y = CALENDAR_VIEW_HEIGHT;
            return rect;
        }

        protected RectangleF carouselSmallSize ()
        {
            return new RectangleF (0, 0, 0, 0);
        }

        /// Grows from bottom of View
        protected RectangleF inboxSmallSize ()
        {
            var parentFrame = View.Frame;
            var inboxFrame = new RectangleF ();
            inboxFrame.Y = parentFrame.Height - INBOX_ROW_HEIGHT;
            inboxFrame.Height = INBOX_ROW_HEIGHT;
            inboxFrame.X = parentFrame.X + 10;
            inboxFrame.Width = parentFrame.Width - 20;
            return inboxFrame;
        }

        protected RectangleF inboxFullSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 0, parentFrame.Width, parentFrame.Height);
            return rect;
        }

        protected double inboxPercentOpen (float yOffset)
        {
            var fullSize = inboxFullSize ();
            var Height = fullSize.Height - (inboxStartingY + yOffset);
            return  Height / fullSize.Height;
        }
        // Positive means shrinking
        protected RectangleF inboxAdjustedSize (float yOffset)
        {
            var smallSize = inboxSmallSize ();
            var fullSize = inboxFullSize ();
            // Compute new size
            var rect = fullSize;
            rect.Y = inboxStartingY + yOffset;
            rect.Height = rect.Height - rect.Y;
            // Don't get smaller than small size
            if (rect.Height < smallSize.Height) {
                return smallSize;
            }
            if (rect.Height > fullSize.Height) {
                return fullSize;
            }
            var adjust = 10 - (10 * (float)inboxPercentOpen (yOffset));
            rect.X = rect.X + adjust;
            rect.Width = rect.Width - (2 * adjust);
            return rect;
        }

        protected void inboxPan (UIPanGestureRecognizer obj)
        {
            if (UIGestureRecognizerState.Began == obj.State) {
                inboxStartingY = inboxTableView.Frame.Y;
                View.BringSubviewToFront (inboxTableView);
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                // yOffset is negative when going up!
                var yOffset = obj.TranslationInView (inboxTableView).Y;
                Console.WriteLine ("yOffset = {0}", yOffset);
                inboxTableView.Frame = inboxAdjustedSize (yOffset);
                inboxTableView.SetNeedsDisplay ();
                return;
            }
            if (UIGestureRecognizerState.Ended == obj.State) {
                // Should we expand or contract?
                Double duration;
                var yOffset = obj.TranslationInView (inboxTableView).Y;
                var percentOpen = inboxPercentOpen (yOffset);
                Console.WriteLine ("velocity {0} & %open {1}", obj.VelocityInView (inboxTableView).Y, inboxPercentOpen (yOffset));
                if ((yOffset < 0) && (obj.VelocityInView (inboxTableView).Y < -1000) && (inboxPercentOpen (yOffset) < 0.5f)) {
                    inboxFlick (yOffset);
                    return;
                }
                if ((yOffset <= 0) && (inboxPercentOpen (yOffset) > 0.3f)) {
                    duration = 1.0 - percentOpen;
                    UIView.Animate (duration, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureMessageListView ();
                        },
                        () => {
                        }
                    );
                } else {
                    duration = percentOpen;
                    UIView.Animate (duration, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureBasicView ();
                        },
                        () => {
                        }
                    );
                }
            }
        }

        public void inboxFlick (float yOffset)
        {
            var inboxRect = inboxAdjustedSize (yOffset);
            inboxRect.Height = INBOX_ROW_HEIGHT;
            var inboxImage = CaptureRectInView (inboxRect, inboxTableView);
            var imageView = new UIImageView (inboxImage);
            View.AddSubview (imageView);
            imageView.Frame = inboxRect;

            UIView.Animate (0.2, 0, UIViewAnimationOptions.CurveEaseIn,
                () => {
                    inboxTableView.Frame = inboxSmallSize ();
                    imageView.Frame = carouselNormalSize ();
                },
                () => {
                    UIView.Animate (0.2, 0, UIViewAnimationOptions.TransitionNone,
                        () => {
                            imageView.Alpha = 0;
                        },
                        () => {
                            imageView.RemoveFromSuperview ();
                        });
                });
        }

        public UIImage CaptureRectInView (RectangleF rect, UIView view)
        {
            UIImage clonedImage = null;

            UIGraphics.BeginImageContextWithOptions (rect.Size, false, 0.0f);
            view.Layer.RenderInContext (UIGraphics.GetCurrentContext ());
            clonedImage = UIGraphics.GetImageFromCurrentImageContext ();
            UIGraphics.EndImageContext ();
            return clonedImage;
        }

        public void MultiSelectToggle (MessageTableViewSource source, bool enabled)
        {
            UIView.Animate (0.2, new NSAction (
                delegate {
                    if (enabled) {
                        NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { deleteButton, saveButton };
                        NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { cancelButton };
                    } else {
                        NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { composeButton };
                        NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };
                    }
                })
            );
        }

        /// Grows from top of View
        protected RectangleF calendarSmallSize ()
        {
            var parentFrame = View.Frame;
            var inboxFrame = new RectangleF ();
            inboxFrame.Y = 0;
            inboxFrame.Height = CALENDAR_VIEW_HEIGHT;
            inboxFrame.X = parentFrame.X;
            inboxFrame.Width = parentFrame.Width;
            return inboxFrame;
        }

        protected RectangleF calendarFullSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 0, parentFrame.Width, parentFrame.Height);
            return rect;
        }

        protected double calendarPercentOpen (float yOffset)
        {
            var fullSize = calendarFullSize ();
            var Height = calendarStartingY + yOffset;
            return  Height / fullSize.Height;
        }

        /// Positive means growing
        protected RectangleF calendarAdjustedSize (float yOffset)
        {
            var smallSize = calendarSmallSize ();
            var fullSize = calendarFullSize ();
            // Compute new size
            var rect = fullSize;
            rect.Height = calendarStartingY + yOffset;
            // Don't get smaller than small size
            if (rect.Height < smallSize.Height) {
                return smallSize;
            }
            if (rect.Height > fullSize.Height) {
                return fullSize;
            }
            return rect;
        }

        protected void calendarPan (UIPanGestureRecognizer obj)
        {
            if (UIGestureRecognizerState.Began == obj.State) {
                calendarStartingY = calendarTableView.Frame.Bottom;
                View.BringSubviewToFront (calendarView);
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                // yOffset is negative when going up!
                var yOffset = obj.TranslationInView (calendarTableView).Y;
                Console.WriteLine ("yOffset = {0}", yOffset);
                calendarView.Frame = calendarAdjustedSize (yOffset);
                calendarView.SetNeedsDisplay ();
                return;
            }
            if (UIGestureRecognizerState.Ended == obj.State) {
                // Should we expand or contract?
                Double duration;
                var yOffset = obj.TranslationInView (calendarTableView).Y;
                var percentOpen = calendarPercentOpen (yOffset);
                Console.WriteLine ("velocity {0} & %open {1}", obj.VelocityInView (inboxTableView).Y, calendarPercentOpen (yOffset));
                if (percentOpen > 0.7f) {
                    duration = 1.0 - percentOpen;
                    UIView.Animate (duration, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureCalendarListView ();
                        },
                        () => {
                        }
                    );
                } else {
                    duration = percentOpen;
                    UIView.Animate (duration, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureBasicView ();
                        },
                        () => {
                        }
                    );
                }
                return;
            }
        }

        protected void calendarThumbTouch (UITapGestureRecognizer obj)
        {
            UIView.Animate (0.2, 0, UIViewAnimationOptions.CurveEaseIn,
                () => {
                    ConfigureBasicView ();
                },
                () => {
                }
            );
        }

        [MonoTouch.Foundation.Export ("CarouselTapSelector:")]
        public void OnDoubleTapCarousel (UIGestureRecognizer sender)
        {
            // FIXME: What to do on double tap?
        }

        ///        NachoNowToCalendar(null)
        ///        NachoNowToCalendarItem (index path)
        ///        NachoNowToCompose (null)
        ///        NachoNowToContacts (null)
        ///        NachoNowToMessageAction (index path)
        ///        NachoNowToMessageList (inbox folder)
        ///        NachoNowToMessageList(deferred folder)
        ///        NachoNowToMessagePriority  (index path)
        ///        NachoNowToMessageView (index path)
        ///
        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "NachoNowToCalendar") {
                return; // Nothing to do
            }
            if (segue.Identifier == "NachoNowToCalendarItem") {
                var holder = sender as SegueHolder;
                if (null != holder) {
                    var c = holder.value as McCalendar;
                    if (null != c) {
                        CalendarItemViewController dvc = (CalendarItemViewController)segue.DestinationViewController;
                        dvc.SetCalendarItem (c, CalendarItemEditorAction.view);
                        dvc.SetOwner (this);
                    }
                }
                return;
            }
            if (segue.Identifier == "NachoNowToCompose") {
                return; // Nothing to do
            }
            if (segue.Identifier == "NachoNowToContacts") {
                return; // Nothing to do
            }
            if (segue.Identifier == "NachoNowToMessageAction") {
                var vc = (MessageActionViewController)segue.DestinationViewController;
                var h = sender as SegueHolder;
                vc.SetOwner (this, h);
                return;
            }
            if (segue.Identifier == "NachoNowToMessageList") {
                var holder = (SegueHolder)sender;
                var messageList = (INachoEmailMessages)holder.value;
                var messageListViewController = (MessageListViewController)segue.DestinationViewController;
                messageListViewController.SetEmailMessages (messageList);
                return;
            }
//            if (segue.Identifier == "NachoNowToMessageView") {
//                var indexPath = (NSIndexPath)sender;
//                var vc = (MessageViewController)segue.DestinationViewController;
//                vc.thread = (McEmailMessageThread)hotList [indexPath.Row];
//                return;
//            }
//            if (segue.Identifier == "NachoNowToMessagePriority") {
//                var vc = (MessagePriorityViewController)segue.DestinationViewController;
//                var indexPath = (NSIndexPath)sender;
//                vc.thread = messageThreads.GetEmailThread (indexPath.Row);
//                vc.SetOwner (this);
//                return;
//            }

            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NachoAssert.CaseError ();
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void DismissChildMessageEditor (INachoMessageEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissMessageEditor (false, null);
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void CreateTaskForEmailMessage (INachoMessageEditor vc, McEmailMessageThread thread)
        {
            var m = thread.SingleMessageSpecialCase ();
            var t = CalendarHelper.CreateTask (m);
            vc.SetOwner (null);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                PerformSegue ("", new SegueHolder (t));
            }));
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void CreateMeetingEmailForMessage (INachoMessageEditor vc, McEmailMessageThread thread)
        {
            var m = thread.SingleMessageSpecialCase ();
            var c = CalendarHelper.CreateMeeting (m);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                PerformSegue ("", new SegueHolder (c));
            }));
        }

        /// <summary>
        /// INachoFolderChooser Delegate
        /// </summary>
        public void DismissChildFolderChooser (INachoFolderChooser vc)
        {
            vc.SetOwner (null, null);
            vc.DismissFolderChooser (false, null);
        }

        /// <summary>
        /// INachoFolderChooser Delegate
        /// </summary>
        public void FolderSelected (INachoFolderChooser vc, McFolder folder, object cookie)
        {
            if (null != inboxSource) {
                inboxSource.MoveToFolder (inboxTableView, folder, cookie);
            }
            vc.DismissFolderChooser (true, null);
        }

        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (false, null);
        }

        public class CarouselDataSource : iCarouselDataSource
        {
            NachoNowViewController owner;

            public CarouselDataSource (NachoNowViewController o)
            {
                owner = o;
            }

            public override uint NumberOfItemsInCarousel (iCarousel carousel)
            {
                if (null != owner) {
                    if (null != owner.priorityInbox) {
                        return (uint)owner.priorityInbox.Count ();
                    }
                }
                return 0;
            }

            public override UIView ViewForItemAtIndex (iCarousel carousel, uint index, UIView view)
            {
                // Create new view if no view is available for recycling
                if (view == null) {
                    var f = carousel.Frame;
                    var frame = new RectangleF (0, 0, f.Width - 30.0f, f.Height - 30.0f);
                    var v = new UIView (frame);
                    v.AutoresizingMask = UIViewAutoresizing.None;
                    v.ContentMode = UIViewContentMode.Center;
                    v.Layer.CornerRadius = 5;
                    v.Layer.MasksToBounds = true;
                    v.Layer.BorderColor = UIColor.DarkGray.CGColor;
                    v.Layer.BorderWidth = 1;
                    view = v;
                }

                // Start fresh
                var subviews = view.Subviews;
                foreach (var s in subviews) {
                    s.RemoveFromSuperview ();
                }

                var messageThread = owner.priorityInbox.GetEmailThread ((int)index);
                var message = messageThread.SingleMessageSpecialCase ();
                var vv = EmailView (message);
                vv.Frame = view.Frame;
                return vv;
            }

            protected UIView EmailView (McEmailMessage m)
            {
                if (null == m.Summary) {
                    m.Summarize ();
                }

                var root = new RootElement (m.Subject);
                root.UnevenRows = true;

                Section section = null;

                section = new SuperThinSection (UIColor.White);
                section.Add (new StyledStringElementWithIndent (m.From));
                section.Add (new SubjectElement (m.Subject));
                section.Add (new StyledMultilineElementWithIndent (m.Summary));
                root.Add (section);
                var dvc = new DialogViewController (root);
                dvc.View.UserInteractionEnabled = false;
                dvc.View.BackgroundColor = UIColor.White;
                return dvc.View;
            }

            public override uint NumberOfPlaceholdersInCarousel (iCarousel carousel)
            {
                if (0 == NumberOfItemsInCarousel (carousel)) {
                    return 1;
                } else {
                    return 0;
                }
            }

            public override UIView PlaceholderViewAtIndex (iCarousel carousel, uint index, UIView view)
            {
                //create new view if no view is available for recycling
                if (null == view) {
                    var f = carousel.Frame;
                    var frame = new RectangleF (f.X, f.Y, f.Width - 30.0f, f.Height - 30.0f);
                    var v = new UIView (frame);
                    v.ContentMode = UIViewContentMode.Center;
                    v.BackgroundColor = UIColor.Blue;
                    v.Layer.CornerRadius = 5;
                    v.Layer.MasksToBounds = true;
                    v.Layer.BorderColor = UIColor.DarkGray.CGColor;
                    v.Layer.BorderWidth = 1;
                    var l = new UILabel (v.Bounds);
                    l.BackgroundColor = UIColor.White;
                    l.TextAlignment = UITextAlignment.Center;
                    l.Font = l.Font.WithSize (20f);
                    l.Tag = 1;
                    v.AddSubview (l);
                    view = v;
                }
                var label = (UILabel)view.ViewWithTag (1);
                label.Text = "No hot items!";
            
                return view;
            }
        }

        public class CarouselDelegate : iCarouselDelegate
        {
            NachoNowViewController owner;

            public CarouselDelegate (NachoNowViewController o)
            {
                owner = o;
            }

            public override void DidSelectItemAtIndex (iCarousel carousel, int index)
            {
                // Ignore placeholders
                if (0 == owner.priorityInbox.Count ()) {
                    return;
                }

                return;

//                NachoAssert.CaseError ();
            }

            /// <summary>
            /// Values for option.
            /// </summary>
            public override float ValueForOption (iCarousel carousel, iCarouselOption option, float value)
            {
                // customize carousel display
                switch (option) {
                case iCarouselOption.Wrap:
                    // normally you would hard-code this to true or false
                    return (owner.wrap ? 1.0f : 0.0f);
                case iCarouselOption.Spacing:
                    // add a bit of spacing between the item views
                    return value * 1.02f;
                case iCarouselOption.FadeMax:
                    if (iCarouselType.Custom == carousel.Type) {
                        return 0.0f;
                    }
                    return value;
                default:
                    return value;
                }

            }
        }
    }
}
