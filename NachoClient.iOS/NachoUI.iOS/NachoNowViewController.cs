// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using CoreGraphics;
using System.Collections.Generic;
using Foundation;
using UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore.Brain;

namespace NachoClient.iOS
{
    public partial class NachoNowViewController : NachoWrappedTableViewController, SwipeActionsViewDelegate, MessagesSyncManagerDelegate, INachoFolderChooserParent
    {
        #region Constants

        const string MessageCellIdentifier = "MessageCellIdentifier";
        const string ActionCellIdentifier = "ActionCellIdentifier";
        const string ButtonCellIdentifier = "ButtonCellIdentifier";
        public const string HotMessageRefreshTaskName = "NachoNowViewController_RefreshHotMessages";

        #endregion

        #region Properties

        UIBarButtonItem NewMessageItem;
        UIBarButtonItem NewMeetingItem;

        McAccount Account;
        SwitchAccountButton SwitchAccountButton;

        HotEventView HotEventView;
        McEvent HotEvent;
        NcTimer CalendarUpdateTimer;

        NachoEmailMessages HotMessages;
        NachoHotActions HotActions;
        MessagesSyncManager SyncManager;

        EmptyHotView EmptyView;

        bool IsListeningForStatusInd;
        bool HasAppearedOnce = false;
        bool HasLoadedOnce = false;

        int NumberOfMessagePreviewLines = 2;
        int NumberOfActionPreviewLines = 1;
        int SectionCount = 0;
        int HotMessagesSection = -1;
        int ActionsSection = -1;
        int MaximumNumberOfHotMessages = 4;
        int MaximumNumberOfActions = 4;
        int MessageSectionRows;
        int ActionSectionRows;
        int ActionRows = 0;
        int ExtraActionRows = 0;
        int ExtraActionRowHot = -1;
        int ExtraActionRowNormal = -1;

        #endregion

        #region Constructors

        public NachoNowViewController () : base (UITableViewStyle.Grouped)
        {
            SyncManager = new MessagesSyncManager ();
            SyncManager.Delegate = this;

            AutomaticallyAdjustsScrollViewInsets = false;

            NewMessageItem = new NcUIBarButtonItem (UIImage.FromBundle ("contact-newemail"), UIBarButtonItemStyle.Plain, NewEmailMessage);
            NewMessageItem.AccessibilityLabel = "New message";
            NewMeetingItem = new NcUIBarButtonItem (UIImage.FromBundle ("cal-add"), UIBarButtonItemStyle.Plain, NewMeeting);
            NewMeetingItem.AccessibilityLabel = "New meeting";
            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { NewMessageItem, NewMeetingItem };

            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";

            HotMessages = NcEmailManager.PriorityInbox (NcApplication.Instance.Account.Id, includeActions:false);
            HotActions = new NachoHotActions (NcApplication.Instance.Account.Id);
        }

        #endregion

        #region View Lifecycle

        public override void LoadView ()
        {
            base.LoadView ();
            TableView.BackgroundColor = A.Color_NachoBackgroundGray;
            View.BackgroundColor = A.Color_NachoBackgroundGray;
            TableView.RegisterClassForCellReuse (typeof(MessageCell), MessageCellIdentifier);
            TableView.RegisterClassForCellReuse (typeof(ButtonCell), ButtonCellIdentifier);
            TableView.RegisterClassForCellReuse (typeof(ActionCell), ActionCellIdentifier);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            SwitchAccountButton = new SwitchAccountButton (SwitchAccountButtonPressed);
            Account = NcApplication.Instance.Account;
            SwitchAccountButton.SetAccountImage (Account);
            NavigationItem.TitleView = SwitchAccountButton;

            HotEventView = new HotEventView (new CGRect (0, 0, View.Frame.Width, HotEventView.PreferredHeight));
            HotEventView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth;
            HotEventView.Action = ShowHotEvent;
            HotEventView.SwipeView.Delegate = this;
            View.AddSubview (HotEventView);

            TableView.Frame = new CGRect (0.0f, HotEventView.Frame.Height, View.Bounds.Width, View.Bounds.Height - HotEventView.Frame.Height);
            TableView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;

            // Have the event manager keep the McEvents accurate for at least the next seven days.
            NcEventManager.AddEventWindow (this, new TimeSpan (7, 0, 0, 0));

            EmptyView = new EmptyHotView (TableView.Frame);
            EmptyView.TintColor = TableView.BackgroundColor.ColorDarkenedByAmount (0.5f);
            EmptyView.ImageView.TintColor = TableView.BackgroundColor.ColorDarkenedByAmount (0.25f);
            EmptyView.AutoresizingMask = TableView.AutoresizingMask;
            EmptyView.Hidden = true;
            View.AddSubview (EmptyView);

            ReloadHotMessages ();
            ReloadCalendar ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (RefreshControl == null) {
                EnableRefreshControl ();
            }
            if (NcApplication.Instance.Account.Id != Account.Id) {
                SwitchToAccount (NcApplication.Instance.Account);
            }
            if (SyncManager.IsSyncing) {
                SyncManager.ResumeEvents ();
            }
            HotMessages.RefetchSyncTime ();
            if (HasAppearedOnce) {
                ReloadCalendar ();
                ReloadHotMessages ();
            }
            StartListeningForStatusInd ();
            HasAppearedOnce = true;
            if (HotEventView.Selected) {
                HotEventView.SetSelected (false, animated: true);
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            PermissionManager.DealWithNotificationPermission ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
        }

        public override void ViewDidDisappear (bool animated)
        {
            SyncManager.PauseEvents ();
            StopListeningForStatusInd ();
            HotEventView.CancelAutomaticDateUpdate ();
            if (CalendarUpdateTimer != null) {
                CalendarUpdateTimer.Dispose ();
                CalendarUpdateTimer = null;
            }
            base.ViewDidDisappear (animated);
        }

        #endregion

        #region User Actions

        protected override void HandleRefreshControlEvent (object sender, EventArgs e)
        {
            RefreshIndicator.StartAnimating ();
            StartSync ();
        }

        void NewEmailMessage (object sender, EventArgs e)
        {
            ComposeMessage ();
        }

        void NewMeeting (object sender, EventArgs e)
        {
            EditEvent (null);
        }

        void SwitchAccountButtonPressed ()
        {
            SwitchAccountViewController.ShowDropdown (this, SwitchToAccount);
        }

        void ShowHotEvent ()
        {
            ShowEvent (HotEvent);
        }

        void MarkMessageAsRead (NSIndexPath indexPath)
        {
            var message = HotMessages.GetCachedMessage (indexPath.Row);
            var thread = HotMessages.GetEmailThread (indexPath.Row);
            if (message != null) {
                EmailHelper.MarkAsRead (message, true);
                message.IsRead = true;
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message, thread.MessageCount);
                }
            }
        }

        void MarkMessageAsUnread (NSIndexPath indexPath)
        {
            var message = HotMessages.GetCachedMessage (indexPath.Row);
            var thread = HotMessages.GetEmailThread (indexPath.Row);
            if (message != null) {
                EmailHelper.MarkAsUnread (message, true);
                message.IsRead = false;
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message, thread.MessageCount);
                }
            }
        }

        void MarkMessageAsHot (NSIndexPath indexPath)
        {
            var message = HotMessages.GetCachedMessage (indexPath.Row);
            var thread = HotMessages.GetEmailThread (indexPath.Row);
            if (message != null) {
                message.UserAction = NachoCore.Utils.ScoringHelpers.ToggleHotOrNot (message);
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message, thread.MessageCount);
                }
            }
        }

        void MakeAction (NSIndexPath indexPath)
        {
            var message = HotMessages.GetCachedMessage (indexPath.Row);
            var viewController = new ActionEditViewController ();
            viewController.Action = McAction.FromMessage (message);
            viewController.PresentOverViewController (this);
        }

        void MarkMessageAsUnhot (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var message = HotMessages.GetCachedMessage (indexPath.Row);
            var thread = HotMessages.GetEmailThread (indexPath.Row);
            if (message != null) {
                message.UserAction = NachoCore.Utils.ScoringHelpers.ToggleHotOrNot (message);
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message, thread.MessageCount);
                }
            }
        }

        void DeleteMessage (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var message = HotMessages.GetCachedMessage (indexPath.Row);
            var thread = HotMessages.GetEmailThread (indexPath.Row);
            if (message != null) {
                NcAssert.NotNull (thread);
                NcTask.Run (() => {
                    NcEmailArchiver.Delete (thread);
                }, "NachoNowViewController.DeleteMessage");
                HotMessages.IgnoreMessage (thread.FirstMessageId);
                SetNeedsReload ();
            }
        }

        void ArchiveMessage (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var message = HotMessages.GetCachedMessage (indexPath.Row);
            var thread = HotMessages.GetEmailThread (indexPath.Row);
            if (message != null) {
                NcAssert.NotNull (thread);
                NcTask.Run (() => {
                    NcEmailArchiver.Archive (thread);
                }, "MessageListViewController.ArchiveMessage");
                HotMessages.IgnoreMessage (thread.FirstMessageId);
                SetNeedsReload ();
            }
        }

        void ShowMoreActionsForMessage (NSIndexPath indexPath)
        {
            var message = HotMessages.GetCachedMessage (indexPath.Row);
            var thread = HotMessages.GetEmailThread (indexPath.Row);
            if (message != null) {
                var alertView = UIAlertController.Create (null, null, UIAlertControllerStyle.ActionSheet);
                alertView.AddAction(UIAlertAction.Create("Move", UIAlertActionStyle.Default, (UIAlertAction action) => { ShowFoldersForMove(thread, message); }));
                alertView.AddAction (UIAlertAction.Create ("Create Event", UIAlertActionStyle.Default, (UIAlertAction action) => { CreateEvent(message); }));
                alertView.AddAction (UIAlertAction.Create ("Forward", UIAlertActionStyle.Default, (UIAlertAction action) => { Forward(message); }));
                alertView.AddAction (UIAlertAction.Create ("Reply", UIAlertActionStyle.Default, (UIAlertAction action) => { Reply(message); }));
                alertView.AddAction (UIAlertAction.Create ("Reply All", UIAlertActionStyle.Default, (UIAlertAction action) => { ReplyAll(message); }));
                alertView.AddAction (UIAlertAction.Create ("Quick Reply", UIAlertActionStyle.Default, (UIAlertAction action) => { QuickReply(message); }));
                alertView.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (UIAlertAction action) => { }));
                PresentViewController (alertView, true, null);
            }
        }

        void ShowFoldersForMove (McEmailMessageThread thread, McEmailMessage selectedMessage)
        {
            var vc = new FoldersViewController ();
            var accountId = selectedMessage.AccountId;
            NcAssert.False (0 == accountId);
            vc.SetOwner (this, true, accountId, thread);
            PresentViewController (vc, true, null);
        }

        public void FolderSelected (INachoFolderChooser vc, McFolder folder, object cookie)
        {
            var messageThread = cookie as McEmailMessageThread;
            if (messageThread != null) {
                NcTask.Run (() => {
                    NcEmailArchiver.Move (messageThread, folder);
                }, "MessageListViewController.MoveMessage");
                HotMessages.IgnoreMessage (messageThread.FirstMessageId);
                vc.DismissFolderChooser (true, () => {
                    SetNeedsReload ();
                });
            }
        }

        void QuickReply (McEmailMessage message)
        {
            ComposeReply (message, EmailHelper.Action.Reply, quickReply: true);
        }

        void Reply (McEmailMessage message)
        {
            ComposeReply (message, EmailHelper.Action.Reply);
        }

        void ReplyAll (McEmailMessage message)
        {
            ComposeReply (message, EmailHelper.Action.ReplyAll);
        }

        void Forward (McEmailMessage message)
        {
            ComposeReply (message, EmailHelper.Action.Forward);
        }

        void CreateEvent (McEmailMessage message)
        {
            var c = CalendarHelper.CreateMeeting (message);
            EditEvent (c);
        }

        void DeleteAction (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var action = HotActions.ActionAt (indexPath.Row);
            action.RemoveAndDeleteMessage ();
        }

        void DemoteAction (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var action = HotActions.ActionAt (indexPath.Row);
            action.RemoveButKeepMessage ();
        }

        void MarkActionAsUnhot (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var action = HotActions.ActionAt (indexPath.Row);
            if (action.IsHot) {
                NcTask.Run (() => {
                    action.Unhot ();
                    NotifyActionsChanged (action);
                }, "NachoNowViewController_MarkActionAsUnhot", NcTask.ActionSerialScheduler);
            }
        }

        void DeferAction (NSIndexPath indexPath)
        {
            var action = HotActions.ActionAt (indexPath.Row);
            var alertController = UIAlertController.Create ("", "Defer until...", UIAlertControllerStyle.ActionSheet);
            alertController.AddAction (UIAlertAction.Create ("An Hour From Now", UIAlertActionStyle.Default, (UIAlertAction alertAction) => { DeferAction(action, MessageDeferralType.OneHour); }));
            alertController.AddAction (UIAlertAction.Create ("Tonight", UIAlertActionStyle.Default, (UIAlertAction alertAction) => { DeferAction(action, MessageDeferralType.Tonight); }));
            alertController.AddAction (UIAlertAction.Create ("Tomorrow Morning", UIAlertActionStyle.Default, (UIAlertAction alertAction) => { DeferAction(action, MessageDeferralType.Tomorrow); }));
            alertController.AddAction (UIAlertAction.Create ("Monday Morning", UIAlertActionStyle.Default, (UIAlertAction alertAction) => { DeferAction(action, MessageDeferralType.NextWeek); }));
            alertController.AddAction (UIAlertAction.Create ("Saturday Morning", UIAlertActionStyle.Default, (UIAlertAction alertAction) => { DeferAction(action, MessageDeferralType.Weekend); }));
            alertController.AddAction (UIAlertAction.Create ("Other...", UIAlertActionStyle.Default, (UIAlertAction alertAction) => { DeferActionByEditing(action); }));
            alertController.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, null));
            PresentViewController (alertController, true, null);
        }

        void DeferAction (McAction action, MessageDeferralType type)
        {
            NcTask.Run (() => {
                action.Defer (type);
                NotifyActionsChanged (action);
            }, "NachoNowViewController_DeferAction", NcTask.ActionSerialScheduler);
        }

        void DeferActionByEditing (McAction action)
        {
            var editedCopy = McAction.QueryById<McAction> (action.Id);
            editedCopy.State = McAction.ActionState.Deferred;
            EditAction (editedCopy);
        }

        void NotifyActionsChanged (McAction action)
        {
            var account = McAccount.QueryById<McAccount> (action.AccountId);
            NcApplication.Instance.InvokeStatusIndEvent (new StatusIndEventArgs() {
                Account = account,
                Status = NcResult.Info (NcResult.SubKindEnum.Info_ActionSetChanged)
            });
        }

        #endregion

        #region Calendar Event

        void ReloadCalendar ()
        {
            DateTime nextUpdateTime;
            HotEvent = CalendarHelper.CurrentOrNextEvent (out nextUpdateTime);
            if (null != HotEvent && !HotEvent.IsValid ()) {
                HotEvent = null;
            }
            HotEventView.Event = HotEvent;

            // set timer to update when the next event will happen
            var timeUntilNextUpdate = nextUpdateTime - DateTime.UtcNow;
            if (timeUntilNextUpdate < TimeSpan.Zero) {
                timeUntilNextUpdate = TimeSpan.Zero;
            }
            if (CalendarUpdateTimer != null) {
                CalendarUpdateTimer.Dispose ();
            }
            CalendarUpdateTimer = new NcTimer ("NachoNow_UpdateHotEventView", CalendarUpdateTimerFired, null, timeUntilNextUpdate, TimeSpan.Zero);
        }

        void CalendarUpdateTimerFired (object state)
        {
            CalendarUpdateTimer = null;
            BeginInvokeOnMainThread (ReloadCalendar);
        }

        public List<SwipeAction> ActionsForViewSwipingRight (SwipeActionsView view)
        {
            if (view == HotEventView.SwipeView) {
                if (HotEvent != null && !String.IsNullOrEmpty (HotEvent.OrganizerEmail)) {
                    return new List<SwipeAction> (new SwipeAction[] {
                        new BasicSwipeAction("I'm late", UIImage.FromBundle(A.File_NachoSwipeLate), A.Color_NachoSwipeLate, SendImLateMessage) 
                    });
                }
            }
            return null;
        }

        public List<SwipeAction> ActionsForViewSwipingLeft (SwipeActionsView view)
        {
            if (view == HotEventView.SwipeView) {
                if (HotEvent != null && !String.IsNullOrEmpty (HotEvent.OrganizerEmail)) {
                    return new List<SwipeAction> (new SwipeAction[] {
                        new BasicSwipeAction("Forward", UIImage.FromBundle(A.File_NachoSwipeForward), A.Color_NachoeSwipeForward, ForwardHotEvent) 
                    });
                }
            }
            return null;
        }

        public void SwipeViewWillBeginShowingActions (SwipeActionsView view)
        {
        }

        public void SwipeViewDidEndShowingActions (SwipeActionsView view)
        {
        }

        public void SwipeViewDidSelectAction (SwipeActionsView view, SwipeAction action)
        {
            if (view == HotEventView.SwipeView) {
                (action as BasicSwipeAction).Action ();
            }
        }

        #endregion

        #region Dealing with Notifications
       
        // Called from NachoTabBarController
        // if we need to handle a notification.
        public void HandleNotifications ()
        {
            NavigationController.PopToViewController (this, false);
            // If we have a pending notification, bring up the event detail view
            var eventNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.EventNotificationKey);
            var eventNotification = eventNotifications.FirstOrDefault ();
            if (null != eventNotification) {
                var eventId = int.Parse (eventNotification.Value);
                var e = McEvent.QueryById<McEvent> (eventId);
                eventNotification.Delete ();
                if (null != e) {
                    if (MaybeSwitchToNotificationAccount (e)) {
                        ShowEvent (e);
                    }
                }
            }
            var emailNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.EmailNotificationKey);
            var emailNotification = emailNotifications.FirstOrDefault ();
            if (null != emailNotification) {
                var messageId = int.Parse (emailNotification.Value);
                var m = McEmailMessage.QueryById<McEmailMessage> (messageId);
                emailNotification.Delete ();
                if (null != m) {
                    if (MaybeSwitchToNotificationAccount (m)) {
                        ShowMessage (m);
                    }
                }
                return;
            }
            var chatNotifications = McMutables.Get (McAccount.GetDeviceAccount ().Id, NachoClient.iOS.AppDelegate.ChatNotificationKey);
            var chatNotification = chatNotifications.FirstOrDefault ();
            if (null != chatNotification) {
                var parts = chatNotification.Value.Split (',');
                var chatId = int.Parse (parts [0]);
                var messageId = int.Parse (parts [1]);
                var chat = McChat.QueryById<McChat> (chatId);
                var message = McChatMessage.EmailMessageInChat (chatId, messageId);
                chatNotification.Delete ();
                if (null != chat && null != message) {
                    if (MaybeSwitchToNotificationAccount (message)) {
                        var chatViewController = new ChatMessagesViewController ();
                        chatViewController.Chat = chat;
                        chatViewController.Account = McAccount.QueryById<McAccount> (chat.AccountId);
                        NavigationController.PushViewController (chatViewController, true);
                    }
                }
                return;
            }
        }

        bool MaybeSwitchToNotificationAccount (McAbstrObjectPerAcc obj)
        {
            var notificationAccount = McAccount.QueryById<McAccount> (obj.AccountId);
            if (null == notificationAccount) {
                Log.Error (Log.LOG_UI, "MaybeSwitchToNotificationAccount: no account for {0}", obj.Id);
                return false;
            }
            if (NcApplication.Instance.Account.ContainsAccount (notificationAccount.Id)) {
                return true;
            }
            NcApplication.Instance.Account = notificationAccount;
            SwitchToAccount (notificationAccount);
            return true;
        }

        #endregion

        #region Reload Data

        bool NeedsReload;
        bool IsReloading;

        void SetNeedsReload ()
        {
            NeedsReload = true;
            if (!IsReloading) {
                ReloadHotMessages ();
            }
        }

        void ReloadHotMessages ()
        {
            if (!IsReloading) {
                IsReloading = true;
                NeedsReload = false;
                NcTask.Run (() => {
                    List<int> messageAdds;
                    List<int> messageDeletes;
                    bool messagesChanged = HotMessages.Refresh (out messageAdds, out messageDeletes);
                    List<int> actionAdds;
                    List<int> actionDeletes;
                    bool actionsChanged = HotActions.Refresh (out actionAdds, out actionDeletes);
                    BeginInvokeOnMainThread (() => {
                        HandleReloadHotMessagesResults (messagesChanged, messageAdds, messageDeletes, actionsChanged, actionAdds, actionDeletes);
                        IsReloading = false;
                        if (NeedsReload) {
                            ReloadHotMessages ();
                        }
                    });
                }, HotMessageRefreshTaskName);
            }
        }

        void HandleReloadHotMessagesResults (bool messagesChanged, List<int> messageAdds, List<int> messageDeletes, bool actionsChanged, List<int> actionAdds, List<int> actionDeletes)
        {
            HotMessages.ClearCache ();
            if (IsShowingRefreshIndicator && !SyncManager.IsSyncing) {
                EndRefreshing ();
            }
            SectionCount = 0;
            var hotMessagesSectionBeforeUpdate = HotMessagesSection;
            var actionsSectionBeforeUpdate = ActionsSection;
            var actionRowsBeforeUpdate = ActionRows;
            ExtraActionRows = 0;
            ExtraActionRowHot = -1;
            ExtraActionRowNormal = -1;
            ActionRows = Math.Min (MaximumNumberOfActions, HotActions.Count ());
            if (ActionRows > 0 || HotActions.NonHotCount > 0) {
                ActionsSection = SectionCount;
                SectionCount += 1;
                if (HotActions.Count () > MaximumNumberOfActions) {
                    ExtraActionRowHot = ExtraActionRows;
                    ExtraActionRows += 1;
                }
                if (HotActions.NonHotCount > 0) {
                    ExtraActionRowNormal = ExtraActionRows;
                    ExtraActionRows += 1;
                }
            } else {
                ActionsSection = -1;
            }
            if (HotMessages.Count () > 0) {
                HotMessagesSection = SectionCount;
                SectionCount += 1;
            } else {
                HotMessagesSection = -1;
            }
            if (!HasLoadedOnce) {
                TableView.ReloadData ();
                MessageSectionRows = (int)RowsInSection (TableView, HotMessagesSection);
                ActionSectionRows = (int)RowsInSection (TableView, ActionsSection);
                HasLoadedOnce = true;
            }else{
                var addedSections = new NSMutableIndexSet ();
                var deletedSections = new NSMutableIndexSet ();
                var addedIndexPaths = new List<NSIndexPath> ();
                var deletedIndexPaths = new List<NSIndexPath> ();

                if (messagesChanged) {
                    int messageSectionRowsBeforeUpdate = MessageSectionRows;
                    MessageSectionRows = (int)RowsInSection (TableView, HotMessagesSection);
                    if (hotMessagesSectionBeforeUpdate == -1 && HotMessagesSection >= 0) {
                        addedSections.Add ((nuint)HotMessagesSection);
                    } else if (hotMessagesSectionBeforeUpdate >= 0 && HotMessagesSection == -1) {
                        deletedSections.Add ((nuint)hotMessagesSectionBeforeUpdate);
                    } else {
                        int messageRowsBeforeUpate = Math.Min (messageSectionRowsBeforeUpdate, MaximumNumberOfHotMessages);
                        MessageSectionRows = (int)RowsInSection (TableView, HotMessagesSection);
                        int messageRows = Math.Min (MessageSectionRows, MaximumNumberOfHotMessages);

                        DetermineRowChanges (messageAdds, messageDeletes, addedIndexPaths, deletedIndexPaths, messageSectionRowsBeforeUpdate, messageRowsBeforeUpate, hotMessagesSectionBeforeUpdate, MessageSectionRows, messageRows, HotMessagesSection, MaximumNumberOfHotMessages);
                    }
                }
                 
                if (actionsChanged) {
                    int actionSectionRowsBeforeUpdate = ActionSectionRows;
                    ActionSectionRows = (int)RowsInSection (TableView, ActionsSection);
                    if (actionsSectionBeforeUpdate == -1 && ActionsSection >= 0) {
                        addedSections.Add ((nuint)ActionsSection);
                    } else if (actionsSectionBeforeUpdate >= 0 && ActionsSection == -1) {
                        deletedSections.Add ((nuint)actionsSectionBeforeUpdate);
                    } else {
                        DetermineRowChanges (actionAdds, actionDeletes, addedIndexPaths, deletedIndexPaths, actionSectionRowsBeforeUpdate, actionRowsBeforeUpdate, actionsSectionBeforeUpdate, ActionSectionRows, ActionRows, ActionsSection, MaximumNumberOfActions);
                    }
                }

                if (addedIndexPaths.Count > 0 || deletedIndexPaths.Count > 0 || addedSections.Count > 0 || deletedSections.Count > 0) {
                    TableView.BeginUpdates ();
                    if (deletedIndexPaths.Count > 0) {
                        TableView.DeleteRows (deletedIndexPaths.ToArray (), UITableViewRowAnimation.Automatic);
                    }
                    if (deletedSections.Count > 0) {
                        TableView.DeleteSections (deletedSections, UITableViewRowAnimation.Automatic);
                    }
                    if (addedIndexPaths.Count > 0) {
                        TableView.InsertRows (addedIndexPaths.ToArray (), UITableViewRowAnimation.Automatic);
                    }
                    if (addedSections.Count > 0) {
                        TableView.InsertSections (addedSections, UITableViewRowAnimation.Automatic);
                    }
                    TableView.EndUpdates ();
                }

                UpdateVisibleRows ();
                ReconfigureGroupedRows ();
            }
            EmptyView.Hidden = SectionCount > 0;
        }

        void DetermineRowChanges (List<int> adds, List<int> deletes, List<NSIndexPath> addedIndexPaths, List<NSIndexPath> deletedIndexPaths, int totalSectionRowsBeforeUpdate, int itemRowsBeforeUpdate, int sectionBeforeUpdate, int totalSectionRows, int itemRows, int section, int maxItemRows)
        {
            int itemRowsAfterUpdate = itemRowsBeforeUpdate;
            int totalRowsAfterUpdate = totalSectionRowsBeforeUpdate;
            // Figure out how many of the adds will actually be added to our limited table
            foreach (var index in adds) {
                if (index < maxItemRows) {
                    addedIndexPaths.Add (NSIndexPath.FromRowSection (index, section));
                    ++itemRowsAfterUpdate;
                    ++totalRowsAfterUpdate;
                }
            }

            // If the newly added rows put us over the row limit, remove rows from the end as necessary
            int deleteIndex = itemRowsBeforeUpdate - 1;

            while (itemRowsAfterUpdate > itemRows) {
                deletedIndexPaths.Add (NSIndexPath.FromRowSection (deleteIndex, sectionBeforeUpdate));
                --deleteIndex;
                --itemRowsAfterUpdate;
                --totalRowsAfterUpdate;
            }

            // If any of the deletes are from the rows not yet deleted, remove them
            foreach (var index in deletes) {
                if (index <= deleteIndex) {
                    deletedIndexPaths.Add (NSIndexPath.FromRowSection (index, sectionBeforeUpdate));
                    --itemRowsAfterUpdate;
                    --totalRowsAfterUpdate;
                }
            }

            var insertIndex = itemRowsAfterUpdate;

            // If the deletes left us short of the new count, add rows to the end
            while (itemRowsAfterUpdate < itemRows) {
                addedIndexPaths.Add (NSIndexPath.FromRowSection (insertIndex, section));
                ++itemRowsAfterUpdate;
                ++totalRowsAfterUpdate;
                ++insertIndex;
            }

            // Finally, add or remove any non-item rows to match the row count
            insertIndex = totalRowsAfterUpdate;
            while (totalRowsAfterUpdate < totalSectionRows) {
                addedIndexPaths.Add (NSIndexPath.FromRowSection (insertIndex, section));
                ++totalRowsAfterUpdate;
                ++insertIndex;
            }
            deleteIndex = totalSectionRowsBeforeUpdate - 1;
            while (totalRowsAfterUpdate > totalSectionRows) {
                deletedIndexPaths.Add (NSIndexPath.FromRowSection (deleteIndex, sectionBeforeUpdate));
                --deleteIndex;
                --totalRowsAfterUpdate;
            }
        }

        void UpdateVisibleRows ()
        {
            var indexPaths = TableView.IndexPathsForVisibleRows;
            if (indexPaths != null) {
                foreach (var indexPath in indexPaths) {
                    if (indexPath.Section == HotMessagesSection) {
                        if (indexPath.Row < MaximumNumberOfHotMessages) {
                            var message = HotMessages.GetCachedMessage (indexPath.Row);
                            var thread = HotMessages.GetEmailThread (indexPath.Row);
                            var cell = TableView.CellAt (indexPath) as MessageCell;
                            if (cell != null && message != null) {
                                cell.SetMessage (message, thread.MessageCount);
                            }
                        } else {
                            TableView.ReloadRows (new NSIndexPath[] { indexPath }, UITableViewRowAnimation.None);
                        }
                    } else if (indexPath.Section == ActionsSection) {
                        if (indexPath.Row < ActionRows) {
                            var action = HotActions.ActionAt (indexPath.Row);
                            var cell = TableView.CellAt (indexPath) as ActionCell;
                            if (cell != null && action != null) {
                                cell.SetAction (action);
                            }
                        } else {
                            TableView.ReloadRows (new NSIndexPath[] { indexPath }, UITableViewRowAnimation.None);
                        }
                    }
                    // Needed to tell our custom table group cells to redraw corners
                    WillDisplay (TableView, TableView.CellAt (indexPath), indexPath);
                }
            }
        }

        #endregion

        #region Table Delegate & Data Source

        private InsetLabelView _HotMessagesHeader;
        private InsetLabelView HotMessagesHeader {
            get {
                if (_HotMessagesHeader == null) {
                    _HotMessagesHeader = new InsetLabelView ();
                    _HotMessagesHeader.LabelInsets = new UIEdgeInsets (20.0f, GroupedCellInset + 6.0f, 5.0f, GroupedCellInset);
                    _HotMessagesHeader.Label.Text = "Hot Messages";
                    _HotMessagesHeader.Label.Font = A.Font_AvenirNextRegular14;
                    _HotMessagesHeader.Label.TextColor = TableView.BackgroundColor.ColorDarkenedByAmount (0.6f);
                    _HotMessagesHeader.Frame = new CGRect (0.0f, 0.0f, 100.0f, 20.0f);
                }
                return _HotMessagesHeader;
            }
        }

        private InsetLabelView _ActionsHeader;
        private InsetLabelView ActionsHeader {
            get {
                if (_ActionsHeader == null) {
                    _ActionsHeader = new InsetLabelView ();
                    _ActionsHeader.LabelInsets = new UIEdgeInsets (20.0f, GroupedCellInset + 6.0f, 5.0f, GroupedCellInset);
                    _ActionsHeader.Label.Text = "Hot Actions";
                    _ActionsHeader.Label.Font = A.Font_AvenirNextRegular14;
                    _ActionsHeader.Label.TextColor = TableView.BackgroundColor.ColorDarkenedByAmount (0.6f);
                    _ActionsHeader.Frame = new CGRect (0.0f, 0.0f, 100.0f, 20.0f);
                }
                return _ActionsHeader;
            }
        }

        public override nint NumberOfSections (UITableView tableView)
        {
            return SectionCount;
        }

        public override nint RowsInSection (UITableView tableView, nint section)
        {
            if (section == HotMessagesSection) {
                var messageCount = HotMessages.Count ();
                if (messageCount > MaximumNumberOfHotMessages) {
                    return MaximumNumberOfHotMessages + 1;
                }
                return messageCount;
            }
            if (section == ActionsSection) {
                return ActionRows + ExtraActionRows;
            }
            return 0;
        }

        public override nfloat GetHeightForHeader (UITableView tableView, nint section)
        {
            if (section == HotMessagesSection) {
                return HotMessagesHeader.PreferredHeight;
            }
            if (section == ActionsSection) {
                return ActionsHeader.PreferredHeight;
            }
            return 0.0f;
        }

        public override UIView GetViewForHeader (UITableView tableView, nint section)
        {
            if (section == HotMessagesSection) {
                return HotMessagesHeader;
            }
            if (section == ActionsSection) {
                return ActionsHeader;
            }
            return null;
        }

        public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Section == HotMessagesSection) {
                if (indexPath.Row < MaximumNumberOfHotMessages) {
                    return MessageCell.PreferredHeight (NumberOfMessagePreviewLines, A.Font_AvenirNextMedium17, A.Font_AvenirNextMedium14);
                } else {
                    return ButtonCell.PreferredHeight;
                }
            }
            if (indexPath.Section == ActionsSection) {
                if (indexPath.Row < ActionRows) {
                    return ActionCell.PreferredHeight (NumberOfActionPreviewLines, A.Font_AvenirNextMedium17, A.Font_AvenirNextMedium14);
                } else {
                    return ButtonCell.PreferredHeight;
                }
            }
            return 44.0f;
        }

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Section == HotMessagesSection) {
                if (indexPath.Row < MaximumNumberOfHotMessages) {
                    var cell = tableView.DequeueReusableCell (MessageCellIdentifier) as MessageCell;
                    var message = HotMessages.GetCachedMessage (indexPath.Row);
                    var thread = HotMessages.GetEmailThread (indexPath.Row);
                    cell.NumberOfPreviewLines = NumberOfMessagePreviewLines;
                    cell.SetMessage (message, thread.MessageCount);
                    if (HotMessages.IncludesMultipleAccounts ()) {
                        cell.IndicatorColor = Util.ColorForAccount (message.AccountId);
                        cell.ColorIndicatorInsets = new UIEdgeInsets (1.0f, 0.0f, 1.0f, 1.0f);
                    } else {
                        cell.IndicatorColor = null;
                    }
                    return cell;
                } else {
                    var cell = tableView.DequeueReusableCell (ButtonCellIdentifier) as ButtonCell;
                    cell.TextLabel.Text = String.Format ("See all {0} hot messages", HotMessages.Count());
                    if (!(cell.AccessoryView is DisclosureAccessoryView)) {
                        cell.AccessoryView = new DisclosureAccessoryView ();
                    }
                    return cell;
                }
            }
            if (indexPath.Section == ActionsSection) {
                if (indexPath.Row < ActionRows) {
                    var cell = tableView.DequeueReusableCell (ActionCellIdentifier) as ActionCell;
                    var action = HotActions.ActionAt (indexPath.Row);
                    cell.NumberOfPreviewLines = NumberOfActionPreviewLines;
                    cell.UncompleteState = McAction.ActionState.Hot;
                    cell.SetAction (action);
                    if (HotActions.IncludesMultipleAccounts ()) {
                        cell.IndicatorColor = Util.ColorForAccount (action.AccountId);
                        cell.ColorIndicatorInsets = new UIEdgeInsets (1.0f, 0.0f, 1.0f, 1.0f);
                    } else {
                        cell.IndicatorColor = null;
                    }
                    return cell;
                } else {
                    var index = indexPath.Row - ActionRows;
                    if (index == ExtraActionRowHot) {
                        var cell = tableView.DequeueReusableCell (ButtonCellIdentifier) as ButtonCell;
                        cell.TextLabel.Text = String.Format ("See all {0} hot actions", HotActions.Count ());
                        if (!(cell.AccessoryView is DisclosureAccessoryView)) {
                            cell.AccessoryView = new DisclosureAccessoryView ();
                        }
                        return cell;
                    } else if (index == ExtraActionRowNormal) {
                        var cell = tableView.DequeueReusableCell (ButtonCellIdentifier) as ButtonCell;
                        if (HotActions.NormalCount > 0) {
                            if (HotActions.NormalCount > 1) {
                                cell.TextLabel.Text = String.Format ("See all {0} lower priority actions", HotActions.NormalCount);
                            } else {
                                cell.TextLabel.Text = String.Format ("See 1 lower priority action", HotActions.NormalCount);
                            }
                        } else if (HotActions.DeferredCount > 0) {
                            if (HotActions.DeferredCount > 1) {
                                cell.TextLabel.Text = String.Format ("See all {0} deferred actions", HotActions.DeferredCount);
                            } else {
                                cell.TextLabel.Text = String.Format ("See 1 deferred action", HotActions.DeferredCount);
                            }
                        } else if (HotActions.CompletedCount > 0) {
                            if (HotActions.CompletedCount > 1) {
                                cell.TextLabel.Text = String.Format ("See all {0} completed actions", HotActions.CompletedCount);
                            } else {
                                cell.TextLabel.Text = String.Format ("See 1 completed action", HotActions.CompletedCount);
                            }
                        }
                        if (!(cell.AccessoryView is DisclosureAccessoryView)) {
                            cell.AccessoryView = new DisclosureAccessoryView ();
                        }
                        return cell;
                    }
                }
            }
            return null;
        }

        public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Section == HotMessagesSection) {
                if (indexPath.Row < MaximumNumberOfHotMessages) {
                    var message = HotMessages.GetCachedMessage (indexPath.Row);
                    var thread = HotMessages.GetEmailThread (indexPath.Row);
                    if (thread.HasMultipleMessages ()) {
                        ShowThread (thread);
                    } else {
                        ShowMessage (message);
                    }
                } else {
                    ShowAllHotMessages ();
                }
            } else if (indexPath.Section == ActionsSection) {
                if (indexPath.Row < ActionRows) {
                    var action = HotActions.ActionAt (indexPath.Row);
                    if (action.IsNew) {
                        // Unless something goes wrong, this item will become IsNew = false when the message is shown,
                        // which means when we come back the row should have a white background instead of the tinted
                        // background used for new items.  Normally the row would be deselected upon when the user returns,
                        // but the default animation will restore the tinted background that it saved when selecting the row.
                        // Deselecting the row now will ensure that no animation will restore the wrong background color later.
                        tableView.DeselectRow (indexPath, false);
                    }
                    ShowMessage (action.Message);
                } else {
                    var index = indexPath.Row - ActionRows;
                    if (index == ExtraActionRowHot) {
                        ShowAllHotActions ();
                    } else if (index == ExtraActionRowNormal) {
                        ShowAllActions ();
                    }
                }
            }
        }

        public override List<SwipeTableRowAction> ActionsForSwipingRightInRow (UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Section == HotMessagesSection) {
                if (indexPath.Row < MaximumNumberOfHotMessages) {
                    var message = HotMessages.GetCachedMessage (indexPath.Row);
                    var actions = new List<SwipeTableRowAction> ();
                    if (message.IsRead) {
                        actions.Add (new SwipeTableRowAction ("Unread", UIImage.FromBundle ("email-unread-swipe"), UIColor.FromRGB (0x00, 0xC8, 0x9D), MarkMessageAsUnread));
                    } else {
                        actions.Add (new SwipeTableRowAction ("Read", UIImage.FromBundle ("email-read-swipe"), UIColor.FromRGB (0x00, 0xC8, 0x9D), MarkMessageAsRead));
                    }
                    actions.Add (new SwipeTableRowAction ("Not Hot", UIImage.FromBundle ("email-not-hot"), UIColor.FromRGB (0xE6, 0x59, 0x59), MarkMessageAsUnhot));
                    actions.Add (new SwipeTableRowAction ("Action", UIImage.FromBundle ("email-action-swipe"), UIColor.FromRGB (0xF5, 0x98, 0x27), MakeAction));
                    return actions;
                }
            } else if (indexPath.Section == ActionsSection) {
                if (indexPath.Row < ActionRows) {
                    var action = HotActions.ActionAt (indexPath.Row);
                    var actions = new List<SwipeTableRowAction> ();
                    if (!action.IsCompleted) {
                        actions.Add (new SwipeTableRowAction ("Not Hot", UIImage.FromBundle ("email-not-hot"), UIColor.FromRGB (0xE6, 0x59, 0x59), MarkActionAsUnhot));
                        actions.Add (new SwipeTableRowAction ("Defer", UIImage.FromBundle ("email-defer-swipe"), UIColor.FromRGB (0x01, 0xB2, 0xCD), DeferAction));
                    }
                    return actions;
                }
            }
            return null;
        }

        public override List<SwipeTableRowAction> ActionsForSwipingLeftInRow (UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Section == HotMessagesSection) {
                if (indexPath.Row < MaximumNumberOfHotMessages) {
                    var actions = new List<SwipeTableRowAction> ();
                    actions.Add (new SwipeTableRowAction ("Delete", UIImage.FromBundle ("email-delete-swipe"), UIColor.FromRGB (0xd2, 0x47, 0x47), DeleteMessage));
                    actions.Add (new SwipeTableRowAction ("Archive", UIImage.FromBundle ("email-archive-swipe"), UIColor.FromRGB (0x01, 0xb2, 0xcd), ArchiveMessage));
                    actions.Add (new SwipeTableRowAction ("More", UIImage.FromBundle ("gen-more-active"), UIColor.FromRGB (0x4F, 0x64, 0x6D), ShowMoreActionsForMessage));
                    return actions;
                }
            }else if (indexPath.Section == ActionsSection) {
                if (indexPath.Row < ActionRows) {
                    var action = HotActions.ActionAt (indexPath.Row);
                    var actions = new List<SwipeTableRowAction> ();
                    actions.Add (new SwipeTableRowAction ("Delete", UIImage.FromBundle ("email-delete-swipe"), UIColor.FromRGB (0xd2, 0x47, 0x47), DeleteAction));
                    if (!action.IsCompleted) {
                        actions.Add (new SwipeTableRowAction ("Not Action", UIImage.FromBundle ("email-not-action-swipe"), UIColor.FromRGB (0xF5, 0x98, 0x27), DemoteAction));
                    }
                    return actions;
                }
            }
            return null;
        }

        #endregion

        #region System Events

        void StartListeningForStatusInd ()
        {
            if (!IsListeningForStatusInd) {
                IsListeningForStatusInd = true;
                NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            }
        }

        void StopListeningForStatusInd ()
        {
            if (IsListeningForStatusInd) {
                NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
                IsListeningForStatusInd = false;
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;


            switch (s.Status.SubKind){
            case NcResult.SubKindEnum.Info_EventSetChanged:
            case NcResult.SubKindEnum.Info_SystemTimeZoneChanged:
                ReloadCalendar ();
                break;
            case NcResult.SubKindEnum.Info_ExecutionContextChanged:
                if (NcApplication.ExecutionContextEnum.Foreground == NcApplication.Instance.ExecutionContext) {
                    ReloadCalendar ();
                }
                break;
            }

            if (s.AppliesToAccount (Account)) {
                switch (s.Status.SubKind) {
                case NcResult.SubKindEnum.Info_EmailMessageSetChanged:
                case NcResult.SubKindEnum.Info_EmailMessageScoreUpdated:
                case NcResult.SubKindEnum.Info_EmailMessageSetFlagSucceeded:
                case NcResult.SubKindEnum.Info_EmailMessageClearFlagSucceeded:
                case NcResult.SubKindEnum.Info_SystemTimeZoneChanged:
                case NcResult.SubKindEnum.Info_ActionSetChanged:
                    SetNeedsReload ();
                    break;
                case NcResult.SubKindEnum.Error_SyncFailed:
                case NcResult.SubKindEnum.Info_SyncSucceeded:
                    HotMessages.RefetchSyncTime ();
                    break;
                }
            }
        }

        #endregion

        #region Private Helpers

        void StartSync ()
        {
            if (!SyncManager.SyncEmailMessages (HotMessages)) {
                SetNeedsReload ();
            }
        }

        protected void CancelSyncing ()
        {
            SyncManager.Cancel ();
            EndRefreshing ();
        }

        public void MessagesSyncDidComplete (MessagesSyncManager manager)
        {
            EndRefreshing ();
        }

        public void MessagesSyncDidTimeOut (MessagesSyncManager manager)
        {
            EndRefreshing ();
        }

        void ShowAllHotMessages ()
        {
            var viewController = new MessageListViewController ();
            var messages = NcEmailManager.PriorityInbox (NcApplication.Instance.Account.Id);
            viewController.SetEmailMessages (messages);
            NavigationController.PushViewController (viewController, true);
        }

        void ShowAllActions ()
        {
            var viewController = new ActionListViewController (McAction.ActionState.Open);
            NavigationController.PushViewController (viewController, animated: true);
        }

        void ShowAllHotActions ()
        {
            var viewController = new ActionListViewController (McAction.ActionState.Hot);
            NavigationController.PushViewController (viewController, animated: true);
        }

        void SendImLateMessage ()
        {
            var calendarInvite = CalendarHelper.GetMcCalendarRootForEvent (HotEvent.Id);
            if (null != calendarInvite) {
                if (!String.IsNullOrEmpty (calendarInvite.OrganizerEmail)) {
                    var account = McAccount.EmailAccountForCalendar (calendarInvite);
                    var message = McEmailMessage.MessageWithSubject (account, calendarInvite.Subject);
                    message.To = calendarInvite.OrganizerEmail;
                    var composeViewController = new MessageComposeViewController (account);
                    composeViewController.Composer.Message = message;
                    composeViewController.Composer.InitialText = "Running late";
                    composeViewController.Present ();
                }
            }
        }

        void ForwardHotEvent ()
        {
            var calendarInvite = CalendarHelper.GetMcCalendarRootForEvent (HotEvent.Id);
            if (null != calendarInvite) {
                var account = McAccount.EmailAccountForCalendar (calendarInvite);
                var composeViewController = new MessageComposeViewController (account);
                composeViewController.Composer.RelatedCalendarItem = calendarInvite;
                composeViewController.Composer.Message = McEmailMessage.MessageWithSubject (account, "Fwd: " + calendarInvite.Subject);
                composeViewController.Present ();

            }
        }

        private void ComposeMessage ()
        {
            var composeViewController = new MessageComposeViewController (NcApplication.Instance.DefaultEmailAccount);
            composeViewController.Present ();
        }

        void ComposeReply (McEmailMessage message, EmailHelper.Action kind, bool quickReply = false)
        {
            var thread = new McEmailMessageThread ();
            thread.FirstMessageId = message.Id;
            var composeViewController = new MessageComposeViewController (McAccount.QueryById<McAccount> (message.AccountId));
            composeViewController.Composer.RelatedThread = thread;
            composeViewController.Composer.Kind = kind;
            composeViewController.StartWithQuickResponse = quickReply;
            composeViewController.Present ();
        }

        void EditEvent (McCalendar calendarEvent)
        {
            var vc = new EditEventViewController ();
            vc.SetCalendarItem (calendarEvent);
            var navigationController = new UINavigationController (vc);
            Util.ConfigureNavBar (false, navigationController);
            PresentViewController (navigationController, true, null);
        }

        void ShowThread (McEmailMessageThread thread)
        {
            var vc = new MessageThreadViewController ();
            vc.SetEmailMessages (HotMessages.GetAdapterForThread (thread));
            NavigationController.PushViewController (vc, true);
        }

        void ShowMessage (McEmailMessage message)
        {
            var messageViewController = new MessageViewController ();
            messageViewController.Message = message;
            NavigationController.PushViewController (messageViewController, true);
        }

        void ShowEvent (McEvent calendarEvent)
        {
            var vc = new EventViewController ();
            vc.SetCalendarItem (calendarEvent);
            NavigationController.PushViewController (vc, true);
        }

        void EditAction (McAction action)
        {
            if (action.IsNew) {
                action.IsNew = false;
                action.Update ();
            }
            var viewController = new ActionEditViewController ();
            viewController.Action = action;
            viewController.PresentOverViewController (this);
        }

        void SwitchToAccount (McAccount account)
        {
            if (SwipingIndexPath != null) {
                EndSwiping ();
            }
            CancelSyncing ();
            Account = account;
            SwitchAccountButton.SetAccountImage (account);
            HotMessages = NcEmailManager.PriorityInbox (NcApplication.Instance.Account.Id, includeActions:false);
            HotActions = new NachoHotActions (NcApplication.Instance.Account.Id);
            SectionCount = 0;
            HotMessagesSection = -1;
            ActionsSection = -1;
            ActionRows = 0;
            ExtraActionRows = 0;
            TableView.ReloadData (); // to clear table so we don't show stale data from other account
            HasLoadedOnce = false;
            // Relying on ViewWillAppear to do any reloading
        }

        private void ComposeResponse (McEmailMessageThread thread, EmailHelper.Action action)
        {
            var message = thread.FirstMessageSpecialCase ();
            var account = McAccount.EmailAccountForMessage (message);
            var composeViewController = new MessageComposeViewController (account);
            composeViewController.Composer.Kind = action;
            composeViewController.Composer.RelatedThread = thread;
            composeViewController.Present ();
        }

        protected override void PrepareRefreshIndicator ()
        {
            UpdateLastSyncLabel ();
        }

        void UpdateLastSyncLabel ()
        {
            if (RefreshControl != null) {
                DateTime? lastSyncDate = null;
                if (HotMessages != null) {
                    lastSyncDate = HotMessages.LastSuccessfulSyncTime ();
                }
                if (lastSyncDate.HasValue) {
                    var diff = DateTime.UtcNow - lastSyncDate.Value;
                    if (diff.TotalSeconds < 60) {
                        RefreshLabel.Text = "Last updated just now";
                    } else {
                        RefreshLabel.Text = "Last updated " + Pretty.TimeWithDecreasingPrecision (lastSyncDate.Value);
                    }
                } else {
                    RefreshLabel.Text = "";
                }
            }
        }

        #endregion

        #region Folder Chooser Parent (for Move)

        // The folder chooser should really just close itself, but it's easier to just add this than change its interface
        public void DismissChildFolderChooser (INachoFolderChooser vc)
        {
            DismissViewController (true, null);
        }

        #endregion

        #region Private Classes

        private class DisclosureAccessoryView : ImageAccessoryView
        {
            public DisclosureAccessoryView () : base ("gen-more-arrow")
            {
            }
        }

        private class ButtonCell : SwipeTableViewCell
        {

            public static nfloat PreferredHeight = 44.0f;

            public ButtonCell (IntPtr handle) : base (handle)
            {
                TextLabel.Font = A.Font_AvenirNextRegular14;
                TextLabel.TextColor = A.Color_NachoGreen;
            }
        }

        private class EmptyHotView : UIView 
        {

            public readonly UILabel TextLabel;
            public readonly UIImageView ImageView;
            nfloat Padding = 30.0f;
            nfloat ImageSpacing = 30.0f;

            public EmptyHotView (CGRect frame) : base (frame)
            {
                UserInteractionEnabled = false;
                TextLabel = new UILabel ();
                TextLabel.UserInteractionEnabled = false;
                TextLabel.Lines = 0;
                TextLabel.Font = A.Font_AvenirNextRegular14;
                TextLabel.LineBreakMode = UILineBreakMode.WordWrap;
                TextLabel.TextAlignment = UITextAlignment.Center;
                TextLabel.Text = "Your most important items will show up here automatically as Nacho Mail identifies them.\n\nAdditionally, you can always add any item of your choice by marking it as hot.";

                ImageView = new UIImageView (UIImage.FromBundle("empty-hot").ImageWithRenderingMode (UIImageRenderingMode.AlwaysTemplate));

                AddSubview(ImageView);
                AddSubview(TextLabel);
            }

            public override void TintColorDidChange ()
            {
                base.TintColorDidChange ();
                TextLabel.TextColor = TintColor;
            }

            public override void LayoutSubviews ()
            {
                base.LayoutSubviews ();
                var size = TextLabel.SizeThatFits (new CGSize (Bounds.Width - 2.0f * Padding, 0.0f));
                size.Width = (nfloat)Math.Ceiling (size.Width);
                size.Height = (nfloat)Math.Ceiling (size.Height);
                TextLabel.Frame = new CGRect ((Bounds.Width - size.Width) / 2.0f, (Bounds.Height - size.Height) / 2.0f, size.Width, size.Height);
                ImageView.Center = new CGPoint (Bounds.Width / 2.0f, TextLabel.Frame.Top - ImageSpacing - ImageView.Frame.Size.Height / 2.0f);
            }
        }

        #endregion
    }
        
}
