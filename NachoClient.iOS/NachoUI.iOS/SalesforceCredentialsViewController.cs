// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Net;
using Foundation;
using UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using System.Linq;
using System.Collections.Generic;
using Xamarin.Auth;
using NachoCore.SFDC;

namespace NachoClient.iOS
{
    public partial class SalesforceCredentialsViewController : AccountCredentialsViewController
    {

        #region Properties

        SFDCOAuth2Authenticator Authenticator;
        UIView AuthView;

        #endregion

        #region Constructors

        public SalesforceCredentialsViewController (IntPtr handle) : base (handle)
        {
            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";
        }

        #endregion

        #region Authenticator Setup

        void RestartAuthenticator ()
        {
            if (Authenticator != null) {
                Authenticator.Completed -= AuthCompleted;
                Authenticator.Error -= AuthError;
            }
            if (AuthView != null) {
                AuthView.RemoveFromSuperview ();
            }
            WebAuthenticator.ClearCookies ();
            var scopes = new List<string> ();
            scopes.Add ("api");
            scopes.Add ("refresh_token");
            string loginHint = null;
            if (Account != null) {
                loginHint = Account.EmailAddr;
            }
            Authenticator = new SFDCOAuth2Authenticator (
                clientId: SFDCOAuth2Constants.ClientId,
                clientSecret: SFDCOAuth2Constants.ClientSecret,
                scope: String.Join (" ", scopes.ToArray ()),
                accessTokenUrl: new Uri (SFDCOAuth2Constants.TokenUrl),
                authorizeUrl: new Uri (SFDCOAuth2Constants.AuthorizeUrl),
                redirectUrl: new Uri (SFDCOAuth2Constants.Redirecturi),
                loginHint: loginHint);
            Authenticator.AllowCancel = true;
            Authenticator.Completed += AuthCompleted;
            Authenticator.Error += AuthError;
            var vc = Authenticator.GetUI ();
            if (vc is UINavigationController) {
                vc = ((UINavigationController)vc).TopViewController;
                AddChildViewController (vc);
            }
            AuthView = vc.View;
            AuthView.Frame = View.Bounds;
            View.AddSubview (AuthView);
        }

        #endregion

        #region iOS View Lifecycle

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            RestartAuthenticator ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            AuthView.Frame = View.Bounds;
        }

        #endregion

        #region OAuth Events

        public void AuthCompleted (object sender, AuthenticatorCompletedEventArgs e)
        {
            if (e.IsAuthenticated) {
                string access_token;
                e.Account.Properties.TryGetValue ("access_token", out access_token);

                string refresh_token;
                e.Account.Properties.TryGetValue ("refresh_token", out refresh_token);

//                string expires_in;
//                e.Account.Properties.TryGetValue ("expires_in", out expires_in);
//                Log.Info (Log.LOG_SYS, "OAUTH2 Token acquired. expires_in={0}", expires_in);
//
//                string expiresString = "0";
                uint expireSecs = 3600;
//                if (e.Account.Properties.TryGetValue ("expires", out expiresString)) {
//                    if (!uint.TryParse (expiresString, out expireSecs)) {
//                        Log.Info (Log.LOG_UI, "AuthCompleted: Could not convert expires value {0} to int", expiresString);
//                    }
//                }

                string id_url;
                e.Account.Properties.TryGetValue ("id", out id_url);

                var url = String.Format (id_url);
                var client = new WebClient ();
                client.Headers.Add ("Authorization", String.Format ("Bearer {0}", access_token));
                var userInfoString = client.DownloadString (url);

                var userInfo = Newtonsoft.Json.Linq.JObject.Parse (userInfoString);

                if (LoginHelpers.ConfiguredAccountExists ((string)userInfo ["email"], Service)) {
                    Log.Info (Log.LOG_UI, "SalesforceCredentialsViewController existing account: {0}", userInfo.Property ("email"));
                    NcAlertView.ShowMessage (this, "Account Exists", "An account with that email address already exists. Duplicate accounts are not supported.");
                    RestartAuthenticator ();
                } else {
                    if (Account != null) {
                        Log.Info (Log.LOG_UI, "SalesforceCredentialsViewController removing account ID{0}", Account.Id);
                        NcAccountHandler.Instance.RemoveAccount (Account.Id);
                        Account = null;
                    }
                    string instanceUrl;
                    e.Account.Properties.TryGetValue ("instance_url", out instanceUrl);
                    Account = NcAccountHandler.Instance.CreateAccountAndServerForSalesForce (Service,
                        (string)userInfo ["email"],
                        access_token,
                        refresh_token,
                        expireSecs,
                        new Uri (instanceUrl));
                    SalesForceProtoControl.SetShouldAddBccToEmail (Account.Id, true);
                    Log.Info (Log.LOG_UI, "SalesforceCredentialsViewController created account ID{0}", Account.Id);

//                    Newtonsoft.Json.Linq.JObject photos;
//                    if (userInfo.TryGetValue ("photos", out photos)) {
//                        Newtonsoft.Json.Linq.JToken picture;
//                        if (userInfo.TryGetValue ("picture", out picture)) {
//                            Account.PopulateProfilePhotoFromURL (new Uri (picture));
//                        }
//                    }
                    AccountDelegate.AccountCredentialsViewControllerDidValidateAccount (this, Account);
                }
            } else {
                Log.Info (Log.LOG_UI, "SalesforceCredentialsViewController completed unauthenticated");
                NcAlertView.ShowMessage (this, "Nacho Mail", "We could not complete your account authentication.  Please try again.");
            }
        }

        public void AuthError (object sender, AuthenticatorErrorEventArgs e)
        {
            Log.Info (Log.LOG_UI, "SalesforceCredentialsViewController auth error");
            NcAlertView.ShowMessage (this, "Nacho Mail", "We could not complete your account authentication.  Please try again.");
        }

        #endregion
    }
}
