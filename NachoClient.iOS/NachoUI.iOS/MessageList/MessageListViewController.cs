// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using CoreGraphics;
using System.Collections.Generic;
using Foundation;

//using MonoTouch.CoreGraphics;
using UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;
using NachoCore.Brain;
using NachoPlatform;
using NachoCore.Index;

namespace NachoClient.iOS
{
    
    public class MessageListViewController : NachoWrappedTableViewController, FoldersViewControllerDelegate, NachoSearchControllerDelegate, MessagesSyncManagerDelegate, ThemeAdopter
    {
        #region Constants

        const string MessageCellIdentifier = "MessageCellIdentifier";
        const string UnavailableCellIdentifier = "UnavailableCellIdentifier";

        public const string MessageRefreshTaskName = "MessageListViewController_RefreshMessages";

        #endregion

        #region Properties

        public bool PopsWhenEmpty;

        NachoEmailMessages Messages;

        UIBarButtonItem SearchButton;
        UIBarButtonItem NewMessageButton;
        UIBarButtonItem EditTableButton;
        UIBarButtonItem DoneSwipingButton;
        UIBarButtonItem CancelEditingButton;

        UIBarButtonItem MoveButton;
        UIBarButtonItem DeleteButton;
        UIBarButtonItem ArchiveButton;
        UIBarButtonItem MarkButton;

        MessageListFilterBar FilterBar;

        MessageSearchResultsViewController SearchResultsViewController;
        NachoSearchController SearchController;

        int NumberOfPreviewLines = 3;
        protected bool HasLoadedOnce;
        bool HasAppearedOnce;
        bool IsListeningForStatusInd;

        MessagesSyncManager SyncManager;

        Dictionary<int, int> SelectedAccounts;

        #endregion

        #region Constructors

        public MessageListViewController () : base (UITableViewStyle.Plain)
        {
            SyncManager = new MessagesSyncManager ();
            SyncManager.Delegate = this;

            AutomaticallyAdjustsScrollViewInsets = false;
            SearchButton = new NcUIBarButtonItem (UIBarButtonSystemItem.Search, ShowSearch);
            NewMessageButton = new NcUIBarButtonItem (UIImage.FromBundle ("contact-newemail"), UIBarButtonItemStyle.Plain, NewMessage);
            EditTableButton = new UIBarButtonItem ("Edit", UIBarButtonItemStyle.Plain, EditTable);
            EditTableButton.AccessibilityLabel = "Folder edit";
            CancelEditingButton = new UIBarButtonItem ("Cancel", UIBarButtonItemStyle.Plain, CancelEditingTable);
            DoneSwipingButton = new UIBarButtonItem ("Done", UIBarButtonItemStyle.Plain, EndSwiping);

            NavigationItem.LeftItemsSupplementBackButton = true;
            NavigationItem.LeftBarButtonItem = SearchButton;
            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";

            UpdateNavigationItem ();
        }

        #endregion

        #region Public API

        public void SetEmailMessages (NachoEmailMessages messages)
        {
            lock (MessagesLock) {
                Messages = messages;
            }
        }

        #endregion

        #region Theme

        Theme adoptedTheme;

        public void AdoptTheme (Theme theme)
        {
            if (theme != adoptedTheme) {
                adoptedTheme = theme;
                TableView.AdoptTheme (theme);
                FilterBar.AdoptTheme (theme);
            }
        }

        #endregion

        #region View Lifecycle
            
        public override void LoadView ()
        {
            base.LoadView ();
            TableView.RowHeight = MessageCell.PreferredHeight (NumberOfPreviewLines, Theme.Active.DefaultFont.WithSize(17.0f), Theme.Active.DefaultFont.WithSize(14.0f));
            TableView.AllowsMultipleSelectionDuringEditing = true;
            TableView.RegisterClassForCellReuse (typeof(MessageCell), MessageCellIdentifier);
            TableView.RegisterClassForCellReuse (typeof(SwipeTableViewCell), UnavailableCellIdentifier);
            TableView.AccessibilityLabel = "Message list";
            TableView.BackgroundColor = UIColor.White;
            TableView.SeparatorInset = new UIEdgeInsets (0.0f, 64.0f, 0.0f, 0.0f);

            FilterBar = new MessageListFilterBar (new CGRect (0.0f, 0.0f, View.Bounds.Width, MessageListFilterBar.PreferredHeight));
            FilterBar.AutoresizingMask = UIViewAutoresizing.FlexibleWidth;

            TableView.Frame = new CGRect (0.0f, FilterBar.Frame.Height, View.Bounds.Width, View.Bounds.Height - FilterBar.Frame.Height);
            TableView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;

            View.AddSubview (FilterBar);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            UpdateFilterBar ();
            Reload ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (RefreshControl == null) {
                EnableRefreshControl ();
            }
            if (SyncManager.IsSyncing) {
                SyncManager.ResumeEvents ();
            }
            Messages.RefetchSyncTime ();
            if (HasAppearedOnce && !TableView.Editing) {
                Reload ();
            }
            StartListeningForStatusInd ();
            HasAppearedOnce = true;
            AdoptTheme (Theme.Active);
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
        }

        public override void ViewDidDisappear (bool animated)
        {
            SyncManager.PauseEvents ();
            StopListeningForStatusInd ();
            base.ViewDidDisappear (animated);
        }

        public override void Cleanup ()
        {
            // Clean up nav bar
            SearchButton.Clicked -= ShowSearch;
            NewMessageButton.Clicked -= NewMessage;
            EditTableButton.Clicked -= EditTable;
            CancelEditingButton.Clicked -= CancelEditingTable;
            DoneSwipingButton.Clicked -= EndSwiping;

            // Clean up filterbar
            FilterBar.Cleanup ();

            // Clean up sync manager
            SyncManager.Delegate = null;

            // Clean up search
            if (SearchController != null) {
                SearchController.Delegate = null;
            }
            if (SearchResultsViewController != null) {
                SearchResultsViewController.Cleanup ();
                SearchResultsViewController = null;
            }
            
            base.Cleanup ();
        }

        #endregion

        #region User Actions (Except Table Delegate)

        protected override void HandleRefreshControlEvent (object sender, EventArgs e)
        {
            RefreshIndicator.StartAnimating ();
            StartSync ();
        }

        void ShowSearch (object sender, EventArgs e)
        {
            EndAllTableEdits ();
            if (SearchController == null) {
                SearchResultsViewController = new MessageSearchResultsViewController () { IsLongLived = true };
                SearchController = new NachoSearchController (SearchResultsViewController);
                SearchController.Delegate = this;
            }
            SearchResultsViewController.PrepareForSearching ();
            SearchResultsViewController.NumberOfPreviewLines = NumberOfPreviewLines;
            SearchController.PresentOverViewController (this);
        }

        void NewMessage (object sender, EventArgs e)
        {
            ComposeMessage ();
        }

        void EditTable (object sender, EventArgs e)
        {
            StartEditingTable ();
        }

        void CancelEditingTable (object sender, EventArgs e)
        {
            CancelEditingTable ();
        }

        void EndSwiping (object sender, EventArgs e)
        {
            EndSwiping ();
        }

        void FilterAll ()
        {
            EndAllTableEdits ();
            Messages.FilterSetting = FolderFilterOptions.All;
            SetNeedsReload ();
        }

        void FilterHot ()
        {
            EndAllTableEdits ();
            Messages.FilterSetting = FolderFilterOptions.Hot;
            SetNeedsReload ();
        }

        void FilterUnread ()
        {
            EndAllTableEdits ();
            Messages.FilterSetting = FolderFilterOptions.Unread;
            SetNeedsReload ();
        }

        void FilterFocus ()
        {
            EndAllTableEdits ();
            Messages.FilterSetting = FolderFilterOptions.Focused;
            SetNeedsReload ();
        }

        void MarkMessageAsRead (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                EmailHelper.MarkAsRead (message, true);
                message.IsRead = true;
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message, thread.MessageCount);
                }
            }
        }

        void MarkMessageAsUnread (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                EmailHelper.MarkAsUnread (message, true);
                message.IsRead = false;
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message, thread.MessageCount);
                }
            }
        }

        void MarkMessageAsHot (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                message.UserAction = NachoCore.Utils.ScoringHelpers.ToggleHotOrNot (message);
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message, thread.MessageCount);
                }
            }
        }

        void MarkMessageAsUnhot (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                message.UserAction = NachoCore.Utils.ScoringHelpers.ToggleHotOrNot (message);
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message, thread.MessageCount);
                }
            }
        }

        void DeleteMessage (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                if (Messages.HasOutboxSemantics ()) {
                    NcTask.Run (() => {
                        EmailHelper.DeleteEmailThreadFromOutbox (thread);
                    }, "MessageListViewController.DeleteOutboxMessage");
                } else if (Messages.HasDraftsSemantics ()) {
                    NcTask.Run (() => {
                        EmailHelper.DeleteEmailThreadFromDrafts (thread);
                    }, "MessageListViewController.DeleteDraftMessage");
                } else {
                    NcAssert.NotNull (thread);
                    NcTask.Run (() => {
                        NcEmailArchiver.Delete (thread);
                    }, "MessageListViewController.DeleteMessage");
                }
                Messages.IgnoreMessage (thread.FirstMessageId);
                if (!IsReloading) {
                    Messages.RemoveIgnoredMessages ();
                    TableView.DeleteRows (new NSIndexPath[] { indexPath }, UITableViewRowAnimation.Automatic);
                } else {
                    SetNeedsReload ();
                }
            }
        }

        void ArchiveMessage (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                NcAssert.NotNull (thread);
                NcTask.Run (() => {
                    NcEmailArchiver.Archive (thread);
                }, "MessageListViewController.ArchiveMessage");
                Messages.IgnoreMessage (thread.FirstMessageId);
                if (!IsReloading) {
                    Messages.RemoveIgnoredMessages ();
                    TableView.DeleteRows (new NSIndexPath[] { indexPath }, UITableViewRowAnimation.Automatic);
                } else {
                    SetNeedsReload ();
                }
            }
        }

        void ShowMoreActionsForMessage (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                var alertView = UIAlertController.Create (null, null, UIAlertControllerStyle.ActionSheet);
                alertView.AddAction(UIAlertAction.Create("Move", UIAlertActionStyle.Default, (UIAlertAction action) => { ShowFoldersForMove(thread, message); }));
                alertView.AddAction (UIAlertAction.Create ("Create Event", UIAlertActionStyle.Default, (UIAlertAction action) => { CreateEvent(message); }));
                alertView.AddAction (UIAlertAction.Create ("Forward", UIAlertActionStyle.Default, (UIAlertAction action) => { Forward(message); }));
                alertView.AddAction (UIAlertAction.Create ("Reply", UIAlertActionStyle.Default, (UIAlertAction action) => { Reply(message); }));
                alertView.AddAction (UIAlertAction.Create ("Reply All", UIAlertActionStyle.Default, (UIAlertAction action) => { ReplyAll(message); }));
                alertView.AddAction (UIAlertAction.Create ("Quick Reply", UIAlertActionStyle.Default, (UIAlertAction action) => { QuickReply(message); }));
                alertView.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (UIAlertAction action) => { }));
                PresentViewController (alertView, true, null);
            }
        }

        McEmailMessageThread SelectedThread;

        void ShowFoldersForMove (McEmailMessageThread thread, McEmailMessage selectedMessage)
        {
            SelectedThread = thread;
            var vc = new FoldersViewController ();
            vc.Account = McAccount.QueryById<McAccount> (selectedMessage.AccountId);
            vc.PresentAsChooserOverViewController (this, null);
        }

        public void FoldersViewDidChooseFolder (FoldersViewController vc, McFolder folder)
        {
            var messageThread = SelectedThread;
            SelectedThread = null;
            if (messageThread != null) {
                NcTask.Run (() => {
                    NcEmailArchiver.Move (messageThread, folder);
                }, "MessageListViewController.MoveMessage");
                Messages.IgnoreMessage (messageThread.FirstMessageId);
                vc.DismissViewController (true, () => {
                    SetNeedsReload ();
                });
            } else {
                var selected = SelectedMessages ();
                NcTask.Run (() => {
                    NcEmailArchiver.Move (selected, folder);
                }, "MessageListViewController.MoveSelectedMessages");
                foreach (var message in selected) {
                    Messages.IgnoreMessage (message.Id);
                }
                vc.DismissViewController (true, () => {
                    CancelEditingTable ();
                    SetNeedsReload ();
                });
            }
        }

        void QuickReply (McEmailMessage message)
        {
            ComposeReply (message, EmailHelper.Action.Reply, quickReply: true);
        }

        void Reply (McEmailMessage message)
        {
            ComposeReply (message, EmailHelper.Action.Reply);
        }

        void ReplyAll (McEmailMessage message)
        {
            ComposeReply (message, EmailHelper.Action.ReplyAll);
        }

        void Forward (McEmailMessage message)
        {
            ComposeReply (message, EmailHelper.Action.Forward);
        }

        void CreateEvent (McEmailMessage message)
        {
            var c = CalendarHelper.CreateMeeting (message);
            EditEvent (c);
        }

        void ShowFoldersForMovingSelectedMessages (object sender, EventArgs e)
        {
            var vc = new FoldersViewController ();
            var accountId = SelectedAccounts.Keys.First ();
            NcAssert.False (0 == accountId);
            vc.Account = McAccount.QueryById<McAccount> (accountId);
            vc.PresentAsChooserOverViewController (this, null);
        }

        void ArchiveSelectedMessages (object sender, EventArgs e)
        {
            var selected = SelectedMessages ();
            NcTask.Run (() => {
                NcEmailArchiver.Archive (selected);
            }, "MessageListViewController.ArchiveSelectedMessages");
            foreach (var message in selected) {
                Messages.IgnoreMessage (message.Id);
            }
            var indexPaths = TableView.IndexPathsForSelectedRows;
            CancelEditingTable ();
            if (!IsReloading) {
                Messages.RemoveIgnoredMessages ();
                TableView.DeleteRows (indexPaths, UITableViewRowAnimation.Automatic);
            } else {
                SetNeedsReload ();
            }
        }

        void DeleteSelectedMessages (object sender, EventArgs e)
        {
            var selected = SelectedMessages ();
            NcTask.Run (() => {
                NcEmailArchiver.Delete (selected);
            }, "MessageListViewController.DeleteSelectedMessages");
            foreach (var message in selected) {
                Messages.IgnoreMessage (message.Id);
            }
            var indexPaths = TableView.IndexPathsForSelectedRows;
            CancelEditingTable ();
            if (!IsReloading) {
                Messages.RemoveIgnoredMessages ();
                TableView.DeleteRows (indexPaths, UITableViewRowAnimation.Automatic);
            } else {
                SetNeedsReload ();
            }
        }

        void MarkSelectedMessages (object sender, EventArgs e)
        {
            var alertView = UIAlertController.Create (String.Format ("Mark {0} messages", TableView.IndexPathsForSelectedRows.Length), null, UIAlertControllerStyle.ActionSheet);
            alertView.AddAction (UIAlertAction.Create ("As Read", UIAlertActionStyle.Default, MarkSelectedMessagesAsRead));
            alertView.AddAction (UIAlertAction.Create ("As Unread", UIAlertActionStyle.Default, MarkSelectedMessagesAsUnread));
            alertView.AddAction (UIAlertAction.Create ("As Hot", UIAlertActionStyle.Default, MarkSelectedMessagesAsHot));
            alertView.AddAction (UIAlertAction.Create ("As Not Hot", UIAlertActionStyle.Default, MarkSelectedMessagesAsNotHot));
            alertView.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (UIAlertAction action) => { }));
            PresentViewController (alertView, true, null);
        }

        void MakeAction (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            var viewController = new ActionEditViewController ();
            viewController.Action = McAction.FromMessage (message);
            viewController.PresentOverViewController (this);
        }

        void MarkSelectedMessagesAsRead (UIAlertAction action)
        {
            // TODO:
        }

        void MarkSelectedMessagesAsUnread (UIAlertAction action)
        {
            // TODO:
        }

        void MarkSelectedMessagesAsHot (UIAlertAction action)
        {
            // TODO:
        }

        void MarkSelectedMessagesAsNotHot (UIAlertAction action)
        {
            // TODO:
        }

        #endregion

        #region Search

        public void DidChangeSearchText (NachoSearchController searchController, string text)
        {
            SearchResultsViewController.SearchForText (text);
        }

        public void DidSelectSearch (NachoSearchController searchController)
        {
            SearchResultsViewController.StartServerSearch ();
        }

        public void DidEndSearch (NachoSearchController searchController)
        {
            SearchResultsViewController.EndSearching ();
        }

        #endregion

        #region Reloading Messages

        bool NeedsReload;
        bool IsReloading;

        object MessagesLock = new object();

        protected void SetNeedsReload ()
        {
            NeedsReload = true;
            if (!IsReloading) {
                Reload ();
            }
        }

        protected void Reload ()
        {
            if (!IsReloading) {
                IsReloading = true;
                NeedsReload = false;
                if (Messages.HasBackgroundRefresh ()) {
                    Log.Info (Log.LOG_UI, "MessageListViewController.Reload: using NachoEmailMessages background refresh");
                    Messages.BackgroundRefresh (HandleReloadResults);
                } else {
                    Log.Info (Log.LOG_UI, "MessageListViewController.Reload: simulating a background refresh because this NachoEmailMessages doesn't have one");
                    NcTask.Run (() => {
                        List<int> adds;
                        List<int> deletes;
                        NachoEmailMessages messages;
                        lock (MessagesLock){
                            messages = Messages;
                        }
                        bool changed = messages.BeginRefresh (out adds, out deletes);
                        BeginInvokeOnMainThread (() => {
                            bool handledResults = false;
                            lock (MessagesLock){
                                if (messages == Messages) {
                                    Messages.CommitRefresh ();
                                    HandleReloadResults (changed, adds, deletes);
                                    handledResults = true;
                                }
                            }
                            if (!handledResults) {
                                IsReloading = false;
                                if (NeedsReload) {
                                    Reload ();
                                }
                            }
                        });
                    }, MessageRefreshTaskName);
                }
            }
        }

        void HandleReloadResults (bool changed, List<int> adds, List<int> deletes)
        {
            Log.Info (Log.LOG_UI, "MessageListViewController.HandleReloadResults: changed = {0}, {1} adds, {2} deletes",
                changed, adds == null ? 0 : adds.Count, deletes == null ? 0 : deletes.Count);
            Messages.ClearCache ();
            if (IsShowingRefreshIndicator && !SyncManager.IsSyncing) {
                EndRefreshing ();
            }
            if (PopsWhenEmpty && Messages.Count () == 0 && this == NavigationController.TopViewController) {
                NavigationController.PopViewController (true);
            }else{
                if (!HasLoadedOnce) {
                    // If this is the first time we're showing messages, don't bother with any add/delete animations
                    HasLoadedOnce = true;
                    TableView.ReloadData ();
                } else {
                    if (changed) {
                        // If the message set has changed, animate added and deleted rows
                        Util.UpdateTable (TableView, adds, deletes);
                    }
                    // Regardless of whether messges have been added or deleted, existing rows may have new data, at least
                    // for properties like read/unread.  To catch any of those changes, we'll refresh all visible rows.
                    // Note that this may do a small amount of double work for any visible row that was just added.
                    UpdateVisibleRows ();
                }
            }
            IsReloading = false;
            if (NeedsReload) {
                Reload ();
            }
        }

        void UpdateVisibleRows ()
        {
            var indexPaths = TableView.IndexPathsForVisibleRows;
            if (indexPaths != null) {
                Log.Info (Log.LOG_UI, "MessageListViewController.UpdateVisibleRows: {0} visible rows", indexPaths.Length);
                foreach (var indexPath in indexPaths) {
                    var message = Messages.GetCachedMessage (indexPath.Row);
                    var thread = Messages.GetEmailThread (indexPath.Row);
                    var cell = TableView.CellAt (indexPath) as MessageCell;
                    if (cell != null && message != null) {
                        cell.SetMessage (message, thread.MessageCount);
                    }
                }
            } else {
                Log.Info (Log.LOG_UI, "MessageListViewController.UpdateVisibleRows: no visible rows");
            }
        }

        #endregion

        #region Table Delegate & Data Source

        public override nint NumberOfSections (UITableView tableView)
        {
            return 1;
        }

        public override nint RowsInSection (UITableView tableView, nint section)
        {
            if (Messages == null) {
                return 0;
            }
            return Messages.Count ();
        }

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message == null) {
                return tableView.DequeueReusableCell (UnavailableCellIdentifier);
            }
            var cell = tableView.DequeueReusableCell (MessageCellIdentifier) as MessageCell;
            cell.UseRecipientName = Messages.HasOutboxSemantics () || Messages.HasDraftsSemantics () || Messages.HasSentSemantics ();
            cell.SetMessage (message, thread.MessageCount);
            cell.NumberOfPreviewLines = NumberOfPreviewLines;
            if (Messages.IncludesMultipleAccounts ()) {
                cell.IndicatorColor = Util.ColorForAccount (message.AccountId);
            } else {
                cell.IndicatorColor = null;
            }
            if (Messages.HasOutboxSemantics ()) {
                var pending = McPending.QueryByEmailMessageId (message.AccountId, message.Id);
                if (pending != null && pending.ResultKind == NcResult.KindEnum.Error) {
                    if (!(cell.AccessoryView is ErrorAccessoryView)) {
                        cell.AccessoryView = new ErrorAccessoryView ();
                    }
                } else {
                    cell.AccessoryView = null;
                }
            }else{
                cell.AccessoryView = null;
            }

            // TODO: enable after merging David's brain scheduling fixes
            // NcBrain.MessageNotificationStatusUpdated (message, DateTime.UtcNow, 60);

            if (message.BodyId == 0) {
                NcTask.Run (() => {
                    BackEnd.Instance.SendEmailBodyFetchHint (message.AccountId, message.Id);
                }, "MessageTableViewSource.SendEmailBodyFetchHint");
            }
            return cell;
        }

        public override void WillDisplay (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath)
        {
            base.WillDisplay (tableView, cell, indexPath);
            var themed = cell as ThemeAdopter;
            if (themed != null && adoptedTheme != null) {
                themed.AdoptTheme (adoptedTheme);
            }
        }

        public override NSIndexPath WillSelectRow (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message == null) {
                return null;
            }
            return base.WillSelectRow (tableView, indexPath);
        }

        public override bool ShouldHighlightRow (UITableView tableView, NSIndexPath rowIndexPath)
        {
            var message = Messages.GetCachedMessage (rowIndexPath.Row);
            if (message == null) {
                return false;
            }
            return base.ShouldHighlightRow (tableView, rowIndexPath);
        }

        public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (TableView.Editing) {
                if (!SelectedAccounts.ContainsKey (message.AccountId)) {
                    SelectedAccounts [message.AccountId] = 0;
                }
                SelectedAccounts [message.AccountId] += 1;
                UpdateToolbarEnabled ();
            } else {
                var thread = Messages.GetEmailThread (indexPath.Row);
                if (thread != null) {
                    if (Messages.HasDraftsSemantics ()) {
                        ComposeDraft (message);
                    } else if (Messages.HasOutboxSemantics ()) {
                        ShowOutboxMessage (message);
                    } else if (thread.HasMultipleMessages ()) {
                        ShowThread (thread);
                    } else {
                        ShowMessage (message);
                    }
                }
            }
        }

        public override void RowDeselected (UITableView tableView, NSIndexPath indexPath)
        {
            if (TableView.Editing) {
                var message = Messages.GetCachedMessage (indexPath.Row);
                SelectedAccounts [message.AccountId] -= 1;
                if (SelectedAccounts [message.AccountId] == 0) {
                    SelectedAccounts.Remove (message.AccountId);
                }
                UpdateToolbarEnabled ();
            }
        }

        public override List<SwipeTableRowAction> ActionsForSwipingRightInRow (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message != null) {
                var actions = new List<SwipeTableRowAction> ();
                if (!Messages.HasOutboxSemantics () && !Messages.HasDraftsSemantics ()) {
                    if (message.IsRead) {
                        actions.Add (new SwipeTableRowAction ("Unread", UIImage.FromBundle ("email-unread-swipe"), UIColor.FromRGB (0x00, 0xC8, 0x9D), MarkMessageAsUnread));
                    } else {
                        actions.Add (new SwipeTableRowAction ("Read", UIImage.FromBundle ("email-read-swipe"), UIColor.FromRGB (0x00, 0xC8, 0x9D), MarkMessageAsRead));
                    }
                    if (message.isHot ()) {
                        actions.Add (new SwipeTableRowAction ("Not Hot", UIImage.FromBundle ("email-not-hot"), UIColor.FromRGB (0xE6, 0x59, 0x59), MarkMessageAsUnhot));
                    } else {
                        actions.Add (new SwipeTableRowAction ("Hot", UIImage.FromBundle ("email-hot"), UIColor.FromRGB (0xE6, 0x59, 0x59), MarkMessageAsHot));
                    }
                    // Temporarily disabling actions until we have a new place for them
                    //actions.Add (new SwipeTableRowAction ("Action", UIImage.FromBundle ("email-action-swipe"), UIColor.FromRGB (0xF5, 0x98, 0x27), MakeAction));
                }
                return actions;
            }
            return null;
        }

        public override List<SwipeTableRowAction> ActionsForSwipingLeftInRow (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message != null) {
                var actions = new List<SwipeTableRowAction> ();
                actions.Add (new SwipeTableRowAction ("Delete", UIImage.FromBundle ("email-delete-swipe"), UIColor.FromRGB (0xd2, 0x47, 0x47), DeleteMessage));
                if (!Messages.HasOutboxSemantics () && !Messages.HasDraftsSemantics ()) {
                    actions.Add (new SwipeTableRowAction ("Archive", UIImage.FromBundle ("email-archive-swipe"), UIColor.FromRGB (0x01, 0xb2, 0xcd), ArchiveMessage));
                    actions.Add (new SwipeTableRowAction ("More", UIImage.FromBundle ("gen-more-active"), UIColor.FromRGB (0x4F, 0x64, 0x6D), ShowMoreActionsForMessage));
                }
                return actions;
            }
            return null;
        }

        public override void WillBeginSwiping (UITableView tableView, NSIndexPath indexPath)
        {
            base.WillBeginSwiping (tableView, indexPath);
            UpdateNavigationItem ();
        }

        public override void DidEndSwiping (UITableView tableView, NSIndexPath indexPath)
        {
            base.DidEndSwiping (tableView, indexPath);
            UpdateNavigationItem ();
        }

        #endregion

        #region System Events

        void StartListeningForStatusInd ()
        {
            if (!IsListeningForStatusInd) {
                IsListeningForStatusInd = true;
                NcApplication.Instance.StatusIndEvent += StatusIndCallback;
            }
        }

        void StopListeningForStatusInd ()
        {
            if (IsListeningForStatusInd) {
                NcApplication.Instance.StatusIndEvent -= StatusIndCallback;
                IsListeningForStatusInd = false;
            }
        }

        void StatusIndCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if (s.Account == null || (Messages != null && Messages.IsCompatibleWithAccount (s.Account))) {
                Log.Info (Log.LOG_UI, "MessageListViewController status indicator callback: {0}", s.Status.SubKind.ToString ());
                switch (s.Status.SubKind) {
                case NcResult.SubKindEnum.Info_EmailMessageSetChanged:
                    SetNeedsReload ();
                    break;
                case NcResult.SubKindEnum.Info_EmailMessageSetFlagSucceeded:
                case NcResult.SubKindEnum.Info_EmailMessageClearFlagSucceeded:
                case NcResult.SubKindEnum.Info_EmailMessageScoreUpdated:
                case NcResult.SubKindEnum.Info_EmailMessageChanged:
                case NcResult.SubKindEnum.Info_SystemTimeZoneChanged:
                    UpdateVisibleRows ();
                    break;
                case NcResult.SubKindEnum.Error_SyncFailed:
                case NcResult.SubKindEnum.Info_SyncSucceeded:
                    Messages.RefetchSyncTime ();
                    break;
                }
            }
        }

        public void MessagesSyncDidComplete (MessagesSyncManager manager)
        {
            EndRefreshing ();
        }

        public void MessagesSyncDidTimeOut (MessagesSyncManager manager)
        {
            EndRefreshing ();
        }

        public override UIStatusBarStyle PreferredStatusBarStyle ()
        {
            return UIStatusBarStyle.LightContent;
        }

        #endregion

        #region Private Helpers

        protected bool ShouldShowFilterBar {
            get {
                return Messages.HasFilterSemantics () && Messages.PossibleFilterSettings.Length > 1;
            }
        }

        protected void UpdateFilterBar ()
        {
            if (ShouldShowFilterBar) {
                ShowFilterBar ();

                var items = new List<MessageFilterBarItem> ();
                var filters = Messages.PossibleFilterSettingsMask;
                MessageFilterBarItem selectedItem = null;

                if (filters.HasFlag (FolderFilterOptions.All)) {
                    items.Add (new MessageFilterBarItem ("All", UIImage.FromBundle ("email-filter-all"), FilterAll));
                    if (Messages.FilterSetting == FolderFilterOptions.All) {
                        selectedItem = items.Last ();
                    }
                }
                if (filters.HasFlag (FolderFilterOptions.Hot)) {
                    items.Add (new MessageFilterBarItem ("Hot", UIImage.FromBundle ("email-hot"), FilterHot));
                    if (Messages.FilterSetting == FolderFilterOptions.Hot) {
                        selectedItem = items.Last ();
                    }
                }
                if (filters.HasFlag (FolderFilterOptions.Unread)) {
                    items.Add (new MessageFilterBarItem ("Unread", UIImage.FromBundle ("email-filter-unread"), FilterUnread));
                    if (Messages.FilterSetting == FolderFilterOptions.Unread) {
                        selectedItem = items.Last ();
                    }
                }
                if (filters.HasFlag (FolderFilterOptions.Focused)) {
                    items.Add (new MessageFilterBarItem ("Focus", UIImage.FromBundle ("email-filter-focus"), FilterFocus));
                    if (Messages.FilterSetting == FolderFilterOptions.Focused) {
                        selectedItem = items.Last ();
                    }
                }

                FilterBar.SetItems (items.ToArray ());
                FilterBar.SelectItem (selectedItem);
            } else {
                HideFilterBar ();
            }
        }

        protected void HideFilterBar ()
        {
            FilterBar.Hidden = true;
            TableView.Frame = View.Bounds;
        }

        protected void ShowFilterBar ()
        {
            FilterBar.Hidden = false;
            TableView.Frame = new CGRect (0.0f, FilterBar.Frame.Height, View.Bounds.Width, View.Bounds.Height - FilterBar.Frame.Height);
        }

        protected void EndAllTableEdits ()
        {
            if (TableView.Editing) {
                CancelEditingTable ();
            } else if (SwipingIndexPath != null) {
                EndSwiping ();
            }
        }

        protected void CancelSyncing ()
        {
            SyncManager.Cancel ();
            EndRefreshing ();
        }

        void ComposeMessage ()
        {
            var composeViewController = new MessageComposeViewController (NcApplication.Instance.DefaultEmailAccount);
            composeViewController.Present ();
        }

        void ComposeDraft (McEmailMessage draft)
        {
            var account = McAccount.EmailAccountForMessage (draft);
            var composeViewController = new MessageComposeViewController (account);
            composeViewController.Composer.Message = draft;
            composeViewController.Present ();
        }

        void ComposeReply (McEmailMessage message, EmailHelper.Action kind, bool quickReply = false)
        {
            var thread = new McEmailMessageThread ();
            thread.FirstMessageId = message.Id;
            var composeViewController = new MessageComposeViewController (McAccount.QueryById<McAccount> (message.AccountId));
            composeViewController.Composer.RelatedThread = thread;
            composeViewController.Composer.Kind = kind;
            composeViewController.StartWithQuickResponse = quickReply;
            composeViewController.Present ();
        }

        void EditEvent (McCalendar calendarEvent)
        {
            var vc = new EditEventViewController ();
            vc.SetCalendarItem (calendarEvent);
            var navigationController = new UINavigationController (vc);
            PresentViewController (navigationController, true, null);
        }

        void ShowThread (McEmailMessageThread thread)
        {
            var vc = new MessageThreadViewController ();
            vc.SetEmailMessages (Messages.GetAdapterForThread (thread));
            NavigationController.PushViewController (vc, true);
        }

        void ShowMessage (McEmailMessage message)
        {
            var messageViewController = new MessageViewController ();
            messageViewController.Message = message;
            NavigationController.PushViewController (messageViewController, true);
        }

        protected virtual void UpdateNavigationItem ()
        {
            NavigationItem.LeftBarButtonItem = SearchButton;
            if (SwipingIndexPath != null) {
                NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                    DoneSwipingButton
                };
            } else if (IsViewLoaded && TableView.Editing) {
                NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                    CancelEditingButton
                };
            } else {
                NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                    NewMessageButton,
                    EditTableButton
                };
            }
        }

        void UpdateToolbarEnabled ()
        {
            var paths = TableView.IndexPathsForSelectedRows;
            var hasSelection = paths != null && paths.Length > 0;

            MarkButton.Enabled = hasSelection;
            MoveButton.Enabled = SelectedAccounts.Count == 1;
            ArchiveButton.Enabled = hasSelection;
            DeleteButton.Enabled = hasSelection;
        }

        List<McEmailMessage> SelectedMessages ()
        {
            var messages = new List<McEmailMessage> ();
            var indexPaths = TableView.IndexPathsForSelectedRows;
            if (indexPaths != null) {
                foreach (var indexPath in indexPaths) {
                    var thread = Messages.GetEmailThread (indexPath.Row);
                    if (thread != null) {
                        foreach (var message in thread) {
                            messages.Add (message);
                        }
                    }
                }
            }
            return messages;
        }

        protected void CancelEditingTable (bool animated = true)
        {
            TableView.SetEditing (false, animated);
            UpdateNavigationItem ();
            TableView.ContentInset = new UIEdgeInsets (TableView.ContentInset.Top, TableView.ContentInset.Left, TableView.ContentInset.Bottom - NavigationController.Toolbar.Frame.Height, TableView.ContentInset.Right);
            NavigationController.SetToolbarHidden (true, true);
        }

        void StartEditingTable ()
        {
            SelectedAccounts = new Dictionary<int, int> ();
            TableView.SetEditing(true, true);
            UpdateNavigationItem ();
            MoveButton = new UIBarButtonItem ("Move", UIBarButtonItemStyle.Plain, ShowFoldersForMovingSelectedMessages);
            ArchiveButton = new UIBarButtonItem ("Archive", UIBarButtonItemStyle.Plain, ArchiveSelectedMessages);
            DeleteButton = new UIBarButtonItem ("Delete", UIBarButtonItemStyle.Plain, DeleteSelectedMessages);
            MarkButton = new UIBarButtonItem ("Mark", UIBarButtonItemStyle.Plain, MarkSelectedMessages);
            if (Messages.HasOutboxSemantics () || Messages.HasDraftsSemantics ()) {
                ToolbarItems = new UIBarButtonItem[] {
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    DeleteButton,
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace)
                };
            } else {
                ToolbarItems = new UIBarButtonItem[] {
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    // Mark multi select functionality not yet enabled
                    // MarkButton,
                    // new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    MoveButton,
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    ArchiveButton,
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    DeleteButton,
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace)
                };
            }
            UpdateToolbarEnabled ();
            NavigationController.SetToolbarHidden (false, true);
            TableView.ContentInset = new UIEdgeInsets (TableView.ContentInset.Top, TableView.ContentInset.Left, TableView.ContentInset.Bottom + NavigationController.Toolbar.Frame.Height, TableView.ContentInset.Right);
        }

        void StartSync ()
        {
            if (!SyncManager.SyncEmailMessages (Messages)) {
                // If we couldn't start a sync, just requery the db
                SetNeedsReload ();
            }
        }

        protected override void PrepareRefreshIndicator ()
        {
            UpdateLastSyncLabel ();
        }

        void UpdateLastSyncLabel ()
        {
            if (RefreshControl != null) {
                DateTime? lastSyncDate = null;
                if (Messages != null) {
                    lastSyncDate = Messages.LastSuccessfulSyncTime ();
                }
                if (lastSyncDate.HasValue) {
                    var diff = DateTime.UtcNow - lastSyncDate.Value;
                    if (diff.TotalSeconds < 60) {
                        RefreshLabel.Text = "Last updated just now";
                    } else {
                        RefreshLabel.Text = "Last updated " + Pretty.TimeWithDecreasingPrecision (lastSyncDate.Value);
                    }
                } else {
                    RefreshLabel.Text = "";
                }
            }
        }

        void ComposeOutboxMessage (McEmailMessage message)
        {
            var copy = EmailHelper.MoveFromOutboxToDrafts (message);
            ComposeDraft (copy);
        }

        void ShowOutboxMessage (McEmailMessage message)
        {
            var pending = McPending.QueryByEmailMessageId (message.AccountId, message.Id);
            if (pending != null && pending.ResultKind == NcResult.KindEnum.Error) {
                ShowOutboxError (message, pending);
            } else {
                ComposeOutboxMessage (message);
            }
        }

        void ShowOutboxError (McEmailMessage message, McPending pending)
        {
            string errorString;
            if (!ErrorHelper.ErrorStringForSubkind (pending.ResultSubKind, out errorString)) {
                errorString = String.Format ("(ErrorCode={0}", pending.ResultSubKind);
            }
            var messageString = "There was a problem sending this message.  You can resend this message or open it in the drafts folder.";
            var alertString = String.Format ("{0}\n{1}", messageString, errorString);
            var alert = UIAlertController.Create ("", alertString, UIAlertControllerStyle.Alert);
            alert.AddAction (UIAlertAction.Create ("Edit Message", UIAlertActionStyle.Default, (UIAlertAction action) => {
                ComposeOutboxMessage (message);
            }));
            PresentViewController (alert, true, null);
        }

        #endregion

    }


    public class MessageSearchResultsViewController : SearchResultsViewController, ThemeAdopter
    {

        const string MessageCellIdentifier = "MessageCellIdentifier";
        public int NumberOfPreviewLines = 3;

        EmailSearch SearchResults;

        public MessageSearchResultsViewController () : base ()
        {
            SearchResults = new EmailSearch (UpdateResults);
        }

        public override void Cleanup ()
        {
            SearchResults = null;
            base.Cleanup ();
        }

        public override void LoadView ()
        {
            base.LoadView ();
            TableView.RegisterClassForCellReuse (typeof(MessageCell), MessageCellIdentifier);
            TableView.RowHeight = MessageCell.PreferredHeight (NumberOfPreviewLines, Theme.Active.DefaultFont.WithSize(17.0f), Theme.Active.DefaultFont.WithSize(14.0f));
        }

        public void PrepareForSearching ()
        {
            SearchResults.EnterSearchMode (NcApplication.Instance.Account);
            TableView.ReloadData ();
        }

        public void StartServerSearch ()
        {
            SearchResults.StartServerSearch ();
        }

        public void EndSearching ()
        {
            SearchResults.ExitSearchMode ();
        }

        public void SearchForText (string searchText)
        {
            SearchResults.SearchFor (searchText);
        }

        void UpdateResults (string searchString, List<McEmailMessageThread> results)
        {
            TableView.ReloadData ();
        }

        public override nint NumberOfSections (UITableView tableView)
        {
            return 1;
        }

        public override nint RowsInSection (UITableView tableView, nint section)
        {
            return SearchResults.Count ();
        }

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell (MessageCellIdentifier) as MessageCell;
            var message = SearchResults.GetCachedMessage (indexPath.Row);
            var thread = SearchResults.GetEmailThread (indexPath.Row);
            cell.SetMessage (message, thread.MessageCount);
            return cell;
        }

        public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {
            var message = SearchResults.GetCachedMessage (indexPath.Row);
            ShowMessage (message);
        }

        void ShowMessage (McEmailMessage message)
        {
            var messageViewController = new MessageViewController ();
            messageViewController.Message = message;
            NavigationController.PushViewController (messageViewController, true);
            NavigationController.SetNavigationBarHidden (false, true);
        }

    }

}
