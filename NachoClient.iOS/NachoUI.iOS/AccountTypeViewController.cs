// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore.Brain;
using CoreAnimation;
using CoreGraphics;

namespace NachoClient.iOS
{
    public partial class AccountTypeViewController : NcUIViewControllerNoLeaks
    {
        const float BUTTON_SIZE = 64;
        const float BUTTON_LABEL_HEIGHT = 40;
        const float BUTTON_PADDING_HEIGHT = 15;
        const float BUTTON_PADDING_WIDTH = 35;

        public delegate void ServiceSelectedCallback (McAccount.AccountServiceEnum service);
        public ServiceSelectedCallback ServiceSelected;

        public AccountTypeViewController (IntPtr handle) : base (handle)
        {
        }

        protected override void CreateViewHierarchy ()
        {
            View.BackgroundColor = A.Color_NachoGreen;

            var navBar = new UINavigationBar (new CGRect (0, 20, View.Frame.Width, 44));
            navBar.BarStyle = UIBarStyle.Default;
            navBar.Translucent = false;
            navBar.Opaque = true;

            var navItem = new UINavigationItem ();
            navItem.Title = "Choose Service";

            using (var image = UIImage.FromBundle ("modal-close")) {
                var dismissButton = new NcUIBarButtonItem (image, UIBarButtonItemStyle.Plain, null);
                dismissButton.AccessibilityLabel = "Dismiss";
                dismissButton.Clicked += DismissButton_Clicked;
                navItem.LeftBarButtonItem = dismissButton;
            }
            navBar.Items = new UINavigationItem[] { navItem };

            View.AddSubview (navBar);

            nfloat yOffset = 64;

            UIView sectionSeparator = new UIView (new CGRect (0, yOffset, View.Frame.Width, .5f));
            sectionSeparator.BackgroundColor = UIColor.LightGray.ColorWithAlpha (.6f);
            View.AddSubview (sectionSeparator);

            yOffset = sectionSeparator.Frame.Bottom + 20;

            List<ButtonInfo> buttonInfoList;

            buttonInfoList = new List<ButtonInfo> (new ButtonInfo[] {
                new ButtonInfo ("Exchange", "modal-exchange", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.Exchange)),
                new ButtonInfo ("Gmail", "modal-gmail", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.GoogleDefault)),
                new ButtonInfo ("Google Apps", "modal-googleapps", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.GoogleExchange)),
                new ButtonInfo (null, null, null),
                new ButtonInfo ("Office 365", "modal-office365", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.Exchange)),
                new ButtonInfo ("Outlook", "modal-outlook", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.OutlookExchange)),
                new ButtonInfo ("Hotmail", "modal-hotmail", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.HotmailExchange)),
                new ButtonInfo (null, null, null),
                new ButtonInfo ("Yahoo!", "modal-yahoo", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.Yahoo)),
                new ButtonInfo ("iCloud", "modal-icloud", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.iCloud)),
                new ButtonInfo ("IMAP", "modal-imap", () => ServiceSelected_Clicked (McAccount.AccountServiceEnum.IMAP_SMTP)),
                new ButtonInfo (null, null, null),
                null,
            });
              
            var center = View.Center;
            center.X = (View.Frame.Width / 2);
            center.Y = center.Y;

            var xOffset = center.X - BUTTON_SIZE - BUTTON_PADDING_WIDTH;

            yOffset += (BUTTON_SIZE / 2);

            foreach (var buttonInfo in buttonInfoList) {
                if (null == buttonInfo) {
                    xOffset += BUTTON_SIZE + BUTTON_PADDING_WIDTH;
                    continue;
                }
                if (null == buttonInfo.buttonLabel) {
                    xOffset = center.X - BUTTON_SIZE - BUTTON_PADDING_WIDTH;
                    yOffset += BUTTON_SIZE + BUTTON_LABEL_HEIGHT + BUTTON_PADDING_HEIGHT;
                    continue;
                }

                var buttonRect = UIButton.FromType (UIButtonType.RoundedRect);
                buttonRect.Layer.CornerRadius = BUTTON_SIZE / 2;
                buttonRect.Layer.MasksToBounds = true;
                buttonRect.Layer.BorderColor = UIColor.LightGray.CGColor;
                buttonRect.Layer.BorderWidth = .5f;                 
                buttonRect.Frame = new CGRect (0, 0, BUTTON_SIZE, BUTTON_SIZE);
                buttonRect.Center = new CGPoint (xOffset, yOffset);
                using (var image = UIImage.FromBundle (buttonInfo.buttonIcon).ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal)) {
                    buttonRect.SetImage (image, UIControlState.Normal);
                }
                buttonRect.AccessibilityLabel = buttonInfo.buttonLabel;
                buttonRect.TouchUpInside += (object sender, EventArgs e) => {
                    buttonInfo.buttonAction ();
                };
                View.Add (buttonRect);

                var label = new UILabel ();
                label.TextColor = UIColor.White;
                label.Text = buttonInfo.buttonLabel;
                label.Font = A.Font_AvenirNextMedium14;
                label.TextAlignment = UITextAlignment.Center;
                label.SizeToFit ();
                label.Center = new CGPoint (xOffset, 5 + yOffset + ((BUTTON_SIZE + BUTTON_LABEL_HEIGHT) / 2));
                View.Add (label);

                xOffset += BUTTON_SIZE + BUTTON_PADDING_WIDTH;
            }
        }

        protected override void ConfigureAndLayout ()
        {
            // Static view doesn't need layout
        }

        protected override void Cleanup ()
        {
            ServiceSelected = null;
        }

        void DismissButton_Clicked (object sender, EventArgs e)
        {
            DismissModalViewController (true);
        }

        void ServiceSelected_Clicked (McAccount.AccountServiceEnum service)
        {
            if (null != ServiceSelected) {
                ServiceSelected (service);
            }
            DismissModalViewController (true);
        }

        protected class ButtonInfo
        {
            public string buttonLabel { get; set; }

            public string buttonIcon { get; set; }

            public Action buttonAction { get; set; }

            public ButtonInfo (string bl, string bi, Action ba)
            {
                buttonLabel = bl;
                buttonIcon = bi;
                buttonAction = ba;
            }
        }
    }
}
