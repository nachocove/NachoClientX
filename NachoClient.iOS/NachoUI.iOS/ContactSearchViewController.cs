// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog;
using Xamarin.Contacts;
using NachoCore;
using NachoCore.Utils;
using NachoCore.Model;

namespace NachoClient.iOS
{
    /// <summary>
    /// Contacts view controller.
    /// Fetches data from an INachoContacts object.
    /// TODO: Extend INachoContacts with filtering.
    /// Handles search in an INachoContacts.
    /// Handles async search too.
    /// </summary>
    public partial class ContactSearchViewController : NcUITableViewController, IContactsTableViewSourceDelegate
    {
        // Interface
        public ContactChooserViewController owner;
        public string initialSearchString;
        // Internal state
        ContactsTableViewSource contactTableViewSource;

        public ContactSearchViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Manages the search bar & auto-complete table.
            contactTableViewSource = new ContactsTableViewSource ();
            contactTableViewSource.SetOwner (this, SearchDisplayController);

            TableView.Source = contactTableViewSource;
            SearchDisplayController.SearchResultsTableView.Source = contactTableViewSource;

            // Let's be ready to search!
            SearchDisplayController.Active = true;
            SearchDisplayController.SearchBar.BecomeFirstResponder ();

            if ((null != initialSearchString) && (0 != initialSearchString.Length)) {
                SearchDisplayController.SearchBar.Text = initialSearchString;
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;

            LoadContacts ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_ContactSetChanged == s.Status.SubKind) {
                LoadContacts ();
            }
        }

        protected void LoadContacts ()
        {
            NachoClient.Util.HighPriority ();
            var contacts = McContact.AllContactsSortedByName ();
            contactTableViewSource.SetContacts (contacts);
            TableView.ReloadData ();
            NachoClient.Util.RegularPriority ();
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("ContactsToContact")) {
                var h = sender as SegueHolder;
                var c = (McContact)h.value;
                ContactViewController destinationController = (ContactViewController)segue.DestinationViewController;
                destinationController.contact = c;
                return;
            }
            if (segue.Identifier.Equals ("ContactsToContactDetail")) {
                var h = sender as SegueHolder;
                var c = (McContact)h.value;
                ContactDetailViewController destinationController = (ContactDetailViewController)segue.DestinationViewController;
                destinationController.contact = c;
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        /// IContactsTableViewSourceDelegate
        public void PerformSegueForDelegate (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        /// IContactsTableViewSourceDelegate
        public void ContactSelectedCallback (McContact contact)
        {
            owner.DoublePop (this, contact);
        }
 
    }
}

