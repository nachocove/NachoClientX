// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using CoreGraphics;
using System.Globalization;
using System.Linq;
using System.Text;
using Foundation;
using UIKit;
using NachoCore;
using NachoCore.Utils;
using NachoCore.Model;

namespace NachoClient.iOS
{
    /// <summary>
    /// Contacts view controller.
    /// Fetches data from an INachoContacts object.
    /// TODO: Extend INachoContacts with filtering.
    /// Handles search in an INachoContacts.
    /// Handles async search too.
    /// </summary>
    public partial class ContactSearchViewController : NcUITableViewController, IContactsTableViewSourceDelegate, INachoContactChooser
    {
        // Interface
        protected INachoContactChooserDelegate owner;
        protected NcEmailAddress address;
        protected McAccount account;
        protected string initialSearchString;
        // Internal state
        ContactsTableViewSource contactTableViewSource;
        ContactsGeneralSearch searcher;

        UIBarButtonItem cancelButton;
        UIBarButtonItem searchButton;

        public ContactSearchViewController () : base ()
        {
        }

        public ContactSearchViewController (IntPtr handle) : base (handle)
        {
        }

        public void SetOwner (INachoContactChooserDelegate owner, McAccount account, NcEmailAddress address, NachoContactType type)
        {
            this.owner = owner;
            this.account = account;
            this.address = address;
            this.initialSearchString = "";
        }

        public void Cleanup ()
        {
            this.owner = null;
            this.contactTableViewSource.Dispose ();
            this.contactTableViewSource = null;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            NavigationItem.Title = "Contacts";

            var searchController = new UISearchDisplayController (new UISearchBar (), this);

            TableView.TableHeaderView = searchController.SearchBar;
            // Manages the search bar & auto-complete table.
            contactTableViewSource = new ContactsTableViewSource ();
            contactTableViewSource.SetOwner (this, account, false, SearchDisplayController);

            cancelButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (cancelButton, "icn-close");
            cancelButton.AccessibilityLabel = "Cancel";
            NavigationItem.LeftBarButtonItem = cancelButton;

            cancelButton.Clicked += (sender, e) => {
                owner = null;
                NavigationController.PopViewController (true); 
            };

            searchButton = new NcUIBarButtonItem (UIBarButtonSystemItem.Search);
            searchButton.AccessibilityLabel = "Search";
            searchButton.TintColor = A.Color_NachoBlue;
            NavigationItem.RightBarButtonItem = searchButton;
            searchButton.Clicked += (object sender, EventArgs e) => {
                SearchDisplayController.SearchBar.BecomeFirstResponder ();
            };

            TableView.Source = contactTableViewSource;
            SearchDisplayController.SearchResultsTableView.Source = contactTableViewSource;

            if ((null != initialSearchString) && (0 != initialSearchString.Length)) {
                SearchDisplayController.SearchBar.Text = initialSearchString;
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            searcher = new ContactsGeneralSearch (UpdateSearchResultsUi);
            SearchDisplayController.Delegate = new ContactsSearchDisplayDelegate (searcher);

            LoadContacts ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
            searcher.Dispose ();
            searcher = null;
            SearchDisplayController.Delegate = null;
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_ContactSetChanged == s.Status.SubKind) {
                LoadContacts ();
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);

            PermissionManager.DealWithContactsPermission ();
        }

        void UpdateSearchResultsUi (string searchString, List<McContactEmailAddressAttribute> results)
        {
            contactTableViewSource.SetSearchResults (results);
            SearchDisplayController.SearchResultsTableView.ReloadData ();
        }

        protected void LoadContacts ()
        {
            using (NcAbate.UIAbatement ()) {
                var contacts = McContact.AllContactsSortedByName (true);
                contactTableViewSource.SetContacts (null, contacts, false);
                TableView.ReloadData ();
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        void ShowContact (McContact contact)
        {
            var destinationController = new ContactDetailViewController ();
            destinationController.contact = contact;
            NavigationController.PushViewController (destinationController, true);
        }

        /// IContactsTableViewSourceDelegate
        public void ContactSelectedCallback (McContact contact)
        {
            address.contact = contact;
            address.address = contact.GetEmailAddress ();
            owner.UpdateEmailAddress (this, address);
            if (null != owner && PresentedViewController == null) {
                owner.DismissINachoContactChooser (this);
            }
        }

        /// IContactsTableViewSourceDelegate
        public void EmailSwipeHandler (McContact contact)
        {
            NcAssert.CaseError ();
        }

        /// IContactsTableViewSourceDelegate
        public void CallSwipeHandler (McContact contact)
        {
            NcAssert.CaseError ();
        }
 
    }
}

