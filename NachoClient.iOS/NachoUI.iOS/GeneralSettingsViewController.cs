// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Foundation;
using UIKit;
using System.Collections.Generic;
using NachoCore.Utils;
using NachoCore.Model;
using NachoCore;
using System.Linq;

namespace NachoClient.iOS
{
    public partial class GeneralSettingsViewController : NcUIViewControllerNoLeaks, INachoAccountsTableDelegate, AccountTypeViewControllerDelegate, AccountCredentialsViewControllerDelegate, AccountSyncingViewControllerDelegate
    {
        UITableView accountsTableView;
        AccountsTableViewSource accountsTableViewSource;
        UIStoryboard accountStoryboard;

        ConnectToSalesforceCell connectToSalesforceView;

        SwitchAccountButton switchAccountButton;

        public GeneralSettingsViewController (IntPtr handle) : base (handle)
        {
            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            switchAccountButton = new SwitchAccountButton (SwitchAccountButtonPressed);
            NavigationItem.TitleView = switchAccountButton;
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (this.NavigationController.RespondsToSelector (new ObjCRuntime.Selector ("interactivePopGestureRecognizer"))) {
                this.NavigationController.InteractivePopGestureRecognizer.Enabled = true;
                this.NavigationController.InteractivePopGestureRecognizer.Delegate = null;
            }
            accountsTableViewSource.Refresh ();
            var contentOffset = accountsTableView.ContentOffset;
            accountsTableView.ReloadData ();
            accountsTableView.SetContentOffset (contentOffset, false);
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            if (null != NavigationController) {
                Util.ConfigureNavBar (false, NavigationController);
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            // Refresh the ! on the status line
            LoginHelpers.UserInterventionStateChanged (NcApplication.Instance.Account.Id);
        }

        public override void ViewDidDisappear (bool animated)
        {
            base.ViewDidDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        protected override void CreateViewHierarchy ()
        {
            // garf
            scrollView.RemoveFromSuperview ();

            View.BackgroundColor = A.Color_NachoBackgroundGray;
            View.BackgroundColor = A.Color_NachoBackgroundGray;

            Util.ConfigureNavBar (false, this.NavigationController);

            accountsTableViewSource = new AccountsTableViewSource ();
            accountsTableViewSource.Setup (this, showAccessory: true, showUnreadCount: false, showUnified: false, showSalesforce: true);

            accountsTableView = new UITableView (View.Frame);
            accountsTableView.Source = accountsTableViewSource;
            accountsTableView.SeparatorColor = A.Color_NachoBackgroundGray;
            accountsTableView.BackgroundColor = A.Color_NachoBackgroundGray;

            var footerView = new UIView (new CGRect (0, 0, accountsTableView.Frame.Width, 160));
            var addAccountView = new AddAccountCell (new CGRect (0, 0, accountsTableView.Frame.Width, 60), AddAccountSelected);
            footerView.AddSubview (addAccountView);

            connectToSalesforceView = new ConnectToSalesforceCell (new CGRect (0, 60, accountsTableView.Frame.Width, 80), ConnectToSalesforceSelected);
            footerView.AddSubview (connectToSalesforceView);

            accountsTableView.TableFooterView = footerView;

            View.AddSubview (accountsTableView);           
        }

        void SwitchAccountButtonPressed ()
        {
            SwitchAccountViewController.ShowDropdown (this, SwitchToAccount);
        }

        void SwitchToAccount (McAccount account)
        {
            switchAccountButton.SetAccountImage (account);
        }

        protected override void ConfigureAndLayout ()
        {
            switchAccountButton.SetAccountImage (NcApplication.Instance.Account);
            accountsTableView.Frame = new CGRect (0, 0, accountsTableView.Frame.Width, View.Frame.Height);
            connectToSalesforceView.Hidden = (null != McAccount.GetSalesForceAccount ());
        }

        public override void ViewDidLayoutSubviews ()
        {
            base.ViewDidLayoutSubviews ();
            ConfigureAndLayout ();
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_StatusBarHeightChanged == s.Status.SubKind) {
                ConfigureAndLayout ();
            }
        }

        protected override void Cleanup ()
        {
        }

        // INachoAccountsTableDelegate
        public void AccountSelected (McAccount account)
        {
            View.EndEditing (true);
            if (McAccount.AccountTypeEnum.SalesForce == account.AccountType) {
                PerformSegue ("SegueToSalesforceSettings", new SegueHolder (account));
            } else {
                PerformSegue ("SegueToAccountSettings", new SegueHolder (account));
            }
        }

        // INachoAccountsTableDelegate
        public void AddAccountSelected ()
        {
            View.EndEditing (true);
            accountStoryboard = UIStoryboard.FromName ("AccountCreation", null);
            var vc = (AccountTypeViewController)accountStoryboard.InstantiateViewController ("AccountTypeViewController");
            vc.AccountDelegate = this;
            vc.HidesBottomBarWhenPushed = true;
            NavigationController.PushViewController (vc, true);
        }

        // INachoAccountsTableDelegate
        public void SettingsSelected (McAccount account)
        {
            NcAssert.CaseError ();
        }

        public void ConnectToSalesforceSelected ()
        {
            accountStoryboard = UIStoryboard.FromName ("AccountCreation", null);
            var credentialsViewController = (SalesforceCredentialsViewController)accountStoryboard.InstantiateViewController ("SalesforceCredentialsViewController");
            credentialsViewController.Service = McAccount.AccountServiceEnum.SalesForce;
            credentialsViewController.AccountDelegate = this;
            NavigationController.PushViewController (credentialsViewController, true);
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("SegueToAccountSettings")) {
                var h = (SegueHolder)sender;
                var account = (McAccount)h.value;
                var vc = (AccountSettingsViewController)segue.DestinationViewController;
                vc.SetAccount (account);
                return;
            }
            if (segue.Identifier.Equals ("SegueToSalesforceSettings")) {
                var h = (SegueHolder)sender;
                var account = (McAccount)h.value;
                var vc = (SalesforceSettingsViewController)segue.DestinationViewController;
                vc.SetAccount (account);
                return;
            }
            if (segue.Identifier.Equals ("SegueToAdvancedLoginView")) {
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        public void AccountTypeViewControllerDidSelectService (AccountTypeViewController vc, McAccount.AccountServiceEnum service)
        {
            var credentialsViewController = vc.SuggestedCredentialsViewController (service);
            credentialsViewController.Service = service;
            credentialsViewController.AccountDelegate = this;
            NavigationController.PushViewController (credentialsViewController, true);
        }

        public void AccountCredentialsViewControllerDidValidateAccount (AccountCredentialsViewController vc, McAccount account)
        {
            var syncingViewController = (AccountSyncingViewController)accountStoryboard.InstantiateViewController ("AccountSyncingViewController");
            syncingViewController.AccountDelegate = this;
            syncingViewController.Account = account;
            BackEnd.Instance.Start (syncingViewController.Account.Id);
            NavigationController.PushViewController (syncingViewController, true);
        }

        public void AccountSyncingViewControllerDidComplete (AccountSyncingViewController vc)
        {
            accountsTableViewSource.Refresh ();
            accountsTableView.ReloadData ();
            NavigationController.PopToViewController (this, true);

        }
    }
}
