// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using System.Net;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;
using NachoPlatform;


namespace NachoClient.iOS
{
    public partial class SettingsLegalViewController : NcUIViewControllerNoLeaks
    {
        protected string url;
        protected string navigationBarTitle;
        protected string key;
        protected bool loadFromWeb;

        protected const string CACHE_MODULE = "CACHE";

        protected const int WEB_VIEW_TAG = 100;

        protected UIBarButtonItem backButton;

        public SettingsLegalViewController (IntPtr handle) : base (handle)
        {
        }

        public void SetProperties (string url, string navigationBarTitle, string key, bool loadFromWeb)
        {
            this.url = url;
            this.navigationBarTitle = navigationBarTitle;
            this.key = key;
            this.loadFromWeb = loadFromWeb;
            NavigationItem.Title = navigationBarTitle;
        }

        protected override void CreateViewHierarchy ()
        {
            backButton = new UIBarButtonItem();
            backButton.Clicked += BackButtonClicked;
            backButton.Image = UIImage.FromBundle ("nav-backarrow");
            backButton.TintColor = A.Color_NachoBlue;
            NavigationItem.LeftBarButtonItem = backButton;

            View.BackgroundColor = A.Color_NachoBackgroundGray;

            float yOffset = 20;

            UIView interiorView = new UIView (new RectangleF (12, yOffset, View.Frame.Width - 24, View.Frame.Height - 100));
            interiorView.BackgroundColor = UIColor.White;
            interiorView.Layer.BorderColor = A.Color_NachoBorderGray.CGColor;
            interiorView.Layer.BorderWidth = 1.0f;
            interiorView.Layer.CornerRadius = 6;

            UIImageView nachoLogoImageView;
            using (var nachoLogo = UIImage.FromBundle ("Bootscreen-1")) {
                nachoLogoImageView = new UIImageView (nachoLogo);
            }
            nachoLogoImageView.Frame = new RectangleF (interiorView.Frame.Width / 2 - 40, 18, 80, 80);
            interiorView.Add (nachoLogoImageView);

            yOffset = nachoLogoImageView.Frame.Bottom + 20;

            if (loadFromWeb) {
                UIWebView webView = new UIWebView (new RectangleF (10, yOffset, interiorView.Frame.Width - 20, interiorView.Frame.Height - yOffset - 10));
                webView.Tag = WEB_VIEW_TAG;
                interiorView.Add (webView);
                View.AddSubview (interiorView);
                if (hasNetworkConnection ()) {
                    webView.LoadRequest (new NSUrlRequest (new NSUrl (url)));
                    webView.LoadError += HandleLoadError;
                    webView.LoadFinished += CacheUrlHtml;
                } else {
                    HandleLoadError (this, null);
                }
            } else {
                UITextView textView = new UITextView (new RectangleF(10, yOffset, interiorView.Frame.Width - 20, interiorView.Frame.Height - yOffset - 10));
                textView.Text =  System.IO.File.ReadAllText(url);
                interiorView.Add (textView);
                View.AddSubview (interiorView);
            }
        }

        void CacheUrlHtml (object sender, EventArgs e)
        {
            string urlSourceCode = new WebClient ().DownloadString (url);
            McMutables.Set (LoginHelpers.GetCurrentAccountId (), CACHE_MODULE, key, urlSourceCode);
        }

        void HandleLoadError (object sender, UIWebErrorArgs e)
        {
            UIWebView webView = (UIWebView)View.ViewWithTag (WEB_VIEW_TAG);
            string theText = McMutables.GetOrCreate (LoginHelpers.GetCurrentAccountId (), CACHE_MODULE, key, "");
            if (!string.IsNullOrEmpty (theText)) {
                webView.LoadHtmlString (theText, null);
            } else {
                webView.LoadHtmlString ("<h2>Sorry, you will need an internet connection to view this information.&nbsp;</h2>", null);
            }
        }

        public bool hasNetworkConnection ()
        {
            if (NcCommStatus.Instance.Status != NetStatusStatusEnum.Up) {
                return false;
            } else {
                return true;
            }
        }

        protected override void ConfigureAndLayout ()
        {

        }

        protected override void Cleanup ()
        {
            backButton.Clicked -= BackButtonClicked;
            backButton = null;

            UIWebView webView = (UIWebView)View.ViewWithTag (WEB_VIEW_TAG);
            webView.LoadError -= HandleLoadError;
            webView.LoadFinished -= CacheUrlHtml;
            webView = null;
        }

        protected void BackButtonClicked (object sender, EventArgs e)
        {
            DismissViewController (true, null);
        }    
    }
}
