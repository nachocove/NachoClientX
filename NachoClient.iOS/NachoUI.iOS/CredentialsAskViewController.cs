// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using NachoCore.Model;
using NachoCore.Utils;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoPlatform;
using NachoCore;

namespace NachoClient.iOS
{
	public partial class CredentialsAskViewController : NcUIViewController
	{
        protected float yOffset = 0;
        protected float keyboardHeight;
        protected const int EMAIL_FIELD_TAG = 100;
        protected const int PASSWORD_FIELD_TAG = 101;
        protected const int SUBMIT_BUTTON_TAG = 102;

		public CredentialsAskViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad ();
            CreateView ();
            LayoutView ();
            ConfigureView ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextFieldTextDidChangeNotification, OnTextFieldChanged);
            }
        }
            
        protected void CreateView()
        {
            scrollView.BackgroundColor = A.Color_NachoGreen;
            View.Add (scrollView);
            contentView.BackgroundColor = A.Color_NachoGreen;

            yOffset = 40;

            UIButton escape = new UIButton (new RectangleF (20, yOffset, 20, 20));
            escape.SetImage(UIImage.FromBundle ("navbar-icn-close"), UIControlState.Normal);
            escape.TouchUpInside += (object sender, EventArgs e) => {
                View.EndEditing(true);
                DismissViewController(true, null);
            };
            contentView.Add (escape);

            yOffset = escape.Frame.Bottom + 40;

            UILabel errorMessage = new UILabel (new RectangleF (25, yOffset, View.Frame.Width - 50, 70));
            errorMessage.TextAlignment = UITextAlignment.Center;
            errorMessage.Lines = 3;
            errorMessage.Text = "Your credentials are no longer valid. Please update your credentials.";
            errorMessage.Font = A.Font_AvenirNextRegular17;
            errorMessage.TextColor = UIColor.White;
            contentView.AddSubview (errorMessage);

            yOffset = errorMessage.Frame.Bottom + 20;

            UIView emailBox = new UIView (new RectangleF (25, yOffset, View.Frame.Width - 50, 44));
            emailBox.BackgroundColor = UIColor.White;

            var emailField = new UITextField (new RectangleF (100, 0, emailBox.Frame.Width - 100, emailBox.Frame.Height));
            emailField.BackgroundColor = UIColor.White;
            emailField.Placeholder = "email@company.com";
            emailField.Font = A.Font_AvenirNextRegular14;
            emailField.BorderStyle = UITextBorderStyle.None;
            emailField.TextAlignment = UITextAlignment.Left;
            emailField.KeyboardType = UIKeyboardType.EmailAddress;
            emailField.AutocapitalizationType = UITextAutocapitalizationType.None;
            emailField.AutocorrectionType = UITextAutocorrectionType.No;
            emailField.Tag = EMAIL_FIELD_TAG;
            emailBox.AddSubview (emailField);

            UILabel emailLabel = new UILabel (new RectangleF (10, 0, 60, 44));
            emailLabel.Text = "Email";
            emailLabel.BackgroundColor = UIColor.White;
            emailLabel.TextColor = A.Color_NachoGreen;
            emailLabel.Font = A.Font_AvenirNextMedium14;
            emailBox.AddSubview (emailLabel);
            emailBox.UserInteractionEnabled = true;
            contentView.AddSubview (emailBox);

            yOffset = emailBox.Frame.Bottom + 5f;

            UIView passwordBox = new UIView (new RectangleF (25, yOffset, View.Frame.Width - 50, 44));
            passwordBox.BackgroundColor = UIColor.White;

            var passwordField = new UITextField (new RectangleF (100, 0, passwordBox.Frame.Width - 100, passwordBox.Frame.Height));
            passwordField.BackgroundColor = UIColor.White;
            passwordField.Placeholder = "Required";
            passwordField.Font = A.Font_AvenirNextRegular14;
            passwordField.BorderStyle = UITextBorderStyle.None;
            passwordField.TextAlignment = UITextAlignment.Left;
            passwordField.SecureTextEntry = true;
            passwordField.KeyboardType = UIKeyboardType.Default;
            passwordField.AutocapitalizationType = UITextAutocapitalizationType.None;
            passwordField.AutocorrectionType = UITextAutocorrectionType.No;
            passwordField.Tag = PASSWORD_FIELD_TAG;
            passwordField.ShouldReturn += ((textField) => {
                textField.ResignFirstResponder();
                return true;
            });
            passwordBox.AddSubview (passwordField);
            passwordBox.UserInteractionEnabled = true;

            UILabel passwordLabel = new UILabel (new RectangleF (10, 0, 80, 44));
            passwordLabel.Text = "Password";
            passwordLabel.BackgroundColor = UIColor.White;
            passwordLabel.TextColor = A.Color_NachoGreen;
            passwordLabel.Font = A.Font_AvenirNextMedium14;
            passwordBox.AddSubview (passwordLabel);
            contentView.AddSubview (passwordBox);

            yOffset = passwordBox.Frame.Bottom + 5f;

            var submitButton = new UIButton (new System.Drawing.RectangleF (25, yOffset, View.Frame.Width - 50, 45));
            submitButton.BackgroundColor = A.Color_NachoBlue;
            submitButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            submitButton.SetTitle ("Connect", UIControlState.Normal);
            submitButton.TitleLabel.TextColor = UIColor.White;
            submitButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            submitButton.Tag = SUBMIT_BUTTON_TAG;
            contentView.AddSubview (submitButton);

            submitButton.TouchUpInside += delegate {
                if(isValidEmail(emailField.Text)){
                    McAccount UsersAccount = McAccount.QueryById<McAccount>(LoginHelpers.GetCurrentAccountId());
                    McCred UsersCredentials = McCred.QueryById<McCred>(UsersAccount.CredId);
                    UsersCredentials.Username = emailField.Text;
                    UsersCredentials.Password = passwordField.Text;
                    UsersCredentials.Update();
                    BackEnd.Instance.CredResp(UsersAccount.Id);
                    View.EndEditing(true);
                    DismissViewController(true, null);
                }else{
                    errorMessage.Text = "The email address you entered is not valid. Please update and try again.";
                }
            };

            emailField.ShouldReturn += ((textField) => {
                passwordField.BecomeFirstResponder();
                return true;
            });
            yOffset = submitButton.Frame.Bottom + 20f;
            scrollView.AddSubview (contentView);
        }

        protected void LayoutView ()
        {
            scrollView.Frame = new RectangleF (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            var contentFrame = new RectangleF (0, 0, View.Frame.Width, yOffset);
            contentView.Frame = contentFrame;
            scrollView.ContentSize = contentFrame.Size;
        }

        public void ConfigureView()
        {
            UITextField emailField = (UITextField)View.ViewWithTag (EMAIL_FIELD_TAG);
            emailField.Text = GetUsername ();
            emailField.TextColor = A.Color_NachoRed;

            UITextField passwordField = (UITextField)View.ViewWithTag (PASSWORD_FIELD_TAG);
            passwordField.Text = GetPassword ();
            passwordField.TextColor = A.Color_NachoRed;
        }

        protected bool isValidEmail (string email)
        {
            RegexUtilities regexUtil = new RegexUtilities ();
            return regexUtil.IsValidEmail (email);
        }

        protected string GetUsername ()
        {
            if (LoginHelpers.IsCurrentAccountSet ()) {
                McAccount Account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
                McCred Cred = McCred.QueryById<McCred> (Account.CredId);
                return Cred.Username;
            } else {
                return "";
            }
        }

        protected string GetPassword ()
        {
            if (LoginHelpers.IsCurrentAccountSet ()) {
                McAccount Account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
                McCred Cred = McCred.QueryById<McCred> (Account.CredId);
                return Cred.Password;
            } else {
                return "";
            }
        }

        protected virtual bool HandlesKeyboardNotifications {
            get { return true; }
        }

        private void OnTextFieldChanged (NSNotification notification)
        {
            maybeEnableConnect ();
        }

        protected void maybeEnableConnect ()
        {
            var emailTextField = (UITextField)contentView.ViewWithTag (EMAIL_FIELD_TAG);
            var passwordTextField = (UITextField)contentView.ViewWithTag (PASSWORD_FIELD_TAG);

            var email = emailTextField.Text;
            var password = passwordTextField.Text;

            var shouldWe = ((0 < email.Length) && (0 < password.Length));

            var submitButton = (UIButton)contentView.ViewWithTag (SUBMIT_BUTTON_TAG);
            submitButton.Enabled = shouldWe;
            submitButton.Alpha = (shouldWe ? 1.0f : 0.5f);
        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {
                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;
                //Start an animation, using values from the keyboard
                UIView.Animate (0, () => {
                    UIView.BeginAnimations ("AnimateForKeyboard");
                    UIView.SetAnimationBeginsFromCurrentState (true);
                    UIView.SetAnimationDuration (UIKeyboard.AnimationDurationFromNotification (notification));
                    UIView.SetAnimationCurve ((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification (notification));
                    //Pass the notification, calculating keyboard height, etc.
                    bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                    if (visible) {
                        var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
                        OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                    } else {
                        var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);
                        OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                    }
                }, () => OnKeyboardChangeCompleted ());
                ;
            }
        }

        protected void OnKeyboardChangeCompleted ()
        {

        }

        protected virtual void OnKeyboardChanged (bool visible, float height)
        {
            var newHeight = (visible ? height : 0);

            if (newHeight == keyboardHeight) {
                return;
            }
            keyboardHeight = newHeight;

            LayoutView ();

            var connectbutton = contentView.ViewWithTag (SUBMIT_BUTTON_TAG);
            scrollView.ScrollRectToVisible (connectbutton.Frame, false);
        }
	}
}
