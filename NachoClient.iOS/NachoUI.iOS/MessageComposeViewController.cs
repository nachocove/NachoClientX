// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;
using CoreGraphics;
using Foundation;
using UIKit;

using MimeKit;

using NachoCore;
using NachoPlatform;
using NachoCore.Brain;
using NachoCore.Model;
using NachoCore.Utils;

using WebKit;
using Photos;
using MobileCoreServices;

using System.Linq;

namespace NachoClient.iOS
{
    
    public interface MessageComposeViewDelegate {

        void MessageComposeViewDidBeginSend (MessageComposeViewController vc);
        void MessageComposeViewDidSaveDraft (MessageComposeViewController vc);
        void MessageComposeViewDidCancel (MessageComposeViewController vc);

    }

    public partial class MessageComposeViewController : NcUIViewController,
        // IWKNavigationDelegate,
        // IWKScriptMessageHandler,
        IUIWebViewDelegate,
        IUIScrollViewDelegate,
        MessageComposeHeaderViewDelegate,
        QuickResponseViewControllerDelegate,
        INachoIntentChooserParent,
        INachoDateControllerParent,
        INachoFileChooserParent,
        INachoContactChooserDelegate,
        MessageComposerDelegate,
        NcWebViewMessageHandler,
        AccountPickerViewControllerDelegate,
        ThemeAdopter
    {

        #region Properties

        public MessageComposeViewDelegate ComposeDelegate;
        public bool StartWithQuickResponse;
        public readonly MessageComposer Composer;
        CompoundScrollView ScrollView;
        MessageComposeHeaderView HeaderView;
        UIWebView WebView;
        NcUIBarButtonItem CloseButton;
        NcUIBarButtonItem SendButton;
        NcUIBarButtonItem QuickResponseButton;
        NcUIBarButtonItem AddAttachmentButton;
        List<McAccount> EmailAccounts;
        bool HasShownOnce;

        NSObject ContentSizeCategoryChangedNotification;
        string ContentHtml;
        bool IsWebViewLoaded = false;
        List<string> JavaScriptQueue;
        bool MakeWebViewFirstResponderOnLoad = false;

        #endregion

        #region Constructors

        public MessageComposeViewController (McAccount account) : base ()
        {
            NcAssert.False (account.AccountType == McAccount.AccountTypeEnum.Unified, "MessageComposeViewController account must not be unified");
            Composer = new MessageComposer (account);
            Composer.Delegate = this;
            JavaScriptQueue = new List<string> ();
            EmailAccounts = new List<McAccount> (McAccount.QueryByAccountCapabilities (McAccount.AccountCapabilityEnum.EmailSender).Where((McAccount a) => { return a.AccountType != McAccount.AccountTypeEnum.Unified; }));
            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";
            HasShownOnce = false;
        }

        #endregion

        #region Presenters

        public void Present (bool animated = true, Action completionHandler = null)
        {
            var window = UIApplication.SharedApplication.Delegate.GetWindow ();
            var navigationController = new UINavigationController (this);
            var parentViewController = window.RootViewController;
            while (parentViewController.PresentedViewController != null) {
                parentViewController = parentViewController.PresentedViewController;
            }
            parentViewController.PresentViewController (navigationController, animated, completionHandler);
        }

        #endregion

        #region Theme

        Theme adoptedTheme;

        public void AdoptTheme (Theme theme)
        {
            if (theme != adoptedTheme) {
                adoptedTheme = theme;
                HeaderView.AdoptTheme (theme);
            }
        }

        #endregion

        #region View Lifecycle

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            View.BackgroundColor = UIColor.White;

            // Nav bar
            CloseButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (CloseButton, "icn-close");
            CloseButton.AccessibilityLabel = "Close";
            CloseButton.Clicked += Close;

            SendButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (SendButton, "icn-send");
            SendButton.AccessibilityLabel = "Send";
            SendButton.Clicked += Send;

            QuickResponseButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (QuickResponseButton, "contact-quickemail");
            QuickResponseButton.AccessibilityLabel = "Quick response";
            QuickResponseButton.Clicked += QuickReply;


            AddAttachmentButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (AddAttachmentButton, "files-email-attachment");
            AddAttachmentButton.AccessibilityLabel = "Add attachment";
            AddAttachmentButton.Clicked += AddAttachment;

            NavigationItem.LeftBarButtonItem = CloseButton;
            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                SendButton,
                QuickResponseButton,
                AddAttachmentButton,
            };

            // Content Area
            ScrollView = new CompoundScrollView (View.Bounds);
            ScrollView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;
            ScrollView.AlwaysBounceVertical = true;
            ScrollView.Delegate = this;

            HeaderView = new MessageComposeHeaderView (ScrollView.Bounds);
            HeaderView.Frame = new CGRect (0.0, 0.0, ScrollView.Bounds.Width, HeaderView.PreferredHeight);
            HeaderView.HeaderDelegate = this;
            HeaderView.AttachmentsAllowed = Composer.RelatedCalendarItem == null;
            // Was originally going to use WKWebView, but it won't load file:/// URLs on device (will in simulator, though).
            // Might as well keep the code around for reference if we ever want to make the switch
            // var config = new WKWebViewConfiguration ();
            // config.SuppressesIncrementalRendering = true;
            // config.UserContentController.AddScriptMessageHandler (this, "nachoCompose");
            // config.UserContentController.AddScriptMessageHandler (this, "nacho");
            // WebView = new WKWebView (ScrollView.Bounds, config);
            // WebView.NavigationDelegate = this;
            WebView = new UIWebView (View.Bounds);
            WebView.SuppressesIncrementalRendering = true;
            WebView.Delegate = this;
            WebView.NcHijack ();
            WebView.KeyboardDisplayRequiresUserAction = false;
            NcWebViewMessageProtocol.AddHandler (this, "nachoCompose");
            NcWebViewMessageProtocol.AddHandler (this, "nacho");

            ScrollView.AddCompoundView (HeaderView);
            ScrollView.AddCompoundView (WebView);
            View.AddSubview (ScrollView);

            UIMenuController.SharedMenuController.MenuItems = new UIMenuItem[] {
                new UIMenuItem("Attach", new ObjCRuntime.Selector("attach:"))
            };
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            RegisterForNotifications ();
            if (!HasShownOnce) {
                Composer.StartPreparingMessage ();
                UpdateHeaderView ();
                HeaderView.UpdateCcCollapsed ();
                UpdateSendEnabled ();
                if (StartWithQuickResponse) {
                    ShowQuickResponses ();
                } else {
                    if (!Composer.HasRecipient) {
                        HeaderView.ToView.SetEditFieldAsFirstResponder ();
                    } else if (String.IsNullOrEmpty (Composer.Message.Subject)) {
                        HeaderView.SubjectField.BecomeFirstResponder ();
                    } else if (IsWebViewLoaded) {
                        MakeWebViewFirstResponder ();
                    } else {
                        MakeWebViewFirstResponderOnLoad = true;
                    }
                }
                HasShownOnce = true;
            }
            AdoptTheme (Theme.Active);

        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            UnregisterNotifications ();
        }

        public override void ViewDidDisappear (bool animated)
        {
            base.ViewDidDisappear (animated);
        }

        public override void ViewDidUnload ()
        {
            base.ViewDidUnload ();
            NcWebViewMessageProtocol.RemoveHandler (this, "nachoCompose");
            NcWebViewMessageProtocol.RemoveHandler (this, "nacho");
        }

        #endregion

        #region Layout

        private void UpdateScrollViewSize ()
        {
            ScrollView.DetermineContentSize ();
        }

        private void LayoutScrollView ()
        {
            UpdateScrollViewSize ();
            ScrollView.SetNeedsLayout ();
            ScrollView.LayoutIfNeeded ();
        }

        public void MessageComposeHeaderViewDidChangeHeight (MessageComposeHeaderView view)
        {
            LayoutScrollView ();
        }

        protected override void OnKeyboardChanged ()
        {
            var frame = View.Bounds;
            frame.Height = frame.Height - keyboardHeight;
            ScrollView.Frame = frame;
            ScrollView.SetNeedsLayout ();
            ScrollView.LayoutIfNeeded ();
        }

        #endregion

        #region User Actions - Navbar

        // User hitting the send button
        public void Send (object sender, EventArgs e)
        {
            View.EndEditing (true);
            if (String.IsNullOrWhiteSpace (Composer.Message.Subject)) {
                NcAlertView.Show (this, "Empty Subject", "This message does not have a subject. How would you like to proceed?",
                    new NcAlertAction ("Send Anyway", SendWithoutSubject),
                    new NcAlertAction ("Add Subject", AddSubject),
                    new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
            } else {
                CheckSizeBeforeSending ();
            }
        }

        void SendWithoutSubject ()
        {
            CheckSizeBeforeSending ();
        }

        void AddSubject ()
        {
            HeaderView.SubjectField.BecomeFirstResponder ();
        }

        void CheckSizeBeforeSending ()
        {
            ContentHtml = GetHtmlContent ();
            Composer.Save (ContentHtml);
            if (Composer.IsOversize) {
                if (Composer.CanResize) {
                    NcAlertView.Show (this, "Large Message",
                        string.Format ("This message is {0}. You can make it smaller by reducing the size of the attached images.", Pretty.PrettyFileSize (Composer.MessageSize)),
                        new NcAlertAction (string.Format ("Small images ({0})", Pretty.PrettyFileSize (Composer.EstimatedSmallSize)), ResizeImagesSmall),
                        new NcAlertAction (string.Format ("Medium images ({0})", Pretty.PrettyFileSize (Composer.EstimatedMediumSize)), ResizeImagesMedium),
                        new NcAlertAction (string.Format ("Large images ({0})", Pretty.PrettyFileSize (Composer.EstimatedLargeSize)), ResizeImagesLarge),
                        new NcAlertAction (string.Format ("Actual size ({0})", Pretty.PrettyFileSize (Composer.MessageSize)), AcknowlegeSizeWarning),
                        new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
                } else {
                    NcAlertView.Show (this, "Large Message", string.Format ("This message is {0}", Pretty.PrettyFileSize (Composer.MessageSize)),
                        new NcAlertAction ("Send Anyway", AcknowlegeSizeWarning),
                        new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
                }
            } else {
                Send ();
            }
        }

        void AcknowlegeSizeWarning ()
        {
            Send ();
        }

        void ResizeImagesLarge ()
        {
            ResizeImagesAndSend (Composer.LargeImageLengths);
        }

        void ResizeImagesMedium ()
        {
            ResizeImagesAndSend (Composer.MediumImageLengths);
        }

        void ResizeImagesSmall ()
        {
            ResizeImagesAndSend (Composer.SmallImageLengths);
        }

        void ResizeImagesAndSend (Tuple<float, float> lengths)
        {
            Composer.ImageLengths = lengths;
            Send ();
        }

        void Send ()
        {
            Composer.Send ();
            if (ComposeDelegate != null) {
                ComposeDelegate.MessageComposeViewDidBeginSend (this);
            }
            DismissViewController (true, null);
        }

        // User hitting the quick reply button
        public void QuickReply (object sender, EventArgs e)
        {
            View.EndEditing (true);
            ShowQuickResponses ();
        }

        // User hitting the add attachment button
        public void AddAttachment (object sender, EventArgs e)
        {
            View.EndEditing (true);
            ShowAddAttachment (true);
        }

        // User hitting the close button
        public void Close (object sender, EventArgs e)
        {
            View.EndEditing (true);
            NcActionSheet.Show (CloseButton, this, null, null, 
                new NcAlertAction ("Discard Draft", NcAlertActionStyle.Destructive, DiscardDraft),
                new NcAlertAction ("Save Draft", NcAlertActionStyle.Default, SaveDraft),
                new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
        }

        // User opting to discard while closing
        private void DiscardDraft ()
        {
            Composer.Message.Delete ();
            if (ComposeDelegate != null) {
                ComposeDelegate.MessageComposeViewDidCancel (this);
            }
            DismissViewController (true, null);
        }

        // User opting to save while closing
        private void SaveDraft ()
        {
            var html = GetHtmlContent ();
            Composer.Save (html);
            if (ComposeDelegate != null) {
                ComposeDelegate.MessageComposeViewDidSaveDraft (this);
            }
            DismissViewController (true, null);
        }

        // User selecting a quick response
        public void QuickResponseViewDidSelectResponse (QuickResponseViewController vc, NcQuickResponse.QRTypeEnum whatType, NcQuickResponse.QuickResponse response, McEmailMessage.IntentType intentType)
        {
            if (whatType == NcQuickResponse.QRTypeEnum.Compose) {
                Composer.Message.Subject = response.subject;
                UpdateHeaderSubjectView ();
            }
            if (Composer.IsMessagePrepared) {
                var userText = response.body + Composer.SignatureText ();
                EvaluateJavaScript (String.Format ("Editor.defaultEditor.replaceUserText({0});", userText.JavascriptEscapedString ()));
            } else {
                Composer.InitialText = response.body;
            }
            Composer.Message.Intent = intentType;
            Composer.Message.IntentDate = DateTime.MinValue;
            Composer.Message.IntentDateType = MessageDeferralType.None;
            UpdateHeaderIntentView ();
            HeaderView.ShowIntentField ();
        }

        #endregion

        #region User Actions - Header

        // User selecting + button in To/CC/BCC field
        public void MessageComposeHeaderViewDidSelectContactChooser (MessageComposeHeaderView view, NcEmailAddress address)
        {
            var chooserController = new ContactChooserViewController ();
            chooserController.SetOwner (this, Composer.Account, address, NachoContactType.EmailRequired);
            FadeCustomSegue.Transition (this, chooserController);
        }

        // User starting to type in To/CC/BCC field
        public void MessageComposeHeaderViewDidSelectContactSearch (MessageComposeHeaderView view, NcEmailAddress address)
        {
            var searchController = new ContactSearchViewController ();
            searchController.SetOwner (this, Composer.Account, address, NachoContactType.EmailRequired);
            FadeCustomSegue.Transition (this, searchController);
        }

        bool SalesforceBccAdded = false;
        Dictionary<string, bool> SalesforceAddressCache = new Dictionary<string, bool>();

        void MaybeAddSalesforceBcc()
        {
            if (!SalesforceBccAdded) {
                string extraBcc = EmailHelper.ExtraSalesforceBccAddress (SalesforceAddressCache, Composer.Message);
                if (null != extraBcc) {
                    SalesforceBccAdded = true;
                    var parsedExtraBcc = NcEmailAddress.ParseBccAddressListString (extraBcc);
                    if (0 == parsedExtraBcc.Count) {
                        Log.Error (Log.LOG_EMAIL, "The Salesforce extra Bcc address could not be parsed.");
                    }
                    foreach (var address in parsedExtraBcc) {
                        HeaderView.BccView.Append (address);
                    }
                    Composer.Message.Bcc = EmailHelper.AddressStringFromList (HeaderView.BccView.AddressList);
                }
            }
        }

        // User selecting contact for To/CC/BCC field
        public void UpdateEmailAddress (INachoContactChooser vc, NcEmailAddress address)
        {
            if (address.kind == NcEmailAddress.Kind.To) {
                HeaderView.ToView.Append (address);
                Composer.Message.To = EmailHelper.AddressStringFromList (HeaderView.ToView.AddressList);
            } else if (address.kind == NcEmailAddress.Kind.Cc) {
                HeaderView.CcView.Append (address);
                Composer.Message.Cc = EmailHelper.AddressStringFromList (HeaderView.CcView.AddressList);
            } else if (address.kind == NcEmailAddress.Kind.Bcc) {
                HeaderView.BccView.Append (address);
                Composer.Message.Bcc = EmailHelper.AddressStringFromList (HeaderView.BccView.AddressList);
            } else {
                NcAssert.CaseError ();
            }
            MaybeAddSalesforceBcc ();
            UpdateSendEnabled ();
        }

        public void MessageComposeHeaderViewDidRemoveAddress (MessageComposeHeaderView view, NcEmailAddress address)
        {
            
            if (address.kind == NcEmailAddress.Kind.To) {
                Composer.Message.To = EmailHelper.AddressStringFromList (HeaderView.ToView.AddressList);
            } else if (address.kind == NcEmailAddress.Kind.Cc) {
                Composer.Message.Cc = EmailHelper.AddressStringFromList (HeaderView.CcView.AddressList);
            } else if (address.kind == NcEmailAddress.Kind.Bcc) {
                Composer.Message.Bcc = EmailHelper.AddressStringFromList (HeaderView.BccView.AddressList);
            } else {
                NcAssert.CaseError ();
            }
            UpdateSendEnabled ();
        }

        // ??
        // I think this is when the user starts typing an email adderess and then clears it.
        // Since we don't change anything when they start typing, there's nothing to change if the clear.
        public void DeleteEmailAddress (INachoContactChooser vc, NcEmailAddress address)
        {
            // old implementation did nothing
        }

        // User tapping the from field
        public void MessageComposeHeaderViewDidSelectFromField (MessageComposeHeaderView view)
        {
            var picker = new AccountPickerViewController ();
            picker.PickerDelegate = this;
            picker.Accounts = EmailAccounts;
            picker.SelectedAccount = Composer.Account;
            NavigationController.PushViewController (picker, true);
        }

        public void AccountPickerDidPickAccount (AccountPickerViewController vc, McAccount account)
        {
            NavigationController.PopViewController (true);
            Composer.SetAccount (account);
            UpdateHeaderFromView ();
            UpdateHeaderAttachmentsView ();
        }

        // User changing the subject
        public void MessageComposeHeaderViewDidChangeSubject (MessageComposeHeaderView view, string subject)
        {
            Composer.Message.Subject = subject;
        }

        // User tapping the intent field 
        public void MessageComposeHeaderViewDidSelectIntentField (MessageComposeHeaderView view)
        {
            var intentController = new IntentSelectionViewController ();
            intentController.ModalTransitionStyle = UIModalTransitionStyle.CrossDissolve;
            intentController.SetOwner (this);
            intentController.SetDateControllerOwner (this);
            PresentViewController (intentController, true, null);
        }

        // User selecting an intent
        public void SelectMessageIntent (NcMessageIntent.MessageIntent intent)
        {
            Composer.Message.Intent = intent.type;
            Composer.Message.IntentDateType = MessageDeferralType.None;
            Composer.Message.IntentDate = DateTime.MinValue;
            UpdateHeaderIntentView ();
        }

        // User selecting a date for the intent
        public void DateSelected (NcMessageDeferral.MessageDateType type, MessageDeferralType request, McEmailMessageThread thread, DateTime selectedDate)
        {
            Composer.Message.IntentDateType = request;
            Composer.Message.IntentDate = selectedDate;
            UpdateHeaderIntentView ();
        }
            
        // User tapping on add attachment
        public void MessageComposeHeaderViewDidSelectAddAttachment (MessageComposeHeaderView view)
        {
            ShowAddAttachment ();
        }

        // User tapping on a specific attachment to display
        public void MessageComposeHeaderViewDidSelectAttachment (MessageComposeHeaderView view, McAttachment attachment)
        {
            PlatformHelpers.DisplayAttachment (this, attachment);
        }

        // User picking a file as an attachment
        public void SelectFile (INachoFileChooser vc, McAbstrObject obj)
        {
            var attachment = obj as McAttachment;
            if (attachment == null){
                var file = obj as McDocument;
                if (file != null) {
                    attachment = McAttachment.InsertSaveStart (Composer.Account.Id);
                    attachment.SetDisplayName (file.DisplayName);
                    attachment.UpdateFileCopy (file.GetFilePath ());
                } else {
                    var note = obj as McNote;
                    if (note != null) {
                        attachment = McAttachment.InsertSaveStart (Composer.Account.Id);
                        attachment.SetDisplayName (note.DisplayName + ".txt");
                        attachment.UpdateData (note.noteContent);
                    }
                }
            }

            if (attachment != null) {
                attachment.Link (Composer.Message);
                attachment.Update ();
                HeaderView.AttachmentsView.Append (attachment);
                this.DismissViewController (true, null);
            } else {
                NcAssert.CaseError ();
            }

        }

        // User deleting an attachment
        public void MessageComposeHeaderViewDidRemoveAttachment (MessageComposeHeaderView view, McAttachment attachment)
        {
            attachment.Unlink (Composer.Message);
        }

        // User adding an attachment from media browser
        public void Append (McAttachment attachment)
        {
            attachment.Update ();
            attachment.Link (Composer.Message);
            HeaderView.AttachmentsView.Append (attachment);
        }

        public void AttachmentUpdated (McAttachment attachment)
        {
            HeaderView.AttachmentsView.UpdateAttachment (attachment);
        }

        // Not really a direct user action, but caused by the user selecting a date for the intent
        public void DismissChildDateController (INachoDateController vc)
        {
            // Basically, once the intent date view controller is dismissed, we need to dismiss the intent controller
            DismissViewController (false, null);
        }

        // Not really a direct user action, but caused by the user selecting a date for the intent
        public void DismissPhotoPicker ()
        {
            DismissViewController (true, null);
        }

        public void PresentFileChooserViewController (UIViewController vc)
        {
            PresentViewController (vc, true, null);
        }

        // Not really a direct user action, but caused by the user selecting a contact
        public void DismissINachoContactChooser (INachoContactChooser vc)
        {
            // The contact chooser was pushed on the nav stack, rather than shown as a modal.
            // So we need to pop it from the stack
            vc.Cleanup ();
            NavigationController.PopViewController (true);
        }

        #endregion

        #region User Actions - Web View

        public void WebViewDidSelectAddInlineAttachment (UIWebView webView)
        {
            ShowAddAttachment (true);
        }

        public void WebViewDidPasteImages (UIImage[] images, bool[] isPNG)
        {
            var i = 0;
            foreach (var image in images)
            {
                bool png = isPNG [i];
                string ext;
                string contentType;
                if (png) {
                    ext = ".png";
                    contentType = "image/png";
                } else {
                    ext = ".jpg";
                    contentType = "image/jpeg";
                }
                McAttachment attachment = null;
                NcModel.Instance.RunInTransaction (() => {
                    attachment = McAttachment.InsertSaveStart (Composer.Account.Id);
                    attachment.SetDisplayName ("attachment" + ext);
                    attachment.ContentType = contentType;
                    attachment.Update ();
                    attachment.Link (Composer.Message);
                });
                if (png) {
                    using (var pngData = image.AsPNG ()) {
                        attachment.UpdateData (pngData.ToArray ());
                    }
                } else {
                    using (var jpg = image.AsJPEG ()) {
                        attachment.UpdateData (jpg.ToArray ());
                    }
                }
                HeaderView.AttachmentsView.Append (attachment);
                ++i;
            }
        }

        #endregion

        #region Message Preparation

        public void MessageComposerDidCompletePreparation (MessageComposer composer)
        {
            Log.Info (Log.LOG_UI, "MessageComposeViewController MessageComposerDidCompletePreparation()");
            UpdateSendEnabled ();
            DisplayMessageBody ();
        }

        public void MessageComposerDidFailToLoadMessage (MessageComposer composer)
        {
            NcAlertView.Show (this, "Could not load message", "Sorry, the message could not be loaded. Please try again.",
                new NcAlertAction ("OK", NcAlertActionStyle.Cancel, () => {
                    DismissViewController (true, null);
                }));
        }

        void DisplayMessageBody ()
        {
            if (Composer.Bundle != null) {
                if (Composer.Bundle.FullHtmlUrl != null) {
                    Log.Info (Log.LOG_UI, "MessageComposeViewController DisplayMessageBody() using uri");
                    var url = new NSUrl (Composer.Bundle.FullHtmlUrl.AbsoluteUri);
                    // Here's how WKWebView would work
                    // if (url.Scheme.ToLowerInvariant().Equals("file")){
                    //    var selector = new ObjCRuntime.Selector ("loadFileURL:allowingReadAccessToURL:");
                    //     if (WebView.RespondsToSelector (selector)) {
                    //         var baseUrl = new NSUrl (Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments));
                    //         WebView.PerformSelector (selector, url, baseUrl);
                    //     } else {
                    //         // need a workaround for iOS 8
                    //         // - can run an http server
                    //         // - can copy files to /tmp
                    //         // - curious about symlink from /tmp -> Documents, but doubtful it will work
                    //     }
                    // } else {
                    //     NSUrlRequest request = new NSUrlRequest (url);
                    //     WebView.LoadRequest (request);
                    // }

                    NSUrlRequest request = new NSUrlRequest (url);
                    WebView.LoadRequest (request);
                } else {
                    Log.Info (Log.LOG_UI, "MessageComposeViewController DisplayMessageBody() using html");
                    var html = Composer.Bundle.FullHtml;
                    var url = new NSUrl (Composer.Bundle.BaseUrl.AbsoluteUri);
                    if (html != null) {
                        WebView.LoadHtmlString (new NSString (html), url);
                    } else {
                        Log.Error (Log.LOG_UI, "MessageComposeViewController DisplayMessageBody() null html");
                        WebView.LoadHtmlString (new NSString ("<html><body><div><br></div></body></html>"), url);
                    }
                }
            } else {
                Log.Error (Log.LOG_UI, "DisplayMessageBody called without a valid bundle");
                NcAlertView.Show (this, "Could not load message", "Sorry, the message could not be loaded. Please try again.",
                    new NcAlertAction ("OK", NcAlertActionStyle.Cancel, () => {
                        DismissViewController (true, null);
                    }));
            }
        }

        #endregion

        #region Web View Delegate

        // These are WKWebView delegate methods
        // [Export ("webView:didFinishNavigation:")]
        // public void DidFinishNavigation (WebKit.WKWebView webView, WebKit.WKNavigation navigation)
        // {
        //     // The navigation is done, meaning the HTML has loaded in the web view, so we now have to
        //     // tell our scroll view how big the webview is.
        //     // Unfortunately, WebView.ScrollView.ContentSize.Height is still 0 at this point.
        //     // It's a timing issue, and so we'll wait until it's not 0
        //     UpdateScrollViewSizeOnceWebViewIsSized ();
        //     EnableEditingInWebView ();
        // }

        // [Export ("updateScrollViewSizeOnceWebViewIsSized")]
        // private void UpdateScrollViewSizeOnceWebViewIsSized ()
        // {
        //     // The basic idea is to keep scheduling ourselves in the run loop until we see a non-zero height.
        //     // Using the run loop is crucuial because it means we won't block anything.
        //     // Experiements show this usually takes anywhere from 1-4 itereations.
        //     if (WebView.ScrollView.ContentSize.Height == 0.0) {
        //         var selector = new ObjCRuntime.Selector ("updateScrollViewSizeOnceWebViewIsSized");
        //         var timer = NSTimer.CreateTimer (0.0, this, selector, null, false);
        //         NSRunLoop.Main.AddTimer (timer, NSRunLoopMode.Default);
        //     } else {
        //         UpdateScrollViewSize ();
        //     }
        // }

        // [Export ("userContentController:didReceiveScriptMessage:")]
        // public void DidReceiveScriptMessage (WKUserContentController userContentController, WKScriptMessage message)
        // {
        //     NSDictionary body = message.Body as NSDictionary;
        //     string kind = body.ObjectForKey (new NSString("kind")).ToString ();
        //     if (message.Name == "nacho") {
        //         if (kind == "error") {
        //             string errorMessage = body.ObjectForKey (new NSString("message")).ToString ();
        //             string filename = body.ObjectForKey (new NSString("filename")).ToString ();
        //             string lineno = body.ObjectForKey (new NSString("lineno")).ToString ();
        //             string colno = body.ObjectForKey (new NSString("colno")).ToString ();
        //             Log.Error(Log.LOG_UI, "MessageComposeView javascript uncaught error: [{1}:{2}:{3}] {0}", errorMessage, filename, lineno, colno);
        //         }
        //     } else if (message.Name == "nachoCompose") {
        //         if (kind == "editor-height-changed") {
        //             UpdateScrollViewSize ();
        //         }
        //     }
        // }

        [Export ("webViewDidFinishLoad:")]
        public void LoadingFinished (UIWebView webView)
        {
            Log.Info (Log.LOG_UI, "MessageComposeViewController LoadingFinished()");
            IsWebViewLoaded = true;
            UpdateScrollViewSize ();
            EnableEditingInWebView ();
            foreach (var script in JavaScriptQueue) {
                EvaluateJavaScript (script);
            }
            JavaScriptQueue.Clear ();
            if (MakeWebViewFirstResponderOnLoad) {
                MakeWebViewFirstResponder ();
            }
        }

        // An approximation of what WKWebView does with WKScriptMessageHandler
        public void HandleWebViewMessage (NcWebViewMessage message)
        {
            NSDictionary body = message.Body as NSDictionary;
            string kind = body.ObjectForKey (new NSString("kind")).ToString ();
            if (message.Name == "nachoCompose") {
                if (kind == "editor-height-changed") {
                    UpdateScrollViewSize ();
                }
            }
        }

        private void EnableEditingInWebView ()
        {
            EvaluateJavaScript ("Editor.Enable()");
        }

        private void MakeWebViewFirstResponder ()
        {
            Log.Info (Log.LOG_UI, "MessageComposeViewController MakeWebViewFirstResponder()");
            EvaluateJavaScript ("Editor.defaultEditor.focus()");
        }

        private void EvaluateJavaScript(string javascript, WKJavascriptEvaluationResult callback = null)
        {
            if (IsWebViewLoaded) {
                // Here's how WKWebView would work
                // WebView.EvaluateJavaScript (new NSString(javascript), (NSObject result, NSError error) => {
                //     if (error !=  null){
                //         Log.Error(Log.LOG_UI, "MessageComposeView error evaluating javascript '{0}': {1}", javascript, error);
                //     }
                //     if (callback != null) {
                //         callback (result, error);
                //     }
                // });
                WebView.EvaluateJavascript (javascript);
            } else {
                JavaScriptQueue.Add (javascript);
            }
        }

        [Foundation.Export("scrollViewWillBeginDragging:")]
        public void DraggingStarted (UIScrollView scrollView)
        {
        }

        [Foundation.Export("scrollViewDidScroll:")]
        public void Scrolled (UIScrollView scrollView)
        {
        }

        #endregion

        #region Helpers

        private void UpdateSendEnabled ()
        {
            SendButton.Enabled = Composer.HasRecipient && Composer.IsMessagePrepared;
        }

        private void ShowAddAttachment (bool inline = false)
        {
            var helper = new AddAttachmentViewController.MenuHelper (this, Composer.Account, AddAttachmentButton);
            PresentViewController (helper.MenuViewController, true, null);
        }

        private void ShowQuickResponses (bool animated = true)
        {
            NcQuickResponse.QRTypeEnum responseType = NcQuickResponse.QRTypeEnum.Compose;

            if (EmailHelper.IsReplyAction (Composer.Kind)) {
                responseType = NcQuickResponse.QRTypeEnum.Reply;
            } else if (EmailHelper.IsForwardAction (Composer.Kind)) {
                responseType = NcQuickResponse.QRTypeEnum.Forward;
            }

            var quickViewController = new QuickResponseViewController ();
            quickViewController.ResponseDelegate = this;
            quickViewController.SetProperties (responseType);
            PresentViewController (quickViewController, animated, null);
        }

        private string GetHtmlContent ()
        {
            // This is a sync call with UIWebView, but will be async with WKWebView,
            // which could cause havoc with the design of upstream callers
            return "<!DOCTYPE html>\n" + WebView.EvaluateJavascript ("document.documentElement.outerHTML");
        }

        #endregion

        #region Header View

        private void UpdateHeaderView ()
        {
            HeaderView.ShouldHideFrom = EmailAccounts.Count <= 1;
            UpdateHeaderSubjectView ();
            UpdateHeaderToView ();
            UpdateHeaderCcView ();
            UpdateHeaderBccView ();
            UpdateHeaderFromView ();
            UpdateHeaderIntentView ();
            UpdateHeaderAttachmentsView ();
        }

        private void UpdateHeaderToView ()
        {
            HeaderView.ToView.Clear ();
            var addresses = EmailHelper.AddressList (NcEmailAddress.Kind.To, null, Composer.Message.To);
            foreach (var address in addresses) {
                HeaderView.ToView.Append (address);
            }
        }

        private void UpdateHeaderCcView ()
        {
            HeaderView.CcView.Clear ();
            var addresses = EmailHelper.AddressList (NcEmailAddress.Kind.Cc, null, Composer.Message.Cc);
            foreach (var address in addresses) {
                HeaderView.CcView.Append (address);
            }
        }

        private void UpdateHeaderBccView ()
        {
            HeaderView.BccView.Clear ();
            var addresses = EmailHelper.AddressList (NcEmailAddress.Kind.Bcc, null, Composer.Message.Bcc);
            foreach (var address in addresses) {
                HeaderView.BccView.Append (address);
            }
        }

        private void UpdateHeaderFromView ()
        {
            HeaderView.FromView.ValueLabel.Text = Composer.Account.EmailAddr;
        }

        private void UpdateHeaderSubjectView ()
        {
            HeaderView.SubjectField.Text = Composer.Message.Subject;
        }

        private void UpdateHeaderIntentView ()
        {
            HeaderView.IntentView.SetIntent (Composer.Message.Intent, Composer.Message.IntentDateType, Composer.Message.IntentDate);
        }

        private void UpdateHeaderAttachmentsView ()
        {
            HeaderView.AttachmentsView.Clear ();
            var attachments = McAttachment.QueryByItem (Composer.Message);
            foreach (var attachment in attachments) {
                HeaderView.AttachmentsView.Append (attachment);
            }
        }

        #endregion

        #region Notifications

        private void RegisterForNotifications ()
        {
            ContentSizeCategoryChangedNotification = NSNotificationCenter.DefaultCenter.AddObserver (UIApplication.ContentSizeCategoryChangedNotification, OnContentSizeCategoryChangedNotification);
        }

        private void UnregisterNotifications ()
        {
            NSNotificationCenter.DefaultCenter.RemoveObserver (ContentSizeCategoryChangedNotification);
        }

        void OnContentSizeCategoryChangedNotification (NSNotification notification)
        {
            // TODO: can we do anything to update the webview font size?
        }

        #endregion

        public override bool ShouldEndEditing {
            get {
                return false;
            }
        }

    }
        

    public static class MessageComposeViewControllerWebViewHijacker {

        [DllImport ("/usr/lib/libobjc.dylib")]
        extern static IntPtr objc_allocateClassPair (IntPtr superclass, string name, IntPtr extraBytes);

        [DllImport ("/usr/lib/libobjc.dylib")]
        extern static void objc_registerClassPair (IntPtr cls);

        [DllImport ("/usr/lib/libobjc.dylib")]
        internal extern static bool class_addMethod (IntPtr cls, IntPtr name, IntPtr imp, IntPtr types);

        [DllImport ("/usr/lib/libobjc.dylib")]
        internal extern static IntPtr class_getInstanceMethod (IntPtr cls, IntPtr sel);

        [DllImport ("/usr/lib/libobjc.dylib")]
        internal extern static IntPtr class_getMethodImplementation (IntPtr cls, IntPtr sel);

        [DllImport ("/usr/lib/libobjc.dylib")]
        internal extern static IntPtr object_setClass (IntPtr obj, IntPtr cls);

        [DllImport ("/usr/lib/libobjc.dylib")]
        internal extern static IntPtr method_getTypeEncoding (IntPtr method);

        [DllImport ("/usr/lib/libobjc.dylib")]
        internal extern static IntPtr method_getImplementation (IntPtr method);

        private static string BrowserViewClassWithoutAccessoryViewName = "UIWebBrowserViewNcHijacked";
        private static ObjCRuntime.Class HijackedBrowserViewClass = null;

        public static void NcHijack (this UIWebView webView)
        {
            // Several UIWebView behaviors (input accessory bar above keyboard, menu controller actions)
            // are actually executed by a private subview of UIWebView, the UIWebBrowserView.  Since it's
            // a private class, we can't subclass it directly and override methods.  Instead, we'll create a
            // new subclass dynamically at runtime and switch the private browser view instance of this web view
            // into an instance of our new subclass
            var browserView = webView.NcBrowserView ();
            if (browserView != null) {
                if (HijackedBrowserViewClass == null) {
                    CreateHijackedBrowserViewClass (browserView.Class);
                }
                if (!browserView.IsKindOfClass (HijackedBrowserViewClass)) {
                    object_setClass (browserView.Handle, HijackedBrowserViewClass.Handle);
                }
            }
        }

        public static UIView NcBrowserView (this UIWebView webView)
        {
            // This depends entirely on private Apple conventions of naming and view tree construction.
            // So if Apple changes things, this will break.  But it works for now...
            // We're looking for something called UIWebBrowserView, but we'll do a StartsWith search because
            // we still want to find the browser view even after we've switched to our subclass, which is named
            // UIWebBrowserViewNcHijacked.
            foreach (var subview in webView.ScrollView.Subviews) {
                if (subview.Class.Name.StartsWith ("UIWebBrowserView")) {
                    return subview;
                }
            }
            return null;
        }

        public static void CreateHijackedBrowserViewClass (ObjCRuntime.Class browserViewClass)
        {
            // We have to create a new subclass at runtime because UIWebBrowserView is private.  Runtime requires us to use
            // the low level objc_* methods, which we've loaded into c# land using the import statements above.
            // The basic steps are:
            // 1. Allocate a new subclass of browserViewClass
            // 2. Add new methods to the subclass that override UIWebBrowserView methods
            // 3. Register the new class
            IntPtr hijackedClassHandle = objc_allocateClassPair (browserViewClass.Handle, BrowserViewClassWithoutAccessoryViewName, IntPtr.Zero);

            HijackBrowserViewAccessoryInputView (browserViewClass, hijackedClassHandle);
            HijackBrowserViewCanPerformAction (browserViewClass, hijackedClassHandle);
            HijackBrowserViewPaste (browserViewClass, hijackedClassHandle);
            AddBrowserViewAttach (browserViewClass, hijackedClassHandle);

            objc_registerClassPair(hijackedClassHandle);
            HijackedBrowserViewClass = new ObjCRuntime.Class (hijackedClassHandle);
        }

        #region InputAccessoryView

        public static void HijackBrowserViewAccessoryInputView (ObjCRuntime.Class browserViewClass, IntPtr hijackedClassHandle)
        {
            // We want to hijack the inputAccessoryView method because the default implementation adds a bar above the keyboar
            // with <, >, and Done buttons.  The bar is pointless in our use case and it just takes up space.  So our replacement
            // method will return null, removing the bar.  We could design our own bar and return that if we wanted.
            var selector = new ObjCRuntime.Selector ("inputAccessoryView");
            var baseMethod = class_getInstanceMethod (browserViewClass.Handle, selector.Handle);
            var types = method_getTypeEncoding (baseMethod);
            InputAccessoryViewDelegate d = BrowserView_InputAccessoryView;
            var imp = Marshal.GetFunctionPointerForDelegate(d);
            class_addMethod (hijackedClassHandle, selector.Handle, imp, types);
        }

        // Our C# Delegate signatures are derived from the low-level Objective-C IMP signatures.
        // IMPs are function pointers that are derived from the high-level Objetive-C method definitions.
        //
        // IMPs take at least two arguments: self (an id) and selector (a SEL).
        // Any further arguments are the actual method arguments.
        //
        // To get from C to C#, pointer types turn into IntPtr and primitives remian the same.  Objective-C
        // has a lot of typedefs that obscure the reality that most of them are just pointers
        // (e.g. id is "typedef struct objc_object *id", or SEL is "typedef struct objc_selector *SEL")
        //
        // Starting from an Objective-C signature, we can get the appropriate C# signature:
        //    Objective-C signature: - (UIView *)inputAccessoryView
        // -> IMP signature: id(*)(id self, SEL selector)
        // -> C# signature IntPtr (IntPtr self, IntPtr selector)
        //
        // Underneath the hood, Objective-C methods are function pointers that always have self and the selector as the
        // first two arguments.  Any further arguments are the actual method arguments.
        // To convert from and IMP signature to a C# signature, pointers become IntPtr and primitives 
        [ObjCRuntime.MonoNativeFunctionWrapper]
        delegate IntPtr InputAccessoryViewDelegate (IntPtr self, IntPtr selector);

        [ObjCRuntime.MonoPInvokeCallback (typeof (InputAccessoryViewDelegate))]
        static IntPtr BrowserView_InputAccessoryView (IntPtr self, IntPtr selector)
        {
            return new IntPtr(0);
        }

        #endregion

        #region CanPerformAction

        public static void HijackBrowserViewCanPerformAction (ObjCRuntime.Class browserViewClass, IntPtr hijackedClassHandle)
        {
            // We want to hijack the canPerformAction:withSender: method so we can add our own menu controller options (like Attach),
            // or remove predefined ones in cases where they can't work (like Paste, sometimes).  Since we'll generally fallback to the
            // original implementation, we'll keep a reference to call in situations where base() would be used for a typical subclass.
            var selector = new ObjCRuntime.Selector ("canPerformAction:withSender:");
            var baseMethod = class_getInstanceMethod (browserViewClass.Handle, selector.Handle);
            var types = method_getTypeEncoding (baseMethod);
            BrowserView_OriginalCanPerformAction = method_getImplementation (baseMethod);
            CanPerformActionDelegate d = BrowserView_CanPerformAction;
            var imp = Marshal.GetFunctionPointerForDelegate(d);
            class_addMethod (hijackedClassHandle, selector.Handle, imp, types);
        }

        static IntPtr BrowserView_OriginalCanPerformAction;

        [ObjCRuntime.MonoNativeFunctionWrapper]
        delegate bool CanPerformActionDelegate (IntPtr self, IntPtr selector, IntPtr action, IntPtr sender);

        [ObjCRuntime.MonoPInvokeCallback (typeof (CanPerformActionDelegate))]
        static bool BrowserView_CanPerformAction (IntPtr selfHandle, IntPtr selectorHandle, IntPtr actionHandle, IntPtr senderHandle)
        {
            var action = new ObjCRuntime.Selector (actionHandle);
            if (action.Name.Equals ("attach:")) {
                // TODO: support inline attachments
                // not supporting yet because there's a bit a work (determining if type can be inlined, adding to bundle, inserting HTML into web view, resizing inline images on send)
                // return true;
                return false;
            }
            var d = (CanPerformActionDelegate)Marshal.GetDelegateForFunctionPointer (BrowserView_OriginalCanPerformAction, typeof(CanPerformActionDelegate));
            bool canPerform = d (selfHandle, selectorHandle, actionHandle, senderHandle);
            return canPerform;
        }

        #endregion

        #region Paste

        public static void HijackBrowserViewPaste (ObjCRuntime.Class browserViewClass, IntPtr hijackedClassHandle)
        {
            // We want to hijack the paste: method so we can handle pasting of images.  The default implementation adds an image
            // to the web view with a private webkit-fake-url:// scheme, and we can't get the data.  But if we intercept the paste
            // before it even gets there, we can capture the image and insert our own HTML.
            var selector = new ObjCRuntime.Selector ("paste:");
            var baseMethod = class_getInstanceMethod (browserViewClass.Handle, selector.Handle);
            var types = method_getTypeEncoding (baseMethod);
            BrowserView_OriginalPaste = method_getImplementation (baseMethod);
            PasteDelegate d = BrowserView_Paste;
            var imp = Marshal.GetFunctionPointerForDelegate(d);
            class_addMethod (hijackedClassHandle, selector.Handle, imp, types);
        }

        static IntPtr BrowserView_OriginalPaste;

        [ObjCRuntime.MonoNativeFunctionWrapper]
        delegate void PasteDelegate (IntPtr self, IntPtr selector, IntPtr sender);

        [ObjCRuntime.MonoPInvokeCallback (typeof (PasteDelegate))]
        static void BrowserView_Paste (IntPtr selfHandle, IntPtr selector, IntPtr sender)
        {
            // Since this hijack class overrides behavior specifically for the message compose view controller,
            // there's no need to setup some kind of abstract delegate to communciate back to the compose view,
            // we'll just go straight there via out parent web view's delegate.
            var self = ObjCRuntime.Runtime.GetNSObject (selfHandle) as UIView;
            var webView = self.Superview.Superview as UIWebView;
            var composeViewController = webView.Delegate as MessageComposeViewController;
            var pasteboard = UIPasteboard.General;

            if (pasteboard.Images.Length > 0) {
                var pngIndexes = pasteboard.ItemSetWithPasteboardTypes (new string[] { MobileCoreServices.UTType.PNG });
                // FIXME: should be using UIPasteboard.TypeListImage, but I think there's a xamarin bug with that property
                // becaue anytime I try to access it, I get a crash.  For now we'll just recreate the list.
                var allImageIndexes = pasteboard.ItemSetWithPasteboardTypes (new string[] {
                    MobileCoreServices.UTType.PNG,
                    MobileCoreServices.UTType.JPEG,
                    MobileCoreServices.UTType.GIF,
                    MobileCoreServices.UTType.TIFF
                });
                var isPNG = new bool[pasteboard.Images.Length];
                int i = 0;
                allImageIndexes.EnumerateIndexes ((nuint idx, ref bool stop) => {
                    isPNG[i] = pngIndexes.Contains (idx);
                    ++i;
                });
                composeViewController.WebViewDidPasteImages (pasteboard.Images, isPNG);
            } else {

                // If the content being pasted is HTML with embedded images, the images need to be registered with the
                // NcEmailMessageBundle for the outgoing message so that the images will be included in the sent message.
                // The format of HTML in the pasteboard is complicated and not obvious, and manipulating it requires
                // using the Objective-C collection classes directly.
                // (This code is beyond ugly.  I am ashamed to have written it.)

                // Does the pasteboard contain HTML?
                NSData webData = pasteboard.DataForPasteboardType ("Apple Web Archive pasteboard type");
                if (null != webData) {

                    // Convert the raw data into a dictionary.
                    NSPropertyListFormat format = NSPropertyListFormat.Xml;
                    NSError error;
                    NSObject webObject = NSPropertyListSerialization.PropertyListWithData (webData, (NSPropertyListReadOptions)0, ref format, out error);
                    if (webObject is NSDictionary) {
                        NSDictionary webObjectDictionary = (NSDictionary)webObject;

                        // Get the inner dictionary that contains the HTML.
                        NSObject mainResource = webObjectDictionary.ObjectForKey (new NSString ("WebMainResource"));
                        if (mainResource is NSDictionary) {
                            NSDictionary mainResourceDictionary = (NSDictionary)mainResource;

                            // Get the UTF-8 encoded HTML and convert it to a string.
                            NSObject resourceData = mainResourceDictionary.ObjectForKey (new NSString ("WebResourceData"));
                            if (resourceData is NSData) {
                                string html = NSString.FromData ((NSData)resourceData, NSStringEncoding.UTF8).ToString ();

                                // The HTML is interesting only if it contains images or nacho-related attributes.
                                if (html.Contains ("nacho") || html.Contains ("img") || html.Contains ("IMG")) {
                                    bool changed = false;

                                    // Parse the HTML string and iterate through all the nodes.
                                    var htmlDoc = new HtmlAgilityPack.HtmlDocument ();
                                    htmlDoc.LoadHtml (html);
                                    var nodeQueue = new Queue<HtmlAgilityPack.HtmlNode> ();
                                    nodeQueue.Enqueue (htmlDoc.DocumentNode);
                                    while (0 < nodeQueue.Count) {
                                        var node = nodeQueue.Dequeue ();

                                        // Is it an image node?
                                        if (HtmlAgilityPack.HtmlNodeType.Element == node.NodeType && "img" == node.Name && node.Attributes.Contains ("src")) {

                                            try {
                                                string src = node.GetAttributeValue ("src", "");
                                                string srcUrl = null;
                                                if (Uri.IsWellFormedUriString (src, UriKind.Absolute) && Uri.UriSchemeFile == new Uri(src).Scheme) {
                                                    srcUrl = src;
                                                } else if (Uri.IsWellFormedUriString (src, UriKind.Relative)) {
                                                    // The "src" attribute is a relative URL.  Calculate the absolute URL.
                                                    NSObject baseUrlObject = mainResourceDictionary.ValueForKey (new NSString ("WebResourceURL"));
                                                    if (baseUrlObject is NSString) {
                                                        string baseUrl = ((NSString)baseUrlObject).ToString ();
                                                        if (Uri.IsWellFormedUriString (baseUrl, UriKind.Absolute)) {
                                                            srcUrl = new Uri (new Uri (baseUrl), src).ToString ();
                                                        }
                                                    }
                                                }
                                                if (null != srcUrl) {

                                                    // Iterate through the sub-resources in the web archive, looking for one that matches the image's URL.
                                                    NSObject subResourceArrayObject = webObjectDictionary.ObjectForKey (new NSString ("WebSubresources"));
                                                    if (subResourceArrayObject is NSArray) {
                                                        NSArray subResourceArray = (NSArray)subResourceArrayObject;
                                                        for (nuint i = 0; i < subResourceArray.Count; ++i) {
                                                            NSDictionary subResource = subResourceArray.GetItem<NSDictionary> (i);
                                                            NSObject subResourceUrlObject = subResource.ValueForKey (new NSString ("WebResourceURL"));
                                                            if (subResourceUrlObject is NSString) {
                                                                string subResourceUrl = ((NSString)subResourceUrlObject).ToString ();
                                                                if (subResourceUrl == srcUrl) {

                                                                    // Found a match.  Get the information about the image, including the image data.
                                                                    string contentType = "image/jpg";
                                                                    NSObject subResourceTypeObject = subResource.ValueForKey (new NSString ("WebResourceMIMEType"));
                                                                    if (subResourceTypeObject is NSString) {
                                                                        contentType = ((NSString)subResourceTypeObject).ToString ();
                                                                    }
                                                                    string fileName = Path.GetFileName (new Uri (srcUrl).AbsolutePath);
                                                                    NSObject subResourceContentsObject = subResource.ObjectForKey (new NSString ("WebResourceData"));
                                                                    if (subResourceContentsObject is NSData) {
                                                                        NSData subResourceContents = (NSData)subResourceContentsObject;
                                                                        using (var byteReader = new MemoryStream (subResourceContents.ToArray ())) {

                                                                            // And finally have the bundle do its magic.
                                                                            composeViewController.Composer.Bundle.ImportImageNode (node, fileName, contentType, byteReader);
                                                                        }
                                                                        changed = true;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } catch (ArgumentOutOfRangeException ex) {
                                                // Thrown from Uri(Uri,string) if the base URI is not absolute.
                                                Log.Error (Log.LOG_UI, "Unexpected {0} while processing pasted HTML: {1}", ex.GetType ().Name, ex.Message);
                                            } catch (UriFormatException ex) {
                                                Log.Error (Log.LOG_UI, "Unexpected {0} while processing pasted HTML: {1}", ex.GetType ().Name, ex.Message);
                                            } catch (IOException ex) {
                                                Log.Error (Log.LOG_UI, "Unexpected {0} while processing pasted HTML: {1}", ex.GetType ().Name, ex.Message);
                                            }

                                        } else if (node.Attributes.Contains ("nacho-bundle-entry")) {
                                            // A stray nacho-bundle-entry attribute can cause a crash when the message is sent.
                                            node.Attributes.Remove ("nacho-bundle-entry");
                                            changed = true;
                                        }
                                        foreach (var child in node.ChildNodes) {
                                            nodeQueue.Enqueue (child);
                                        }
                                    }
                                    if (changed) {
                                        // Something changed, so the pasteboard needs to be updated before the UIWebView is notified.
                                        // The data structures are read-only, so make copies and replace the item that is in the pasteboard.
                                        var writer = new StringWriter ();
                                        htmlDoc.Save (writer);
                                        string newHtml = writer.ToString ();
                                        NSData newResourceData = NSData.FromString (newHtml, NSStringEncoding.UTF8);
                                        NSMutableDictionary mutableMainResourceDictionary = (NSMutableDictionary)mainResourceDictionary.MutableCopy ();
                                        mutableMainResourceDictionary.SetValueForKey (newResourceData, new NSString ("WebResourceData"));
                                        NSMutableDictionary mutableWebObjectDictionary = (NSMutableDictionary)webObjectDictionary.MutableCopy ();
                                        mutableWebObjectDictionary.SetValueForKey (mutableMainResourceDictionary, new NSString ("WebMainResource"));
                                        NSData encoded = NSPropertyListSerialization.DataWithPropertyList (
                                            mutableWebObjectDictionary, NSPropertyListFormat.Binary, (NSPropertyListWriteOptions)0, out error);
                                        pasteboard.SetData (encoded, "Apple Web Archive pasteboard type");
                                    }
                                }
                            }
                        }
                    }
                }

                var d = (PasteDelegate)Marshal.GetDelegateForFunctionPointer (BrowserView_OriginalPaste, typeof(PasteDelegate));
                d (selfHandle, selector, sender);
            }
        }

        #endregion

        #region Attach

        public static void AddBrowserViewAttach (ObjCRuntime.Class browserViewClass, IntPtr hijackedClassHandle)
        {
            var selector = new ObjCRuntime.Selector ("attach:");
            var similarSelector = new ObjCRuntime.Selector ("paste:");
            var similarMethod = class_getInstanceMethod (browserViewClass.Handle, similarSelector.Handle);
            var types = method_getTypeEncoding (similarMethod);
            AttachDelegate d = BrowserView_Attach;
            var imp = Marshal.GetFunctionPointerForDelegate (d);
            class_addMethod (hijackedClassHandle, selector.Handle, imp, types);
        }

        [ObjCRuntime.MonoNativeFunctionWrapper]
        delegate void AttachDelegate (IntPtr self, IntPtr selector, IntPtr sender);

        [ObjCRuntime.MonoPInvokeCallback (typeof (AttachDelegate))]
        static void BrowserView_Attach (IntPtr selfHandle, IntPtr selector, IntPtr sender)
        {
            var self = ObjCRuntime.Runtime.GetNSObject (selfHandle) as UIView;
            var webView = self.Superview.Superview as UIWebView;
            var composeViewController = webView.Delegate as MessageComposeViewController;
            UIMenuController.SharedMenuController.MenuVisible = false;
            composeViewController.WebViewDidSelectAddInlineAttachment (webView);
        }

        #endregion

    }

}
