// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Text;
using CoreGraphics;
using Foundation;
using UIKit;

using MimeKit;

using NachoCore;
using NachoCore.Brain;
using NachoCore.Model;
using NachoCore.Utils;

using WebKit;

namespace NachoClient.iOS
{

    public interface MessageComposeViewDelegate {

        void MessageComposeViewDidBeginSend (MessageComposeViewController vc);
        void MessageComposeViewDidSaveDraft (MessageComposeViewController vc);
        void MessageComposeViewDidCancel (MessageComposeViewController vc);

    }

    public partial class MessageComposeViewController : NcUIViewController, IWKNavigationDelegate, MessageComposeHeaderViewDelegate, QuickResponseViewControllerDelegate
    {

        #region Properties

        public MessageComposeViewDelegate ComposeDelegate;
        public bool StartWithQuickResponse;
        public EmailHelper.Action MessageKind = EmailHelper.Action.Send;
        public McEmailMessageThread RelatedThread;
        public McCalendar RelatedCalendarItem;
        public McEmailMessage Message;
        public MimeMessage MimeMessage;
        public string InitialText;
        public List<McAttachment> InitialAttachments;
        CompoundScrollView ScrollView;
        MessageComposeHeaderView HeaderView;
        WKWebView WebView;
        McAccount Account;
        NcUIBarButtonItem CloseButton;
        NcUIBarButtonItem SendButton;
        NcUIBarButtonItem QuickResponseButton;
        UIAlertController CloseAlertController;
        bool HasShownOnce;

        enum MessagePreparationStatus {
            NotStarted,
            Preparing,
            Done
        };

        MessagePreparationStatus MessagePreparationState = MessagePreparationStatus.NotStarted;

        NSObject BackgroundNotification;
        NSObject ContentSizeCategoryChangedNotification;

        protected static readonly long EMAIL_SIZE_ALERT_LIMIT = 2000000;

        #endregion

        #region Constructors

        public MessageComposeViewController () : base ()
        {
            Account = NcApplication.Instance.Account;
        }

        #endregion

        #region Presenters

        public void Present (Action completionHandler = null)
        {
            var window = UIApplication.SharedApplication.Delegate.GetWindow ();
            var navigationController = new UINavigationController (this);
            NachoClient.Util.ConfigureNavBar (false, navigationController);
            window.RootViewController.PresentViewController (navigationController, true, completionHandler);
        }

        #endregion

        #region View Lifecycle

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            View.BackgroundColor = UIColor.White;

            // Nav bar
            CloseButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (CloseButton, "icn-close");
            CloseButton.AccessibilityLabel = "Close";
            CloseButton.Clicked += Close;

            SendButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (SendButton, "icn-send");
            SendButton.AccessibilityLabel = "Send";
            SendButton.Clicked += Send;

            QuickResponseButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (QuickResponseButton, "contact-quickemail");
            QuickResponseButton.AccessibilityLabel = "Quick response";
            QuickResponseButton.Clicked += QuickReply;

            NavigationItem.LeftBarButtonItem = CloseButton;
            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                SendButton,
                QuickResponseButton,
            };

            // Content Area
            ScrollView = new CompoundScrollView (View.Bounds);
            ScrollView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;
            ScrollView.AlwaysBounceVertical = true;

            HeaderView = new MessageComposeHeaderView (ScrollView.Bounds);
            HeaderView.Frame = new CGRect (0.0, 0.0, ScrollView.Bounds.Width, HeaderView.PreferredHeight);
            HeaderView.HeaderDelegate = this;

            var config = new WKWebViewConfiguration ();
            config.SuppressesIncrementalRendering = true;
            WebView = new WKWebView (ScrollView.Bounds, config);
            WebView.NavigationDelegate = this;

            ScrollView.AddCompoundView (HeaderView);
            ScrollView.AddCompoundView (WebView);
            View.AddSubview (ScrollView);
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            StartPreparingMessage ();

            RegisterForNotifications ();

            if (null != RelatedThread) {
                var now = DateTime.UtcNow;
                var message = RelatedThread.FirstMessageSpecialCase ();
                NcBrain.MessageReplyStatusUpdated (message, now, 0.1);
            }

            if (!HasShownOnce) {
                if (StartWithQuickResponse) {
                    ShowQuickResponses ();
                }
                HasShownOnce = true;
            }

        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            UnregisterNotifications ();
        }

        public override void ViewDidDisappear (bool animated)
        {
            base.ViewDidDisappear (animated);
        }

        #endregion

        #region Layout

        private void UpdateScrollViewSize ()
        {
            CGSize contentSize = new CGSize (ScrollView.Bounds.Width, 0);
            contentSize.Height += HeaderView.Frame.Height;
            contentSize.Height += WebView.ScrollView.ContentSize.Height;
            if (WebView.ScrollView.ContentSize.Width > contentSize.Width) {
                contentSize.Width = WebView.ScrollView.ContentSize.Width;
            }
            ScrollView.ContentSize = contentSize;
        }

        private void LayoutScrollView ()
        {
            UpdateScrollViewSize ();
            ScrollView.SetNeedsLayout ();
            ScrollView.LayoutIfNeeded ();
        }

        public void MessageComposeHeaderViewDidChangeHeight (MessageComposeHeaderView view)
        {
            LayoutScrollView ();
        }

        #endregion

        #region User Actions

        public void Send (object sender, EventArgs e)
        {
            View.EndEditing (true);
            // TODO: send (can happen in background)
            if (ComposeDelegate != null) {
                ComposeDelegate.MessageComposeViewDidBeginSend (this);
            }
            DismissViewController (true, null);
        }

        public void QuickReply (object sender, EventArgs e)
        {
            View.EndEditing (true);
            ShowQuickResponses ();
        }

        public void Close (object sender, EventArgs e)
        {
            View.EndEditing (true);
            CloseAlertController = UIAlertController.Create (null, null, UIAlertControllerStyle.ActionSheet);
            CloseAlertController.AddAction (UIAlertAction.Create ("Discard Draft", UIAlertActionStyle.Destructive, Discard));
            CloseAlertController.AddAction (UIAlertAction.Create ("Save Draft", UIAlertActionStyle.Default, Save));
            CloseAlertController.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (UIAlertAction obj) => { CloseAlertController = null; }));
            PresentViewController (CloseAlertController, true, null);
        }

        public void Discard (UIAlertAction obj)
        {
            CloseAlertController = null;
            // TODO: delete message (can happen in background)
            if (ComposeDelegate != null) {
                ComposeDelegate.MessageComposeViewDidCancel (this);
            }
            DismissViewController (true, null);
        }

        public void Save (UIAlertAction obj)
        {
            CloseAlertController = null;
            // TODO: save message (can happen in background)
            if (ComposeDelegate != null) {
                ComposeDelegate.MessageComposeViewDidCancel (this);
            }
            DismissViewController (true, null);
        }

        public void QuickResponseViewDidSelectResponse (QuickResponseViewController vc, NcQuickResponse.QRTypeEnum whatType, NcQuickResponse.QuickResponse response, McEmailMessage.IntentType intentType)
        {
            if (whatType == NcQuickResponse.QRTypeEnum.Compose) {
                Message.Subject = response.subject;
                // TODO: update header view
            }
            if (MessagePreparationState == MessagePreparationStatus.Done) {
            } else {
                InitialText = response.body;
            }
//            if (NcQuickResponse.QRTypeEnum.Compose == whichType) {
//                alwaysShowIntent = true;
//                subjectField.Text = selectedResponse.subject;
//            }
//
//            var attributes = new CoreText.CTStringAttributes ();
//            attributes.Font = new CoreText.CTFont (composeFont.Name, composeFont.PointSize);
//
//            var response = new NSMutableAttributedString (selectedResponse.body, attributes);
//            response.Append (bodyTextView.AttributedText);
//            bodyTextView.AttributedText = response;
//
//            bodyTextView.BecomeFirstResponder ();
//            if (bodyTextView.Text.Contains ("\n")) {
//                bodyTextView.SelectedRange = new NSRange (bodyTextView.Text.IndexOf ("\n"), 0);
//            }


//            this.messageIntent = intent;
//            this.messageIntentDateType = intentDateType;
//            this.messageIntentDateTime = intentDateTime;
//            intentDisplayLabel.Text = NcMessageIntent.GetIntentString (intent, intentDateType, intentDateTime);
        }

        #endregion

        #region Message Preparation

        private void StartPreparingMessage ()
        {
            if (MessagePreparationState != MessagePreparationStatus.NotStarted) {
                return;
            }
            MessagePreparationState = MessagePreparationStatus.Preparing;
            if (Message == null) {
                Message = McEmailMessage.MessageWithSubject (Account, "");
            }
            if (Message.Id == 0) {
                if (InitialText == null) {
                    InitialText = "";
                }
                if (!String.IsNullOrEmpty (Account.Signature)) {
                    InitialText += "\n\n" + Account.Signature;
                }
                if (RelatedThread != null) {
                    var message = RelatedThread.FirstMessageSpecialCase ();
                }
                if (!String.IsNullOrWhiteSpace (InitialText)) {
                }
                if (InitialAttachments != null) {
                    CopyInitialAttachments ();
                }
            } else {
                MessagePreparationState = MessagePreparationStatus.Done;
            }

            // Fake web view load for testing layout
            NSUrl url = new NSUrl("http://www.nytimes.com");
            NSUrlRequest request = new NSUrlRequest (url);
            WebView.LoadRequest (request);
        }

        private void CopyInitialAttachments ()
        {
            //                AttachmentHelper.CopyAttachment (attachment)
        }

        #endregion

        #region Web View Delegate

        [Export ("webView:didFinishNavigation:")]
        public void DidFinishNavigation (WebKit.WKWebView webView, WebKit.WKNavigation navigation)
        {
            // The navigation is done, meaning the HTML has loaded in the web view, so we now have to
            // tell our scroll view how big the webview is.
            // Unfortunately, WebView.ScrollView.ContentSize.Height is still 0 at this point.
            // It's a timing issue, and so we'll wait until it's not 0
            UpdateScrollViewSizeOnceWebViewIsSized ();
        }

        [Export ("updateScrollViewSizeOnceWebViewIsSized")]
        private void UpdateScrollViewSizeOnceWebViewIsSized ()
        {
            // The basic idea is to keep scheduling ourselves in the run loop until we see a non-zero height.
            // Using the run loop is crucuial because it means we won't block anything.
            // Experiements show this usually takes anywhere from 1-4 itereations.
            if (WebView.ScrollView.ContentSize.Height == 0.0) {
                var selector = new ObjCRuntime.Selector ("updateScrollViewSizeOnceWebViewIsSized");
                var timer = NSTimer.CreateTimer (0.0, this, selector, null, false);
                NSRunLoop.Main.AddTimer (timer, NSRunLoopMode.Default);
            } else {
                UpdateScrollViewSize ();
            }
        }

        #endregion

        #region Helpers

        private void ShowQuickResponses ()
        {
            NcQuickResponse.QRTypeEnum responseType = NcQuickResponse.QRTypeEnum.Compose;

            if (EmailHelper.IsReplyAction (MessageKind)) {
                responseType = NcQuickResponse.QRTypeEnum.Reply;
            } else if (EmailHelper.IsForwardAction (MessageKind)) {
                responseType = NcQuickResponse.QRTypeEnum.Forward;
            }

            // TODO: show view controller
        }

        #endregion

        #region Notifications

        private void RegisterForNotifications ()
        {
            BackgroundNotification = NSNotificationCenter.DefaultCenter.AddObserver (UIApplication.DidEnterBackgroundNotification, OnBackgroundNotification);
            ContentSizeCategoryChangedNotification = NSNotificationCenter.DefaultCenter.AddObserver (UIApplication.ContentSizeCategoryChangedNotification, OnContentSizeCategoryChangedNotification);
        }

        private void UnregisterNotifications ()
        {
            NSNotificationCenter.DefaultCenter.RemoveObserver (BackgroundNotification);
            NSNotificationCenter.DefaultCenter.RemoveObserver (ContentSizeCategoryChangedNotification);
        }

        private void OnBackgroundNotification (NSNotification notification)
        {
            if (null != CloseAlertController) {
                CloseAlertController.DismissViewController (false, null);
            }
        }

        void OnContentSizeCategoryChangedNotification (NSNotification notification)
        {
            // TODO: can we do anything to update the webview font size?
        }

        #endregion
    }
        
}
