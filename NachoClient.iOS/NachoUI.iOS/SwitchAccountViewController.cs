// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;

using Foundation;
using UIKit;

using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using NachoClient;

namespace NachoClient.iOS
{
    public partial class SwitchAccountViewController : UIViewController, IUIViewControllerTransitioningDelegate, INachoAccountsTableDelegate
    {
        public SwitchAccountViewController (IntPtr handle) : base (handle)
        {
        }

        UITableView accountsTableView;
        SwitchAccountButton switchAccountButton;
        AccountsTableViewSource accountsTableViewSource;

        public delegate void SwitchAccountCallback (McAccount account);

        SwitchAccountCallback switchAccountCallback;

        public static void ShowDropdown (UIViewController fromViewController, SwitchAccountCallback switchAccountCallback)
        {
            var storyboard = UIStoryboard.FromName ("MainStoryboard_iPhone", null);
            var toViewController = (SwitchAccountViewController)storyboard.InstantiateViewController ("SwitchAccountViewController");
            var segue = new SwitchAccountCustomSegue ("", fromViewController, toViewController);
            toViewController.switchAccountCallback = switchAccountCallback;
            segue.Perform ();
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            switchAccountButton = new SwitchAccountButton (SwitchAccountButtonPressed);
            switchAccountButton.SetImage ("gen-avatar-backarrow");

            accountsTableView = new UITableView (View.Frame);
            accountsTableView.SeparatorColor = A.Color_NachoBackgroundGray;
            accountsTableView.BackgroundColor = A.Color_NachoBackgroundGray;

            accountsTableViewSource = new AccountsTableViewSource ();
            accountsTableViewSource.Setup (this, showAccessory: false);
            accountsTableView.Source = accountsTableViewSource;

            View.AddSubview (accountsTableView);

            View.BringSubviewToFront (accountsTableView);

            NavigationItem.HidesBackButton = true;
            NavigationItem.TitleView = switchAccountButton;
        }

        bool firstTime = true;

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            if (firstTime) {
                firstTime = false;
                var h = accountsTableView.Frame.Height;
                ViewFramer.Create (accountsTableView).Height (0);

                UIView.Animate (0.4, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        ViewFramer.Create (accountsTableView).Height (h);
                    },
                    () => {
                    }
                );
            }
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return true;
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("SegueToAccountSettings")) {
                var h = (SegueHolder)sender;
                var account = (McAccount)h.value;
                var vc = (AccountSettingsViewController)segue.DestinationViewController;
                vc.SetAccount (account);
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        // TitleView button
        void SwitchAccountButtonPressed ()
        {
            // No double presses
            switchAccountButton.UserInteractionEnabled = false;

            Deactivate (null, (McAccount account) => {
                NavigationController.PopViewController (false);
            });
        }

        // INachoAccountsTableDelegate
        public void AccountSelected (McAccount account)
        {
            var spinner = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.Gray);
            View.AddSubview (spinner);
            spinner.StartAnimating ();
            spinner.HidesWhenStopped = true;
            NcApplication.Instance.Account = account;
            switchAccountCallback (account);
            Deactivate (null, (McAccount acct) => {
                UIView.Animate (0.75, () => {
                    UIView.SetAnimationCurve (UIViewAnimationCurve.EaseInOut);
                    UIView.SetAnimationTransition (UIViewAnimationTransition.FlipFromRight, NavigationController.View, false);
                });
                NavigationController.PopViewController (false);
            });
        }

        // INachoAccountsTableDelegate
        public void SettingsSelected (McAccount account)
        {
            PerformSegue ("SegueToAccountSettings", new SegueHolder (account));
        }

        // INachoAccountsTableDelegate
        public void AddAccountSelected ()
        {
            NachoCore.Utils.NcAssert.CaseError ();
        }

        public void Deactivate (McAccount account, SwitchAccountCallback callback)
        {
            UIView.Animate (0.3, 0, UIViewAnimationOptions.CurveLinear,
                () => {
                    ViewFramer.Create (accountsTableView).Height (0);
                },
                () => {
                    switchAccountButton.Alpha = 0;
                    if (null != callback) {
                        callback (account);
                    }
                });
        }


       
    }

}
