// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{

    public class NotificationChooserViewController : NachoTableViewController, ThemeAdopter
    {

        public McAccount Account;

        const string OptionCellIdentifier = "OptionCellIdentifier";

        class NotificationOption
        {
            public string Name;
            public McAccount.NotificationConfigurationEnum Option;

            public NotificationOption (McAccount.NotificationConfigurationEnum option)
            {
                Name = Pretty.NotificationConfiguration (option);
                Option = option;
            }
        }

        NotificationOption [] Options;

        public NotificationChooserViewController () : base (UITableViewStyle.Grouped)
        {
            NavigationItem.Title = NSBundle.MainBundle.LocalizedString ("Notifications (setting title)", "Title for notification setting picker");

            Options = new NotificationOption [] {
                new NotificationOption (McAccount.NotificationConfigurationEnum.ALLOW_HOT_2),
                new NotificationOption (McAccount.NotificationConfigurationEnum.ALLOW_VIP_4),
                new NotificationOption (McAccount.NotificationConfigurationEnum.ALLOW_INBOX_64),
            };
        }

        public override void LoadView ()
        {
            base.LoadView ();
            TableView.RegisterClassForCellReuse (typeof (OptionCell), OptionCellIdentifier);
        }

        Theme adoptedTheme;

        public void AdoptTheme (Theme theme)
        {
            if (theme != adoptedTheme) {
                adoptedTheme = theme;
                TableView.BackgroundColor = theme.TableViewGroupedBackgroundColor;
                TableView.AdoptTheme (theme);
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            AdoptTheme (Theme.Active);
        }

        public override nint NumberOfSections (UITableView tableView)
        {
            return 1;
        }

        public override nint RowsInSection (UITableView tableView, nint section)
        {
            return 1 + Options.Length;
        }

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            var cell = tableView.DequeueReusableCell (OptionCellIdentifier) as OptionCell;
            if (indexPath.Row == 0) {
                cell.TextLabel.Text = NSBundle.MainBundle.LocalizedString ("None (notification config)", "");
                if (Account.NotificationConfiguration == 0) {
                    cell.AccessoryView = new CheckmarkAccessoryView ();
                } else {
                    cell.AccessoryView = null;
                }
            } else {
                var option = Options [indexPath.Row - 1];
                cell.TextLabel.Text = option.Name;
                if (Account.NotificationConfiguration.HasFlag (option.Option)) {
                    cell.AccessoryView = new CheckmarkAccessoryView ();
                } else {
                    cell.AccessoryView = null;
                }
            }
            return cell;
        }

        public override void WillDisplay (UITableView tableView, UITableViewCell cell, NSIndexPath indexPath)
        {
            base.WillDisplay (tableView, cell, indexPath);
            var themed = cell as ThemeAdopter;
            if (themed != null && adoptedTheme != null) {
                themed.AdoptTheme (adoptedTheme);
            }
        }

        public override bool ShouldHighlightRow (UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Row == 0) {
                return Account.NotificationConfiguration != 0;
            }
            return true;
        }

        public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Row == 0) {
                Account.NotificationConfiguration = 0;
            } else {
                var option = Options [indexPath.Row - 1];
                Account.NotificationConfiguration = Account.NotificationConfiguration ^ option.Option;
            }
            UpdateCheckmarks ();
            var config = Account.NotificationConfiguration;
            Account.UpdateWithOCApply<McAccount> ((record) => {
                var account = record as McAccount;
                account.NotificationConfiguration = config;
                return true;
            });
            tableView.DeselectRow (indexPath, animated: true);
        }

        void UpdateCheckmarks ()
        {
            SwipeTableViewCell cell;
            if (Account.NotificationConfiguration == 0) {
                foreach (var indexPath in TableView.IndexPathsForVisibleRows) {
                    cell = TableView.CellAt (indexPath) as SwipeTableViewCell;
                    if (indexPath.Row == 0) {
                        cell.AccessoryView = new CheckmarkAccessoryView ();
                    } else {
                        cell.AccessoryView = null;
                    }
                }
            } else {
                foreach (var indexPath in TableView.IndexPathsForVisibleRows) {
                    cell = TableView.CellAt (indexPath) as SwipeTableViewCell;
                    if (indexPath.Row == 0) {
                        cell.AccessoryView = null;
                    } else {
                        var option = Options [indexPath.Row - 1];
                        if (Account.NotificationConfiguration.HasFlag (option.Option)) {
                            if (cell.AccessoryView == null) {
                                cell.AccessoryView = new CheckmarkAccessoryView ();
                            }
                        } else {
                            cell.AccessoryView = null;
                        }
                    }
                }
            }
        }

        private class CheckmarkAccessoryView : ImageAccessoryView
        {
            public CheckmarkAccessoryView () : base ("checkmark-accessory")
            {
            }
        }

        private class OptionCell : SwipeTableViewCell, ThemeAdopter
        {

            public OptionCell (IntPtr ptr) : base (ptr)
            {
            }

            public void AdoptTheme (Theme theme)
            {
                TextLabel.Font = theme.DefaultFont.WithSize (14.0f);
                TextLabel.TextColor = theme.TableViewCellMainLabelTextColor;
                SetNeedsLayout ();
            }
        }
    }
}
