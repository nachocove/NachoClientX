// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;

using CoreGraphics;
using Foundation;
using UIKit;

using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class AccountValidationViewController : NcUIViewControllerNoLeaks
    {
        string title;

        McAccount account;
        McAccount.AccountServiceEnum service;

        UIBarButtonItem cancelButton;
        UILabel startLabel;
        UIView serviceBox;
        UIView passwordBox;
        UITextField serviceField;
        UITextField passwordField;
        UIButton submitButton;

        UIView contentView;
        UIScrollView scrollView;
        UIView greyBackground;

        List<McServer> ServerList;

        public AccountValidationViewController () : base ()
        {
        }

        public AccountValidationViewController (IntPtr handle) : base (handle)
        {
        }

        public void ChangePassword (McAccount account)
        {
            this.title = NSBundle.MainBundle.LocalizedString ("Update Password (title)", "Title for update password screen");
            this.service = account.AccountService;
            this.account = account;
        }

        NSObject notification;

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            notification = NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextFieldTextDidChangeNotification, OnTextFieldChanged);
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
            NSNotificationCenter.DefaultCenter.RemoveObserver (notification);
        }

        protected override void CreateViewHierarchy ()
        {
            View.BackgroundColor = A.Color_NachoGreen;

            NavigationItem.Title = title;

            cancelButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (cancelButton, "icn-close");
            cancelButton.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Close", "");
            cancelButton.Clicked += CancelButton_Clicked;

            NavigationItem.LeftBarButtonItem = cancelButton;

            contentView = new UIView (View.Frame);
            contentView.BackgroundColor = A.Color_NachoGreen;

            scrollView = new UIScrollView (View.Frame);
            scrollView.Bounces = true;
            scrollView.BackgroundColor = A.Color_NachoGreen;
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;
            scrollView.AddSubview (contentView);
            View.AddSubview (scrollView);

            nfloat yOffset = 64;

            startLabel = new UILabel (new CGRect (30, yOffset, View.Frame.Width - 60, 0));
            startLabel.BackgroundColor = A.Color_NachoGreen;
            startLabel.TextColor = UIColor.White;
            startLabel.Font = A.Font_AvenirNextRegular17;
            startLabel.TextAlignment = UITextAlignment.Center;
            startLabel.LineBreakMode = UILineBreakMode.WordWrap;
            startLabel.Alpha = 1;

            startLabel.Text = NSBundle.MainBundle.LocalizedString ("Enter your account password", "Prompt on update password screen");

            startLabel.Lines = 0;
            startLabel.SizeToFit ();
            contentView.AddSubview (startLabel);

            yOffset = startLabel.Frame.Bottom + 20;

            serviceBox = new UIView (new CGRect (25, yOffset, View.Frame.Width - 50, 46));
            serviceBox.BackgroundColor = UIColor.White;
            serviceBox.Alpha = 1;

            serviceField = new UITextField (new CGRect (45, 0, serviceBox.Frame.Width - 50, serviceBox.Frame.Height));
            serviceField.BackgroundColor = UIColor.White;
            serviceField.Text = NcServiceHelper.AccountServiceName (service);
            serviceField.Font = A.Font_AvenirNextRegular17;
            serviceField.BorderStyle = UITextBorderStyle.None;
            serviceField.TextAlignment = UITextAlignment.Left;
            serviceField.ShouldBeginEditing += (UITextField textField) => {
                return false;
            };

            serviceBox.AddSubview (serviceField);

            var serviceImageView = new UIImageView ();
            var imageName = Util.GetAccountServiceImageName (service);
            using (var image = UIImage.FromBundle (imageName).ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal)) {
                serviceImageView.Image = image;
            }
            serviceImageView.Frame = new CGRect (3, 3, 40, 40);

            serviceBox.AddSubview (serviceImageView);

            contentView.AddSubview (serviceBox);

            yOffset = serviceBox.Frame.Bottom + 4;

            passwordBox = new UIView (new CGRect (25, yOffset, View.Frame.Width - 50, 46));
            passwordBox.BackgroundColor = UIColor.White;
            passwordBox.Alpha = 1;

            passwordField = new UITextField (new CGRect (45, 0, passwordBox.Frame.Width - 50, passwordBox.Frame.Height));
            passwordField.BackgroundColor = UIColor.White;
            passwordField.Placeholder = NSBundle.MainBundle.LocalizedString ("Password", "");
            passwordField.Font = A.Font_AvenirNextRegular17;
            passwordField.BorderStyle = UITextBorderStyle.None;
            passwordField.TextAlignment = UITextAlignment.Left;
            passwordField.SecureTextEntry = true;
            passwordField.KeyboardType = UIKeyboardType.Default;
            passwordField.AutocapitalizationType = UITextAutocapitalizationType.None;
            passwordField.AutocorrectionType = UITextAutocorrectionType.No;
            passwordField.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Password", "");
            passwordBox.AddSubview (passwordField);
            passwordBox.UserInteractionEnabled = true;

            UIImageView lockImage = new UIImageView ();
            using (var loginImageThree = UIImage.FromBundle ("Loginscreen-3")) {
                lockImage.Image = loginImageThree;
            }
            lockImage.Frame = new CGRect (15, 15, 14, 15);
            passwordBox.AddSubview (lockImage);

            contentView.AddSubview (passwordBox);

            yOffset = passwordBox.Frame.Bottom + 20f;

            submitButton = Util.BlueButton (NSBundle.MainBundle.LocalizedString ("Update (password)", "Button title for updating password"), View.Frame.Width);
            ViewFramer.Create (submitButton).Y (yOffset);
            submitButton.TouchUpInside += SubmitButtonTouchUpInside;
            contentView.AddSubview (submitButton);

            yOffset = submitButton.Frame.Bottom + 20f;

            // bottom padding
            yOffset += 20;

            ViewFramer.Create (contentView).Height (yOffset);
            scrollView.ContentSize = contentView.Frame.Size;

        }

        void ShowStatusView ()
        {
            greyBackground = new UIView (NavigationController.View.Frame);
            greyBackground.BackgroundColor = UIColor.DarkGray.ColorWithAlpha (0.4f);
            View.Add (greyBackground);

            UIView statusView = new UIView (new CGRect (View.Frame.Width / 6, View.Frame.Height / 2 - 150, View.Frame.Width * 2 / 3, 150));
            statusView.Layer.CornerRadius = 7.0f;
            statusView.BackgroundColor = UIColor.White;
            statusView.Alpha = 1.0f;

            UITextView statusMessage = new UITextView (new CGRect (8, 2, statusView.Frame.Width - 16, statusView.Frame.Height / 2.4f));
            statusMessage.BackgroundColor = UIColor.White;
            statusMessage.Alpha = 1.0f;
            statusMessage.Font = UIFont.SystemFontOfSize (17);
            statusMessage.TextColor = UIColor.Black;
            statusMessage.Text = NSBundle.MainBundle.LocalizedString ("Validating Credentials", "Status message when waiting for password update");
            statusMessage.TextAlignment = UITextAlignment.Center;
            statusMessage.Editable = false;
            statusView.AddSubview (statusMessage);

            UIActivityIndicatorView theSpinner = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);
            theSpinner.Alpha = 1.0f;
            theSpinner.HidesWhenStopped = true;
            theSpinner.Frame = new CGRect (statusView.Frame.Width / 2 - 20, 50, 40, 40);
            theSpinner.Color = A.Color_SystemBlue;
            theSpinner.StartAnimating ();

            statusView.AddSubview (theSpinner);

            UIView cancelLine = new UIView (new CGRect (0, 105, statusView.Frame.Width, .5f));
            cancelLine.BackgroundColor = A.Color_NachoLightBorderGray;
            statusView.AddSubview (cancelLine);

            UIButton cancelValidation = new UIButton (new CGRect (0, 106, statusView.Frame.Width, 40));
            cancelValidation.Layer.CornerRadius = 10.0f;
            cancelValidation.BackgroundColor = UIColor.White;
            cancelValidation.TitleLabel.TextAlignment = UITextAlignment.Center;
            cancelValidation.SetTitle (NSBundle.MainBundle.LocalizedString ("Cancel", ""), UIControlState.Normal);
            cancelValidation.AccessibilityLabel = NSBundle.MainBundle.LocalizedString ("Cancel", "");
            cancelValidation.SetTitleColor (A.Color_SystemBlue, UIControlState.Normal);
            statusView.AddSubview (cancelValidation);

            cancelValidation.TouchUpInside += CancelValidationButtonClicked;

            statusView.AddSubview (cancelValidation);

            greyBackground.AddSubview (statusView);
            NavigationController.View.AddSubview (greyBackground);
        }

        void HideStatusView ()
        {
            if (null != greyBackground) {
                greyBackground.RemoveFromSuperview ();
                greyBackground = null;
            }
        }

        protected override void ConfigureAndLayout ()
        {
            maybeEnableConnect ();
            var contentSize = contentView.Frame.Size;
            scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            ViewFramer.Create (contentView).Size (contentSize);
            scrollView.ContentSize = contentSize;
        }

        protected override void Cleanup ()
        {
        }

        public void maybeEnableConnect ()
        {
            var shouldWe = (0 < passwordField.Text.Length);
            submitButton.Enabled = shouldWe;
            submitButton.Alpha = (shouldWe ? 1.0f : 0.5f);
        }

        private void OnTextFieldChanged (NSNotification notification)
        {
            maybeEnableConnect ();
        }

        protected override void OnKeyboardChanged ()
        {
            ConfigureAndLayout ();
            scrollView.ScrollRectToVisible (new CGRect (submitButton.Frame.X, submitButton.Frame.Y + 10, submitButton.Frame.Width, submitButton.Frame.Height), false);
        }

        protected void SubmitButtonTouchUpInside (object sender, EventArgs e)
        {
            ServerList = McServer.QueryByAccountId<McServer> (account.Id).ToList ();

            if ((null == ServerList) || (0 == ServerList.Count ())) {
                Log.Error (Log.LOG_UI, "AccountValidationViewcontroller: no servers");
                return;
            }

            ShowStatusView ();
            StartNextValidation ();
        }

        bool StartNextValidation ()
        {
            var server = ServerList.FirstOrDefault ();
            if (null == server) {
                return false;
            }
            ServerList.RemoveAt (0);

            var creds = McCred.QueryByAccountId<McCred> (account.Id).SingleOrDefault ();
            if (null == creds) {
                Log.Error (Log.LOG_UI, "AccountValidationViewcontroller: no creds");
                return false;
            }
            var testCred = new McCred ();
            testCred.SetTestPassword (passwordField.Text);
            account.LogHashedPassword (Log.LOG_HTTP, "AccountValidationViewcontroller - Testing new password", passwordField.Text);

            testCred.Username = creds.Username;
            testCred.UserSpecifiedUsername = creds.UserSpecifiedUsername;

            if (!BackEnd.Instance.ValidateConfig (account.Id, server, testCred).isOK ()) {
                HandleAccountIssue (NSBundle.MainBundle.LocalizedString ("Network Error", "Title for error when updating password"), NSBundle.MainBundle.LocalizedString ("A network issue is preventing your changes from being validated. Would you like to save your changes anyway?", "Error message when updating password"));
                return false;
            }

            return true;
        }

        void CancelButton_Clicked (object sender, EventArgs e)
        {
            View.EndEditing (true);
            NavigationController.PopViewController (true);
        }

        void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if ((null == s.Account) || (s.Account.Id != account.Id)) {
                return;
            }

            if (NcResult.SubKindEnum.Info_ValidateConfigSucceeded == s.Status.SubKind) {
                if (!StartNextValidation ()) {
                    SavePasswordAndExit ();
                }
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedComm == s.Status.SubKind) {
                HandleAccountIssue (NSBundle.MainBundle.LocalizedString ("Validation Failed", "Alert title for error when updating password"), NSBundle.MainBundle.LocalizedString ("This account may not be able to send or receive emails. Save anyway?", "Alert message for error when updating password"));
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedAuth == s.Status.SubKind) {
                HandleAccountIssue (NSBundle.MainBundle.LocalizedString ("Invalid Credentials", "Alert title for error when updating password"), NSBundle.MainBundle.LocalizedString ("User name or password is incorrect. No emails can be sent or received. Save anyway?", "Alert message for error when updating password"));
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedUser == s.Status.SubKind) {
                HandleAccountIssue (NSBundle.MainBundle.LocalizedString ("Invalid Username", "Alert title for error when updating password"), NSBundle.MainBundle.LocalizedString ("User name is incorrect. No emails can be sent or received. Save anyway?", "Alert message for error when updating password"));
            }
        }

        void HandleAccountIssue (string title, string message)
        {
            HideStatusView ();
            NcAlertView.Show (this, title, message,
                new NcAlertAction (NSBundle.MainBundle.LocalizedString ("Save", ""), () => {
                    SavePasswordAndExit ();
                }),
                new NcAlertAction (NSBundle.MainBundle.LocalizedString ("Cancel", ""), NcAlertActionStyle.Cancel, null));
        }

        void SavePasswordAndExit ()
        {
            HideStatusView ();
            var creds = McCred.QueryByAccountId<McCred> (account.Id).SingleOrDefault ();
            if ((null != creds) && (McCred.CredTypeEnum.Password == creds.CredType)) {
                account.LogHashedPassword (Log.LOG_HTTP, "AccountValidationViewcontroller - Saving new password", passwordField.Text);
                creds.UpdatePassword (passwordField.Text);
                creds.Update ();
                BackEnd.Instance.CredResp (account.Id);
            }
            View.EndEditing (true);
            NavigationController.PopViewController (true);
        }

        protected void CancelValidationButtonClicked (object sender, EventArgs e)
        {
            HideStatusView ();
            BackEnd.Instance.CancelValidateConfig (account.Id);

            NcAlertView.Show (this, NSBundle.MainBundle.LocalizedString ("Validation Cancelled", "Alert title when canceling password update"),
                NSBundle.MainBundle.LocalizedString ("Your settings have not been validated. Would you like to save them anyway?", "Alert message when canceling password update"),
                new NcAlertAction (NSBundle.MainBundle.LocalizedString ("Save", ""), () => {
                    SavePasswordAndExit ();
                }),
                new NcAlertAction (NSBundle.MainBundle.LocalizedString ("Cancel", ""), NcAlertActionStyle.Cancel, null));
        }
    }
}
