// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore.Brain;
using MimeKit;
using DDay.iCal;
using DDay.iCal.Serialization;
using DDay.iCal.Serialization.iCalendar;
using MonoTouch.Dialog;

namespace NachoClient.iOS
{
    public partial class MessageViewController : NcUIViewController, INachoMessageEditorParent,
        INachoFolderChooserParent, INachoCalendarItemEditorParent, INcDatePickerDelegate, IUcAddressBlockDelegate
    {
        public McEmailMessageThread thread;
        protected UIView view;
        protected UIView attachmentListView;
        protected List<McAttachment> attachments;
        protected UcAddressBlock toView;
        protected UcAddressBlock ccView;

        protected UIBarButtonItem chiliButton;
        protected UIBarButtonItem deadlineButton;
        protected McAccount account;

        protected int htmlBusy;
        protected int deferLayout;
        protected object deferLayoutLock = new object ();
        protected static float SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected int LINE_OFFSET = 30;
        protected int CELL_HEIGHT = 44;

        protected bool errorLoadingBody;
        protected bool calendarRendered;
        protected bool expandedHeader = false;

        public MessageViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            account = NcModel.Instance.Db.Table<McAccount> ().Where (x => x.AccountType == McAccount.AccountTypeEnum.Exchange).FirstOrDefault ();

            chiliButton = new UIBarButtonItem ("Hot", UIBarButtonItemStyle.Plain, null);

            var deferButton = new UIBarButtonItem ();
            deadlineButton = new UIBarButtonItem ();
            Util.SetOriginalImageForButton (deferButton, "email-defer");
            Util.SetOriginalImageForButton (quickReplyButton, "contact-quickemail");
            Util.SetOriginalImageForButton (deadlineButton, "email-calendartime");
            var spacer = new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace) { Width = 5 };

            // Multiple buttons spaced evently
            ToolbarItems = new UIBarButtonItem[] {
                replyButton,
                flexibleSpaceButton,
                chiliButton,
                flexibleSpaceButton,
                archiveButton,
                spacer,
                saveButton,
                spacer,
                deleteButton,
            };

            Util.SetOriginalImageForButton (archiveButton, "email-archive");
            Util.SetOriginalImageForButton (saveButton, "email-fileinfolder");
            Util.SetOriginalImageForButton (deleteButton, "email-delete");

            // Multiple buttons on the right side
            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                deferButton,
                deadlineButton,
                quickReplyButton,
            };

            deferButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("MessageViewToMessagePriority", this);
            };
            saveButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("MessageViewToMessageAction", this);
            };
            replyButton.Clicked += (object sender, EventArgs e) => {
                ReplyActionSheet ();
            };
            archiveButton.Clicked += (object sender, EventArgs e) => {
                ArchiveThisMessage ();
                NavigationController.PopViewControllerAnimated (true);
            };
            deleteButton.Clicked += (object sender, EventArgs e) => {
                DeleteThisMessage ();
                NavigationController.PopViewControllerAnimated (true);
            };
            chiliButton.Clicked += (object sender, EventArgs e) => {
                var message = thread.SingleMessageSpecialCase ();
                message.ToggleHotOrNot ();
                ConfigureToolbar ();
            };
            deadlineButton.Clicked += (object sender, EventArgs e) => {
                DeadlineActionSheet ();
            };

            FetchAttachments ();
            CreateView ();

            MarkAsRead ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = false;
            }
            ConfigureView ();
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            StopSpinner ();
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if ((NcResult.SubKindEnum.Info_AttDownloadUpdate == s.Status.SubKind) || (NcResult.SubKindEnum.Error_AttDownloadFailed == s.Status.SubKind)) {
                FetchAttachments ();
                ConfigureAttachments ();
                return;
            }
            if (NcResult.SubKindEnum.Info_EmailMessageBodyDownloadSucceeded == s.Status.SubKind) {
                Log.Info (Log.LOG_EMAIL, "EmailMessageBodyDownloadSucceeded");
                errorLoadingBody = false;
                StopSpinner ();
                ConfigureView ();
                return;
            }
            if (NcResult.SubKindEnum.Error_EmailMessageBodyDownloadFailed == s.Status.SubKind) {
                Log.Info (Log.LOG_EMAIL, "EmailMessageBodyDownloadFailed");
                errorLoadingBody = true;
                StopSpinner ();
                ConfigureView ();
                return;
            }
        }

        protected void FetchAttachments ()
        {
            var message = thread.SingleMessageSpecialCase ();
            attachments = McAttachment.QueryByItemId<McEmailMessage> (message.AccountId, message.Id);
        }

        protected void ReplyActionSheet ()
        {
            var actionSheet = new UIActionSheet ();
            actionSheet.Add ("Reply");
            actionSheet.Add ("Reply All");
            actionSheet.Add ("Forward");
            actionSheet.Add ("Cancel");

            actionSheet.CancelButtonIndex = 3;

            actionSheet.Clicked += delegate(object a, UIButtonEventArgs b) {
                switch (b.ButtonIndex) {
                case 0:
                    PerformSegue ("MessageViewToCompose", new SegueHolder (MessageComposeViewController.Reply));
                    break;
                case 1:
                    PerformSegue ("MessageViewToCompose", new SegueHolder (MessageComposeViewController.ReplyAll));
                    break;
                case 2:
                    PerformSegue ("MessageViewToCompose", new SegueHolder (MessageComposeViewController.Forward));
                    break;
                case 3:
                    break; // Cancel
                }
            };
            actionSheet.ShowFromToolbar (NavigationController.Toolbar);
        }

        protected void DeadlineActionSheet ()
        {
            var actionSheet = new UIActionSheet ();
            actionSheet.Add ("Set Deadline");
            actionSheet.Add ("Create Meeting");
            actionSheet.Add ("Cancel");

            actionSheet.CancelButtonIndex = 2;

            actionSheet.Clicked += delegate(object a, UIButtonEventArgs b) {
                switch (b.ButtonIndex) {
                case 0:
                    PerformSegue ("SegueToDatePicker", new SegueHolder (null));
                    break;
                case 1:
                    var c = CalendarHelper.CreateMeeting (thread.SingleMessageSpecialCase ());
                    PerformSegue ("SegueToEditEvent", new SegueHolder (c));
                    break;
                case 2:
                    break; // Cancel
                }
            };
            actionSheet.ShowFrom (deadlineButton, true);
        }

        public void DismissDatePicker (DatePickerViewController vc, DateTime chosenDateTime)
        {
            NcMessageDeferral.SetDueDate (thread, chosenDateTime);
            vc.owner = null;
            vc.DismissViewController (false, null);
            ConfigureView ();
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            var blurry = segue.DestinationViewController as BlurryViewController;
            if (null != blurry) {
                blurry.CaptureView (this.View);
            }

            if (segue.Identifier == "MessageViewToMessagePriority") {
                var vc = (MessagePriorityViewController)segue.DestinationViewController;
                vc.thread = thread;
                vc.SetOwner (this);
                return;
            }
            if (segue.Identifier == "MessageViewToMessageAction") {
                var vc = (MessageActionViewController)segue.DestinationViewController;
                vc.SetOwner (this, thread);
                return;
            }
            if (segue.Identifier == "MessageViewToCompose") {
                var vc = (MessageComposeViewController)segue.DestinationViewController;
                var h = sender as SegueHolder;
                vc.Action = (string)h.value;
                vc.ActionThread = thread;
                vc.SetOwner (this);
                return;
            }
            if (segue.Identifier == "MessageViewToEditEvent") {
                var vc = (EditEventViewController)segue.DestinationViewController;
                var h = sender as SegueHolder;
                var c = h.value as McCalendar;
                vc.SetOwner (this);
                vc.SetCalendarItem (c, CalendarItemEditorAction.create);
                return;
            }
            if (segue.Identifier == "SegueToDatePicker") {
                var vc = (DatePickerViewController)segue.DestinationViewController;
                vc.owner = this;
                return;
            }
            if (segue.Identifier == "SegueToEditEvent") {
                var vc = (EditEventViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                var c = holder.value as McCalendar;
                vc.SetCalendarItem (c, CalendarItemEditorAction.create);
                vc.SetOwner (this);
                return;
            }
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void DismissChildMessageEditor (INachoMessageEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                NavigationController.PopViewControllerAnimated (true);
            }));
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void CreateTaskForEmailMessage (INachoMessageEditor vc, McEmailMessageThread thread)
        {
            var m = thread.SingleMessageSpecialCase ();
            var t = CalendarHelper.CreateTask (m);
            vc.SetOwner (null);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                PerformSegue ("", new SegueHolder (t));
            }));
        }

        /// <summary>
        /// INachoMessageControl delegate
        /// </summary>
        public void CreateMeetingEmailForMessage (INachoMessageEditor vc, McEmailMessageThread thread)
        {
            var m = thread.SingleMessageSpecialCase ();
            var c = CalendarHelper.CreateMeeting (m);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                PerformSegue ("MessageViewToEditEvent", new SegueHolder (c));
            }));
        }

        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (true, null);
        }

        /// <summary>
        /// INachoFolderChooser delegate
        /// </summary>
        public void FolderSelected (INachoFolderChooser vc, McFolder folder, object cookie)
        {
            MoveThisMessage (folder);
            vc.SetOwner (null, null);
            vc.DismissFolderChooser (false, new NSAction (delegate {
                NavigationController.PopViewControllerAnimated (true);
            }));
        }

        /// <summary>
        /// INachoFolderChooser delegate
        /// </summary>
        public void DismissChildFolderChooser (INachoFolderChooser vc)
        {
            vc.DismissFolderChooser (true, null);
        }

        void MarkAsRead ()
        {
            var message = thread.SingleMessageSpecialCase ();
            if (false == message.IsRead) {
                BackEnd.Instance.MarkEmailReadCmd (message.AccountId, message.Id);
            }
        }

        public void DeleteThisMessage ()
        {
            var m = thread.SingleMessageSpecialCase ();
            NcEmailArchiver.Delete (m);
        }

        public void ArchiveThisMessage ()
        {
            var m = thread.SingleMessageSpecialCase ();
            NcEmailArchiver.Archive (m);
        }

        public void MoveThisMessage (McFolder folder)
        {
            var m = thread.SingleMessageSpecialCase ();
            NcEmailArchiver.Move (m, folder);
        }

        const int USER_IMAGE_TAG = 101;
        const int FROM_TAG = 102;
        const int SUBJECT_TAG = 103;
        const int REMINDER_TEXT_TAG = 104;
        const int REMINDER_ICON_TAG = 105;
        const int ATTACHMENT_ICON_TAG = 106;
        const int RECEIVED_DATE_TAG = 107;
        const int SEPARATOR_TAG = 108;
        const int SPINNER_TAG = 109;
        const int USER_LABEL_TAG = 110;
        const int USER_CHILI_TAG = 111;
        const int MESSAGE_PART_TAG = 300;
        const int CALENDAR_PART_TAG = 400;
        const int ATTACHMENT_VIEW_TAG = 301;
        const int ATTACHMENT_NAME_TAG = 302;
        const int ATTACHMENT_STATUS_TAG = 303;
        const int DOWNLOAD_TAG = 304;

        protected void CreateView ()
        {
            view = new UIView ();
            scrollView.AddSubview (view);

            float yOffset = 0;

            scrollView.DidZoom += (object sender, EventArgs e) => {
                Log.Info (Log.LOG_UI, "scrollview did zoom");
            };
            scrollView.MinimumZoomScale = 0.3f;
            scrollView.MaximumZoomScale = 4.0f;
            scrollView.ViewForZoomingInScrollView = delegate {
                return view;
            };

            var doubletap = new UITapGestureRecognizer ();
            doubletap.NumberOfTapsRequired = 2;
            doubletap.AddTarget (this, new MonoTouch.ObjCRuntime.Selector ("DoubleTapSelector:"));
            doubletap.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            scrollView.AddGestureRecognizer (doubletap);

            // A single tap on the header section (everything above the horizontal rule separator)
            // toggles between the compact and expanded view of the header.
            var singletap = new UITapGestureRecognizer ();
            singletap.NumberOfTapsRequired = 1;
            singletap.AddTarget (this, new MonoTouch.ObjCRuntime.Selector ("SingleTapSelector:"));
            singletap.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            view.AddGestureRecognizer (singletap);

            // User image view
            var userImageView = new UIImageView (new RectangleF (15, 15, 40, 40));
            userImageView.Layer.CornerRadius = 20;
            userImageView.Layer.MasksToBounds = true;
            userImageView.Tag = USER_IMAGE_TAG;
            view.AddSubview (userImageView);

            // User userLabelView view, if no image
            var userLabelView = new UILabel (new RectangleF (15, 15, 40, 40));
            userLabelView.Font = A.Font_AvenirNextRegular24;
            userLabelView.TextColor = UIColor.White;
            userLabelView.TextAlignment = UITextAlignment.Center;
            userLabelView.LineBreakMode = UILineBreakMode.Clip;
            userLabelView.Layer.CornerRadius = 20;
            userLabelView.Layer.MasksToBounds = true;
            userLabelView.Tag = USER_LABEL_TAG;
            view.AddSubview (userLabelView);

            yOffset = 20;

            // From label view
            // Font will vary bold or regular, depending on isRead.
            // Size fields will be recalculated after text is known.
            var fromLabelView = new UILabel (new RectangleF (65, 20, 150, 20));
            fromLabelView.Font = A.Font_AvenirNextDemiBold17;
            fromLabelView.TextColor = A.Color_0F424C;
            fromLabelView.Tag = FROM_TAG;
            fromLabelView.UserInteractionEnabled = true;
            view.AddSubview (fromLabelView);

            yOffset += 20;

            // Subject label view
            // Size fields will be recalculated after text is known.
            var subjectLabelView = new UILabel (new RectangleF (65, yOffset, 250, 20));
            subjectLabelView.LineBreakMode = UILineBreakMode.WordWrap;
            subjectLabelView.Font = A.Font_AvenirNextMedium14;
            subjectLabelView.TextColor = A.Color_0F424C;
            subjectLabelView.Tag = SUBJECT_TAG;
            view.AddSubview (subjectLabelView);

            yOffset += 20;

            // Received label view
            var receivedLabelView = new UILabel (new RectangleF (65, yOffset, 250, 20));
            receivedLabelView.Font = A.Font_AvenirNextRegular14;
            receivedLabelView.TextColor = A.Color_9B9B9B;
            receivedLabelView.TextAlignment = UITextAlignment.Left;
            receivedLabelView.Tag = RECEIVED_DATE_TAG;
            view.AddSubview (receivedLabelView);

            yOffset += 20;

            // To label view
            toView = new UcAddressBlock (this, "To:", View.Frame.Width);
            toView.SetCompact (false, -1);
            toView.SetEditable (false);
            toView.SetLineHeight (20);

            var toViewFrame = toView.Frame;
            toViewFrame.X = 8;
            toViewFrame.Y = yOffset;
            toViewFrame.Width = 250;
            toViewFrame.Height = 0;
            toView.Frame = toViewFrame;
            view.AddSubview (toView);

            // CC label view
            ccView = new UcAddressBlock (this, "Cc:", View.Frame.Width);
            ccView.SetCompact (false, -1);
            ccView.SetEditable (false);
            ccView.SetLineHeight (20);

            var ccViewFrame = ccView.Frame;
            ccViewFrame.X = 8;
            ccViewFrame.Y = yOffset;
            ccViewFrame.Width = 250;
            ccViewFrame.Height = 0;
            ccView.Frame = ccViewFrame;
            view.AddSubview (ccView);

            // Reminder image view
            var reminderImageView = new UIImageView (new RectangleF (65, yOffset + 4, 12, 12));
            reminderImageView.Image = UIImage.FromBundle ("inbox-icn-deadline");
            reminderImageView.Tag = REMINDER_ICON_TAG;
            view.AddSubview (reminderImageView);

            // Reminder label view
            var reminderLabelView = new UILabel (new RectangleF (87, yOffset, 230, 20));
            reminderLabelView.Font = A.Font_AvenirNextRegular14;
            reminderLabelView.TextColor = A.Color_9B9B9B;
            reminderLabelView.Tag = REMINDER_TEXT_TAG;
            view.AddSubview (reminderLabelView);


            // Chili image view
            var chiliImageView = new UIImageView (new RectangleF (View.Frame.Width - 20 - 15, 18, 20, 20));
            chiliImageView.Image = UIImage.FromBundle("icn-red-chili-small");
            chiliImageView.Tag = USER_CHILI_TAG;
            view.AddSubview (chiliImageView);

            // Attachment image view
            // Attachment 'x' will be adjusted to be left of hot image field
            var attachmentImageView = new UIImageView (new RectangleF (200, 18, 16, 16));
            attachmentImageView.Image = UIImage.FromBundle ("inbox-icn-attachment");
            attachmentImageView.Tag = ATTACHMENT_ICON_TAG;
            view.AddSubview (attachmentImageView);

            var tapAttachmentIconGestureRecognizer = new UITapGestureRecognizer ((UITapGestureRecognizer obj) => {
                onAttachmentIconSelected (obj);
            });
            tapAttachmentIconGestureRecognizer.Enabled = true;
            attachmentImageView.UserInteractionEnabled = true;
            attachmentImageView.AddGestureRecognizer (tapAttachmentIconGestureRecognizer);

            // Separator
            yOffset += 5;
            var separatorView = new UIView (new RectangleF (0, yOffset, 320, 1));
            separatorView.BackgroundColor = A.Color_NachoSeparator;
            separatorView.Tag = SEPARATOR_TAG;
            view.AddSubview (separatorView);

            // Spinner
            var spinner = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.Gray);
            spinner.Center = View.Center;
            spinner.HidesWhenStopped = true;
            spinner.Tag = SPINNER_TAG;
            view.AddSubview (spinner);

            // Attachments
            attachmentListView = new UIView ();
            attachmentListView.Tag = ATTACHMENT_VIEW_TAG;

            for (int i = 0; i < attachments.Count; i++) {
                var attachmentView = new UIView (new RectangleF (0, i * 61, View.Frame.Width, 61));
                attachmentView.Layer.BorderColor = A.Color_NachoSeparator.CGColor;
                attachmentView.Layer.BorderWidth = 1;
                attachmentView.Tag = i;
                attachmentListView.AddSubview (attachmentView);

                var icon = new UIImageView (new RectangleF (15, 22, 16, 16));
                icon.Image = UIImage.FromBundle ("icn-attach-files");
                attachmentView.AddSubview (icon);

                var name = new UILabel (new RectangleF (49, 10, View.Frame.Width, 20));
                name.Font = A.Font_AvenirNextMedium14;
                name.TextColor = A.Color_808080;
                name.Tag = ATTACHMENT_NAME_TAG;
                attachmentView.AddSubview (name);

                var status = new UILabel (new RectangleF (49, 30, View.Frame.Width, 20));
                status.Font = A.Font_AvenirNextMedium14;
                status.TextColor = A.Color_808080;
                status.Tag = ATTACHMENT_STATUS_TAG;
                attachmentView.AddSubview (status);

                // Tap the calendar thumb to hid the calendar again
                var tapGestureRecognizer = new UITapGestureRecognizer ((UITapGestureRecognizer obj) => {
                    onAttachmentSelected (obj);
                });
                tapGestureRecognizer.Enabled = true;
                attachmentView.AddGestureRecognizer (tapGestureRecognizer);
            }
            attachmentListView.Frame = new RectangleF (0, 0, View.Frame.Width, 61 * attachments.Count);
        }

        protected void ConfigureView ()
        {
            var message = thread.SingleMessageSpecialCase ();
            attachments = McAttachment.QueryByItemId<McEmailMessage> (message.AccountId, message.Id);

            // User image view
            var userImageView = view.ViewWithTag (USER_IMAGE_TAG) as UIImageView;
            var userLabelView = view.ViewWithTag (USER_LABEL_TAG) as UILabel;
            userImageView.Hidden = true;
            userLabelView.Hidden = true;

            var userImage = Util.ImageOfSender (message.AccountId, Pretty.EmailString (message.From));

            if (null != userImage) {
                userImageView.Hidden = false;
                userImageView.Image = userImage;
            } else {
                userLabelView.Hidden = false;
                if (String.IsNullOrEmpty (message.cachedFromLetters) || (2 <= message.cachedFromColor)) {
                    Util.CacheUserMessageFields (message);
                }
                userLabelView.Text = message.cachedFromLetters;
                userLabelView.BackgroundColor = Util.ColorForUser (message.cachedFromColor);
            }

            // Subject label view
            var subjectLabelView = View.ViewWithTag (SUBJECT_TAG) as UILabel;
            subjectLabelView.Lines = 0;
            subjectLabelView.Text = Pretty.SubjectString (message.Subject);
            subjectLabelView.SizeToFit ();

            // Received label view
            var receivedLabelView = View.ViewWithTag (RECEIVED_DATE_TAG) as UILabel;
            receivedLabelView.Text = Pretty.FullDateTimeString (message.DateReceived);
            receivedLabelView.SizeToFit ();
            var receivedLabelFrame = receivedLabelView.Frame;
            receivedLabelFrame.Y = subjectLabelView.Frame.Bottom;
            receivedLabelView.Frame = receivedLabelFrame;

            float yOffset;
            if (!expandedHeader) {
                yOffset = receivedLabelView.Frame.Bottom;
                toView.Hidden = true;
                ccView.Hidden = true;
            } else {
                toView.Clear ();
                foreach (var address in NcEmailAddress.ParseToAddressListString (message.To)) {
                    toView.Append (address);
                }
                ccView.Clear ();
                foreach (var address in NcEmailAddress.ParseCcAddressListString (message.Cc)) {
                    ccView.Append (address);
                }
                toView.Hidden = false;
                ccView.Hidden = false;
                toView.ConfigureView ();
                ccView.ConfigureView ();

                var toViewFrame = toView.Frame;
                toViewFrame.Y = receivedLabelView.Frame.Bottom;
                toView.Frame = toViewFrame;

                var ccViewFrame = ccView.Frame;
                ccViewFrame.Y = toView.Frame.Bottom;
                ccView.Frame = ccViewFrame;

                yOffset = ccView.Frame.Bottom;
            }
 
            // Reminder image view and label
            var reminderImageView = View.ViewWithTag (REMINDER_ICON_TAG) as UIImageView;
            var reminderLabelView = View.ViewWithTag (REMINDER_TEXT_TAG) as UILabel;
            if (message.HasDueDate () || message.IsDeferred ()) {
                reminderImageView.Hidden = false;
                reminderLabelView.Hidden = false;
                reminderLabelView.Text = Pretty.ReminderText (message);
                AdjustY (reminderImageView, yOffset + 4);
                AdjustY (reminderLabelView, yOffset);
                yOffset += 20;
            } else {
                reminderImageView.Hidden = true;
                reminderLabelView.Hidden = true;
            }
            if (yOffset < userImageView.Frame.Bottom) {
                yOffset = userImageView.Frame.Bottom;
            }
            yOffset += 5;
            var separatorView = View.ViewWithTag (SEPARATOR_TAG);
            separatorView.Frame = new RectangleF (0, yOffset, View.Frame.Width, 1);

            // Chili image view
            var chiliImageView = View.ViewWithTag (USER_CHILI_TAG) as UIImageView;
            float X;
            if (message.isHot ()) {
                chiliImageView.Hidden = false;
                X = chiliImageView.Frame.X;
            } else {
                chiliImageView.Hidden = true;
                X = View.Frame.Width;
            }

            // Attachment image view
            var attachmentImageView = View.ViewWithTag (ATTACHMENT_ICON_TAG) as UIImageView;
            attachmentImageView.Hidden = (0 == attachments.Count);
            var attachmentImageRect = attachmentImageView.Frame;
            attachmentImageRect.X = X - 10 - 16;
            attachmentImageView.Frame = attachmentImageRect;

            // From label view
            var fromLabelView = View.ViewWithTag (FROM_TAG) as UILabel;
            var fromLabelRect = fromLabelView.Frame;
            fromLabelRect.Width = attachmentImageRect.X - 65;
            fromLabelView.Frame = fromLabelRect;
            fromLabelView.Text = Pretty.SenderString (message.From);
            fromLabelView.Font = (message.IsRead ? A.Font_AvenirNextDemiBold17 : A.Font_AvenirNextRegular17);

            htmlBusy = 0;
            deferLayout = 1;

            // TODO: Revisit
            for (int i = view.Subviews.Count() - 1; i >= 0; i--) {
                var v = view.Subviews [i];
                if ((MESSAGE_PART_TAG == v.Tag) || (DOWNLOAD_TAG == v.Tag)) {
                    v.RemoveFromSuperview ();
                }
            }

            RenderBody (message);
            if (null != message.MeetingRequest && !calendarRendered) {
                var UID = Util.GlobalObjIdToUID (message.MeetingRequest.GlobalObjId);
                MakeStyledCalendarInvite (UID, message.Subject, message.MeetingRequest.AllDayEvent, message.MeetingRequest.StartTime, message.MeetingRequest.EndTime, message.MeetingRequest.Location, view);
            } 
            ConfigureAttachments ();

            ConfigureToolbar ();

            if (0 == DeferLayoutDecrement ()) {
                LayoutView ();
            }
        }

        protected void AdjustY (UIView view, float yOffset)
        {
            var rect = view.Frame;
            rect.Y = yOffset;
            view.Frame = rect;
        }

        protected void ConfigureToolbar ()
        {
            var message = thread.SingleMessageSpecialCase ();

            string icon;
            switch (message.UserAction) {
            case 0:
                icon = (message.isHot () ? "icn-nothot" : "icn-hot");
                break;
            case 1:
                icon = "icn-nothot";
                break;
            case -1:
                icon = "icn-hot";
                break;
            default:
                icon = "shutup";
                NcAssert.CaseError ();
                break;
            }
            chiliButton.Image = UIImage.FromBundle (icon);
        }

        protected void RenderBody (McEmailMessage message)
        {
            if (errorLoadingBody) {
                Log.Info (Log.LOG_EMAIL, "Previous download resulted in error");
                RenderPartialDownloadMessage ("[ Message preview only. Tap here to download ]");
                RenderTextString (message.GetBodyPreviewOrEmpty ());
                return;
            }

            if (McAbstrItem.BodyStateEnum.Whole_0 != message.BodyState) {
                Log.Info (Log.LOG_EMAIL, "Starting download of whole message body");
                StartSpinner ();
                BackEnd.Instance.DnldEmailBodyCmd (message.AccountId, message.Id);
                return;
            }
 
            var bodyPath = message.GetBodyPath ();
            if (null == bodyPath) {
                return;
            }
            switch (message.BodyType) {
            case McBody.PlainText:
                RenderTextString (message.GetBody ());
                break;
            case McBody.HTML:
                RenderHtmlString (message.GetBody ());
                break;
            case McBody.RTF:
                RenderRtfString (message.GetBody ());
                break;
            case McBody.MIME:
                RenderMime (bodyPath);
                break;
            default:
                Log.Info (Log.LOG_EMAIL, "BodyType zero; likely old client");
                RenderMime (bodyPath);
                break;
            }
        }

        protected void ConfigureAttachments ()
        {
            for (int i = 0; i < attachments.Count; i++) {
                var attachment = attachments [i];
                var attachmentView = attachmentListView.ViewWithTag (i);
                var name = attachmentView.ViewWithTag (ATTACHMENT_NAME_TAG) as UILabel;
                name.Text = attachment.DisplayName;
                var status = attachmentView.ViewWithTag (ATTACHMENT_STATUS_TAG) as UILabel;
                if (attachment.IsInline) {
                    status.Text = "Is an inline attachment.";
                } else if (attachment.IsDownloaded) {
                    status.Text = "Attachment is downloaded.";
                } else if (0 < attachment.PercentDownloaded) {
                    status.Text = "Attachment is downloading.";
                } else {
                    status.Text = "Touch to download attachment.";
                }
                attachmentView.SetNeedsDisplay ();
            }
        }

        protected void LayoutView ()
        {
            var maxWidth = View.Frame.Width;

            var separatorView = view.ViewWithTag (SEPARATOR_TAG);
            var yOffset = separatorView.Frame.Y + separatorView.Frame.Height;

            yOffset += 0;

            attachmentListView.RemoveFromSuperview ();
            view.AddSubview (attachmentListView);

            if (null != view.ViewWithTag (CALENDAR_PART_TAG)) {
                view.InsertSubview (view.ViewWithTag (CALENDAR_PART_TAG), 0);
                view.ViewWithTag (CALENDAR_PART_TAG).Tag = MESSAGE_PART_TAG;
            }

            for (int i = 0; i < view.Subviews.Count (); i++) {
                var v = view.Subviews [i];
                if ((MESSAGE_PART_TAG == v.Tag) || (ATTACHMENT_VIEW_TAG == v.Tag) || (DOWNLOAD_TAG == v.Tag)) {
                    var frame = v.Frame;
                    frame.Y = yOffset;
                    v.Frame = frame;
                    yOffset += frame.Height;
                    if (frame.Width > maxWidth) {
                        maxWidth = frame.Width;
                    }
                }
            }
            view.Frame = new RectangleF (0.0f, 0.0f, maxWidth, yOffset);
            scrollView.ContentSize = new SizeF (maxWidth, yOffset);
            scrollView.SetNeedsDisplay ();
        }

        [MonoTouch.Foundation.Export ("DoubleTapSelector:")]
        public void OnDoubleTap (UIGestureRecognizer sender)
        {
            if (scrollView.ZoomScale == 1.0f) {
                scrollView.SetZoomScale (2.0f, true);
            } else {
                scrollView.SetZoomScale (1.0f, true);
            }
        }

        [MonoTouch.Foundation.Export ("SingleTapSelector:")]
        public void OnSingleTap (UIGestureRecognizer sender)
        {
            // Make sure the touch is in the header area
            PointF touch = sender.LocationInView (view);
            float bottom;
            if (expandedHeader) {
                bottom = ccView.Frame.Bottom;
            } else {
                bottom = view.ViewWithTag (RECEIVED_DATE_TAG).Frame.Bottom;
            }
            if (touch.Y > bottom) {
                return;
            }

            // Toggle header display mode and redraw
            expandedHeader = !expandedHeader;

            UIView.Animate (0.2, 0, UIViewAnimationOptions.CurveLinear, () => {
                ConfigureView ();
            }, () => {});
        }

        [MonoTouch.Foundation.Export ("DownloadMessage:")]
        public void OnDownloadMessage (UIGestureRecognizer sender)
        {
            var spinner = View.ViewWithTag (SPINNER_TAG) as UIActivityIndicatorView;
            if (spinner.IsAnimating) {
                // A download is already in progress... Wait for it to either complete or time out
                return;
            }
            errorLoadingBody = false;
            ConfigureView (); // this will call RenderBody() which will trigger the download
        }

        protected void RenderMime (string bodyPath)
        {
            using (var bodySource = new FileStream (bodyPath, FileMode.Open, FileAccess.Read, FileShare.Read)) {
                var bodyParser = new MimeParser (bodySource, MimeFormat.Default);
                var mime = bodyParser.ParseMessage ();
                PlatformHelpers.motd = mime; // for cid handler
                MimeHelpers.DumpMessage (mime, 0);
                var list = new List<MimeEntity> ();
                MimeHelpers.MimeDisplayList (mime, ref list);
                RenderDisplayList (list);
            }
        }

        protected void RenderDisplayList (List<MimeEntity> list)
        {
            for (var i = 0; i < list.Count; i++) {
                var entity = list [i];
                var part = (MimePart)entity;
                if (part.ContentType.Matches ("text", "html")) {
                    RenderHtml (part);
                    continue;
                }
                if (part.ContentType.Matches ("text", "calendar")) {
                    RenderCalendar (part);
                    continue;
                }
                if (part.ContentType.Matches ("text", "*")) {
                    RenderText (part);
                    continue;
                }
                if (part.ContentType.Matches ("image", "*")) {
                    RenderImage (part);
                    continue;
                }
            }
        }

        void RenderText (MimePart part)
        {
            var textPart = part as TextPart;
            var text = textPart.Text;
            RenderTextString (text);
        }

        void RenderTextString (string text)
        {
            var attributedString = new NSAttributedString (text);
            var label = new UILabel (new RectangleF (15.0f, 0.0f, 290.0f, 1.0f));
            label.Lines = 0;
            label.Font = A.Font_AvenirNextRegular17;
            label.LineBreakMode = UILineBreakMode.WordWrap;
            label.AttributedText = attributedString;
            label.SizeToFit ();
            var frame = label.Frame;
            frame.Height = frame.Height + 30;
            label.Frame = frame;
            label.Tag = MESSAGE_PART_TAG;
            view.AddSubview (label);
        }

        void RenderPartialDownloadMessage (string message)
        {
            var attributedString = new NSAttributedString (message);
            var label = new UILabel (new RectangleF (15.0f, 0.0f, 290.0f, 1.0f));
            label.Lines = 0;
            label.Font = A.Font_AvenirNextDemiBold14;
            label.LineBreakMode = UILineBreakMode.WordWrap;
            label.AttributedText = attributedString;
            label.TextColor = A.Color_808080;
            label.SizeToFit ();
            var frame = label.Frame;
            frame.Height = frame.Height + 30;
            label.Frame = frame;
            label.Tag = DOWNLOAD_TAG;
            label.UserInteractionEnabled = true;

            // Detect tap of the partially download mesasge label
            var singletap = new UITapGestureRecognizer ();
            singletap.NumberOfTapsRequired = 1;
            singletap.AddTarget (this, new MonoTouch.ObjCRuntime.Selector ("DownloadMessage:"));
            singletap.ShouldRecognizeSimultaneously = delegate {
                return false;
            };
            label.AddGestureRecognizer (singletap);

            view.AddSubview (label);
        }

        void RenderRtfString (string rtf)
        {
            var nsError = new NSError ();
            var nsAttributes = new NSAttributedStringDocumentAttributes ();
            nsAttributes.DocumentType = NSDocumentType.RTF;
            var attributedString = new NSAttributedString (rtf, nsAttributes, ref nsError);
            // Put attributed string into a label
            var label = new UILabel (new RectangleF (15.0f, 0.0f, 290.0f, 1.0f));
            label.Lines = 0;
            label.Font = A.Font_AvenirNextRegular17;
            label.LineBreakMode = UILineBreakMode.WordWrap;
            label.AttributedText = attributedString;
            label.SizeToFit ();
            label.Tag = MESSAGE_PART_TAG;
            view.AddSubview (label);
        }

        void RenderImage (MimePart part)
        {
            var image = PlatformHelpers.RenderImage (part);

            float width = View.Frame.Width;
            float height = image.Size.Height * (width / image.Size.Width);
            image = image.Scale (new SizeF (width, height));

            var iv = new UIImageView (image);
            iv.Tag = MESSAGE_PART_TAG;
            view.AddSubview (iv);
        }

        string magic = @"
            var style = document.createElement(""style""); 
            document.head.appendChild(style); 
            style.innerHTML = ""html{-webkit-text-size-adjust: auto; word-wrap: break-word;}"";
            var viewPortTag=document.createElement('meta');
            viewPortTag.id=""viewport"";
            viewPortTag.name = ""viewport"";
            viewPortTag.content = ""width=device-width; initial-scale=1.0;"";
            document.getElementsByTagName('head')[0].appendChild(viewPortTag);
        ";

        void RenderHtml (MimePart part)
        {
            var textPart = part as TextPart;
            var html = textPart.Text;
            RenderHtmlString (html);
        }

        void RenderHtmlString (string html)
        {
            var wv = new UIWebView (new RectangleF (0, 0, SCREEN_WIDTH, 1));
            wv.ScrollView.Bounces = false;
            wv.ScrollView.ScrollEnabled = true;
            wv.ScrollView.PagingEnabled = false;
            wv.ScrollView.MultipleTouchEnabled = false;
            wv.ContentMode = UIViewContentMode.ScaleAspectFit;
            wv.BackgroundColor = UIColor.White;
            wv.Tag = MESSAGE_PART_TAG;
            view.Add (wv);

            wv.LoadStarted += (object sender, EventArgs e) => {
                htmlBusy += 1;
            };

            wv.LoadFinished += (object sender, EventArgs e) => {
                htmlBusy -= 1;
                if (0 == htmlBusy) {
                    wv.EvaluateJavascript (magic);
                    var frame = wv.Frame;
                    frame.Width = View.Frame.Width;
                    frame.Height = (wv.ScrollView.ContentSize.Height > View.Bounds.Height) ? View.Bounds.Height : wv.ScrollView.ContentSize.Height;
                    wv.Frame = frame;
                    if (0 == DeferLayoutDecrement ()) {
                        LayoutView ();
                    }
                }
            };

            wv.LoadError += (object sender, UIWebErrorArgs e) => {
                htmlBusy -= 1;
                if (0 == DeferLayoutDecrement ()) {
                    LayoutView ();
                }
            };

            wv.ShouldStartLoad += delegate(UIWebView webView, NSUrlRequest request, UIWebViewNavigationType navigationType) {
                if (UIWebViewNavigationType.LinkClicked == navigationType) {
                    UIApplication.SharedApplication.OpenUrl (request.Url);
                    return false;
                }
                return true;
            };

            DeferLayoutIncrement ();
            wv.LoadHtmlString (html, null);
        }

        //        void RenderHtml (MimePart part)
        //        {
        //            var textPart = part as TextPart;
        //            var html = textPart.Text;
        //
        //            var nsError = new NSError ();
        //            var nsAttributes = new NSAttributedStringDocumentAttributes ();
        //            nsAttributes.DocumentType = NSDocumentType.HTML;
        //            var attributedString = new NSAttributedString (html, nsAttributes, ref nsError);
        //            var tv = new UITextView (new RectangleF (0, 0, View.Frame.Width, 1));
        //            tv.AttributedText = attributedString;
        //            tv.AutoresizingMask = UIViewAutoresizing.FlexibleBottomMargin;
        //            tv.UserInteractionEnabled = false;
        //            tv.SizeToFit ();
        //
        //            tv.Tag = MESSAGE_PART_TAG;
        //
        //            view.Add (tv);
        //        }

        /// Gets the decoded text content.
        public string GetText (TextPart text)
        {
            return text.Text;
        }

        /// TODO: Guard against malformed calendars
        public void RenderCalendar (MimePart part)
        {
            var textPart = part as TextPart;
            var decodedText = GetText (textPart);
            var stringReader = new StringReader (decodedText);
            IICalendar iCal = iCalendar.LoadFromStream (stringReader) [0];
            var evt = iCal.Events.First () as DDay.iCal.Event;
            NachoCore.Utils.CalendarHelper.ExtrapolateTimes (ref evt);
            if (null != evt.Description) {
                RenderTextString (evt.Description);
            }
            MakeStyledCalendarInvite (evt.UID, evt.Summary, evt.IsAllDay, evt.Start.Value, evt.End.Value, evt.Location, view);
            calendarRendered = true;
        }

        public void MakeStyledCalendarInvite (string UID, string subject, bool isAllDay, DateTime start, DateTime end, string location, UIView parentView)
        {
            UIView calendarEventView = new UIView (new RectangleF (0, 0, SCREEN_WIDTH, 140));
            calendarEventView.Tag = CALENDAR_PART_TAG;

            UILabel monthLabel = new UILabel (new RectangleF (19, 23, 36, 20));
            monthLabel.Font = A.Font_AvenirNextRegular12;
            monthLabel.TextColor = A.Color_NachoBlack;
            monthLabel.TextAlignment = UITextAlignment.Center;
            monthLabel.Text = start.ToString ("MMM");

            UIImageView dateImage = new UIImageView (new RectangleF (19, 43, 36, 36));
            var size = new SizeF (40, 40);
            dateImage.Image = NachoClient.Util.DrawCalDot (A.Color_FEBA32, size);

            UILabel dateLabel = new UILabel (new RectangleF (19, 43, 36, 36));
            dateLabel.Font = A.Font_AvenirNextDemiBold17;
            dateLabel.TextColor = UIColor.White;
            dateLabel.TextAlignment = UITextAlignment.Center;
            dateLabel.Text = start.ToString ("%d");

            UILabel titleLabel = new UILabel (new RectangleF (74, 27, SCREEN_WIDTH - 89, 20));
            titleLabel.Font = A.Font_AvenirNextDemiBold14;
            titleLabel.TextColor = A.Color_NachoBlack;
            titleLabel.TextAlignment = UITextAlignment.Left;
            titleLabel.Text = subject;
            titleLabel.SizeToFit ();

            UILabel durationLabel = new UILabel (new RectangleF (74, 47, SCREEN_WIDTH - 89, 20));
            durationLabel.Font = A.Font_AvenirNextRegular12;
            durationLabel.TextColor = A.Color_NachoBlack;
            durationLabel.TextAlignment = UITextAlignment.Left;
            durationLabel.Text = start.ToString ("dd");
            if (!isAllDay) {
                if (start.DayOfYear == end.DayOfYear) {
                    durationLabel.Text = "from " + Pretty.FullTimeString (start) + " until " + Pretty.FullTimeString (end);
                } else {
                    durationLabel.Text = "from " + Pretty.FullTimeString (start) + " until " + Pretty.FullDateTimeString (end);
                }
            } else {
                if (start.DayOfYear == end.DayOfYear) {
                    durationLabel.Text = "all day event";
                } else {
                    durationLabel.Text = "from " + Pretty.FullDateString (start) + " until " + Pretty.FullDateString (end);
                }
            }
            durationLabel.SizeToFit ();

            UILabel locationLabel = new UILabel (new RectangleF (74, 65, SCREEN_WIDTH - 89, 20));
            locationLabel.Font = A.Font_AvenirNextRegular12;
            locationLabel.TextColor = A.Color_NachoBlack;
            locationLabel.TextAlignment = UITextAlignment.Left;
            locationLabel.Text = location;
            locationLabel.SizeToFit ();

            calendarEventView.Add (monthLabel);
            calendarEventView.Add (dateImage);
            calendarEventView.Add (dateLabel);
            calendarEventView.Add (titleLabel);
            calendarEventView.Add (durationLabel);
            calendarEventView.Add (locationLabel);

            MakeResponseBar (UID, calendarEventView);

            Util.AddHorizontalLine (0, 20, SCREEN_WIDTH, A.Color_NachoSeparator, calendarEventView);
            Util.AddHorizontalLine (0, 86, SCREEN_WIDTH, A.Color_NachoSeparator, calendarEventView);
            Util.AddHorizontalLine (0, 140, SCREEN_WIDTH, A.Color_NachoSeparator, calendarEventView);
            Util.AddVerticalLine (65, 20, 66, A.Color_NachoSeparator, calendarEventView);

            parentView.AddSubview (calendarEventView);
        }

        UILabel eventDoesNotExistLabel;

        UIButton acceptButton;
        UIButton tentativeButton;
        UIButton declineButton;

        UILabel acceptLabel;
        UILabel tentativeLabel;
        UILabel declineLabel;

        UILabel messageLabel;
        UIButton changeResponseButton;

        public void MakeResponseBar (string UID, UIView parentView)
        {
            UIView responseView = new UIView (new RectangleF (0, 86, SCREEN_WIDTH, 54));
            responseView.BackgroundColor = UIColor.Clear;

            eventDoesNotExistLabel = new UILabel (new RectangleF (25, 15, SCREEN_WIDTH, 24));
            eventDoesNotExistLabel.TextColor = A.Color_NachoBlack;
            eventDoesNotExistLabel.TextAlignment = UITextAlignment.Left;
            eventDoesNotExistLabel.Text = "This event has either been cancelled or removed";
            eventDoesNotExistLabel.Font = A.Font_AvenirNextRegular12;
            eventDoesNotExistLabel.Hidden = true;
            responseView.Add (eventDoesNotExistLabel);

            acceptButton = new UIButton (UIButtonType.RoundedRect);
            tentativeButton = new UIButton (UIButtonType.RoundedRect);
            declineButton = new UIButton (UIButtonType.RoundedRect);

            //acceptButton
            using (var acceptButtonImage = UIImage.FromBundle ("btn-mtng-accept")) {
                acceptButton.SetImage (acceptButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
            }
            using (var acceptPressedButtonImage = UIImage.FromBundle ("btn-mtng-accept-pressed")) {
                acceptButton.SetImage (acceptPressedButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Selected);
            }
            acceptButton.SetTitle ("", UIControlState.Normal);
            acceptButton.Frame = new RectangleF (25, 10, 24, 24);
            acceptButton.TintColor = UIColor.Clear;

            //tentativeButton
            using (var tentativeButtonImage = UIImage.FromBundle ("btn-mtng-tenative")) {
                tentativeButton.SetImage (tentativeButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
            }
            using (var tentativePressedButtonImage = UIImage.FromBundle ("btn-mtng-tenative-pressed")) {
                tentativeButton.SetImage (tentativePressedButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Selected);
            }
            tentativeButton.SetTitle ("", UIControlState.Normal);
            tentativeButton.Frame = new RectangleF ((SCREEN_WIDTH / 2) - 12, 10, 24, 24);
            tentativeButton.TintColor = UIColor.Clear;

            //declineButton
            using (var declineButtonImage = UIImage.FromBundle ("btn-mtng-decline")) {
                declineButton.SetImage (declineButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);

            }
            using (var declinePressedButtonImage = UIImage.FromBundle ("btn-mtng-decline-pressed")) {
                declineButton.SetImage (declinePressedButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Selected);
            }
            declineButton.SetTitle ("", UIControlState.Normal);
            declineButton.Frame = new RectangleF (SCREEN_WIDTH - 24 - 25, 10, 24, 24);
            declineButton.TintColor = UIColor.Clear;

            responseView.Add (acceptButton);
            responseView.Add (tentativeButton);
            responseView.Add (declineButton);

            acceptLabel = new UILabel (new RectangleF (15, 36, 44, 10));
            acceptLabel.TextColor = A.Color_NachoBlack;
            acceptLabel.TextAlignment = UITextAlignment.Center;
            acceptLabel.Font = A.Font_AvenirNextRegular10;
            acceptLabel.Text = "Accept";
            responseView.Add (acceptLabel);

            tentativeLabel = new UILabel (new RectangleF ((SCREEN_WIDTH / 2) - 22, 36, 44, 10));
            tentativeLabel.TextColor = A.Color_NachoBlack;
            tentativeLabel.TextAlignment = UITextAlignment.Center;
            tentativeLabel.Font = A.Font_AvenirNextRegular10;
            tentativeLabel.Text = "Tentative";
            responseView.Add (tentativeLabel);

            declineLabel = new UILabel (new RectangleF (SCREEN_WIDTH - 24 - 35, 36, 44, 10));
            declineLabel.TextColor = A.Color_NachoBlack;
            declineLabel.TextAlignment = UITextAlignment.Center;
            declineLabel.Font = A.Font_AvenirNextRegular10;
            declineLabel.Text = "Decline";
            responseView.Add (declineLabel);

            messageLabel = new UILabel (new RectangleF (25 + 24 + 10, 15, 100, 24));
            messageLabel.TextColor = A.Color_NachoBlack;
            messageLabel.TextAlignment = UITextAlignment.Left;
            messageLabel.Font = A.Font_AvenirNextRegular12;
            messageLabel.Hidden = true;
            responseView.Add (messageLabel);

            changeResponseButton = new UIButton (UIButtonType.RoundedRect);

            changeResponseButton.SetTitle ("Change response", UIControlState.Normal);
            changeResponseButton.Font = A.Font_AvenirNextRegular12;
            changeResponseButton.SizeToFit ();
            changeResponseButton.Frame = new RectangleF (SCREEN_WIDTH - changeResponseButton.Frame.Width - 25, 16, changeResponseButton.Frame.Width, 24);
            changeResponseButton.SetTitleColor (A.Color_NachoBlue, UIControlState.Normal);
            changeResponseButton.Hidden = true;
            changeResponseButton.TouchUpInside += (object sender, EventArgs e) => {
                RestoreButtons ();
            };
            responseView.Add (changeResponseButton);

            McCalendar calendarItem;
            if (null != McCalendar.QueryByUID (UID)) {
                calendarItem = McCalendar.QueryByUID (UID);

                acceptButton.TouchUpInside += (object sender, EventArgs e) => {
                    ToggleButtons (NcResponseType.Accepted);
                    acceptButton.Selected = true;
                    UpdateMeetingStatus (calendarItem, NcResponseType.Accepted);
                };

                tentativeButton.TouchUpInside += (object sender, EventArgs e) => {
                    ToggleButtons (NcResponseType.Tentative);
                    tentativeButton.Selected = true;
                    UpdateMeetingStatus (calendarItem, NcResponseType.Tentative);
                };

                declineButton.TouchUpInside += (object sender, EventArgs e) => {
                    ToggleButtons (NcResponseType.Declined);
                    declineButton.Selected = true;
                    UpdateMeetingStatus (calendarItem, NcResponseType.Declined);
                };
            } else {
                eventDoesNotExistLabel.Hidden = false;
                acceptButton.Hidden = true;
                acceptLabel.Hidden = true;
                tentativeButton.Hidden = true;
                tentativeLabel.Hidden = true;
                declineButton.Hidden = true;
                declineLabel.Hidden = true;
            }

            parentView.Add (responseView);
        }

        protected void ToggleButtons (NcResponseType r)
        {
            if (NcResponseType.Accepted == r) {
                acceptButton.Selected = true;
                tentativeButton.Selected = false;
                declineButton.Selected = false;
                messageLabel.Text = "You are going";
                messageLabel.Hidden = false;
                messageLabel.Alpha = 0;
                changeResponseButton.Hidden = false;
                changeResponseButton.Alpha = 0;

                UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        acceptLabel.Alpha = 0;
                        tentativeButton.Alpha = 0;
                        declineButton.Alpha = 0;
                        tentativeLabel.Alpha = 0;
                        declineLabel.Alpha = 0;
                        messageLabel.Alpha = 1;
                        changeResponseButton.Alpha = 1;

                        acceptButton.Frame = new RectangleF (25, 15, 24, 24);
                    },
                    () => {
                        acceptLabel.Hidden = true;
                        tentativeButton.Hidden = true;
                        declineButton.Hidden = true;
                        tentativeLabel.Hidden = true;
                        declineLabel.Hidden = true;
                        acceptButton.UserInteractionEnabled = false;
                    }
                );
            } else if (NcResponseType.Tentative == r) {
                acceptButton.Selected = false;
                tentativeButton.Selected = true;
                declineButton.Selected = false;
                messageLabel.Text = "Tentative";
                messageLabel.Hidden = false;
                messageLabel.Alpha = 0;
                changeResponseButton.Hidden = false;
                changeResponseButton.Alpha = 0;

                UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        acceptLabel.Alpha = 0;
                        acceptButton.Alpha = 0;
                        declineButton.Alpha = 0;
                        tentativeLabel.Alpha = 0;
                        declineLabel.Alpha = 0;
                        messageLabel.Alpha = 1;
                        changeResponseButton.Alpha = 1;

                        tentativeButton.Frame = new RectangleF (25, 15, 24, 24);
                    },
                    () => {
                        acceptLabel.Hidden = true;
                        acceptButton.Hidden = true;
                        declineButton.Hidden = true;
                        tentativeLabel.Hidden = true;
                        declineLabel.Hidden = true;
                        tentativeButton.UserInteractionEnabled = false;
                    }
                );
            } else {
                acceptButton.Selected = false;
                tentativeButton.Selected = false;
                declineButton.Selected = true;
                messageLabel.Text = "You are not going";
                messageLabel.Hidden = false;
                messageLabel.Alpha = 0;
                changeResponseButton.Hidden = false;
                changeResponseButton.Alpha = 0;

                UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        acceptLabel.Alpha = 0;
                        acceptButton.Alpha = 0;
                        tentativeButton.Alpha = 0;
                        tentativeLabel.Alpha = 0;
                        declineLabel.Alpha = 0;
                        messageLabel.Alpha = 1;
                        changeResponseButton.Alpha = 1;

                        declineButton.Frame = new RectangleF (25, 15, 24, 24);
                    },
                    () => {
                        acceptLabel.Hidden = true;
                        acceptButton.Hidden = true;
                        tentativeButton.Hidden = true;
                        tentativeLabel.Hidden = true;
                        declineLabel.Hidden = true;
                        declineButton.UserInteractionEnabled = false;

                    }
                );
            }
        }

        protected void RestoreButtons ()
        {
            acceptButton.Selected = false;
            tentativeButton.Selected = false;
            declineButton.Selected = false;
            acceptButton.Hidden = false;
            acceptLabel.Hidden = false;
            tentativeButton.Hidden = false;
            declineButton.Hidden = false;
            tentativeLabel.Hidden = false;
            declineLabel.Hidden = false;
            acceptButton.UserInteractionEnabled = true;
            tentativeButton.UserInteractionEnabled = true;
            declineButton.UserInteractionEnabled = true;

            UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                () => {

                    acceptButton.Alpha = 1;
                    tentativeButton.Alpha = 1;
                    declineButton.Alpha = 1;
                    acceptLabel.Alpha = 1;
                    tentativeLabel.Alpha = 1;
                    declineLabel.Alpha = 1;

                    messageLabel.Alpha = 0;
                    changeResponseButton.Alpha = 0;

                    acceptButton.Frame = new RectangleF (25, 10, 24, 24);
                    tentativeButton.Frame = new RectangleF ((SCREEN_WIDTH / 2) - 12, 10, 24, 24);
                    declineButton.Frame = new RectangleF (SCREEN_WIDTH - 24 - 25, 10, 24, 24);
                },
                () => {
                    messageLabel.Hidden = true;
                    changeResponseButton.Hidden = true;
                }
            );
        }

        /// <summary>
        /// Map meeting uid to calendar record.
        /// </summary>
        void UpdateMeetingStatus (McCalendar c, NcResponseType status)
        {
            BackEnd.Instance.RespondCalCmd (account.Id, c.Id, status);
        }

        protected void onAttachmentSelected (UITapGestureRecognizer obj)
        {
            var attachmentView = obj.View;
            var attachment = attachments [attachmentView.Tag];

            if (attachment.IsDownloaded) {
                PlatformHelpers.DisplayAttachment (this, attachment);
            } else {
                PlatformHelpers.DownloadAttachment (attachment);
            }
        }

        protected void onAttachmentIconSelected (UITapGestureRecognizer obj)
        {
            scrollView.ScrollRectToVisible (attachmentListView.Frame, true);
        }

        protected void DeferLayoutIncrement ()
        {
            lock (deferLayoutLock) {
                deferLayout += 1;
            }
        }

        protected int DeferLayoutDecrement ()
        {
            lock (deferLayoutLock) {
                deferLayout -= 1;
                return deferLayout;
            }
        }

        protected void StartSpinner ()
        {
            var spinner = View.ViewWithTag (SPINNER_TAG) as UIActivityIndicatorView;
            spinner.StartAnimating ();
        }

        protected void StopSpinner ()
        {
            var spinner = View.ViewWithTag (SPINNER_TAG) as UIActivityIndicatorView;
            spinner.StopAnimating ();
        }


        // IUcAddressBlockDelegate
        public void AddressBlockNeedsLayout (UcAddressBlock view)
        {
            view.Layout ();
        }

        public void AddressBlockWillBecomeActive (UcAddressBlock view)
        {
        }

        public void AddressBlockWillBecomeInactive (UcAddressBlock view)
        {
        }

        public void AddressBlockAddContactClicked(UcAddressBlock view, string prefix)
        {
        }
    }
}
