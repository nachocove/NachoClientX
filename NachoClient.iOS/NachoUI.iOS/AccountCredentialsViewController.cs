// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;

using Foundation;
using UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using System.Linq;

namespace NachoClient.iOS
{
    public partial class AccountCredentialsViewController : NcUIViewControllerNoLeaks, INachoCredentials
    {

        bool shortScreen;
        bool largeScreen;

        UIImageView circleMail;
        UILabel startLabel;
        UIView emailBox;
        UIView passwordBox;
        UITextField emailField;
        UITextField passwordField;
        UIButton submitButton;
        UIButton advancedButton;
        UIButton supportButton;
        UIButton startOverButton;
        UIView contentView;
        UIScrollView scrollView;

        UIImageView loginTriangles;

        const int EMAIL_TEXTFIELD_TAG = 101;
        const int PASSWORD_TEXTFIELD_TAG = 102;

        INachoCredentialsDelegate owner;
        McAccount.AccountServiceEnum service;

        bool credReqCallback;
        string emailInitializer;
        string passwordInitializer;

        public AccountCredentialsViewController (IntPtr handle) : base (handle)
        {
        }

        public void Setup (INachoCredentialsDelegate owner, McAccount.AccountServiceEnum service, bool credReqCallback, string email, string password)
        {
            this.owner = owner;
            this.service = service;
            this.credReqCallback = credReqCallback;
            this.emailInitializer = email;
            this.passwordInitializer = password;
        }

        public override void ViewWillAppear (bool animated)
        {
            Log.Info (Log.LOG_UI, "avl: AccountCredentialsViewController ViewWillAppear {0}", NavigationController);
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                this.NavigationController.SetNavigationBarHidden (true, true);
            }
        }

        public override void ViewWillDisappear (bool animated)
        {
            Log.Info (Log.LOG_UI, "avl: AccountCredentialsViewController ViewWillDisappear {0}", NavigationController);
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                this.NavigationController.SetNavigationBarHidden (false, true);
            }
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        protected override void CreateViewHierarchy ()
        {
            View.BackgroundColor = A.Color_NachoGreen;

            contentView = new UIView (View.Frame);
            contentView.BackgroundColor = A.Color_NachoGreen;

            scrollView = new UIScrollView (View.Frame);
            scrollView.Bounces = true;
            scrollView.BackgroundColor = A.Color_NachoGreen;
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;
            scrollView.AddSubview (contentView);
            View.AddSubview (scrollView);

            shortScreen = (500 > View.Frame.Height);
            largeScreen = (600 < View.Frame.Height);

            nfloat yOffset = (shortScreen ? 50 : 90);

            circleMail = new UIImageView ();
            using (var circleImage = UIImage.FromBundle (Util.GetImage ("Bootscreen-1"))) {
                circleMail.Image = circleImage;
            }
            var circleMailSize = (largeScreen ? 95 : 80);

            circleMail.Frame = new CGRect (View.Frame.Width / 2 - (circleMailSize / 2), yOffset, circleMailSize, circleMailSize);
            contentView.AddSubview (circleMail);

            yOffset += circleMailSize + 20;

            startLabel = new UILabel (new CGRect (30, yOffset, View.Frame.Width - 60, 50));
            startLabel.BackgroundColor = A.Color_NachoGreen;
            startLabel.TextColor = UIColor.White;
            startLabel.Font = A.Font_AvenirNextRegular17;
            startLabel.TextAlignment = UITextAlignment.Center;
            startLabel.Alpha = 1;
            contentView.AddSubview (startLabel);

            if (credReqCallback) {
                startLabel.Lines = 2;
                startLabel.Text = "There seems to be a problem with your credentials.";
                startLabel.SizeToFit ();
            } else {
                startLabel.Lines = 1;
                startLabel.Text = "Enter your account information";
            }

            yOffset = startLabel.Frame.Bottom + 20;

            emailBox = new UIView (new CGRect (25, yOffset, View.Frame.Width - 50, 46));
            emailBox.BackgroundColor = UIColor.White;

            emailBox.Alpha = 1;

            emailField = new UITextField (new CGRect (45, 0, emailBox.Frame.Width - 50, emailBox.Frame.Height));
            emailField.BackgroundColor = UIColor.White;
            emailField.Placeholder = "Email Address";
            emailField.Font = A.Font_AvenirNextRegular17;
            emailField.BorderStyle = UITextBorderStyle.None;
            emailField.TextAlignment = UITextAlignment.Left;
            emailField.KeyboardType = UIKeyboardType.EmailAddress;
            emailField.AutocapitalizationType = UITextAutocapitalizationType.None;
            emailField.AutocorrectionType = UITextAutocorrectionType.No;
            emailField.Tag = EMAIL_TEXTFIELD_TAG;
            emailField.ShouldReturn += TextFieldShouldReturn;
            emailField.EditingDidEnd += TextFieldEditingEnded;
            emailField.AccessibilityLabel = "Email Address";
            emailBox.AddSubview (emailField);

            UIImageView mailImage = new UIImageView ();
            using (var loginImageTwo = UIImage.FromBundle ("Loginscreen-2")) {
                mailImage.Image = loginImageTwo;
            }
            mailImage.Frame = new CGRect (15, 15, 16, 11);
            emailBox.AddSubview (mailImage);

            contentView.AddSubview (emailBox);

            yOffset = emailBox.Frame.Bottom + 4f;

            passwordBox = new UIView (new CGRect (25, yOffset, View.Frame.Width - 50, 46));
            passwordBox.BackgroundColor = UIColor.White;
            passwordBox.Alpha = 1;

            passwordField = new UITextField (new CGRect (45, 0, passwordBox.Frame.Width - 50, passwordBox.Frame.Height));
            passwordField.BackgroundColor = UIColor.White;
            passwordField.Placeholder = "Password";
            passwordField.Font = A.Font_AvenirNextRegular17;
            passwordField.BorderStyle = UITextBorderStyle.None;
            passwordField.TextAlignment = UITextAlignment.Left;
            passwordField.SecureTextEntry = true;
            passwordField.KeyboardType = UIKeyboardType.Default;
            passwordField.AutocapitalizationType = UITextAutocapitalizationType.None;
            passwordField.AutocorrectionType = UITextAutocorrectionType.No;
            passwordField.Tag = PASSWORD_TEXTFIELD_TAG;
            passwordField.ShouldReturn += TextFieldShouldReturn;
            passwordField.EditingDidEnd += TextFieldEditingEnded;
            passwordField.AccessibilityLabel = "Password";
            passwordBox.AddSubview (passwordField);
            passwordBox.UserInteractionEnabled = true;

            UIImageView lockImage = new UIImageView ();
            using (var loginImageThree = UIImage.FromBundle ("Loginscreen-3")) {
                lockImage.Image = loginImageThree;
            }
            lockImage.Frame = new CGRect (15, 15, 14, 15);
            passwordBox.AddSubview (lockImage);

            contentView.AddSubview (passwordBox);

            yOffset = passwordBox.Frame.Bottom + 20f;

            submitButton = Util.BlueButton ("Submit", View.Frame.Width);
            ViewFramer.Create (submitButton).Y (yOffset);
            submitButton.TouchUpInside += SubmitButtonTouchUpInside;
            contentView.AddSubview (submitButton);

            yOffset = submitButton.Frame.Bottom + 20f;

            advancedButton = new UIButton (new CGRect (0, yOffset, View.Frame.Width, 20));
            advancedButton.BackgroundColor = A.Color_NachoGreen;
            advancedButton.SetTitle ("Advanced Sign In", UIControlState.Normal);
            advancedButton.TitleLabel.TextColor = A.Color_NachoYellow;
            advancedButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            advancedButton.AccessibilityLabel = "Advanced Sign In";
            advancedButton.TouchUpInside += AdvancedLoginTouchUpInside;

            if ((McAccount.AccountServiceEnum.IMAP_SMTP == service) || (McAccount.AccountServiceEnum.Exchange == service)) {
                contentView.AddSubview (advancedButton);
                yOffset = advancedButton.Frame.Bottom + 20;
            }

            supportButton = new UIButton (new CGRect (0, yOffset, View.Frame.Width, 20));
            supportButton.BackgroundColor = A.Color_NachoGreen;
            supportButton.SetTitle ("Customer Support", UIControlState.Normal);
            supportButton.TitleLabel.TextColor = A.Color_NachoYellow;
            supportButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            supportButton.AccessibilityLabel = "Customer Support";
            contentView.AddSubview (supportButton);
            supportButton.TouchUpInside += SupportButtonTouchUpInside;

            yOffset = supportButton.Frame.Bottom + 20;

            startOverButton = new UIButton (new CGRect (0, yOffset, View.Frame.Width, 20));
            startOverButton.BackgroundColor = A.Color_NachoGreen;
            startOverButton.SetTitle ("Start Over", UIControlState.Normal);
            startOverButton.TitleLabel.TextColor = A.Color_NachoYellow;
            startOverButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            startOverButton.AccessibilityLabel = "Start Over";
            contentView.AddSubview (startOverButton);
            startOverButton.TouchUpInside += StartOverButton_TouchUpInside;

            yOffset = startOverButton.Frame.Bottom + 20;


            // bottom padding
            yOffset += 20;

            ViewFramer.Create (contentView).Height (yOffset);
            scrollView.ContentSize = contentView.Frame.Size;

            // Anchor loginTriangles on the bottom
            loginTriangles = new UIImageView ();
            using (var bootImage = UIImage.FromBundle (Util.GetImage ("Bootscreen-5"))) {
                loginTriangles.Image = bootImage;
            }
            loginTriangles.Frame = new CGRect (0, View.Frame.Height - loginTriangles.Image.Size.Height, loginTriangles.Image.Size.Width, loginTriangles.Image.Size.Height);
            View.AddSubview (loginTriangles);
        }

        protected override void ConfigureAndLayout ()
        {
            Log.Info (Log.LOG_UI, "LaunchViewController: starting fresh");
            emailField.Text = emailInitializer;
            passwordField.Text = passwordInitializer;
            ConfigureAndLayoutInternal ();
        }

        public override void ViewDidLayoutSubviews ()
        {
            base.ViewDidLayoutSubviews ();
            ConfigureAndLayoutInternal ();
        }

        /// <summary>
        /// Hides the Advances & Customer Support buttons when the service table is visible
        /// </summary>
        protected void ConfigureAndLayoutInternal ()
        {
            var contentSize = contentView.Frame.Size;
            scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            ViewFramer.Create (contentView).Size (contentSize);
            scrollView.ContentSize = contentSize;
        }

        private void MaybeStartLogin ()
        {
            if (string.IsNullOrEmpty (passwordField.Text)) {
                Complain ("Nacho Mail", "Password is empty. Please enter a password.");
                return;
            }
            var emailAddress = emailField.Text.Trim ();

            string serviceName;
            if (EmailHelper.IsServiceUnsupported (emailAddress, out serviceName)) {
                if (EmailHelper.IsHotmailService (service)) {
                    Complain ("Nacho Mail", "Please use your Hotmail or Outlook email address instead.");
                } else {
                    var nuance = String.Format ("Nacho Mail does not support {0} yet.", serviceName);
                    Complain ("Nacho Mail", nuance);
                }
                return;
            }

            if (!emailAddress.Contains ("@")) {
                Complain ("Nacho Mail", "Your email address must contain an '@'.\nFor example, username@company.com");
                return;
            }

            if (!EmailHelper.IsValidEmail (emailField.Text)) {
                Complain ("Nacho Mail", "Your email address is not valid.\nFor example, username@company.com");
                return;
            }

            if (!credReqCallback) {
                if (null != McAccount.QueryByEmailAddr (emailField.Text).FirstOrDefault ()) {
                    Complain ("Nacho Mail", "An account with that email address already exists. Duplicate accounts are not supported.");
                    return;
                }
            }

            if (!NachoCore.Utils.Network_Helpers.HasNetworkConnection ()) {
                Complain ("Nacho Mail", "No network connection. Please check that you have internet access.");
                return;
            }

            if (EmailHelper.IsHotmailServiceAddress (emailAddress)) {
                if (!EmailHelper.IsHotmailService (service)) {
                    ConfirmBeforeStarting ("Confirm Email", "Your email address does not match the selected service.\nUse it anyway?");
                    return;
                }
            } else {
                if (EmailHelper.IsHotmailService (service)) {
                    ConfirmBeforeStarting ("Confirm Email", "Your email address does not match the selected service.\nUse your Hotmail or Outlook email address?");
                    return;
                }
            }

            StartLoginProcess ();
        }

        private void Complain (string title, string message)
        {
            Log.Info (Log.LOG_UI, "LaunchViewController: Complain {0}", message);
            NcAlertView.ShowMessage (this, title, message);
        }

        /// <summary>
        /// Confirms something the before starting the login process
        /// </summary>
        private void ConfirmBeforeStarting (string title, string message)
        {
            Log.Info (Log.LOG_UI, "LaunchViewController: Confirm {0}", message);
            NcAlertView.Show (this, title, message,
                new NcAlertAction ("OK", () => {
                    StartLoginProcess ();
                }),
                new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
        }

        private void StartLoginProcess ()
        {
            View.EndEditing (true);
            if (null != owner) {
                owner.CredentialsDismissed (this, false, emailField.Text.Trim (), passwordField.Text, credReqCallback, false);
            }
            PerformSegue ("UnwindFromAccountCredentials", this);
        }

        public void maybeEnableConnect ()
        {
            var shouldWe = ((0 < emailField.Text.Length) && (0 < passwordField.Text.Length));
            submitButton.Enabled = shouldWe;
            submitButton.Alpha = (shouldWe ? 1.0f : 0.5f);
        }

        protected override void OnKeyboardChanged ()
        {
            ConfigureAndLayoutInternal ();
            scrollView.ScrollRectToVisible (new CGRect (submitButton.Frame.X, submitButton.Frame.Y + 10, submitButton.Frame.Width, submitButton.Frame.Height), false);
        }

        public bool TextFieldShouldReturn (UITextField whatField)
        {
            switch (whatField.Tag) {
            case EMAIL_TEXTFIELD_TAG:
                passwordField.BecomeFirstResponder ();
                break;
            case PASSWORD_TEXTFIELD_TAG:
                View.EndEditing (true);
                break;
            }
            return true;
        }

        public void TextFieldEditingEnded (object obj, EventArgs args)
        {
            // This is not needed except for triggering UI monitoring
        }

        protected void SubmitButtonTouchUpInside (object sender, EventArgs e)
        {
            MaybeStartLogin ();
        }

        protected void AdvancedLoginTouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);
            if (null != owner) {
                owner.CredentialsDismissed (this, true, emailField.Text.Trim (), passwordField.Text, credReqCallback, false);
            }
            PerformSegue ("UnwindFromAccountCredentials", this);
        }

        void StartOverButton_TouchUpInside (object sender, EventArgs e)
        {
            View.EndEditing (true);
            if (null != owner) {
                owner.CredentialsDismissed (this, false, emailField.Text.Trim (), passwordField.Text, credReqCallback, true);
            }
            PerformSegue ("UnwindFromAccountCredentials", this);
        }


        protected void SupportButtonTouchUpInside (object sender, EventArgs e)
        {
            PerformSegue ("SegueToSupport", this);
        }

        protected override void Cleanup ()
        {
            submitButton.TouchUpInside -= SubmitButtonTouchUpInside;
            advancedButton.TouchUpInside -= AdvancedLoginTouchUpInside;
            supportButton.TouchUpInside -= SupportButtonTouchUpInside;
            startOverButton.TouchUpInside -= StartOverButton_TouchUpInside;

            submitButton = null;
            advancedButton = null;
            supportButton = null;
            startOverButton = null;

            emailField.ShouldReturn -= TextFieldShouldReturn;
            emailField.EditingDidEnd -= TextFieldEditingEnded;
            passwordField.ShouldReturn -= TextFieldShouldReturn;
            passwordField.EditingDidEnd -= TextFieldEditingEnded;

            emailField = null;
            passwordField = null;
        }

        [Action ("UnwindAccountCredentialsViewController:")]
        public void UnwindAccountCredentialsViewController (UIStoryboardSegue segue)
        {
        }
           
    }
}
