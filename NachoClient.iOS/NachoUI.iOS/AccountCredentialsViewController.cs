// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;

using Foundation;
using UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using System.Linq;

namespace NachoClient.iOS
{
    public interface AccountCredentialsViewControllerDelegate
    {
        void AccountCredentialsViewControllerDidValidateAccount (AccountCredentialsViewController vc, McAccount account);
    }

    public partial class AccountCredentialsViewController : NcUIViewControllerNoLeaks, INachoCertificateResponderParent
    {

        public AccountCredentialsViewControllerDelegate AccountDelegate;
        public McAccount.AccountServiceEnum Service;
        public McAccount Account;
        private bool StatusIndCallbackIsSet;
       

        public AccountCredentialsViewController (IntPtr handle) : base (handle)
        {
            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";
        }

        void StartListeningForApplicationStatus ()
        {
            if (!StatusIndCallbackIsSet) {
                StatusIndCallbackIsSet = true;
                NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            }
        }

        void StopListeningForApplicationStatus ()
        {
            if (StatusIndCallbackIsSet) {
                NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
                StatusIndCallbackIsSet = false;
            }
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            if (Account != null) {
                Service = Account.AccountService;
                emailField.Text = Account.EmailAddr;
            }
            accountIconView.Layer.CornerRadius = accountIconView.Frame.Size.Width / 2.0f;
            var imageName = Util.GetAccountServiceImageName (Service);
            using (var image = UIImage.FromBundle (imageName)) {
                accountIconView.Image = image;
            }
            statusLabel.Text = String.Format("Please provide your {0} information", NcServiceHelper.AccountServiceName (Service));
            submitButton.Layer.CornerRadius = 6.0f;
            UpdateSubmitEnabled ();
            advancedButton.Hidden = Service != McAccount.AccountServiceEnum.Exchange;
            using (var icon = UIImage.FromBundle("Loginscreen-2")){
                emailField.LeftViewMode = UITextFieldViewMode.Always;
                emailField.AdjustedEditingInsets = new UIEdgeInsets (0, 45, 0, 15);
                emailField.AdjustedLeftViewRect = new CGRect(15, 15, 16, 11);
                emailField.LeftView = new UIImageView(icon);
            }
            using (var icon = UIImage.FromBundle("Loginscreen-3")){
                passwordField.AdjustedEditingInsets = new UIEdgeInsets (0, 45, 0, 15);
                passwordField.LeftViewMode = UITextFieldViewMode.Always;
                passwordField.AdjustedLeftViewRect = new CGRect(15, 15, 14, 15);
                passwordField.LeftView = new UIImageView(icon);
            }
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (IsMovingFromParentViewController) {
                if (Account != null) {
                    NcAccountHandler.Instance.RemoveAccount (Account.Id);
                }
            }
        }

        partial void Submit (NSObject sender)
        {
            var email = emailField.Text.Trim ();
            var password = passwordField.Text;
            var issue = IssueWithCredentials(email, password);
            if (issue == null){
                View.EndEditing(false);
                statusLabel.Text = "Verifying your information...";
                UpdateForSubmitting(true);
                StartListeningForApplicationStatus();
                if (Account == null){
                    Account = NcAccountHandler.Instance.CreateAccount (Service, email, password);
                    NcAccountHandler.Instance.MaybeCreateServersForIMAP (Account, Service);
                    BackEnd.Instance.Start (Account.Id);
                }else{
                    var cred = McCred.QueryByAccountId<McCred> (Account.Id).Single ();
                    cred.UpdatePassword (password);
                    cred.Username = email;
                    cred.Update ();
                    BackEnd.Instance.CredResp (Account.Id);
                }
            }else{
                NcAlertView.ShowMessage (this, "Nacho Mail", issue);
            }
        }

        String IssueWithCredentials (String email, String password)
        {
            if (!EmailHelper.IsValidEmail (email)) {
                return "Your email address is not valid.\nFor example, username@company.com";
            }
            String serviceName = null;
            if (NcServiceHelper.IsServiceUnsupported (email, out serviceName)) {
                return String.Format ("Please use your {0} email address instead.", NcServiceHelper.AccountServiceName (Service));
            }
            if (!NcServiceHelper.DoesAddressMatchService (email, Service)) {
                return String.Format ("The email address does not match the service. Please use your {0} email address instead.", NcServiceHelper.AccountServiceName (Service));
            }
            if (LoginHelpers.ConfiguredAccountExists (email)) {
                return "An account with that email address already exists. Duplicate accounts are not supported.";
            }
            if (!NachoCore.Utils.Network_Helpers.HasNetworkConnection ()) {
                return "No network connection. Please check that you have internet access.";
            }
            return null;
        }

        partial void Support (NSObject sender)
        {
            var storyboard = UIStoryboard.FromName("MainStoryboard_iPhone", null);
            var vc = (SupportViewController)storyboard.InstantiateViewController("SupportViewController");
            vc.HideNavTitle = false;
            NavigationController.PushViewController(vc, true);
        }

        partial void Advanced (NSObject sender)
        {
        }

        partial void TextFieldChanged (NSObject sender)
        {
            UpdateSubmitEnabled();
        }

        void UpdateForSubmitting (bool isSubmitting)
        {
            if (isSubmitting) {
                activityIndicatorView.Hidden = false;
                accountIconView.Hidden = true;
                activityIndicatorView.StartAnimating ();
                emailField.Enabled = false;
                passwordField.Enabled = false;
                submitButton.Enabled = false;
                submitButton.Alpha = 0.5f;
                supportButton.Hidden = true;
                advancedButton.Hidden = true;
            } else {
                activityIndicatorView.StopAnimating ();
                activityIndicatorView.Hidden = true;
                accountIconView.Hidden = false;
                emailField.Enabled = true;
                passwordField.Enabled = true;
                supportButton.Hidden = false;
                advancedButton.Hidden = false;
                UpdateSubmitEnabled ();
            }
        }

        void ShowCredentialsError (String statusText)
        {
            UpdateForSubmitting (false);
            statusLabel.Text = statusText;
        }

        void UpdateSubmitEnabled ()
        {
            if (emailField.Text.Length > 0 && passwordField.Text.Length > 0) {
                submitButton.Alpha = 1.0f;
                submitButton.Enabled = true;
            }else{
                submitButton.Alpha = 0.5f;
                submitButton.Enabled = false;
            }
        }
            
        protected override void OnKeyboardChanged ()
        {
            scrollView.ContentInset = new UIEdgeInsets (0, 0, keyboardHeight, 0);
            if (keyboardHeight > 0) {
                if (scrollView.Frame.Height - keyboardHeight < submitButton.Frame.Bottom) {
                    scrollView.SetContentOffset (new CGPoint (0, statusLabel.Frame.Top - 18), false);
                }
            }
        }

        private void StatusIndicatorCallback (object sender, EventArgs e)
        {
            if (!StatusIndCallbackIsSet) {
                Log.Info (Log.LOG_UI, "AccountCredentialsViewController ignoring status callback because listening has been disabled");
                return;
            }
            var s = (StatusIndEventArgs)e;
            if (s.Account != null && s.Account.Id == Account.Id) {

//                if (!NachoCore.Utils.Network_Helpers.HasNetworkConnection ()) {
//                    loginProtocolControl.sm.PostEvent ((uint)LoginProtocolControl.Events.E.NoNetwork, "avl: EventFromEnum no network");
//                }

                var senderState = BackEnd.Instance.BackEndState (Account.Id, McAccount.AccountCapabilityEnum.EmailSender);
                var readerState = BackEnd.Instance.BackEndState (Account.Id, McAccount.AccountCapabilityEnum.EmailReaderWriter);

                Log.Info (Log.LOG_UI, "AccountCredentialsViewController senderState {0}, readerState {1}", senderState, readerState);

                if ((BackEndStateEnum.ServerConfWait == senderState) || (BackEndStateEnum.ServerConfWait == readerState)) {
                    StopListeningForApplicationStatus ();
                    if (Service == McAccount.AccountServiceEnum.GoogleExchange || Service == McAccount.AccountServiceEnum.Office365Exchange) {
                        Log.Info (Log.LOG_UI, "AccountCredentialsViewController got ServerConfWait for known exchange service {0}, not showing advanced", Service);
                        ShowCredentialsError ("We were unable to verify your information.  Please confirm it is correct and try again");
                    } else {
                        Log.Info (Log.LOG_UI, "AccountCredentialsViewController got ServerConfWait for service {0}, showing advanced", Service);
                        UpdateForSubmitting (false);
                        // show advanced
                    }
                } else if ((BackEndStateEnum.CredWait == senderState) || (BackEndStateEnum.CredWait == readerState)) {
                    Log.Info (Log.LOG_UI, "AccountCredentialsViewController got CredWait for service {0}", Service);
                    StopListeningForApplicationStatus ();
                    ShowCredentialsError ("Invalid username or password.  Please adjust and try again.");
                } else if ((BackEndStateEnum.CertAskWait == senderState) || (BackEndStateEnum.CertAskWait == readerState)) {
                    if (NcApplication.Instance.CertAskReqPreApproved (Account.Id, McAccount.AccountCapabilityEnum.EmailSender)) {
                        Log.Info (Log.LOG_UI, "AccountCredentialsViewController got CertAskWait for service {0}, but cert is pre approved, so continuting on", Service);
                        NcApplication.Instance.CertAskResp (Account.Id, McAccount.AccountCapabilityEnum.EmailSender, true);
                    } else {
                        Log.Info (Log.LOG_UI, "AccountCredentialsViewController got CertAskWait for service {0}, user must approve", Service);
                        UpdateForSubmitting (false);
                        PerformSegue ("cert-ask", null);
                    }
                } else if ((BackEndStateEnum.PostAutoDPreInboxSync == senderState) && (BackEndStateEnum.PostAutoDPreInboxSync == readerState)) {
                    Log.Info (Log.LOG_UI, "AccountCredentialsViewController PostAutoDPreInboxSync for reader and writer");
                    StopListeningForApplicationStatus ();
                    AccountDelegate.AccountCredentialsViewControllerDidValidateAccount (this, Account);
                }
            }
        }

        // INachoCertificateResponderParent
        public void DontAcceptCertificate (int accountId)
        {
            StopListeningForApplicationStatus ();
            NcApplication.Instance.CertAskResp (accountId, McAccount.AccountCapabilityEnum.EmailSender, false);
            LoginHelpers.UserInterventionStateChanged (accountId);
            DismissViewController (true, null);
            statusLabel.Text = "Account not created because the certificate was not accepted";
        }

        // INachoCertificateResponderParent
        public void AcceptCertificate (int accountId)
        {
            NcApplication.Instance.CertAskResp (accountId, McAccount.AccountCapabilityEnum.EmailSender, true);
            LoginHelpers.UserInterventionStateChanged (accountId);
            DismissViewController (true, null);
        }


        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "cert-ask") {
                var vc = (CertAskViewController)segue.DestinationViewController;
                vc.Setup (Account, McAccount.AccountCapabilityEnum.EmailSender);
                vc.CertificateDelegate = this;
            }
        }

        protected override void CreateViewHierarchy ()
        {
        }

        protected override void ConfigureAndLayout ()
        {
        }

        protected override void Cleanup ()
        {
        }
           
    }
}
