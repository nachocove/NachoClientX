// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore.Brain;
using MonoTouch.CoreAnimation;
using System.Drawing;

namespace NachoClient.iOS
{
    public partial class MessagePriorityViewController : BlurryViewController, INachoMessageEditor
    {
        public McEmailMessageThread thread;
        protected INachoMessageEditorParent owner;

        enum DatePickerActionType
        {
            None,
            Defer,
            Deadline,
        };

        DatePickerActionType datePickerAction = DatePickerActionType.None;

        public MessagePriorityViewController (IntPtr handle) : base (handle)
        {
        }

        public void SetOwner (INachoMessageEditorParent o)
        {
            owner = o;
        }

        public void DismissMessageEditor (bool animated, NSAction action)
        {
            owner = null;
            DismissViewController (animated, action);
        }

        public override void ViewDidLoad ()
        {
            INachoMessageEditorParent own = owner;
            base.ViewDidLoad ();
            owner = own;

            float frameHeight = 420;
            float frameWidth = 280;

            PriorityView priorityView = new PriorityView (new RectangleF (20, 70, frameWidth, frameHeight));
            priorityView.MakeButtonLabels ();
            priorityView.Layer.CornerRadius = 15.0f;
            priorityView.ClipsToBounds = true;
            priorityView.BackgroundColor = UIColor.White;
            priorityView.AddEscapeButton ();
            UIButton escapeButton = priorityView.AddEscapeButton ();
            priorityView.AddDeferMessageLabel ();
            var buttonsList = priorityView.MakeActionButtons ();

            for (int i = 0; i < 9; i++) {
                switch (i) {

                case 0:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        CreateMeeting ();
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("navbar-icn-newevent"), UIControlState.Normal);
                    break;
                case 1:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        //Clicked On Nacho
                        //TODO
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("inbox-icn-chilli"), UIControlState.Normal);
                    break;
                case 2:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        //TODO
                        //Cole's going to work on custom datepicker
                        CreateDeadline ();
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("inbox-icn-deadline@2x"), UIControlState.Normal);
                    break;
                case 3:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        DelayRequest (MessageDeferralType.Later);
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("navbar-icn-defer"), UIControlState.Normal);
                    break;
                case 4:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        DelayRequest (MessageDeferralType.Tonight);
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("navbar-icn-defer"), UIControlState.Normal);
                    break;
                case 5:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        DelayRequest (MessageDeferralType.Tomorrow);
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("navbar-icn-defer"), UIControlState.Normal);
                    break;
                case 6:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        DelayRequest (MessageDeferralType.NextWeek);
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("navbar-icn-defer"), UIControlState.Normal);
                    break;
                case 7:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        DelayRequest (MessageDeferralType.NextMonth);
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("navbar-icn-defer"), UIControlState.Normal);
                    break;
                case 8:
                    buttonsList [i].TouchUpInside += (object sender, EventArgs e) => {
                        //TODO
                        //Cole's going to work on custom datepicker
                        DelayRequest (MessageDeferralType.Custom);
                    };
                    buttonsList [i].SetImage (UIImage.FromBundle ("navbar-icn-defer"), UIControlState.Normal);
                    break;
                default:
                    break;
                }
            }

            escapeButton.TouchUpInside += (object sender, EventArgs e) => {
                DismissViewController (true, null);
            };

            View.AddSubview (priorityView);
        }

        /// Touch anywhere else, and we'll close this view
        public override void TouchesBegan (NSSet touches, UIEvent evt)
        {
            owner.DismissChildMessageEditor (this);
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            var blurry = segue.DestinationViewController as BlurryViewController;
            if (null != blurry) {
                blurry.CaptureView (this.View);
            }

            if (segue.Identifier == "MessagePriorityToDatePicker") {
                var vc = (DatePickerViewController)segue.DestinationViewController;
                vc.owner = this;
            }
        }
        // TODO: Do we need to worry about local vs. utc time?
        public void DismissDatePicker (DatePickerViewController vc, DateTime chosenDateTime)
        {
            if (DateTime.UtcNow > chosenDateTime) {
                // TODO -- Confirm that the user wants to go back in time.
                return;
            } 
            switch (datePickerAction) {
            case DatePickerActionType.Defer:
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.Custom, chosenDateTime);
                break;
            case DatePickerActionType.Deadline:
                NcMessageDeferral.SetDueDate (thread, chosenDateTime);
                break;
            }
            vc.owner = null;
            vc.DismissViewController (false, new NSAction (delegate {
                owner.DismissChildMessageEditor (this);
            }));
        }

        void DelayRequest (MessageDeferralType request)
        {
            DateTime now = DateTime.Now;

            switch (request) {
            case MessageDeferralType.Later:
            case MessageDeferralType.Tonight:
            case MessageDeferralType.Tomorrow:
            case MessageDeferralType.NextWeek:
            case MessageDeferralType.MonthEnd:
            case MessageDeferralType.NextMonth:
            case MessageDeferralType.Forever:
                NcMessageDeferral.DeferThread (thread, request);
                owner.DismissChildMessageEditor (this);
                return;
            case MessageDeferralType.Custom:
                datePickerAction = DatePickerActionType.Defer;
                PerformSegue ("MessagePriorityToDatePicker", this);
                break;
            case MessageDeferralType.None:
            default:
                NcAssert.CaseError ();
                return;
            }
        }

        void CreateMeeting ()
        {
            owner.CreateMeetingEmailForMessage (this, thread);
        }

        void CreateTask ()
        {
            owner.CreateTaskForEmailMessage (this, thread);
        }

        void CreateDeadline ()
        {
            datePickerAction = DatePickerActionType.Deadline;
            PerformSegue ("MessagePriorityToDatePicker", this);
        }
    }
}
