// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore.Brain;
using MonoTouch.CoreAnimation;
using System.Drawing;

namespace NachoClient.iOS
{
    public partial class MessagePriorityViewController : BlurryViewController, INachoMessageEditor, INcDatePickerDelegate
    {
        public McEmailMessageThread thread;
        protected INachoMessageEditorParent owner;


        public enum DatePickerActionType
        {
            None,
            Defer,
            Deadline,
        };

        DatePickerActionType datePickerAction = DatePickerActionType.None;

        public MessagePriorityViewController (IntPtr handle) : base (handle)
        {
        }

        public void SetOwner (INachoMessageEditorParent o)
        {
            owner = o;
        }

        public void DismissMessageEditor (bool animated, NSAction action)
        {
            owner = null;
            DismissViewController (animated, action);
        }

        public override void ViewDidLoad ()
        {
            INachoMessageEditorParent own = owner;
            base.ViewDidLoad ();
            owner = own;

            float frameHeight = 420; //view size isn't relative to screen size (it's fixed)
            float frameWidth = View.Frame.Width - 40;   //20 px indent l/r sides
            float windowX = (View.Frame.Width - frameWidth) / 2;
            float windowY = (View.Frame.Height - frameHeight) / 2;

            PriorityView priorityView = new PriorityView (new RectangleF (windowX, windowY, frameWidth, frameHeight));
            priorityView.Layer.CornerRadius = 15.0f;
            priorityView.ClipsToBounds = true;
            priorityView.BackgroundColor = UIColor.White;

            priorityView.InitButtonManager (this);

            View.AddSubview (priorityView);
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            var blurry = segue.DestinationViewController as BlurryViewController;
            if (null != blurry) {
                blurry.CaptureView (this.View);
            }

            if (segue.Identifier == "MessagePriorityToDatePicker") {
                var vc = (DatePickerViewController)segue.DestinationViewController;
                vc.owner = this;
            }
        }
        // TODO: Do we need to worry about local vs. utc time?
        public void DismissDatePicker (DatePickerViewController vc, DateTime chosenDateTime)
        {
            if (DateTime.UtcNow > chosenDateTime) {
                // TODO -- Confirm that the user wants to go back in time.
                return;
            } 
            switch (datePickerAction) {
            case DatePickerActionType.Defer:
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.Custom, chosenDateTime);
                break;
            case DatePickerActionType.Deadline:
                NcMessageDeferral.SetDueDate (thread, chosenDateTime);
                break;
            }
            vc.owner = null;
            vc.DismissViewController (false, new NSAction (delegate {
                owner.DismissChildMessageEditor (this);
            }));
        }

        public void DelayRequest (string request)
        {
            DateTime now = DateTime.Now;

            switch (request) {
            case "Later":
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.Later);
                owner.DismissChildMessageEditor (this);
                return;
            case "Tonight":
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.Tonight);
                owner.DismissChildMessageEditor (this);
                return;
            case "Tomorrow":
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.Tomorrow);
                owner.DismissChildMessageEditor (this);
                return;
            case "NextWeek":
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.NextWeek);
                owner.DismissChildMessageEditor (this);
                return;
            case "MonthEnd":
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.MonthEnd);
                owner.DismissChildMessageEditor (this);
                return;
            case "NextMonth":
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.NextMonth);
                owner.DismissChildMessageEditor (this);
                return;
            case "Forever":
                NcMessageDeferral.DeferThread (thread, MessageDeferralType.Forever);
                owner.DismissChildMessageEditor (this);
                return;
            case "Custom":
                datePickerAction = DatePickerActionType.Defer;
                PerformSegue ("MessagePriorityToDatePicker", this);
                break;
            case "None":
                NcMessageDeferral.UndeferThread (thread);
                owner.DismissChildMessageEditor (this);
                return;
            default:
                NcAssert.CaseError ();
                return;
            }
        }

        public void CreateMeeting ()
        {
            owner.CreateMeetingEmailForMessage (this, thread);
        }

        public void AddChili ()
        {
            var message = thread.SingleMessageSpecialCase ();
            message.UserAction = 1;
            message.Update ();
            owner.DismissChildMessageEditor (this);
        }

        public void CreateDeadline ()
        {
            datePickerAction = DatePickerActionType.Deadline;
            PerformSegue ("MessagePriorityToDatePicker", this);
        }
    }
}
