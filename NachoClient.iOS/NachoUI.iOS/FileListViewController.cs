// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class FileListViewController : UITableViewController, INachoFileChooser
    {
        INachoFileChooserParent owner;

        public FileListViewController (IntPtr handle) : base (handle)
        {
        }

        /// <summary>
        /// INachoFileChooser delegate
        /// </summary>
        public void SetOwner (INachoFileChooserParent owner)
        {
            this.owner = owner;
        }

        /// <summary>
        /// INachoFileChooser delegate
        /// </summary>
        public void DismissFileChooser (bool animated, NSAction action)
        {
            owner = null;
            NavigationController.PopViewControllerAnimated (true);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // Multiple buttons on the right side
            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { editButton };

            // Multiple buttons on the left side
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };
            using (var nachoImage = UIImage.FromBundle ("Nacho-Cove-Icon")) {
                nachoButton.Image = nachoImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal);
            }
            nachoButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("FilesToNachoNow", this);
            };
            // Watch for changes from the back end
            NcApplication.Instance.StatusIndEvent += (object sender, EventArgs e) => {
                var s = (StatusIndEventArgs)e;
                if (NcResult.SubKindEnum.Info_FileSetChanged == s.Status.SubKind) {
                    RefreshFileList ();
                }
            };
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            RefreshFileList ();
        }

        protected void RefreshFileList ()
        {
            this.TableView.DataSource = new FileTableSource ();
            this.TableView.ReloadData ();
        }

        public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {

            var dataSource = TableView.DataSource as FileTableSource;
            var file = dataSource.GetFile (indexPath.Row);

            if (null == owner) {
                PlatformHelpers.DisplayFile (this, file);
                return;
            }

            // We're in "chooser' mode & the attachment is downloaded
            var actionSheet = new UIActionSheet ("Attachment Selection");
            actionSheet.Add ("Cancel");
            actionSheet.Add ("Preview");
            actionSheet.Add ("Select Attachment");
            actionSheet.CancelButtonIndex = 0;

            actionSheet.Clicked += delegate(object sender, UIButtonEventArgs b) {
                switch (b.ButtonIndex) {
                case 0:
                    break; // Cancel
                case 1:
                    PlatformHelpers.DisplayFile (this, file);
                    break;
                case 2:
                    owner.SelectFile (this, file);
                    break;
                default:
                    NachoAssert.CaseError ();
                    break;
                }
            };

            actionSheet.ShowInView (this.View);
        }
    }
}
