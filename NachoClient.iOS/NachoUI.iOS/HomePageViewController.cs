// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using MonoTouch.CoreGraphics;
using MonoTouch.CoreAnimation;

using NachoCore.Utils;

// Animation guide http://developer.xamarin.com/guides/cross-platform/application_fundamentals/touch/part_1_touch_in_ios/

namespace NachoClient.iOS
{
    public partial class HomePageController : NcUIViewController
    {
        //loads the HomePageController.xib file and connects it to this object
        public HomeViewController owner;

        // container for iPhone screen-in-screen 
        // doing these as internal globals
        private UIView pageContainerView; // full screen
        private UIView contentContainer; // the phone-image content
        private UIView helperContainer; // the helpful text container
        private UILabel helperTitleText; // text Title
        private UILabel helperBodyText; // text body
        private UIImageView msg1View;
        private UIImageView pullimageView; // animation - page3
        private UIImageView calimageView;  // animation - page3

        private bool retinaDisplay = (UIScreen.MainScreen.Scale > 1.0); // if so, then we are on a retinadisplay
        private int scaleIt; 

        public HomePageController (int pageIndex) : base ("HomePageController", null)
        {
            this.PageIndex = pageIndex;
            owner = null;
        }

        public int PageIndex {
            get;
            private set;
        }

        // Helper Text Strings
        const string TitleOne = "Your Messages";
        const string TitleTwo = "Navigating Your Hot List";
        const string TitleThree= "Time Line View";
        const string TitleFour = "Just One Last Thing ...";

        const string BodyOne = "Your hot messages go in your hot list" + "\n" + "All other messages will be in your inbox";
        const string BodyTwo = "Quickly browse through your hot list" + "\n" + "by swiping left and right";
        const string BodyThree = "This contains your upcoming meetings" + "\n" + "and events";
        const string BodyFour = "Sliding right or left elsewhere will get you" + "\n" + "shortcusts and options for the items";

        // Background

        const string bgscreen = "Content/Slide1-BG@2x.png"; // background screen
        const string contentscreen = "Content/Slide1-3@2x.png"; // phone-face image
        const string calendarpull = "Content/Slide1-2@2x.png"; // calendar pull down
        const string msg1loc = "Content/Slide1-1A@2x.png"; // Meagan message
        const string msg2loc = "Content/Slide1-1B@2x.png"; // next message
        const string inboxloc = "Content/Slide1-4@2x.png"; // inbox msg at bottom of screen
       
        //const string TutPageOne = "Content/Tutorial-Page1.png";
        const string TutPageOne = "Content/01_img_only.png";
        const string TutPageTwo = "Content/02_img_only.png";
        const string TutPageThree = "Content/02_img_only.png";
        const string TutPageFour = "Content/02_img_only.png";

        string[] titleText = {
            TitleOne,
            TitleTwo,
            TitleThree,
            TitleFour,
        };
        string[] bodyText = {
            BodyOne,
            BodyTwo,
            BodyThree,
            BodyFour,
        };

        string[] Tutorial = {
            TutPageOne,
            TutPageTwo,
            TutPageThree,
            TutPageFour,
        };

        public override void ViewDidLoad ()
        {
            // This builds the UIPVC datasource image. This source is then displayed
            // inside the UIPVC with gesture controls and other cool shit from that class
            // Known issue :: If I Hide the UINavControllerbar we have no way home (see homeViewcontroll..cs)
           
            string fileName = Tutorial [this.PageIndex];
            scaleIt = retinaDisplay ? 2 : 1; // retina display test, not used right now
           
            // set up the container frame sizes. Note all containers are referenced globally within this object
            // so as to allow animations to access the elements as needed

            this.pageContainerView = new UIView (new RectangleF(0,0, this.owner.View.Bounds.Width, this.owner.View.Bounds.Height-48));
            this.contentContainer = new UIView (new RectangleF (54 , 60, 212, 306)); // see size of helpercontainer
            this.helperContainer = new UIView (new RectangleF(0,this.contentContainer.Frame.Bottom, pageContainerView.Frame.Width, pageContainerView.Frame.Bottom- this.contentContainer.Frame.Bottom));// contains the helpertext and labels  
            this.helperTitleText = new UILabel (new RectangleF(0,10, helperContainer.Frame.Width, 20));
            this.helperBodyText = new UILabel (new RectangleF( 0, helperTitleText.Frame.Bottom, helperContainer.Frame.Width,40));




            base.ViewDidLoad ();

            // build the pages based on index

            switch (this.PageIndex) {
            case 0:
                CreatePage1 ();
                break;
            case 1:
                CreatePage2 ();
                break;
            case 2:
                CreatePage3 ();
                break;
            case 3:
                CreatePage4 ();
                break;
            }

            this.View.AddSubview (pageContainerView);
            CreateCovers ();

            Log.Info (Log.LOG_UI, "Book page #{0} loaded!", this.PageIndex + 1);
            Log.Info (Log.LOG_UI, "{0}", this.View.Frame.ToString ());
        }

        public override void ViewWillAppear (bool animated)
        {
            Log.Info (Log.LOG_UI, "HPVC - View_Will_Appear");
            // need to know why animate toolTip not called on first appearance??

            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            if (this.owner == null) {
                NcAssert.True (false, "Tutorial Page has no owner");
            } else {
                this.owner.pageDots.CurrentPage = this.PageIndex; // update containerView.PageDots
            }

            switch (this.PageIndex) {
            case 0:
                AnimateRedToolTip ();
                AnimateGreenToolTip ();
                break;
            case 1:
                this.msg1View.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2 + 10);
                AnimateHotlistItemLeft ();
                break;
            case 2:
                this.calimageView.Frame = new RectangleF (0, 0, contentContainer.Frame.Width, 46);
                this.pullimageView.Frame = new RectangleF (0, calimageView.Frame.Bottom, contentContainer.Frame.Width, 7);
                AnimateTimelineDown ();
                break;
            case 3:
                AnimateEmailCellLeft ();

                //AnimateEmailCellRight ();
                break;
            }
        }

        void CreateHelperText(){
            helperContainer.BackgroundColor = UIColor.White;

            helperTitleText.BackgroundColor = UIColor.White; // debug

            helperBodyText.BackgroundColor = UIColor.White; // debug
            helperBodyText.Lines = 2;
            helperTitleText.TextColor = A.Color_11464F;
            helperBodyText.TextColor = A.Color_9B9B9B;


            helperTitleText.Text = titleText [this.PageIndex];
            helperBodyText.Text = bodyText[this.PageIndex];
            helperBodyText.Font = A.Font_AvenirNextRegular14;
            helperTitleText.Font = A.Font_AvenirNextDemiBold17;
            helperBodyText.TextAlignment = UITextAlignment.Center;
            helperTitleText.TextAlignment = UITextAlignment.Center;

            helperContainer.Add (helperTitleText);
            helperContainer.Add (helperBodyText);
        }

       
        private void CreatePage1()
        {
            // build up the page for index 1

            CreateHelperText ();

            UIImageView bgImage = new UIImageView (UIImage.FromBundle (bgscreen));
            bgImage.Frame = new RectangleF (0,0, pageContainerView.Frame.Width, pageContainerView.Frame.Height - helperContainer.Frame.Height);

            UIImageView screenImage = new UIImageView (UIImage.FromBundle (contentscreen));

            screenImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));
            UIImageView pullimageView = new UIImageView(UIImage.FromBundle (calendarpull));
            msg1View = new UIImageView (UIImage.FromBundle (msg1loc));
            msg1View.Frame = new RectangleF (10, 60, 192, 207);
            UIImageView inboximageView = new UIImageView (UIImage.FromBundle (inboxloc));
            inboximageView.Frame = new RectangleF (10, msg1View.Frame.Bottom + 20, 192, 20);

            //pullimageView.Frame = (new RectangleF (0, 0, contentContainer.Frame.Width, 46));
            pullimageView.Center = new PointF (contentContainer.Frame.Width / 2,  23);// is centerpoint relative to local view?
            msg1View.Center = new PointF (contentContainer.Frame.Width / 2 , contentContainer.Frame.Height / 2 +10);
            inboximageView.Center = new PointF (contentContainer.Frame.Width / 2, contentContainer.Frame.Height - 10);


            contentContainer.AddSubview(screenImage);
            //contentContainer.AddSubview (pullimageView);
            contentContainer.AddSubview (msg1View);
            contentContainer.AddSubview (inboximageView);


            pageContainerView.AddSubview (bgImage);
            pageContainerView.AddSubview(contentContainer);
            pageContainerView.AddSubview (helperContainer);

        }



        private void CreatePage2()
        {

            CreateHelperText ();

            UIImageView bgImage = new UIImageView (UIImage.FromBundle (bgscreen));
            bgImage.Frame = new RectangleF (0,0, pageContainerView.Frame.Width, pageContainerView.Frame.Height - helperContainer.Frame.Height);

            UIImageView screenImage = new UIImageView (UIImage.FromBundle (contentscreen));

            screenImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));
            UIImageView pullimageView = new UIImageView(UIImage.FromBundle (calendarpull));
            msg1View = new UIImageView (UIImage.FromBundle (msg1loc));
            UIImageView inboximageView = new UIImageView (UIImage.FromBundle (inboxloc));
            msg1View.Frame = new RectangleF (10, 60, 192, 207);
            inboximageView.Frame = new RectangleF (10, msg1View.Frame.Bottom + 20, 192, 20);
            pullimageView.Center = new PointF (contentContainer.Frame.Width / 2,  23);// is centerpoint relative to local view?
            msg1View.Center = new PointF (contentContainer.Frame.Width / 2 , contentContainer.Frame.Height / 2 +10);
            inboximageView.Center = new PointF (contentContainer.Frame.Width / 2, contentContainer.Frame.Height - 10);


            contentContainer.AddSubview(screenImage);
            contentContainer.AddSubview (msg1View);
            contentContainer.AddSubview (inboximageView);


            pageContainerView.AddSubview (bgImage);
            pageContainerView.AddSubview(contentContainer);
            pageContainerView.AddSubview (helperContainer);
        }

        private void CreatePage3()
        {

            CreateHelperText ();

            UIImageView bgImage = new UIImageView (UIImage.FromBundle (bgscreen));
            bgImage.Frame = new RectangleF (0,0, pageContainerView.Frame.Width, pageContainerView.Frame.Height - helperContainer.Frame.Height);

            UIImageView screenImage = new UIImageView (UIImage.FromBundle ("Content/Slide3-2@2x.png"));
            pullimageView = new UIImageView (UIImage.FromBundle ("Content/Slide3-1B@2x.png"));


            screenImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));
            calimageView = new UIImageView(UIImage.FromBundle ("Content/Slide3-1A@2x.png"));
            calimageView.Frame = new RectangleF (0, 0, contentContainer.Frame.Width, 46);
            pullimageView.Frame = new RectangleF (0, calimageView.Frame.Bottom, contentContainer.Frame.Width, 7);

            contentContainer.AddSubview(screenImage);
            contentContainer.AddSubview (calimageView);
            contentContainer.AddSubview (pullimageView);

            pageContainerView.AddSubview (bgImage);
            pageContainerView.AddSubview(contentContainer);
            pageContainerView.AddSubview (helperContainer);
        }

        private void CreatePage4()
        {
           
            CreateHelperText ();

            UIImageView bgImage = new UIImageView (UIImage.FromBundle (bgscreen));
            bgImage.Frame = new RectangleF (0,0, pageContainerView.Frame.Width, pageContainerView.Frame.Height - helperContainer.Frame.Height);

            UIImageView screenImage = new UIImageView (UIImage.FromBundle ("Content/Slide4-1@2x.png"));
            screenImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));
            contentContainer.AddSubview(screenImage);
           

            pageContainerView.AddSubview (bgImage);
            pageContainerView.AddSubview(contentContainer);
            pageContainerView.AddSubview (helperContainer);
        }


        private void CreateCovers ()
        {
            UIView topCoverRect = new UIView (new RectangleF (0, 0, this.View.Bounds.Width, this.contentContainer.Frame.Y));
            UIView leftCoverRect = new UIView (new RectangleF (0, this.contentContainer.Frame.Y, this.contentContainer.Frame.X, this.contentContainer.Bounds.Height));
            UIView rightCoverRect = new UIView (new RectangleF (this.contentContainer.Bounds.Right + this.contentContainer.Frame.X, leftCoverRect.Frame.Y, leftCoverRect.Bounds.Width, this.contentContainer.Bounds.Height ));

            topCoverRect.BackgroundColor = A.Color_NachoGreen;
            leftCoverRect.BackgroundColor = A.Color_NachoGreen;
            rightCoverRect.BackgroundColor = A.Color_NachoGreen;

            leftCoverRect.Layer.ZPosition = 100;
            rightCoverRect.Layer.ZPosition = 100;
            topCoverRect.Layer.ZPosition = 100;

            this.View.AddSubview (topCoverRect);
            this.View.AddSubview (leftCoverRect);
            this.View.AddSubview (rightCoverRect);
        }

        private UIImageView CreateRedButton ()
        {
            UIImageView redButton = new UIImageView (UIImage.FromBundle ("Content/red_pointer.png"));
            redButton.Center = new PointF (this.msg1View.Frame.Width / 2, this.msg1View.Frame.Height / 3);
            redButton.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            return redButton;
        }

        private UIImageView CreateRedTooltip ()
        {
            UIImageView redTooltip = new UIImageView (UIImage.FromBundle ("Content/red_balloon.png"));
            redTooltip.Center = new PointF (this.msg1View.Frame.Width / 2, this.msg1View.Frame.Height / 3 + 35);
            redTooltip.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            return redTooltip;
        }

        private UIImageView CreateGreenButton ()
        {
            UIImageView greenButton = new UIImageView (UIImage.FromBundle ("Content/teal_pointer.png"));
            greenButton.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height * 5 / 6);
            greenButton.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            return greenButton;
        }

        private UIImageView CreateGreenTooltip ()
        {
            UIImageView greenTooltip = new UIImageView (UIImage.FromBundle ("Content/teal_balloon.png"));
            greenTooltip.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height * 5 / 6 - 35);
            greenTooltip.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);

           
            return greenTooltip;
        }

        private void AnimateRedToolTip ()
        {
            AnimateTooltip (CreateRedButton (), CreateRedTooltip ());
        }

        private void AnimateGreenToolTip ()
        {
            AnimateTooltip (CreateGreenButton (), CreateGreenTooltip ());
        }

        private void AnimateTooltip (UIImageView button, UIImageView tooltip)
        {
            Action<UIImageView> animateSprite = (sprite) => {
                UIView.Animate (
                    duration: 0.7,
                    delay: 1.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        sprite.Layer.Transform = CATransform3D.MakeScale (1.0f, 1.0f, 1.0f);
                    },
                    completion: () => {
                    }
                );
            };

            SetSpriteCallbacks (button, animateSprite);
            SetSpriteCallbacks (tooltip, animateSprite);
        }

        private UIImageView CreateHotlistOne ()
        {
            // slide left
            // make image be "2 images with center on "containerView.width boundary". This
            // will allow animation to "slide it out, but feel like the actual app is running.
            UIImageView msg1 = new UIImageView (UIImage.FromBundle("Content/Slide1-1A.png"));
           // UIImageView hotlist = new UIImageView (UIImage.FromBundle ("Content/Slide1-1B.png"));
            msg1.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2 +10);
            //hotlist.Frame = new RectangleF (0, 0, 192, 207);
            //hotlist.Center = new PointF (this.pageContainerView.Frame.Width/2, this.contentContainer.Frame.Height / 2);
            return msg1;
        }

        private UIImageView CreateHotlistTwo ()
        {
            // slide left
            // make image be "2 images with center on "containerView.width boundary". This
            // will allow animation to "slide it out, but feel like the actual app is running.
            //UIImageView msg1 = new UIImageView (UIImage.FromBundle("Content/Slide1-1A.png"));
            UIImageView hotlist = new UIImageView (UIImage.FromBundle ("Content/Slide1-1B.png"));
            //msg1.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2);
            //hotlist.Frame = new RectangleF (0, 0, 192, 207);
            hotlist.Center = new PointF (this.pageContainerView.Frame.Width, this.contentContainer.Frame.Height / 2 +10);
            return hotlist;
        }

        private void AnimateHotlistItemLeft ()
        {
            // One of two options here. We could have two images, each one animating at same time to
            // show new "card" coming in. Other option would be to have a "wide" image that is hidden under
            //the right cover and slides out. in this way the animation would be smooth, and could 
            // even snap back.

            Action<UIImageView> animateSprite = (sprite) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 2.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the hotlist item all the way off the bottom of the screen
                        sprite.Center = new PointF (sprite.Center.X - this.contentContainer.Frame.Width, this.contentContainer.Frame.Height/2 +10 );
                        //sprite.Center = new PointF (this.contentContainer.Frame.Width / 2 , this.contentContainer.Frame.Height/2 + sprite.Frame.Height);

                    },
                    completion: () => {
                    }// need to work on clean up so there are no artifacts here
                    /*completion: () => {
                        sprite.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                sprite.RemoveFromSuperview ();
                            }
                        };
                    }*/
                );
            };
            
            var hotlistOne = this.msg1View;
            //CreateHotlistOne ();
            var hotlistTwo = CreateHotlistTwo ();

            SetSpriteCallbacks (hotlistOne, animateSprite);
            SetSpriteCallbacks (hotlistTwo, animateSprite);
        }

        private UIImageView CreateTimelineSprite ()
        {
            var timelineSize = new RectangleF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2, this.contentContainer.Frame.Width, this.contentContainer.Frame.Height);
            UIImageView timeline = new UIImageView (UIImage.FromBundle ("Content/Slide3-3@2x.png"));

            //timeline.Frame = new RectangleF (0, 0, contentContainer.Frame.Width, contentContainer.Frame.Height);
           timeline.Frame = timelineSize;
            // timeline starts at top of screen
            timeline.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Top - this.pageContainerView.Frame.Height/2);
            return timeline;
        }
            
        public void AnimateTimelineDown ()
        {


            Action<UIImageView> animateSprite = (timeline) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 2.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the hotlist item all the way off the bottom of the screen
                        timeline.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2);
                    },
                    completion: () => {

                    }
                );
            };
            Action<UIImageView> animatepull = (pull) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 2.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the hotlist item all the way off the bottom of the screen
                        pull.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height+10);
                    },
                    completion: () => {

                    }
                );
            };
            var timelineSprite = CreateTimelineSprite ();
            SetSpriteCallbacks (timelineSprite, animateSprite);
            SetSpriteCallbacks (calimageView, animatepull);
            SetSpriteCallbacks (pullimageView, animatepull);
        }
        private UIImageView CreateRightCell ()
        {
            // same approach as above. SAnimate one cell, but behind scenes have three cells lined up.
            // the animation wil look smooth, but only one vie is sliding..
            //var emailSize = new RectangleF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2, this.contentContainer.Frame.Width, 55);
            UIImageView rightCell = new UIImageView (UIImage.FromBundle ("Content/Slide4-2B.png"));
            rightCell.Frame = new RectangleF (this.contentContainer.Frame.Width, 77, this.contentContainer.Frame.Width, 93);
            return rightCell;
        }
        private UIImageView CreateLeftCell ()
        {
            // same approach as above. SAnimate one cell, but behind scenes have three cells lined up.
            // the animation wil look smooth, but only one vie is sliding..
            //var emailSize = new RectangleF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2, this.contentContainer.Frame.Width, 55);
            UIImageView leftCell = new UIImageView (UIImage.FromBundle ("Content/Slide4-2A.png"));
            leftCell.Frame = new RectangleF (0-this.contentContainer.Frame.Width, 77, this.contentContainer.Frame.Width, 93);
           return leftCell;
        }
        private UIImageView CreateEmailCell ()
        {
            // same approach as above. SAnimate one cell, but behind scenes have three cells lined up.
            // the animation wil look smooth, but only one vie is sliding..
            //var emailSize = new RectangleF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2, this.contentContainer.Frame.Width, 55);
            UIImageView emailCell = new UIImageView (UIImage.FromBundle ("Content/Slide4-3.png"));
            emailCell.Frame = new RectangleF (0, 77, this.contentContainer.Frame.Width, 93);
            //emailCell.Center = new PointF (this.contentContainer.Center.X, 104);
           
            //emailCell.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2);
            return emailCell;
        }

        public void AnimateEmailCellRight ()
        {
            Action<UIImageView> animateSprite = (emailCell) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 3.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the  item all the way to the right side of the screen
                        emailCell.Center = new PointF (emailCell.Center.X + emailCell.Frame.Width, emailCell.Center.Y);
                    },
                    completion: () => {
                        emailCell.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                emailCell.RemoveFromSuperview ();
                            }
                        };
                    }
                );
            };
            Action<UIImageView> animateLeftSprite = (leftCell) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 3.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the  item all the way off theleft side of the screen
                        leftCell.Center = new PointF (leftCell.Center.X + leftCell.Frame.Width, leftCell.Center.Y);
                    },
                    completion: () => {
                        leftCell.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                leftCell.RemoveFromSuperview ();
                            }
                        };
                    }
                );
            };
            Action<UIImageView> animateRightSprite = (rightCell) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 3.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the  item all the way off theleft side of the screen
                        rightCell.Center = new PointF (rightCell.Center.X + rightCell.Frame.Width, rightCell.Center.Y);
                    },
                    completion: () => {
                        rightCell.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                rightCell.RemoveFromSuperview ();
                            }
                        };
                    }
                );
            };
            var emailCellSprite = CreateEmailCell ();
            SetSpriteCallbacks (emailCellSprite, animateSprite);

            var leftCellSprite = CreateLeftCell ();
            SetSpriteCallbacks (leftCellSprite, animateLeftSprite);

            var rightCellSprite = CreateRightCell ();
            SetSpriteCallbacks (rightCellSprite, animateRightSprite);
        }
   


        public void AnimateEmailCellLeft ()
        {
            Action<UIImageView> animateSprite = (emailCell) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 2.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the  item all the way off theleft side of the screen
                        emailCell.Center = new PointF (emailCell.Center.X - emailCell.Frame.Width, emailCell.Center.Y);
                    },
                    completion: () => {
                        emailCell.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                emailCell.RemoveFromSuperview ();
                            }
                           
                        };
                    }
                );
            };
            /*Action<UIImageView> animateemailRightSprite = (emailCell) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 4.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the  item all the way off theleft side of the screen
                        emailCell.Center = new PointF (emailCell.Center.X + emailCell.Frame.Width, emailCell.Center.Y);
                    },
                    completion: () => {
                        emailCell.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                emailCell.RemoveFromSuperview ();
                            }

                        };
                    }
                );
            };*/
            Action<UIImageView> animateLeftSprite = (leftCell) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 2.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the  item all the way off theleft side of the screen
                        leftCell.Center = new PointF (leftCell.Center.X- leftCell.Frame.Width, leftCell.Center.Y);
                    },
                    completion: () => {
                        leftCell.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                leftCell.RemoveFromSuperview ();
                            }
                        };
                    }
                );
            };
            Action<UIImageView> animateRightSprite = (rightCell) => {
                UIView.Animate (
                    duration: 1.0,
                    delay: 2.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the  item all the way off theleft side of the screen
                        rightCell.Center = new PointF (rightCell.Center.X- rightCell.Frame.Width, rightCell.Center.Y);
                    },
                    completion: () => {
                        rightCell.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                rightCell.RemoveFromSuperview ();
                            }
                        };
                    }
                );
            };
            var emailCellSprite = CreateEmailCell ();
            SetSpriteCallbacks (emailCellSprite, animateSprite);
            //SetSpriteCallbacks (emailCellSprite, animateemailRightSprite);

            //var leftCellSprite = CreateLeftCell ();
            //SetSpriteCallbacks (leftCellSprite, animateLeftSprite);

            var rightCellSprite = CreateRightCell ();
            SetSpriteCallbacks (rightCellSprite, animateRightSprite);
        }

        // remove the animated sprite once you complete the movement to the next page
        private EventHandler<UIPageViewFinishedAnimationEventArgs> DidNavigateAwayFromPage (UIImageView sprite)
        {
            return (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                if (this.PageIndex == previousPageView.PageIndex && e.Completed) {
                    // we are moving away from this view
                    sprite.RemoveFromSuperview ();
                }
            };
        }

        // Moving to another page and back should reset sprite
        // Moving the page just slightly, but back to original should not reset sprite
        private void SetSpriteCallbacks (UIImageView sprite, Action<UIImageView> animateSprite)
        {
            EventHandler<UIPageViewFinishedAnimationEventArgs> moveToPage = null;
            moveToPage = (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                var previousPageView = (HomePageController)e.PreviousViewControllers[0];
                if (this.PageIndex != previousPageView.PageIndex) {
                    this.contentContainer.AddSubview (sprite);
                    animateSprite (sprite);
                    this.owner.pageController.DidFinishAnimating -= moveToPage;
                    this.owner.pageController.DidFinishAnimating += DidNavigateAwayFromPage (sprite);
                }
            };

            this.owner.pageController.DidFinishAnimating += moveToPage;
        }

        // Utilities for resizing images.  May not use

        // resize the image to be contained within a maximum width and height, keeping aspect ratio
        // from StackOverflow
        private UIImage MaxResizeImage(UIImage sourceImage, float maxWidth, float maxHeight)
        {
            var sourceSize = sourceImage.Size;
            var maxResizeFactor = Math.Max(maxWidth / sourceSize.Width, maxHeight / sourceSize.Height);
            if (maxResizeFactor > 1) return sourceImage;
            var width = maxResizeFactor * sourceSize.Width;
            var height = maxResizeFactor * sourceSize.Height;
            UIGraphics.BeginImageContext(new SizeF(width, height));
            sourceImage.Draw(new RectangleF(0, 0, width, height));
            var resultImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
            return resultImage;
        }
        // resize the image (without trying to maintain aspect ratio)
        private UIImage ResizeImage(UIImage sourceImage, float width, float height)
        {
            UIGraphics.BeginImageContext(new SizeF(width, height));
            sourceImage.Draw(new RectangleF(0, 0, width, height));
            var resultImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
            return resultImage;
        }
        // crop the image, without resizing
        private UIImage CropImage(UIImage sourceImage, int crop_x, int crop_y, int width, int height)
        {
            var imgSize = sourceImage.Size;
            UIGraphics.BeginImageContext(new SizeF(width, height));
            var context = UIGraphics.GetCurrentContext();
            var clippedRect = new RectangleF(0, 0, width, height);
            context.ClipToRect(clippedRect);
            var drawRect = new RectangleF(-crop_x, -crop_y, imgSize.Width, imgSize.Height);
            sourceImage.Draw(drawRect);
            var modifiedImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
            return modifiedImage;
        }
    }
}
