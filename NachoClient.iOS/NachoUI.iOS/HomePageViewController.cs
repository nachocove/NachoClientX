// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using MonoTouch.CoreGraphics;
using MonoTouch.CoreAnimation;

using NachoCore.Utils;

// Animation guide http://developer.xamarin.com/guides/cross-platform/application_fundamentals/touch/part_1_touch_in_ios/

namespace NachoClient.iOS
{
    public partial class HomePageController : NcUIViewController
    {
        //loads the HomePageController.xib file and connects it to this object
        public HomeViewController owner;

        // container for iPhone screen-in-screen
        UIView contentContainer;

        public HomePageController (int pageIndex) : base ("HomePageController", null)
        {
            this.PageIndex = pageIndex;
            owner = null;
        }

        public int PageIndex {
            get;
            private set;
        }

        // Helper Text Strings
        const string TitleOne = "Your Messages";
        const string TitleTwo = "Navigating Your Hot List";
        const string TitleThree= "Time Line View";
        const string TitleFour = "Just One Last Thing ...";

        const string BodyOne = "Your hot messages go in your hot list" + "\n" + "All other messages will be in your inbox";
        const string BodyTwo = "Quickly browse through your hot list" + "\n" + "by swiping left and right";
        const string BodyThree = "This contains your upcoming meetings" + "\n" + "and events";
        const string BodyFour = "Sliding right or left elsewhere will get you" + "\n" + "shortcusts and options for the items";

        // Background

        const string bgscreen = "Content/02_bg.png";
       
        //const string TutPageOne = "Content/Tutorial-Page1.png";
        const string TutPageOne = "Content/01_img_only.png";
        const string TutPageTwo = "Content/02_img_only.png";
        const string TutPageThree = "Content/02_img_only.png";
        const string TutPageFour = "Content/02_img_only.png";

        string[] titleText = {
            TitleOne,
            TitleTwo,
            TitleThree,
            TitleFour,
        };
        string[] bodyText = {
            BodyOne,
            BodyTwo,
            BodyThree,
            BodyFour,
        };

        string[] Tutorial = {
            TutPageOne,
            TutPageTwo,
            TutPageThree,
            TutPageFour,
        };

        public override void ViewDidLoad ()
        {
            // This builds the UIPVC datasource image. This source is then displayed
            // inside the UIPVC with gesture controls and other cool shit from that class
            // Known issue :: If I Hide the UINavControllerbar we have no way home (see homeViewcontroll..cs)
           
            string fileName = Tutorial [this.PageIndex];
            //UIView pageContainerView = new UIView (new RectangleF(0,0,View.Frame.Width, View.Frame.Height-50)); // Contains everything created by this object
            UIView pageContainerView = new UIView (new RectangleF(0,0, this.owner.View.Bounds.Width, this.owner.View.Bounds.Height-50));
            this.contentContainer = new UIView (new RectangleF (30, 40, pageContainerView.Frame.Width - 60, 350)); // see size of helpercontainer
            UIView helperContainer = new UIView (new RectangleF(0,pageContainerView.Frame.Top + 350, pageContainerView.Frame.Width, pageContainerView.Frame.Bottom-350)); // contains the helpertext and labels  
            UILabel helperTitleText = new UILabel (new RectangleF(0, 5, helperContainer.Frame.Width, 25));
            UILabel helperBodyText = new UILabel (new RectangleF( 0, helperTitleText.Frame.Bottom, helperContainer.Frame.Width,40));
            //UILabel helperBodyText = new UILabel (new RectangleF( 0, helperTitleText.Frame.Bottom, helperContainer.Frame.Width,helperContainer.Frame.Height / 2));
            /* UILabel helperTitleText = new UILabel ();
            UILabel helperBodyText = new UILabel ();
*/
            /*
            UILabel helperTitleText = new UILabel (new RectangleF (0,helperContainer.Frame.Top, helperContainer.Frame.Width, helperContainer.Frame.Height/2));
            UILabel helperBodyText = new UILabel (new RectangleF ( 0,helperContainer.Frame.Top+helperTitleText.Frame.Height, helperContainer.Frame.Width, helperContainer.Frame.Height-helperTitleText.Frame.Height)); // suspect we want one or two helper text labels
*/
/*
            pageContainerView.Frame = new RectangleF (0, 0, this.View.Frame.Width, this.View.Frame.Height - 40);
            helperContainer.Frame = new RectangleF (0, (View.Frame.Height/5) * 3, View.Frame.Width, (View.Frame.Height /5 )*2 - 40);
*/
            helperContainer.BackgroundColor = UIColor.White;
     
            helperTitleText.BackgroundColor = UIColor.White; // debug
           
            helperBodyText.BackgroundColor = UIColor.White; // debug
            helperBodyText.Lines = 2;
            helperTitleText.TextColor = A.Color_11464F;
            helperBodyText.TextColor = A.Color_9B9B9B;
           
            helperTitleText.Text = titleText [this.PageIndex];
            helperBodyText.Text = bodyText[this.PageIndex];
            helperBodyText.Font = A.Font_AvenirNextRegular14;
            helperTitleText.Font = A.Font_AvenirNextDemiBold17;
            helperBodyText.TextAlignment = UITextAlignment.Center;
            helperTitleText.TextAlignment = UITextAlignment.Center;
          
           
            helperTitleText.Layer.BorderColor = UIColor.White.CGColor;
            helperTitleText.Layer.BorderWidth = 2f;
            helperBodyText.Layer.BorderColor = UIColor.White.CGColor;
            helperBodyText.Layer.BorderWidth = 2f;
           

            //helperBodyText.Center = new PointF (helperContainer.Frame.Width/2,(helperContainer.Frame.Height / 4)*3);


            helperContainer.Add (helperTitleText);
            helperContainer.Add (helperBodyText);

            base.ViewDidLoad ();

           
            UIImageView bgImage = new UIImageView (UIImage.FromBundle (bgscreen));
            bgImage.Frame = new RectangleF (0,0, pageContainerView.Frame.Width, pageContainerView.Frame.Height - helperContainer.Frame.Height);
           
            UIImageView tutImage = new UIImageView (UIImage.FromBundle (fileName));

            tutImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));

            tutImage.ContentMode = UIViewContentMode.ScaleToFill;
            tutImage.UserInteractionEnabled = true;

            contentContainer.AddSubview(tutImage);

            //helperText.Frame = new RectangleF (0, 0, View.Frame.Width, (View.Frame.Height/5*2) -50);


             //helperContainer.AddSubview (helperText);
           // helperTitleText.Center = new PointF( helperContainer.Center.X, helperContainer.Center.Y - helperContainer.Frame.Height/2); 
            //helperContainer.AddSubview (helperTitleText);
            //helperContainer.AddSubview(helperBodyText);
           // helperContainer.BringSubviewToFront (helperBodyText);
            //helperContainer.BringSubviewToFront (helperTitleText);


            pageContainerView.AddSubview (bgImage);
            pageContainerView.AddSubview(contentContainer);
            pageContainerView.AddSubview (helperContainer);
            //pageContainerView.AddSubview (helperTitleText);
            //pageContainerView.AddSubview (helperBodyText);


            this.View.AddSubview (pageContainerView);

            CreateCovers ();

            Log.Info (Log.LOG_UI, "Book page #{0} loaded!", this.PageIndex + 1);
            Log.Info (Log.LOG_UI, "{0}", this.View.Frame.ToString ());
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            if (this.owner == null) {
                NcAssert.True (false, "Tutorial Page has no owner");
            } else {
                this.owner.pageDots.CurrentPage = this.PageIndex; // update containerView.PageDots
            }

            switch (this.PageIndex) {
            case 0:
                AnimateRedToolTip ();
                AnimateGreenToolTip ();
                break;
            case 1:
                AnimateHotlistItemLeft ();
                break;
            case 2:
                AnimateTimelineDown ();
                break;
            case 3:
                AnimateEmailCellLeft ();
                break;
            }
        }

        private void CreateCovers ()
        {
            UIView topCoverRect = new UIView (new RectangleF (0, 0, this.View.Bounds.Width, this.contentContainer.Frame.Y));
            UIView leftCoverRect = new UIView (new RectangleF (0, this.contentContainer.Frame.Y, this.contentContainer.Frame.X, this.contentContainer.Bounds.Height * 3 / 4));
            UIView rightCoverRect = new UIView (new RectangleF (this.contentContainer.Bounds.Right + this.contentContainer.Frame.X, leftCoverRect.Frame.Y, leftCoverRect.Bounds.Width, this.contentContainer.Bounds.Height * 3 / 4));

            topCoverRect.BackgroundColor = A.Color_NachoGreen;
            leftCoverRect.BackgroundColor = A.Color_NachoGreen;
            rightCoverRect.BackgroundColor = A.Color_NachoGreen;

            leftCoverRect.Layer.ZPosition = 100;
            rightCoverRect.Layer.ZPosition = 100;
            topCoverRect.Layer.ZPosition = 100;

            this.View.AddSubview (topCoverRect);
            this.View.AddSubview (leftCoverRect);
            this.View.AddSubview (rightCoverRect);
        }

        private UIImageView CreateRedButton ()
        {
            UIImageView redButton = new UIImageView (UIImage.FromBundle ("Content/red_pointer.png"));
            redButton.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 3);
            redButton.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            return redButton;
        }

        private UIImageView CreateRedTooltip ()
        {
            UIImageView redTooltip = new UIImageView (UIImage.FromBundle ("Content/red_balloon.png"));
            redTooltip.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 3 + 35);
            redTooltip.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            return redTooltip;
        }

        private UIImageView CreateGreenButton ()
        {
            UIImageView greenButton = new UIImageView (UIImage.FromBundle ("Content/teal_pointer.png"));
            greenButton.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height * 5 / 6);
            greenButton.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            return greenButton;
        }

        private UIImageView CreateGreenTooltip ()
        {
            UIImageView greenTooltip = new UIImageView (UIImage.FromBundle ("Content/teal_balloon.png"));
            greenTooltip.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height * 5 / 6 - 35);
            greenTooltip.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            return greenTooltip;
        }

        private void AnimateRedToolTip ()
        {
            AnimateTooltip (CreateRedButton (), CreateRedTooltip ());
        }

        private void AnimateGreenToolTip ()
        {
            AnimateTooltip (CreateGreenButton (), CreateGreenTooltip ());
        }

        private void AnimateTooltip (UIImageView button, UIImageView tooltip)
        {
            Action<UIImageView> animateSprite = (sprite) => {
                UIView.Animate (
                    duration: 0.7,
                    delay: 1.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        sprite.Layer.Transform = CATransform3D.MakeScale (1.0f, 1.0f, 1.0f);
                    },
                    completion: () => {
                    }
                );
            };

            SetSpriteCallbacks (button, animateSprite);
            SetSpriteCallbacks (tooltip, animateSprite);
        }

        private UIImageView CreateHotlistItem ()
        {
            // slide left
            UIImageView hotlist = new UIImageView (UIImage.FromBundle ("Icon"));
            hotlist.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2);
            return hotlist;
        }

        private void AnimateHotlistItemLeft ()
        {
            Action<UIImageView> animateSprite = (sprite) => {
                UIView.Animate (
                    duration: 0.7,
                    delay: 2.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the hotlist item all the way off the bottom of the screen
                        sprite.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height + sprite.Frame.Height);
                    },
                    completion: () => {
                        sprite.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                sprite.RemoveFromSuperview ();
                            }
                        };
                    }
                );
            };
            
            var hotlistSprite = CreateHotlistItem ();
            SetSpriteCallbacks (hotlistSprite, animateSprite);
        }

        private UIImageView CreateTimelineSprite ()
        {
            var timelineSize = new RectangleF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2, this.contentContainer.Frame.Width, this.contentContainer.Frame.Height);
            UIImageView timeline = new UIImageView (UIImage.FromBundle ("Icon"));
            timeline.Frame = timelineSize;
            // timeline starts at top of screen
            timeline.Center = new PointF (this.contentContainer.Frame.Width / 2, - timeline.Frame.Size.Height * 4 / 10);
            return timeline;
        }
            
        public void AnimateTimelineDown ()
        {
            Action<UIImageView> animateSprite = (timeline) => {
                UIView.Animate (
                    duration: 0.7,
                    delay: 1.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the hotlist item all the way off the bottom of the screen
                        timeline.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2);
                    },
                    completion: () => {

                    }
                );
            };

            var timelineSprite = CreateTimelineSprite ();
            SetSpriteCallbacks (timelineSprite, animateSprite);
        }

        private UIImageView CreateEmailCell ()
        {
            var emailSize = new RectangleF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2, this.contentContainer.Frame.Width, 55);
            UIImageView emailCell = new UIImageView (UIImage.FromBundle ("Icon"));
            emailCell.Frame = emailSize;
            emailCell.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height / 2);
            return emailCell;
        }

        public void AnimateEmailCellLeft ()
        {
            Action<UIImageView> animateSprite = (emailCell) => {
                UIView.Animate (
                    duration: 0.7,
                    delay: 2.0,
                    options: UIViewAnimationOptions.CurveEaseInOut,
                    animation: () => {
                        // Move the hotlist item all the way off the bottom of the screen
                        emailCell.Center = new PointF (this.contentContainer.Bounds.X - emailCell.Frame.Width / 2, this.contentContainer.Frame.Height / 2);
                    },
                    completion: () => {
                        emailCell.RemoveFromSuperview ();
                        this.owner.pageController.DidFinishAnimating += (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                            var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                            if (this.PageIndex == previousPageView.PageIndex) {
                                // we are moving away from this view
                                emailCell.RemoveFromSuperview ();
                            }
                        };
                    }
                );
            };

            var emailCellSprite = CreateEmailCell ();
            SetSpriteCallbacks (emailCellSprite, animateSprite);
        }

        // remove the animated sprite once you complete the movement to the next page
        private EventHandler<UIPageViewFinishedAnimationEventArgs> DidNavigateAwayFromPage (UIImageView sprite)
        {
            return (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                var previousPageView = (HomePageController)e.PreviousViewControllers [0];
                if (this.PageIndex == previousPageView.PageIndex && e.Completed) {
                    // we are moving away from this view
                    sprite.RemoveFromSuperview ();
                }
            };
        }

        // Moving to another page and back should reset sprite
        // Moving the page just slightly, but back to original should not reset sprite
        private void SetSpriteCallbacks (UIImageView sprite, Action<UIImageView> animateSprite)
        {
            EventHandler<UIPageViewFinishedAnimationEventArgs> moveToPage = null;
            moveToPage = (object sender, UIPageViewFinishedAnimationEventArgs e) => {
                var previousPageView = (HomePageController)e.PreviousViewControllers[0];
                if (this.PageIndex != previousPageView.PageIndex) {
                    this.contentContainer.AddSubview (sprite);
                    animateSprite (sprite);
                    this.owner.pageController.DidFinishAnimating -= moveToPage;
                    this.owner.pageController.DidFinishAnimating += DidNavigateAwayFromPage (sprite);
                }
            };

            this.owner.pageController.DidFinishAnimating += moveToPage;
        }

        // Utilities for resizing images.  May not use

        // resize the image to be contained within a maximum width and height, keeping aspect ratio
        // from StackOverflow
        private UIImage MaxResizeImage(UIImage sourceImage, float maxWidth, float maxHeight)
        {
            var sourceSize = sourceImage.Size;
            var maxResizeFactor = Math.Max(maxWidth / sourceSize.Width, maxHeight / sourceSize.Height);
            if (maxResizeFactor > 1) return sourceImage;
            var width = maxResizeFactor * sourceSize.Width;
            var height = maxResizeFactor * sourceSize.Height;
            UIGraphics.BeginImageContext(new SizeF(width, height));
            sourceImage.Draw(new RectangleF(0, 0, width, height));
            var resultImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
            return resultImage;
        }
        // resize the image (without trying to maintain aspect ratio)
        private UIImage ResizeImage(UIImage sourceImage, float width, float height)
        {
            UIGraphics.BeginImageContext(new SizeF(width, height));
            sourceImage.Draw(new RectangleF(0, 0, width, height));
            var resultImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
            return resultImage;
        }
        // crop the image, without resizing
        private UIImage CropImage(UIImage sourceImage, int crop_x, int crop_y, int width, int height)
        {
            var imgSize = sourceImage.Size;
            UIGraphics.BeginImageContext(new SizeF(width, height));
            var context = UIGraphics.GetCurrentContext();
            var clippedRect = new RectangleF(0, 0, width, height);
            context.ClipToRect(clippedRect);
            var drawRect = new RectangleF(-crop_x, -crop_y, imgSize.Width, imgSize.Height);
            sourceImage.Draw(drawRect);
            var modifiedImage = UIGraphics.GetImageFromCurrentImageContext();
            UIGraphics.EndImageContext();
            return modifiedImage;
        }
    }
}
