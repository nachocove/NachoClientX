// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using MonoTouch.CoreGraphics;
using MonoTouch.CoreAnimation;

using NachoCore.Utils;

// Animation guide http://developer.xamarin.com/guides/cross-platform/application_fundamentals/touch/part_1_touch_in_ios/

namespace NachoClient.iOS
{
    public partial class HomePageController : NcUIViewController
    {
        public HomeViewController owner;

        // container for iPhone screen-in-screen 
        // doing these as internal globals
        protected UIView pageContainerView; // full screen

        protected UIView contentContainer; // the phone-image content
        protected UIView helperContainer; // the helpful text container
        protected UILabel helperTitleText; // text Title
        protected UILabel helperBodyText; // text body

        protected UIView pageView;
        protected UIView contentView;

        //View One Components
        protected UIImageView redButton;
        protected UIImageView redToolTip;
        protected UIImageView greenButton;
        protected UIImageView greenToolTip;
        protected NSTimer toolTipTimer;

        //View Two Components
        protected PointF swipeMailLeftCenter;
        protected PointF swipeMailRightCenter;
        protected PointF mailRedDotCenter;
        protected UIImageView mailRedDot;
        protected UIImageView swipeMailLeft;
        protected UIImageView swipeMailRight;
        protected NSTimer flashOneTimer;
        protected NSTimer flashTwoTimer;
        protected NSTimer swipeMailLeftTimer;
        protected NSTimer swipeMailRightTimer;

        //View Three Components
        protected UIImageView emailCellView;
        protected UIImageView redSwipeCellView;
        protected UIImageView greenSwipeCellView;
        protected PointF emailCellViewCenter;
        protected PointF redSwipeCenter;
        protected PointF greenSwipeCenter;
        protected NSTimer swipeLeftTimer;
        protected NSTimer revertLeftToCenterTimer;
        protected NSTimer swipeRightTimer;
        protected NSTimer revertRightToCenterTimer;

        //View Four Components
        protected UIImageView pullimageView;
        protected UIImageView calimageView;
        protected UIImageView timelineView;
        protected PointF pullimageCenter;
        protected PointF calimageCenter;
        protected PointF timelineCenter;
        protected NSTimer pullDownCalendarTimer;

        public HomePageController (int pageIndex) : base ("HomePageController", null)
        {
            this.PageIndex = pageIndex;
            owner = null;
        }

        public int PageIndex {
            get;
            private set;
        }

        // Helper Text Strings
        const string TitleOne = "Your Messages";
        const string TitleTwo = "Navigating Your Hot List";
        const string TitleThree= "Time Line View";
        const string TitleFour = "Just One Last Thing ...";

        const string BodyOne = "Your hot messages go in your hot list" + "\n" + "All other messages will be in your inbox";
        const string BodyTwo = "Quickly browse through your hot list" + "\n" + "by swiping left and right";
        const string BodyThree = "This contains your upcoming meetings" + "\n" + "and events";
        const string BodyFour = "Sliding right or left elsewhere will get you" + "\n" + "shortcusts and options for the items";

        const string contentscreen = "Slide1-3@2x.png"; // phone-face image
        const string calendarpull = "Slide1-2.png"; // calendar pull down
        const string msg1loc = "Slide1-1A@2x.png"; // Meagan message
        const string msg2loc = "Slide1-1B.png"; // next message
        const string inboxloc = "Slide1-4@2x.png"; // inbox msg at bottom of screen

        string[] titleText = {
            TitleOne,
            TitleTwo,
            TitleThree,
            TitleFour,
        };
        string[] bodyText = {
            BodyOne,
            BodyTwo,
            BodyThree,
            BodyFour,
        };

        public override void ViewDidLoad ()
        {
            this.pageContainerView = new UIView (new RectangleF(0,0, this.owner.View.Bounds.Width, this.owner.View.Bounds.Height-48));
            pageContainerView.BackgroundColor = A.Color_NachoGreen;
            this.contentContainer = new UIView (new RectangleF (54 , 60, 212, 306)); // see size of helpercontainer
            this.helperContainer = new UIView (new RectangleF(0,this.contentContainer.Frame.Bottom, pageContainerView.Frame.Width, pageContainerView.Frame.Bottom- this.contentContainer.Frame.Bottom));// contains the helpertext and labels  
            this.helperTitleText = new UILabel (new RectangleF(0,12, helperContainer.Frame.Width, 20));
            this.helperBodyText = new UILabel (new RectangleF((helperContainer.Frame.Width - 284) / 2, helperTitleText.Frame.Bottom, 284, 40));

            pageView = new UIView (pageContainerView.Frame);
            contentView = new UIView (contentContainer.Frame);

            base.ViewDidLoad ();

            string leftNachos = "";
            string rightNachos = "";

            switch (this.PageIndex) {
            case 0:
                leftNachos = "BG-S01Left@2x";
                rightNachos = "BG-S01Right@2x";
                CreateViewOne ();
                break;
            case 1:
                leftNachos = "BG-S02Left@2x";
                rightNachos = "BG-S02Right@2x";
                CreateViewTwo ();
                break;
            case 2:
                leftNachos = "BG-S03Left@2x";
                rightNachos = "BG-S03Right@2x";
                CreateViewThree ();
                break;
            case 3:
                leftNachos = "BG-S04Left@2x";
                rightNachos = "BG-S04Right@2x";
                CreateViewFour ();
                break;
            }

            this.View.AddSubview (pageContainerView);
            this.View.AddSubview (pageView);

            CreateNachos (leftNachos, rightNachos);
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
        }

        public override void ViewDidDisappear (bool animated)
        {
            base.ViewDidDisappear (animated);

            switch (this.PageIndex) {

            case 0:
                toolTipTimer.Invalidate ();

                redButton.Layer.RemoveAllAnimations ();
                redToolTip.Layer.RemoveAllAnimations ();
                greenButton.Layer.RemoveAllAnimations ();
                greenToolTip.Layer.RemoveAllAnimations ();

                redButton.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
                redToolTip.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
                greenButton.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
                greenToolTip.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
                break;
            case 1:
                flashOneTimer.Invalidate ();
                swipeMailLeftTimer.Invalidate ();
                flashTwoTimer.Invalidate ();
                swipeMailRightTimer.Invalidate ();

                swipeMailLeft.Layer.RemoveAllAnimations ();
                swipeMailRight.Layer.RemoveAllAnimations ();
                mailRedDot.Layer.RemoveAllAnimations ();

                swipeMailLeft.Center = swipeMailLeftCenter;
                swipeMailRight.Center = swipeMailRightCenter;
                mailRedDot.Center = mailRedDotCenter;
                break;
            case 2:
                if (null != pullDownCalendarTimer) {
                    pullDownCalendarTimer.Invalidate ();
                }


                calimageView.Layer.RemoveAllAnimations ();
                pullimageView.Layer.RemoveAllAnimations ();
                timelineView.Layer.RemoveAllAnimations ();

                calimageView.Center = calimageCenter;
                pullimageView.Center = pullimageCenter;
                timelineView.Center = timelineCenter;
                break;
            case 3:
                swipeLeftTimer.Invalidate ();
                revertLeftToCenterTimer.Invalidate ();
                swipeRightTimer.Invalidate ();
                revertRightToCenterTimer.Invalidate ();

                redSwipeCellView.Layer.RemoveAllAnimations ();
                greenSwipeCellView.Layer.RemoveAllAnimations ();
                emailCellView.Layer.RemoveAllAnimations ();

                redSwipeCellView.Center = redSwipeCenter;
                greenSwipeCellView.Center = greenSwipeCenter;
                emailCellView.Center = emailCellViewCenter;
                break;
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            if (this.owner == null) {
                NcAssert.True (false, "Tutorial Page has no owner");
            } else {
                this.owner.pageDots.CurrentPage = this.PageIndex; // update containerView.PageDots
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);

            switch (this.PageIndex) {
            case 0:
                AnimateViewOne ();
                break;
            case 1:
                AnimateViewTwo ();
                break;
            case 2:
                AnimateViewThree ();
                break;
            case 3:
                AnimateViewFour ();
                break;
            }
        }

        private void CreateNachos(string leftNachos, string rightNachos)
        {
            UIImageView leftSideNachos = new UIImageView (UIImage.FromBundle (leftNachos));
            leftSideNachos.Frame = new RectangleF (0, this.contentContainer.Frame.Bottom - leftSideNachos.Frame.Height / 2, this.contentContainer.Frame.X, leftSideNachos.Frame.Height / 2);
            this.View.AddSubview (leftSideNachos);

            UIImageView rightSideNachos = new UIImageView (UIImage.FromBundle (rightNachos));
            rightSideNachos.Frame = new RectangleF (this.contentContainer.Frame.X + this.contentContainer.Frame.Width, this.contentContainer.Frame.Bottom - rightSideNachos.Frame.Height / 2, this.contentContainer.Frame.X, rightSideNachos.Frame.Height / 2);
            this.View.AddSubview (rightSideNachos);
        }

        void CreateHelperText(){

            helperContainer.BackgroundColor = UIColor.White;

            helperTitleText.BackgroundColor = UIColor.White; // debug
            helperTitleText.TextColor = A.Color_11464F;
            helperTitleText.Text = titleText [this.PageIndex];
            helperTitleText.Font = A.Font_AvenirNextDemiBold17;
            helperTitleText.TextAlignment = UITextAlignment.Center;
            helperContainer.Add (helperTitleText);

            helperBodyText.BackgroundColor = UIColor.White; // debug
            helperBodyText.TextColor = A.Color_9B9B9B;
            helperBodyText.Lines = 2;
            helperBodyText.Text = bodyText[this.PageIndex];
            helperBodyText.Font = A.Font_AvenirNextRegular14;
            helperBodyText.TextAlignment = UITextAlignment.Center;
            helperContainer.Add (helperBodyText);

            Util.AddHorizontalLine (0, helperContainer.Frame.Height + 10 , helperContainer.Frame.Width, A.Color_NachoSeparator, helperContainer);
        }

        protected void CreateViewOne()
        {
            UIImageView screenImage = new UIImageView (UIImage.FromBundle (contentscreen));
            screenImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));
            contentContainer.AddSubview(screenImage);

            UIImageView centerMessage = new UIImageView (UIImage.FromBundle (msg1loc));
            centerMessage.Frame = new RectangleF (10, 60, 192, 207);
            centerMessage.Center = new PointF (contentContainer.Frame.Width / 2 , contentContainer.Frame.Height / 2 +10);
            contentContainer.AddSubview (centerMessage);

            UIImageView inboximageView = new UIImageView (UIImage.FromBundle (inboxloc));
            inboximageView.Frame = new RectangleF (10, centerMessage.Frame.Bottom + 20, 192, 20);
            inboximageView.Center = new PointF (contentContainer.Frame.Width / 2, contentContainer.Frame.Height - 10);
            contentContainer.AddSubview (inboximageView);

            redButton = new UIImageView (UIImage.FromBundle ("red_pointer.png"));
            redButton.Center = new PointF (this.contentContainer.Frame.Width / 2, centerMessage.Frame.Height / 3 + 70);
            redButton.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            contentContainer.AddSubview (redButton);

            redToolTip = new UIImageView (UIImage.FromBundle ("red_balloon.png"));
            redToolTip.Center = new PointF (this.contentContainer.Frame.Width / 2, centerMessage.Frame.Height / 3 + 35 + 70);
            redToolTip.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            contentContainer.AddSubview (redToolTip);

            greenButton = new UIImageView (UIImage.FromBundle ("teal_pointer.png"));
            greenButton.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height - 15);
            greenButton.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            contentContainer.AddSubview (greenButton);

            greenToolTip = new UIImageView (UIImage.FromBundle ("teal_balloon.png"));
            greenToolTip.Center = new PointF (this.contentContainer.Frame.Width / 2, this.contentContainer.Frame.Height - 50);
            greenToolTip.Layer.Transform = CATransform3D.MakeScale (0.0f, 0.0f, 1.0f);
            contentContainer.AddSubview (greenToolTip);

            CreateHelperText ();
            pageContainerView.AddSubview(contentContainer);
            pageContainerView.AddSubview (helperContainer);
        }

        protected void CreateViewTwo()
        {
            UIImageView screenImage = new UIImageView (UIImage.FromBundle (contentscreen));
            screenImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));
            contentView.AddSubview(screenImage);

            swipeMailLeft = new UIImageView (UIImage.FromBundle (msg1loc));
            swipeMailLeft.Frame = new RectangleF (10, 60, 192, 207);
            swipeMailLeft.Center = new PointF (contentContainer.Frame.Width / 2 , contentContainer.Frame.Height / 2 +10);
            swipeMailLeftCenter = swipeMailLeft.Center;
            contentView.AddSubview (swipeMailLeft);

            swipeMailRight = new UIImageView (UIImage.FromBundle ("Slide1-1B.png"));
            swipeMailRight.Center = new PointF (this.pageContainerView.Frame.Width, this.contentContainer.Frame.Height / 2 +10);
            swipeMailRightCenter = swipeMailRight.Center;
            contentView.AddSubview (swipeMailRight);

            UIImageView inboximageView = new UIImageView (UIImage.FromBundle (inboxloc));
            inboximageView.Frame = new RectangleF (10, swipeMailLeft.Frame.Bottom + 20, 192, 20);
            inboximageView.Center = new PointF (contentContainer.Frame.Width / 2, contentContainer.Frame.Height - 10);
            contentView.AddSubview (inboximageView);

            mailRedDot = new UIImageView (UIImage.FromBundle ("red_pointer.png"));
            mailRedDot.Center = new PointF (swipeMailLeft.Frame.X + 60, swipeMailLeft.Center.Y);
            mailRedDotCenter = mailRedDot.Center;
            mailRedDot.Tag = 100;
            mailRedDot.Layer.Transform = CATransform3D.MakeScale (1.0f, 1.0f, 1.0f);
            contentView.AddSubview(mailRedDot);

            CreateHelperText ();
            contentView.ClipsToBounds = true;
            pageView.AddSubview(contentView);
            pageView.AddSubview (helperContainer);
        }

        protected void CreateViewThree()
        {
            UIImageView screenImage = new UIImageView (UIImage.FromBundle ("Slide3-2@2x.png"));
            screenImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));
            contentContainer.AddSubview(screenImage);

            calimageView = new UIImageView(UIImage.FromBundle ("Slide3-1A@2x.png"));
            calimageView.Frame = new RectangleF (0, 0, contentContainer.Frame.Width, 46);
            calimageCenter = calimageView.Center;
            contentContainer.AddSubview (calimageView);

            pullimageView = new UIImageView (UIImage.FromBundle ("Slide3-1B@2x.png"));
            pullimageView.Frame = new RectangleF (0, calimageView.Frame.Bottom, contentContainer.Frame.Width, 7);
            pullimageCenter = pullimageView.Center;
            contentContainer.AddSubview (pullimageView);

            timelineView = new UIImageView (UIImage.FromBundle ("Slide3-5@2x"));
            timelineView.Frame = new RectangleF (0,  -contentContainer.Frame.Height, this.contentContainer.Frame.Width, this.contentContainer.Frame.Height);
            timelineCenter = timelineView.Center;
            contentContainer.AddSubview(timelineView);

            CreateHelperText ();
            contentContainer.ClipsToBounds = true;
            pageContainerView.AddSubview(contentContainer);
            pageContainerView.AddSubview (helperContainer);
        }

        private void CreateViewFour()
        {
            UIImageView screenImage = new UIImageView (UIImage.FromBundle ("Slide4-1.png"));
            screenImage.Frame = (new RectangleF (0,0, contentContainer.Frame.Width, contentContainer.Frame.Height));
            contentContainer.AddSubview(screenImage);

            greenSwipeCellView = new UIImageView (UIImage.FromBundle ("Slide4-2A.png"));
            greenSwipeCellView.Frame = new RectangleF (0-this.contentContainer.Frame.Width, 77, this.contentContainer.Frame.Width, 93);
            greenSwipeCenter = greenSwipeCellView.Center;
            contentContainer.AddSubview (greenSwipeCellView);

            emailCellView = new UIImageView (UIImage.FromBundle ("Slide4-3.png"));
            emailCellView.Frame = new RectangleF(0, 77, this.contentContainer.Frame.Width, 93);
            emailCellViewCenter = emailCellView.Center;
            contentContainer.AddSubview (emailCellView);

            redSwipeCellView = new UIImageView (UIImage.FromBundle ("Slide4-2B.png"));
            redSwipeCellView.Frame = new RectangleF (this.contentContainer.Frame.Width, 77, this.contentContainer.Frame.Width, 93);
            redSwipeCenter = redSwipeCellView.Center;
            contentContainer.AddSubview (redSwipeCellView);

            CreateHelperText ();
            contentContainer.ClipsToBounds = true;
            pageContainerView.AddSubview(contentContainer);
            pageContainerView.AddSubview (helperContainer);
        }

        protected void AnimateViewOne()
        {
            toolTipTimer = NSTimer.CreateScheduledTimer (1, delegate {
                UIView.AnimateKeyframes (1, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                        redButton.Layer.Transform = CATransform3D.MakeScale (1.0f, 1.0f, 1.0f);
                        redToolTip.Layer.Transform = CATransform3D.MakeScale (1.0f, 1.0f, 1.0f);
                        greenButton.Layer.Transform = CATransform3D.MakeScale (1.0f, 1.0f, 1.0f);
                        greenToolTip.Layer.Transform = CATransform3D.MakeScale (1.0f, 1.0f, 1.0f);
                    });
                }, ((bool finished) => {
                }));
            });
        }

        protected void AnimateViewTwo ()
        {
            flashOneTimer = NSTimer.CreateScheduledTimer (.5, delegate {
                UIView.AnimateKeyframes (2, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, .5, () => {
                        mailRedDot.Alpha = 0.5f;
                    });

                    UIView.AddKeyframeWithRelativeStartTime (.5, .5, () => {
                        mailRedDot.Alpha = 1.0f;
                    });
                }, ((bool finished) => {
                }));
            });

            swipeMailLeftTimer = NSTimer.CreateScheduledTimer (2.5, delegate {
                UIView.AnimateKeyframes (1, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                        mailRedDot.Center = new PointF(mailRedDot.Center.X - this.contentContainer.Frame.Width, mailRedDot.Center.Y);
                        swipeMailLeft.Center = new PointF (swipeMailLeft.Center.X - this.contentContainer.Frame.Width, this.contentContainer.Frame.Height/2 +10 );
                        swipeMailRight.Center = new PointF (swipeMailRight.Center.X - this.contentContainer.Frame.Width, this.contentContainer.Frame.Height/2 +10 );
                    });
                }, ((bool finished) => {
                    mailRedDot.Center = new PointF(mailRedDotCenter.X + 70, mailRedDotCenter.Y);
                }));
            });

            flashTwoTimer = NSTimer.CreateScheduledTimer (3.6, delegate {
                UIView.AnimateKeyframes (2.1, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, .5, () => {
                        mailRedDot.Alpha = .5f;
                    });
                    UIView.AddKeyframeWithRelativeStartTime (.5, .5, () => {
                        mailRedDot.Alpha = 1.0f;
                    });
                }, ((bool finished) => {
                }));
            });

            swipeMailRightTimer = NSTimer.CreateScheduledTimer (5.7, delegate {
                UIView.AnimateKeyframes (1, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                        mailRedDot.Center = new PointF(mailRedDot.Center.X + this.contentContainer.Frame.Width, mailRedDot.Center.Y);
                        swipeMailLeft.Center = new PointF (swipeMailLeft.Center.X + this.contentContainer.Frame.Width, this.contentContainer.Frame.Height/2 +10 );
                        swipeMailRight.Center = new PointF (swipeMailRight.Center.X + this.contentContainer.Frame.Width, this.contentContainer.Frame.Height/2 +10 );
                    });
                }, ((bool finished) => {
                }));
            });
        }

        public void AnimateViewThree ()
        {
            pullDownCalendarTimer = NSTimer.CreateScheduledTimer (1.5, delegate {
                UIView.AnimateKeyframes (.7, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                        pullimageView.Center = new PointF (pullimageView.Center.X, pullimageView.Center.Y + contentContainer.Frame.Height);
                        calimageView.Center = new PointF (calimageView.Center.X, calimageView.Center.Y + contentContainer.Frame.Height);
                        timelineView.Center = new PointF(timelineView.Center.X, timelineView.Center.Y + contentContainer.Frame.Height); 
                    });

                }, ((bool finished) => {
                }));
            });
        }

        public void AnimateViewFour ()
        {
            swipeLeftTimer = NSTimer.CreateScheduledTimer (1.5, delegate {
                UIView.AnimateKeyframes (.7, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                        redSwipeCellView.Center = new PointF(redSwipeCellView.Center.X - redSwipeCellView.Frame.Width, redSwipeCellView.Center.Y);
                        emailCellView.Center = new PointF(emailCellView.Center.X - emailCellView.Frame.Width, emailCellView.Center.Y);
                    });

                }, ((bool finished) => {
                }));
            });

            revertLeftToCenterTimer = NSTimer.CreateScheduledTimer (2.5, delegate {
                UIView.AnimateKeyframes (.7, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                        redSwipeCellView.Center = new PointF(redSwipeCellView.Center.X + redSwipeCellView.Frame.Width, redSwipeCellView.Center.Y);
                        emailCellView.Center = new PointF(emailCellView.Center.X + emailCellView.Frame.Width, emailCellView.Center.Y);
                    });

                }, ((bool finished) => {
                }));
            });

            swipeRightTimer = NSTimer.CreateScheduledTimer (4, delegate {
                UIView.AnimateKeyframes (.7, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                        emailCellView.Center = new PointF(emailCellView.Center.X + emailCellView.Frame.Width, emailCellView.Center.Y);
                        greenSwipeCellView.Center = new PointF (greenSwipeCellView.Center.X + greenSwipeCellView.Frame.Width, greenSwipeCellView.Center.Y);
                    });

                }, ((bool finished) => {
                }));
            });

            revertRightToCenterTimer = NSTimer.CreateScheduledTimer (5, delegate {
                UIView.AnimateKeyframes (.7, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                    UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                        emailCellView.Center = new PointF(emailCellView.Center.X - emailCellView.Frame.Width, emailCellView.Center.Y);
                        greenSwipeCellView.Center = new PointF (greenSwipeCellView.Center.X - greenSwipeCellView.Frame.Width, greenSwipeCellView.Center.Y);
                    });
                }, ((bool finished) => {
                }));
            });
        }
    }
}
