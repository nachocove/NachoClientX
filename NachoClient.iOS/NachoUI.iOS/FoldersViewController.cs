// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using System.Collections.Generic;
using Foundation;
using UIKit;
using EventKit;
using System.IO;
using System.Linq;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore.ActiveSync;


namespace NachoClient.iOS
{
    public partial class FoldersViewController : NcUIViewController, INachoFolderChooser
    {
        UITableView TableView;
        FolderTableViewSource folderTableViewSource;

        bool EventHandlersAreSet;

        SwitchAccountButton switchAccountButton;

        public FoldersViewController (IntPtr handle) : base (handle)
        {
        }

        protected object cookie;
        protected bool modal;
        protected INachoFolderChooserParent owner;

        public void SetOwner (INachoFolderChooserParent owner, bool modal, object cookie)
        {
            this.owner = owner;
            this.modal = modal;
            this.cookie = cookie;
        }

        public void DismissFolderChooser (bool animated, Action action)
        {
            owner = null;
            cookie = null;
            DismissViewController (animated, action);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            TableView = new UITableView (new CGRect (0, modal ? 64 : 0, View.Frame.Width, View.Frame.Height), UITableViewStyle.Grouped);
            TableView.SeparatorColor = A.Color_NachoBackgroundGray;
            TableView.BackgroundColor = A.Color_NachoBackgroundGray;
            TableView.TableFooterView = new UIView (new CGRect (0, 0, TableView.Frame.Width, 100));
            TableView.AccessibilityLabel = "Folder list";
            TableView.SectionHeaderHeight = 4;
            TableView.SectionFooterHeight = 4;
            View.AddSubview (TableView);

            var v = new UIView (new CGRect (0, 0, 1, 8));
            v.BackgroundColor = UIColor.Clear;
            TableView.TableHeaderView = v;
                
            if (modal) {
                var navBar = new UINavigationBar (new CGRect (0, 20, View.Frame.Width, 44));
                navBar.BarStyle = UIBarStyle.Default;
                navBar.Translucent = false;
                navBar.Opaque = true;

                var navItem = new UINavigationItem ();
                navItem.Title = "Move to Folder";
                using (var image = UIImage.FromBundle ("modal-close")) {
                    var dismissButton = new NcUIBarButtonItem (image, UIBarButtonItemStyle.Plain, null);
                    dismissButton.AccessibilityLabel = "Dismiss";
                    dismissButton.Clicked += (object sender, EventArgs e) => {
                        DismissViewController (true, null);
                    };
                    navItem.LeftBarButtonItem = dismissButton;
                }
                navBar.Items = new UINavigationItem[] { navItem };

                var titleView = new UIView (new CGRect (0, 0, View.Frame.Width, 64));
                titleView.BackgroundColor = A.Color_NachoGreen;
                titleView.AddSubview (navBar);
                View.AddSubview (titleView);
            } else {
                NavigationController.NavigationBar.Translucent = false;
                var composeButton = new NcUIBarButtonItem ();
                Util.SetAutomaticImageForButton (composeButton, "contact-newemail");
                composeButton.AccessibilityLabel = "New message";
                composeButton.Clicked += (object sender, EventArgs e) => {
                    ComposeMessage ();
                };
                NavigationItem.RightBarButtonItem = composeButton;
                switchAccountButton = new SwitchAccountButton (switchAccountButtonPressed);
                switchAccountButton.SetAccountImage (NcApplication.Instance.Account);
                NavigationItem.TitleView = switchAccountButton;
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            if (null == folderTableViewSource) {
                folderTableViewSource = new FolderTableViewSource (NcApplication.Instance.Account.Id, hideFakeFolders: modal);
                TableView.Source = folderTableViewSource;
                TableView.ReloadData ();
            } else {
                folderTableViewSource.Refresh (NcApplication.Instance.Account.Id);
                TableView.ReloadData ();
            }

            if (!EventHandlersAreSet) {
                folderTableViewSource.OnFolderSelected += FolderTableViewSource_OnFolderSelected;
                folderTableViewSource.OnAccountSelected += FolderTableViewSource_OnAccountSelected;
                folderTableViewSource.OnToggleClick += FolderTableViewSource_OnToggleClick;
                EventHandlersAreSet = true;
            }
        }

        void FolderTableViewSource_OnToggleClick (object sender, int uniqueId)
        {
            folderTableViewSource.Toggle (uniqueId);
            TableView.ReloadData ();
        }

        void FolderTableViewSource_OnAccountSelected (object sender, McAccount account)
        {
            FolderLists.SetDefaultAccount (account.Id);
            folderTableViewSource.Refresh (NcApplication.Instance.Account.Id);
            TableView.ReloadData ();
        }

        void FolderTableViewSource_OnFolderSelected (object sender, McFolder folder)
        {
            switch(folder.Id) {
            case McFolder.HOT_FAKE_FOLDER_ID:
                PerformSegue ("SegueToHotList", new SegueHolder (null));
                return;
            case McFolder.LTR_FAKE_FOLDER_ID:
                PerformSegue ("SegueToLikelyToRead", new SegueHolder (null));
                return;
            case McFolder.DEFERRED_FAKE_FOLDER_ID:
                PerformSegue ("SegueToDeferredList", new SegueHolder (null));
                return;
            case McFolder.DEADLINE_FAKE_FOLDER_ID:
                // TODO SegueToDeadline
                return;
            }

            folder.UpdateSet_LastAccessed (DateTime.UtcNow);
            if (null == owner) {
                if (folder.IsClientOwnedDraftsFolder () || folder.IsClientOwnedOutboxFolder ()) {
                    PerformSegue ("SegueToDrafts", new SegueHolder (folder));
                } else {
                    PerformSegue ("FoldersToMessageList", new SegueHolder (folder));
                }
            } else {
                owner.FolderSelected (this, folder, cookie);
            }
        }

        void switchAccountButtonPressed ()
        {
            SwitchAccountViewController.ShowDropdown (this, SwitchToAccount);
        }

        void SwitchToAccount (McAccount account)
        {
            switchAccountButton.SetAccountImage (account);
            folderTableViewSource.Refresh (NcApplication.Instance.Account.Id);
            TableView.ReloadData ();
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if ("FoldersToMessageList" == segue.Identifier) {
                var holder = (SegueHolder)sender;
                var messageList = new NachoEmailMessages ((McFolder)holder.value);
                var messageListViewController = (MessageListViewController)segue.DestinationViewController;
                messageListViewController.SetEmailMessages (messageList);
                return;
            }
            if ("SegueToDrafts" == segue.Identifier) {
                var holder = (SegueHolder)sender;
                var draftsList = new NachoDraftMessages ((McFolder)holder.value);
                var draftsListViewController = (DraftsViewController)segue.DestinationViewController;
                draftsListViewController.SetEmailMessages (draftsList);
                return;
            }
            if ("SegueToHotList" == segue.Identifier) {
                return;
            }
            if ("SegueToDeferredList" == segue.Identifier) {
                return;
            }
            if ("SegueToLikelyToRead" == segue.Identifier) {
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        private void ComposeMessage ()
        {
            var account = McAccount.EmailAccountForAccount (NcApplication.Instance.Account);
            var composeViewController = new MessageComposeViewController (account);
            composeViewController.Present ();
        }

    }
}
