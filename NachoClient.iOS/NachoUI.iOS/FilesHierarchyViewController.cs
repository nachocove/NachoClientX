// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore.Utils;
using SWRevealViewControllerBinding;

namespace NachoClient.iOS
{
	public partial class FilesHierarchyViewController : NcUITableViewController
	{
        INachoFileChooserParent owner;
        FilesViewController.ItemType itemType;

        // cell id's
        string BasicCell = "BasicCell";

        // segue id's
        string FilesHierarchyToFiles = "FilesHierarchyToFiles";

		public FilesHierarchyViewController (IntPtr handle) : base (handle)
		{
		}

        /// <summary>
        /// INachoFileChooser delegate
        /// </summary>
        public void SetOwner (INachoFileChooserParent owner)
        {
            this.owner = owner;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();

            if (owner == null) {
                NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton };
            }

            this.TableView.TableFooterView = new UIView (new System.Drawing.RectangleF (0, 0, 0, 0));
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
        }

        public override int NumberOfSections (UITableView tableView)
        {
            return 1;
        }

        public override int RowsInSection (UITableView tableview, int section)
        {
            return 3;
        }

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = null;
            cell = tableView.DequeueReusableCell (BasicCell);
            if (cell == null) {
            cell = new UITableViewCell (UITableViewCellStyle.Default, BasicCell);
            }
            NcAssert.True (null != cell);

            switch (indexPath.Row) {
            case 0:
                cell.TextLabel.Text = "Attachments";
                break;
            case 1:
                cell.TextLabel.Text = "Shared Documents";
                break;
            case 2:
                cell.TextLabel.Text = "Notes";
                break;
            }

            // styling
            cell.TextLabel.TextColor = A.Color_NachoBlack;
            cell.TextLabel.Font = A.Font_AvenirNextRegular14;

            return cell;
        }

        public override void RowSelected (UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath)
        {
            SegueHolder holder = new SegueHolder (null);
            if (owner != null) {
                holder = new SegueHolder (owner);
            }

            switch (indexPath.Row) {
            case 0:
                itemType = FilesViewController.ItemType.Attachment;
                break;
            case 1:
                itemType = FilesViewController.ItemType.Document;
                break;
            case 2:
                itemType = FilesViewController.ItemType.Note;
                break;
            }

            PerformSegue (FilesHierarchyToFiles, holder); // holder can be filled with owner or null

            tableView.DeselectRow (indexPath, true);
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals (FilesHierarchyToFiles)) {
                var dc = (FilesViewController)segue.DestinationViewController;

                var holder = sender as SegueHolder;
                INachoFileChooserParent viewOwner;
                if (holder.value != null) { // does owner exist?
                    viewOwner = (INachoFileChooserParent)holder.value;
                    dc.SetOwner (viewOwner);
                }

                dc.itemType = this.itemType; // tell the files VC what item type to display
            }
        }

        public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
        {
            return 50.0f;
        }
	}
}
