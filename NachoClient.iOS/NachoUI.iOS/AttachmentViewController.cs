// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Linq;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Dialog;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class AttachmentViewController : DialogViewController
    {
        public AttachmentViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // Multiple buttons on the left side
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };
            using (var nachoImage = UIImage.FromBundle ("Nacho-Cove-Icon")) {
                nachoButton.Image = nachoImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal);
            }
            nachoButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("AttachmentsToNachoNow", this);
            };

            // Watch for changes from the back end
            BackEnd.Instance.StatusIndEvent += (object sender, EventArgs e) => {
                var s = (StatusIndEventArgs)e;
                if (NcResult.SubKindEnum.Info_AttDownloadUpdate == s.Status.SubKind) {
                    RefreshAttachmentSection ();
                }
            };
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            RefreshAttachmentSection ();
        }

        public void RefreshAttachmentSection()
        {
            var root = new RootElement ("Attachments");
            var section = new Section ();

            var attachmentList = NcModel.Instance.Db.Table<McAttachment> ().ToList ();
            foreach (var a in attachmentList) {
                StyledStringElement s;
                if (a.IsInline) {
                    s = new StyledStringElement (a.DisplayName, "Is inline", UITableViewCellStyle.Subtitle);
                } else if (a.IsDownloaded) {
                    s = new StyledStringElement (a.DisplayName, "Is downloaded", UITableViewCellStyle.Subtitle);
                    s.Tapped += delegate {
                        var id = a.Id;
                        attachmentAction (id);
                    };
                } else if (a.PercentDownloaded > 0) {
                    s = new StyledStringElement (a.DisplayName, "Downloading...", UITableViewCellStyle.Subtitle);
                } else {
                    s = new StyledStringElement (a.DisplayName, "Is not downloaded", UITableViewCellStyle.Subtitle);
                    s.Tapped += delegate {
                        var id = a.Id;
                        attachmentAction (id);
                    };
                }
                section.Add (s);
            }
            root.Add (section);
            Root = root;

        }

        void attachmentAction (int attachmentId)
        {
            var a = McAttachment.QueryById<McAttachment> (attachmentId);
            if (a.IsDownloaded) {
                DisplayAttachment (a);
            } else {
                DownloadAttachment (a);
            }
        }

        void DisplayAttachment (McAttachment attachment)
        {
            // FIXME - dont compute path here.
            var path = Path.Combine (NcModel.Instance.AttachmentsDir, attachment.Id.ToString(), attachment.LocalFileName);
            UIDocumentInteractionController Preview = UIDocumentInteractionController.FromUrl (NSUrl.FromFilename (path));
            Preview.Delegate = new DocumentInteractionControllerDelegate (this);
            Preview.PresentPreview (true);
        }

        void DownloadAttachment (McAttachment attachment)
        {
            if (!attachment.IsDownloaded && (attachment.PercentDownloaded == 0)) {
                var account = NcModel.Instance.Db.Table<McAccount> ().First ();
                BackEnd.Instance.DnldAttCmd (account.Id, attachment.Id);
                RefreshAttachmentSection ();
            }
        }

        public class DocumentInteractionControllerDelegate : UIDocumentInteractionControllerDelegate
        {
            UIViewController viewC;

            public DocumentInteractionControllerDelegate (UIViewController controller)
            {
                viewC = controller;
            }

            public override UIViewController ViewControllerForPreview (UIDocumentInteractionController controller)
            {
                return viewC;
            }

            public override UIView ViewForPreview (UIDocumentInteractionController controller)
            {
                return viewC.View;
            }

            public override RectangleF RectangleForPreview (UIDocumentInteractionController controller)
            {
                return viewC.View.Frame;
            }
        }
    }
}
