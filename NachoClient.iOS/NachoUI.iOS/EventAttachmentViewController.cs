// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.EventKit;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class EventAttachmentViewController : NcUIViewController
    {
        public EventAttachmentViewController (IntPtr handle) : base (handle)
        {
        }

        //protected AttachmentTableViewSource attachmentSource;
        protected McAccount account;
        protected McCalendar c;
        protected bool editing;
        protected INachoAttendeeListChooserDelegate owner;
        List<McAttachment> AttachmentsList = new List<McAttachment> ();

        UILabel emptyListLabel;

        protected static int SEGMENTED_CONTROL_TAG = 100;
        protected static float SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;

        public void SetOwner (INachoAttendeeListChooserDelegate owner, List<McAttachment> attachments, McCalendar c, bool editing)
        {
            this.owner = owner;
            this.AttachmentsList = attachments;
            this.c = c;
            this.editing = editing;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            account = NcModel.Instance.Db.Table<McAccount> ().Where (x => x.AccountType == McAccount.AccountTypeEnum.Exchange).FirstOrDefault ();

            CreateEventAttachmentView ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            LoadAttachments ();
            ConfigureEventAttachmentView ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            //EventAttachmentsTableView.ReloadData ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        /// <summary>
        /// Prepares for segue.
        /// </summary>
        /// <param name="segue">Segue in charge</param>
        /// <param name="sender">Typically the cell that was clicked.</param>
        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
//            if (segue.Identifier.Equals ("EventAttendeesToContactChooser")) {
//                var dc = (INachoContactChooser)segue.DestinationViewController;
//                var holder = sender as SegueHolder;
//                var address = (NcEmailAddress)holder.value;
//                //dc.SetOwner (this, address, NachoContactType.EmailRequired);
//                return;
//            }


            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        public void LoadAttachments ()
        {
            NachoClient.Util.HighPriority ();
//            attachmentSource.SetAttachmentsList (this.AttachmentsList);
            //            attachmentSource.SetAccount (account);
            //EventAttachmentsTableView.ReloadData ();
            NachoClient.Util.RegularPriority ();
        }

        public void SetAttachmentsList (List<McAttachment> attachments)
        {
            this.AttachmentsList = new List<McAttachment> ();
            foreach (var attachment in attachments) {
                this.AttachmentsList.Add (attachment);
            }
        }

        public List<McAttachment> GetAttachmentsList ()
        {
            return this.AttachmentsList;
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_CalendarSetChanged == s.Status.SubKind) {
                Log.Debug (Log.LOG_UI, "StatusIndicatorCallback");
                //                EventAttachmentsTableView.ReloadData ();
            }
        }

        protected void CreateEventAttachmentView ()
        {
            if (editing) {
                NavigationItem.RightBarButtonItem = addAttachmentButton;
                addAttachmentButton.Clicked += (object sender, EventArgs e) => {
                };
            } else {
                NavigationItem.RightBarButtonItem = null;
            }
            emptyListLabel = new UILabel (new RectangleF (0, 80, SCREEN_WIDTH, 20));
            emptyListLabel.TextAlignment = UITextAlignment.Center;
            emptyListLabel.Font = A.Font_AvenirNextDemiBold14;
            emptyListLabel.TextColor = A.Color_NachoSeparator;
            emptyListLabel.Hidden = true;
            View.AddSubview (emptyListLabel);

        }

        protected void ConfigureEventAttachmentView ()
        {
            if (0 == AttachmentsList.Count) {
//                EventAttachmentsTableView.Hidden = true;
                emptyListLabel.Hidden = false;
                emptyListLabel.Text = "No attachments";
            } else {
                //attachmentSource.SetAttachmentsList (this.AttachmentsList);
//                EventAttachmentsTableView.ReloadData ();
//                EventAttachmantsTableView.Hidden = false;
                emptyListLabel.Hidden = true;
            }
        }

        public void RemoveAttachment (McAttachment attachment)
        {
            List<McAttachment> tempList = new List<McAttachment> ();
//            foreach (var a in AttachmentsList) {
//                if (a.Email != attachment.Email) {
//                    tempList.Add (a);
//                }
//            }
            AttachmentsList = tempList;
            ConfigureEventAttachmentView ();
        }
            
        public void DeleteEmailAddress (NcEmailAddress address)
        {
            NcAssert.CaseError ();
        }

        public void DismissINachoContactChooser (INachoContactChooser vc)
        {
            NcAssert.CaseError ();
        }

        /// IContactsTableViewSourceDelegate
        public void PerformSegueForDelegate (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        /// IContactsTableViewSourceDelegate
        public void ContactSelectedCallback (McContact contact)
        {
            PerformSegue ("ContactsToContactDetail", new SegueHolder (contact));
        }


    }

}
