// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.EventKit;
using System.IO;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class EventAttachmentViewController : NcUIViewController
    {
        public EventAttachmentViewController (IntPtr handle) : base (handle)
        {
        }

        protected AttachmentTableViewSource attachmentSource;
        protected UITableView tableView;
        List<McAttachment> AttachmentsList = new List<McAttachment> ();

        UILabel attachedLabel;
        UIView addAttachmentView;

        public void SetAttachments (List<McAttachment> attachments)
        {
            this.AttachmentsList = attachments;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            attachmentSource = new AttachmentTableViewSource ();

            CreateEventAttachmentView ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            ConfigureEventAttachmentView ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            tableView.ReloadData ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_CalendarSetChanged == s.Status.SubKind) {
                Log.Debug (Log.LOG_UI, "StatusIndicatorCallback");
                tableView.ReloadData ();
            }
        }

        protected void CreateEventAttachmentView ()
        {
            Util.SetBackButton (NavigationController, NavigationItem, A.Color_NachoBlue);

            addAttachmentView = new UIView (new RectangleF (A.Card_Horizontal_Indent, A.Card_Vertical_Indent, View.Frame.Width - 30, View.Frame.Height - (2 * A.Card_Vertical_Indent) - 64));
            addAttachmentView.BackgroundColor = UIColor.White;
            addAttachmentView.Layer.CornerRadius = A.Card_Corner_Radius;
            addAttachmentView.Layer.BorderColor = A.Card_Border_Color;
            addAttachmentView.Layer.BorderWidth = A.Card_Border_Width;
            View.AddSubview (addAttachmentView);

            attachedLabel = new UILabel (new RectangleF (15, 12, 100, 20));
            attachedLabel.Text = "Attached:";
            attachedLabel.Font = A.Font_AvenirNextMedium14;
            attachedLabel.TextColor = A.Color_NachoTextGray;
            addAttachmentView.AddSubview (attachedLabel);

            Util.AddHorizontalLine (0, 43, addAttachmentView.Frame.Width, A.Color_NachoBorderGray, addAttachmentView);

            tableView = new UITableView (new RectangleF (16, 64, View.Frame.Width - 32, addAttachmentView.Frame.Height - 48), UITableViewStyle.Plain);
            tableView.SeparatorColor = UIColor.Clear;
            tableView.BackgroundColor = UIColor.White;
            tableView.Source = attachmentSource;
            View.AddSubview (tableView);

            View.BackgroundColor = A.Color_NachoBackgroundGray;
        }

        protected void ConfigureEventAttachmentView ()
        {
            NavigationItem.Title = "Attachments";
            attachmentSource.SetAttachmentList (this.AttachmentsList);
            attachmentSource.SetVC (this);
            tableView.ReloadData ();
        }
    }
}
