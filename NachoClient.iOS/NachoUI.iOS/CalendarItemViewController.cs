// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore.Model;
using MonoTouch.Dialog;
using MonoTouch.CoreGraphics;

namespace NachoClient.iOS
{
    public partial class CalendarItemViewController : DialogViewController
    {
        public bool editing;
        UIBarButtonItem doneButton;
        UIBarButtonItem editButton;
        public McCalendar calendarItem;
        private McCalendar c;

        public CalendarItemViewController (IntPtr handle) : base (handle)
        {
            doneButton = new UIBarButtonItem (UIBarButtonSystemItem.Done);
            editButton = new UIBarButtonItem (UIBarButtonSystemItem.Edit);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // When user clicks done, check, confirm, and save
            doneButton.Clicked += (object sender, EventArgs e) => {
                // TODO: Check for changes before asking the user
                UIAlertView alert = new UIAlertView ();
                alert.Title = "Confirmation";
                alert.Message = "Save this calendar event?";
                alert.AddButton ("Yes");
                alert.AddButton ("No");
                alert.Dismissed += (object alertSender, UIButtonEventArgs alertEvent) => {
                    if (0 == alertEvent.ButtonIndex) {
                        editing = false;
                        // TODO: Save the new
                        NavigationItem.RightBarButtonItem = editButton;
                        Root = ShowDetail ();
                        ReloadComplete ();
                    }
                };
                alert.Show ();
            };

            editButton.Clicked += (object sender, EventArgs e) => {
                editing = true;
                NavigationItem.RightBarButtonItem = doneButton;
                Root = EditDetail ();
                ReloadComplete ();
            };
                
            // Set up view
            Pushing = true;
            if (null == calendarItem) {
                editing = true;
                c = new McCalendar ();
                Root = EditDetail ();
                NavigationItem.RightBarButtonItem = doneButton;
            } else {
                editing = false;
                calendarItem.ReadAncillaryData ();
                c = calendarItem;
                Root = ShowDetail ();
                NavigationItem.RightBarButtonItem = editButton;
            }

            TableView.SeparatorColor = UIColor.Clear;
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("CalendarItemToAttendeeView")) {
                var dc = (AttendeeViewController)segue.DestinationViewController;
                dc.PushAttendees (c.attendees);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    dc.PullAttendees (ref c.attendees);
                };
            }
        }

        /// <summary>
        /// Shows the calendar, read-only.
        /// </summary>
        public RootElement ShowDetail ()
        {
            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = CustomSection ();
            section.Add (new SubjectElement (c.Subject));
            section.Add (new StartTimeElement (PrettyFullDateString (c.StartTime)));
            if (c.AllDayEvent) {
                section.Add (new DurationElement (PrettyAllDayStartToEnd (c)));
            } else {
                section.Add (new DurationElement (PrettyEventStartToEnd (c)));
            }
            root.Add (section);

            if (null != c.Location) {
                section = CustomSection ();
                section.Add (new LocationElement (c.Location));
                root.Add (section);
            }

            section = CustomSection ();
            {
                var e = new StyledStringElement ("People");
                var image = UIImage.FromBundle ("ic_action_group");
                e.Image = image.Scale (new SizeF (22.0f, 22.0f));
                e.Font = UIFont.SystemFontOfSize (17.0f);
                e.Tapped += () => {
                    PushAttendeeView ();
                };
                e.Accessory = UITableViewCellAccessory.DisclosureIndicator;
                section.Add (e);
            }
            root.Add (section);

            section = CustomSection ();
            section.Add (new StyledStringElementWithIcon ("Reminder", PrettyReminderString (c.Reminder), "ic_action_alarms"));
            root.Add (section);

            return root;
        }

        EntryElementWithIcon titleEntryElement;
        AppointmentEntryElement appointmentEntryElement;
        RootElementWithIcon reminderEntryElement;
        PeopleEntryElement peopleEntryElement;
        EntryElementWithIcon locationEntryElement;

        /// <summary>
        /// Edit the (possibly empty) calendar entry
        /// </summary>
        public RootElement EditDetail ()
        {
            titleEntryElement = new EntryElementWithIcon (DotWithColor (UIColor.Blue), "Title", c.Subject);
            using (var icon = UIImage.FromBundle ("ic_action_place")) {
                var scaledIcon = icon.Scale (new SizeF (22.0f, 22.0f));
                locationEntryElement = new EntryElementWithIcon (scaledIcon, "Location", c.Location);
            }
            appointmentEntryElement = new AppointmentEntryElement (DateTime.Now, DateTime.Now);
            peopleEntryElement = new PeopleEntryElement ();

            reminderEntryElement = new RootElementWithIcon ("Reminder");
            reminderEntryElement.Add (new ReminderSection (c.Reminder));
            reminderEntryElement.UnevenRows = true;

            appointmentEntryElement.Tapped += (DialogViewController arg1, UITableView arg2, NSIndexPath arg3) => {
                arg2.DeselectRow (arg3, true);
                AppointmentEntryPopup ();
            };

            peopleEntryElement.Tapped += () => {
                AttendeeEntryPopup ();
            };
                
            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = CustomSection ();
            section.Add (titleEntryElement);
            root.Add (section);

            section = CustomSection ();
            section.Add (appointmentEntryElement);
            root.Add (section);

            section = CustomSection ();
            section.Add (peopleEntryElement);
            root.Add (section);

            section = CustomSection ();
            section.Add (locationEntryElement);
            root.Add (section);

            section = CustomSection ();
            section.Add (reminderEntryElement);
            root.Add (section);

            return root;
        }

        static public string PrettyReminderString (uint reminder)
        {
            if (0 == reminder) {
                return "None";
            }
            if (1 == reminder) {
                return "1 minute before";
            }
            if (60 == reminder) {
                return "1 hour before";
            }
            if ((24 * 60) == reminder) {
                return "1 day before";
            }
            return String.Format ("{0} minutes before", reminder);
        }

        public class ReminderSection : Section
        {
            List<CheckboxElementWithData> list;
            NumericEntryElementWithCheckmark custom;
            HiddenElement hidden;

            public ReminderSection (uint initialValue)
            {
                list = new List<CheckboxElementWithData> ();

                hidden = new HiddenElement ("");
                this.Add (hidden);

                CreateCheckboxElementWithData (PrettyReminderString (1), 1);
                CreateCheckboxElementWithData (PrettyReminderString (5), 5);
                CreateCheckboxElementWithData (PrettyReminderString (60), 60);
                CreateCheckboxElementWithData (PrettyReminderString (24 * 60), 24 * 60);
                CreateCheckboxElementWithData (PrettyReminderString (0), 0);

                custom = new NumericEntryElementWithCheckmark ("Custom", "", "", false);
                custom.ClearButtonMode = UITextFieldViewMode.WhileEditing;
                custom.KeyboardType = UIKeyboardType.Default;
                this.Add (custom);

                bool found = false;
                foreach (var l in list) {
                    if (initialValue == l.Data) {
                        hidden.SetSummary (l.Summary (), l.Data);
                        l.Value = true;
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    custom.checkmark = true;
                    custom.Value = PrettyReminderString (initialValue);
                    hidden.SetSummary (custom.Value, initialValue);
                }

                custom.EntryStarted += delegate {
                    foreach (var l in list) {
                        l.Value = false;
                    }
                    custom.checkmark = true;
                    custom.GetImmediateRootElement ().Reload (this, UITableViewRowAnimation.None);
                    custom.BecomeFirstResponder (true);
                };
                custom.EntryEnded += delegate {
                    if (custom.checkmark) {
                        if (String.IsNullOrEmpty (custom.Value)) {
                            hidden.SetSummary ("None", 0);
                        } else {
                            hidden.SetSummary (PrettyReminderString (custom.NumericValue), custom.NumericValue);
                        }
                    }
                    custom.GetImmediateRootElement ().Reload (this, UITableViewRowAnimation.None);
                };
            }

            protected CheckboxElementWithData CreateCheckboxElementWithData (string caption, uint data)
            {
                var c = new CheckboxElementWithData (caption, data);
                this.Add (c);
                list.Add (c);

                c.Tapped += () => {
                    foreach (var l in list) {
                        l.Value = false;
                    }
                    c.Value = true;
                    custom.checkmark = false;
                    hidden.SetSummary (c.Summary (), c.Data);
                    c.GetImmediateRootElement ().Reload (this, UITableViewRowAnimation.None);
                };

                return c;
            }
        }

        public class HiddenElement : OwnerDrawnElement
        {
            string summary;
            public uint Value;

            public HiddenElement (string summary) : base (UITableViewCellStyle.Default, "Nacho.HiddenElement")
            {
                this.summary = summary;
            }

            public void SetSummary (string summary, uint value)
            {
                this.summary = summary;
                this.Value = value;
            }

            public override string Summary ()
            {
                return summary;
            }

            public override void Draw (RectangleF bounds, CGContext context, UIView view)
            {
                UIColor.White.SetFill ();
                context.FillRect (bounds);
            }

            public override float Height (RectangleF bounds)
            {
                return 0.0f;
            }
        }

        public class CheckboxElementWithData : CheckboxElement
        {
            public uint Data { get; set; }

            public CheckboxElementWithData (string caption, uint data) : base (caption)
            {
                this.Data = data;
            }
        }

        public Section CustomSection ()
        {
            var s = new Section ();
            s.HeaderView = new UIView (new RectangleF (0.0f, 0.0f, 1.0f, 15.0f));
            s.FooterView = new UIView (new RectangleF (0.0f, 0.0f, 1.0f, 1.0f));
            return s;
        }

        public class RootElementWithIcon : RootElement
        {
            public RootElementWithIcon (string caption, Group group) : base (caption, group)
            {
            }

            public RootElementWithIcon (string caption) : base (caption, 0, 0)
            {
            }

            protected override NSString CellKey {
                get {
                    return new NSString ("Nacho.RootElementWithIcon");
                }
            }

            public override UITableViewCell GetCell (UITableView tv)
            {
                var c = base.GetCell (tv);
                c.ImageView.Image = UIImage.FromBundle ("ic_action_alarms").Scale (new SizeF (22.0f, 22.0f));
                c.TextLabel.TextColor = UIColor.Gray;
                c.DetailTextLabel.TextColor = UIColor.Black;
                return c;
            }
        }

        public class EntryElementWithIcon : EntryElement
        {
            protected UIImage icon { get; private set; }

            public EntryElementWithIcon (UIImage icon, string placeholder, string value) : base ("", placeholder, value)
            {
                this.icon = icon;
            }

            protected override NSString CellKey {
                get {
                    return new NSString ("Nacho.EntryElementWithIcon");
                }
            }

            public override UITableViewCell GetCell (UITableView tv)
            {
                var cell = base.GetCell (tv);
                var textField = cell.ContentView.ViewWithTag (1);
                var textFieldframe = textField.Frame;
                textFieldframe.Location = new PointF (50.0f, textFieldframe.Location.Y);
                textField.Frame = textFieldframe;
                cell.ImageView.Image = icon;
                return cell;
            }
        }

        public class EntryElementWithCheckmark: EntryElement
        {
            public bool checkmark{ get; set; }

            public EntryElementWithCheckmark (string caption, string placeholder, string value, bool checkmark) : base (caption, placeholder, value)
            {
                this.checkmark = checkmark;
            }

            protected override NSString CellKey {
                get {
                    return new NSString ("Nacho.EntryElementWithCheckmark");
                }
            }

            public override UITableViewCell GetCell (UITableView tv)
            {
                var cell = base.GetCell (tv);
                if (checkmark) {
                    cell.Accessory = UITableViewCellAccessory.Checkmark;
                } else {
                    cell.Accessory = UITableViewCellAccessory.None;
                }
                return cell;
            }
        }

        public class NumericEntryElementWithCheckmark: EntryElementWithCheckmark
        {
            public uint NumericValue {
                get {
                    if (String.IsNullOrEmpty (this.Value)) {
                        return 0;
                    }
                    ;
                    uint result;
                    if (uint.TryParse (this.Value, out result)) {
                        return result;
                    }
                    return 0;
                }
            }

            public NumericEntryElementWithCheckmark (string caption, string placeholder, string value, bool checkmark) : base (caption, placeholder, value, checkmark)
            {
                this.checkmark = checkmark;
            }

            protected override NSString CellKey {
                get {
                    return new NSString ("Nacho.NumericEntryElementWithCheckmark");
                }
            }

            protected override UITextField CreateTextField (RectangleF frame)
            {
                UITextField tf = base.CreateTextField (frame);
                tf.ShouldChangeCharacters += delegate (UITextField textField, NSRange range, string replacementString) {
                    if (String.IsNullOrEmpty (replacementString)) {
                        return true;
                    }
                    uint result;
                    var testString = textField.Text.Remove (range.Location, range.Length);
                    testString = testString.Insert (range.Location, replacementString);
                    if (false == uint.TryParse (testString, out result)) {
                        return false;
                    }
                    return true;
                };
                return tf;
            }
        }

        public class SubjectElement : StyledMultilineElement
        {
            public SubjectElement (string caption) : base (caption)
            {
                this.Image = CalendarItemViewController.DotWithColor (UIColor.Blue);
                this.Font = UIFont.SystemFontOfSize (17.0f);
            }
        }

        public class PeopleEntryElement : StyledStringElement
        {
            public PeopleEntryElement () : base ("People")
            {
                this.Accessory = UITableViewCellAccessory.DisclosureIndicator;
                var image = UIImage.FromBundle ("ic_action_group");
                this.Image = image.Scale (new SizeF (22.0f, 22.0f));
                this.Font = UIFont.SystemFontOfSize (17.0f);
                this.TextColor = UIColor.Gray;
            }
        }

        public class DateTimeEntryElement : DateTimeElement
        {
            public DateTimeEntryElement (string caption) : base (caption, DateTime.Now)
            {
            }
        }

        public class StartTimeElement : StyledStringElement
        {
            public StartTimeElement (string caption) : base (caption)
            {
                // Add (invisible) image to get the proper indentation
                this.Image = CalendarItemViewController.DotWithColor (UIColor.Clear);
                this.Font = UIFont.SystemFontOfSize (15.0f);
            }
        }

        public class DurationElement : StyledStringElement
        {
            public DurationElement (string caption) : base (caption)
            {
                var image = UIImage.FromBundle ("ic_action_time");
                this.Image = image.Scale (new SizeF (22.0f, 22.0f));
                this.Font = UIFont.SystemFontOfSize (15.0f);
            }
        }

        public class StyledStringElementWithIcon : StyledStringElement
        {
            public StyledStringElementWithIcon (string caption, string value, string icon) : base (caption, value)
            {
                var image = UIImage.FromBundle (icon);
                this.Image = image.Scale (new SizeF (22.0f, 22.0f));
                this.Font = UIFont.SystemFontOfSize (15.0f);
                this.TextColor = UIColor.LightGray;
                this.DetailColor = UIColor.Black;
            }

            public StyledStringElementWithIcon (string caption, string icon) : this (caption, "", icon)
            {
                this.Font = UIFont.SystemFontOfSize (15.0f);
                this.TextColor = UIColor.Black;
            }
        }

        public class LocationElement : StyledMultilineElement
        {
            public LocationElement (string caption) : base (caption)
            {
                var image = UIImage.FromBundle ("ic_action_place");
                this.Image = image.Scale (new SizeF (22.0f, 22.0f));
                this.Font = UIFont.SystemFontOfSize (17.0f);
            }
        }

        /// <summary>
        /// Update the screen representation with new
        /// start, end, and all-day event information.
        /// </summary>
        public void AppointmentEntryPopup ()
        {
            var allDayEvent = new BooleanElement ("All day event", appointmentEntryElement.allDayEvent);
            var startDateTimeElement = new DateTimeEntryElement ("Start time");
            var endDateTimeElement = new DateTimeEntryElement ("End time");

            startDateTimeElement.DateValue = appointmentEntryElement.startDateTime;
            endDateTimeElement.DateValue = appointmentEntryElement.endDateTime;
            allDayEvent.Value = appointmentEntryElement.allDayEvent;

            var root = new RootElement ("Meeting Time");
            var section = new Section ();
            section.Add (startDateTimeElement);
            section.Add (endDateTimeElement);
            section.Add (allDayEvent);
            root.Add (section);
                  
            var dvc = new DialogViewController (root, true);

            dvc.ViewDisappearing += (object sender, EventArgs e) => {
                appointmentEntryElement.allDayEvent = allDayEvent.Value;
                appointmentEntryElement.startDateTime = startDateTimeElement.DateValue;
                appointmentEntryElement.endDateTime = endDateTimeElement.DateValue;
                Root.Reload (appointmentEntryElement, UITableViewRowAnimation.Fade);
            };

            NavigationController.PushViewController (dvc, true);
        }

        public void AttendeeEntryPopup ()
        {
            PerformSegue ("CalendarItemToAttendeeView", this);
        }

        public string PrettyFullDateString (DateTime d)
        {
            return d.ToString ("D");
        }

        public string PrettyAllDayStartToEnd (McCalendar c)
        {
            var d = c.EndTime.Date.Subtract (c.StartTime.Date);
            if (d.Minutes < 1) {
                return "All day";
            }
            return String.Format ("All day ({0} days)", d.Days);
        }

        public string PrettyEventStartToEnd (McCalendar c)
        {
            var startString = c.StartTime.ToString ("t");

            if (c.StartTime == c.EndTime) {
                return startString;
            }
            var durationString = PrettyEventDuration (c);
            if (c.StartTime.Date == c.EndTime.Date) {
                return String.Format ("{0} - {1} ({2})", startString, c.EndTime.ToString ("t"), durationString);
            } else {
                return String.Format ("{0} -\n{1} ({2})", startString, PrettyFullDateString (c.EndTime), durationString);
            }
        }

        public string PrettyEventDuration (McCalendar c)
        {
            var d = c.EndTime.Subtract (c.StartTime);

            if (0 == d.TotalMinutes) {
                return ""; // no duration
            }

            // Even number of days?
            if (0 == (d.TotalMinutes % (24 * 60))) {
                if (1 == d.Days) {
                    return "1 day";
                } else {
                    return String.Format ("{0} days", d.Days);
                }
            }
            // Even number of hours?
            if (0 == (d.TotalMinutes % 60)) {
                if (1 == d.Hours) {
                    return "1 hour";
                } else {
                    return String.Format ("{0} hours", d.Hours);
                }
            }
            // Less than one hour?
            if (60 > d.Minutes) {
                if (1 == d.Minutes) {
                    return "1 minute";
                } else {
                    return String.Format ("{0} minutes", d.Minutes);
                }
            }
            // Less than one day?
            if ((24 * 60) > d.Minutes) {
                return String.Format ("{0}:{1} hours", d.Hours, d.Minutes % 60);
            } else {
                return String.Format ("{0}d{1}h{2}m", d.Days, d.Hours % 24, d.Minutes % 60);
            }
        }

        public static UIImage DotWithColor (UIColor color)
        {
            UIGraphics.BeginImageContext (new SizeF (22, 22));
            var ctx = UIGraphics.GetCurrentContext ();

            ctx.SetFillColor (color.CGColor);
            ctx.FillEllipseInRect (new RectangleF (5, 5, 12, 12));

            var image = UIGraphics.GetImageFromCurrentImageContext ();
            UIGraphics.EndImageContext ();
            return image;
        }

        public void PushAttendeeView ()
        {
            var root = new RootElement (c.Subject);
            var section = new Section ();

            foreach (var attendee in c.attendees) {
                var name = attendee.Name;
                var email = attendee.Email;
                var status = attendee.AttendeeStatus;
                section.Add (new AttendeeElement (name, email, status));
            }

            var dynamic = new DialogViewController (root, true);
            NavigationController.PushViewController (dynamic, true);
        }

        class AttendeeElement : StyledStringElement
        {
            public AttendeeElement (string name, string email, NcAttendeeStatus status) : base (name, email, UITableViewCellStyle.Value2)
            {
                switch (status) {
                case NcAttendeeStatus.Accept:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Green);
                    break;
                case NcAttendeeStatus.Decline:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Red);
                    break;
                case NcAttendeeStatus.NotResponded:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Gray);
                    break;
                case NcAttendeeStatus.ResponseUnknown:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.LightGray);
                    break;
                case NcAttendeeStatus.Tentative:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Yellow);
                    break;
                }
            }
        }
    }
}
