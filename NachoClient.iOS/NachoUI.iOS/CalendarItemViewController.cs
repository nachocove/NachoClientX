// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Drawing;
using System.IO;
using System.Text;
using DDay.iCal;
using DDay.iCal.Serialization.iCalendar;
using MimeKit;
using MonoTouch.Dialog;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore.ActiveSync;

namespace NachoClient.iOS
{
    public partial class CalendarItemViewController : DialogViewController
    {
        protected enum Action
        {
            undefined,
            create,
            edit,
        };

        protected Action action;
        public McCalendar calendarItem;
        // 'c' is working copy
        protected McCalendar c;
        protected bool editing;
        protected McFolder folder;
        protected McAccount account;
        protected NachoFolders calendars;

        public CalendarItemViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // When user clicks done, check, confirm, and save
            doneButton.Clicked += (object sender, EventArgs e) => {
                // TODO: Check for changes before asking the user
                UIAlertView alert = new UIAlertView ();
                alert.Title = "Confirmation";
                alert.Message = "Save this calendar event?";
                alert.AddButton ("Yes");
                alert.AddButton ("No");
                alert.Dismissed += (object alertSender, UIButtonEventArgs alertEvent) => {
                    if (0 == alertEvent.ButtonIndex) {
                        var iCal = ExtractDialogValues ();
                        SyncMeetingRequest ();
                        SendInvites (iCal);
                        ReloadRoot (ShowDetail ());
                    }
                };
                alert.Show ();
            };

            editButton.Clicked += (object sender, EventArgs e) => {
                ReloadRoot (EditDetail ());
            };

            cancelButton.Clicked += (object sender, EventArgs e) => {
                if (Action.create == action) {
                    NavigationController.PopViewControllerAnimated (true);
                    return;
                }
                if (Action.edit == action) {
                    c = calendarItem;
                    ReloadRoot (ShowDetail ());
                    return;
                }
                NachoAssert.CaseError ();
            };

            // TODO: Need account manager.
            // We only have one account, for now.
            account = BackEnd.Instance.Db.Table<McAccount> ().First ();
            calendars = new NachoFolders (NachoFolders.FilterForCalendars);

            // Set up view
            Pushing = true;
            if (null == calendarItem) {
                action = Action.create;
                c = new McCalendar ();
                var start = DateTime.Now.AddMinutes (30.0);
                if (start.Minute >= 30.0) {
                    c.StartTime = new DateTime (start.Year, start.Month, start.Day, start.Hour, 30, 0, DateTimeKind.Local);
                } else {
                    c.StartTime = new DateTime (start.Year, start.Month, start.Day, start.Hour, 0, 0, DateTimeKind.Local);
                }
                c.EndTime = c.StartTime.AddMinutes (30.0);
                Root = EditDetail ();
            } else {
                action = Action.edit;
                c = calendarItem;
                Root = ShowDetail ();
            }
            TableView.SeparatorColor = UIColor.Clear;
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            this.NavigationController.ToolbarHidden = true;
        }

        protected void ReloadRoot (RootElement root)
        {
            NSAction animation = new NSAction (delegate {
                Root = root;
                ReloadComplete ();
            });
            UIView.Transition (TableView, 0.3, UIViewAnimationOptions.TransitionCrossDissolve, animation, null);
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("CalendarItemToAttendeeView")) {
                var dc = (AttendeeViewController)segue.DestinationViewController;
                dc.SetAttendeeList (c.attendees);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    c.attendees = dc.GetAttendeeList ();
                };
            }
        }

        /// <summary>
        /// Shows the calendar, read-only.
        /// </summary>
        protected RootElement ShowDetail ()
        {
            editing = false;
            NavigationItem.LeftBarButtonItem = null;
            NavigationItem.RightBarButtonItem = editButton;

            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = new ThinSection ();
            section.Add (new SubjectElement (c.Subject));
            section.Add (new StartTimeElementWithIconIndent (Pretty.FullDateString (c.StartTime)));
            if (c.AllDayEvent) {
                section.Add (new DurationElement (Pretty.AllDayStartToEnd (c.StartTime, c.EndTime)));
            } else {
                section.Add (new DurationElement (Pretty.EventStartToEnd (c.StartTime, c.EndTime)));
            }
            root.Add (section);

            if (c.ResponseRequested) {
                section = new ThinSection ();
                var button1 = new StyledStringElementWithDot ("Accept", UIColor.Green);
                button1.Tapped += () => {
                    UpdateStatus (NcResponseType.Accepted);
                };
                var button2 = new StyledStringElementWithDot ("Tentative", UIColor.Yellow);
                button2.Tapped += () => {
                    UpdateStatus (NcResponseType.Tentative);
                };
                var button3 = new StyledStringElementWithDot ("Decline", UIColor.Red);
                button3.Tapped += () => {
                    UpdateStatus (NcResponseType.Declined);
                };
                section.Add (button1);
                section.Add (button2);
                section.Add (button3);
                root.Add (section);
            }
                
            // TODO: Give section an icon
            RenderBodyIfAvailable (root);

            if (null != c.Location) {
                section = new ThinSection ();
                section.Add (new LocationElement (c.Location));
                root.Add (section);
            }

            section = new ThinSection ();
            {
                var e = new StyledStringElement ("People");
                var image = UIImage.FromBundle ("ic_action_group");
                e.Image = image.Scale (new SizeF (22.0f, 22.0f));
                e.Font = UIFont.SystemFontOfSize (17.0f);
                e.Tapped += () => {
                    PushAttendeeView ();
                };
                e.Accessory = UITableViewCellAccessory.DisclosureIndicator;
                section.Add (e);
            }
            root.Add (section);

            section = new ThinSection ();
            using (var image = UIImage.FromBundle ("ic_action_event")) {
                var scaledImage = image.Scale (new SizeF (22.0f, 22.0f));
                section.Add (new StyledStringElementWithIcon ("Calendar", MyCalendarName (c), scaledImage));
            }
            using (var image = UIImage.FromBundle ("ic_action_alarms")) {
                var scaledImage = image.Scale (new SizeF (22.0f, 22.0f));
                section.Add (new StyledStringElementWithIcon ("Reminder", Pretty.ReminderString (c.Reminder), scaledImage));
            }
            root.Add (section);

            return root;
        }

        void RenderBodyIfAvailable (RootElement root)
        {
            if (0 == c.BodyId) {
                return;
            }

            // FIXME: Make sure the body is mime

            MimeMessage mimeMsg;
            try {
                string body = c.GetBody ();
                if (null == body) {
                    return;
                }
                using (var bodySource = new MemoryStream (Encoding.UTF8.GetBytes (body))) {
                    var bodyParser = new MimeParser (bodySource, MimeFormat.Default);
                    mimeMsg = bodyParser.ParseMessage ();
                    MimeHelpers.DumpMessage (mimeMsg, 0);
                    var list = new List<MimeEntity> ();
                    MimeHelpers.MimeDisplayList (mimeMsg, ref list);
                    RenderDisplayList (list, root);
                }
            } catch (Exception e) {
                // TODO: Find root cause
                NachoCore.Utils.Log.Error ("CalendarItemView exception ignored:\n{0}", e);
                return;
            }
        }

        protected void RenderDisplayList (List<MimeEntity> list, RootElement root)
        {
            for (var i = 0; i < list.Count; i++) {
                var entity = list [i];
                var part = (MimePart)entity;
                if (part.ContentType.Matches ("text", "html")) {
//                    RenderHtml (part);
                    continue;
                }
                if (part.ContentType.Matches ("text", "calendar")) {
//                    RenderCalendar (part);
                    continue;
                }
                if (part.ContentType.Matches ("text", "*")) {
//                    RenderText (part);
                    continue;
                }
                if (part.ContentType.Matches ("image", "*")) {
//                    RenderImage (part);
                    continue;
                }
                if (part.ContentType.Matches ("application", "ms-tnef")) {
                    // Gets the decoded text content.
                    var decodedStream = new MemoryStream ();
                    part.ContentObject.DecodeTo (decodedStream);
                    decodedStream.Seek (0L, SeekOrigin.Begin);
                    var tnef = new TnefEncoding (decodedStream.ToArray ());
                    var nsError = new NSError ();
                    var nsAttributes = new NSAttributedStringDocumentAttributes ();
                    nsAttributes.DocumentType = NSDocumentType.RTF;
                    var attributedString = new NSAttributedString (tnef.Body, nsAttributes, ref nsError);
                    var tv = new UITextView (new RectangleF (0, 0, 320, 1));
                    tv.AttributedText = attributedString;
                    tv.AutoresizingMask = UIViewAutoresizing.FlexibleBottomMargin;
                    tv.UserInteractionEnabled = false;
                    tv.SizeToFit ();
                    var e = new UIViewElement ("", tv, true);
                    var s = new ThinSection ();
                    s.Add (e);
                    root.Add (s);
                    continue;
                }
            }
        }

        EntryElementWithIcon subjectEntryElement;
        AppointmentEntryElement appointmentEntryElement;
        RootElementWithIcon reminderEntryElement;
        PeopleEntryElement peopleEntryElement;
        EntryElementWithIcon locationEntryElement;
        RootElementWithIcon calendarEntryElement;
        RootElementWithIcon timezoneEntryElement;

        /// <summary>
        /// Edit the (possibly empty) calendar entry
        /// </summary>
        protected RootElement EditDetail ()
        {
            editing = true;
            NavigationItem.LeftBarButtonItem = cancelButton;
            NavigationItem.RightBarButtonItem = doneButton;

            subjectEntryElement = new EntryElementWithIcon (NachoClient.Util.DotWithColor (UIColor.Blue), "Title", c.Subject);
            using (var icon = UIImage.FromBundle ("ic_action_place")) {
                var scaledIcon = icon.Scale (new SizeF (22.0f, 22.0f));
                locationEntryElement = new EntryElementWithIcon (scaledIcon, "Location", c.Location);
            }
            appointmentEntryElement = new AppointmentEntryElement (c.StartTime, c.EndTime, c.AllDayEvent);
            peopleEntryElement = new PeopleEntryElement ();

            // TODO: Get the calendar folder that holds the event
            calendarEntryElement = new RootElementWithIcon ("ic_action_event", "Calendar", new RadioGroup (0)) {
                new CalendarRadioElementSection (calendars)
            };

            reminderEntryElement = new RootElementWithIcon ("ic_action_alarms", "Reminder");
            reminderEntryElement.Add (new ReminderSection (c.Reminder));
            reminderEntryElement.UnevenRows = true;

            appointmentEntryElement.Tapped += (DialogViewController arg1, UITableView arg2, NSIndexPath arg3) => {
                arg2.DeselectRow (arg3, true);
                AppointmentEntryPopup ();
            };

            peopleEntryElement.Tapped += () => {
                AttendeeEntryPopup ();
            };
                
            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = new ThinSection ();
            section.Add (subjectEntryElement);
            root.Add (section);

            section = new ThinSection ();
            section.Add (appointmentEntryElement);
            root.Add (section);

            section = new ThinSection ();
            section.Add (peopleEntryElement);
            root.Add (section);

            section = new ThinSection ();
            section.Add (locationEntryElement);
            timezoneEntryElement = TimeZonePopup ();
            section.Add (timezoneEntryElement);
            root.Add (section);

            section = new ThinSection ();
            section.Add (calendarEntryElement);
            section.Add (reminderEntryElement);
            root.Add (section);

            return root;
        }

        protected RootElementWithIcon TimeZonePopup ()
        {
            var root = new RootElementWithIcon ("ic_action_map", "Timezone", new RadioGroup (0));
            var section = new Section ("Timezones");
            root.Add (section);

            var l = TimeZoneInfo.Local;
            section.Add (new RadioElementWithData (l.StandardName, l.Id));
            ReadOnlyCollection<TimeZoneInfo> timeZones = TimeZoneInfo.GetSystemTimeZones (); 
            foreach (TimeZoneInfo timeZone in timeZones) {
                var e = new RadioElementWithData (timeZone.DisplayName, timeZone.Id);
                section.Add (e);
            }
            return root;
        }

        /// <summary>
        /// Update the screen representation with new
        /// start, end, and all-day event information.
        /// </summary>
        protected void AppointmentEntryPopup ()
        {
            var allDayEvent = new BooleanElement ("All day event", appointmentEntryElement.allDayEvent);
            var startDateTimeElement = new DateTimeEntryElement ("Start time");
            var endDateTimeElement = new DateTimeEntryElement ("End time");

            startDateTimeElement.DateValue = appointmentEntryElement.startDateTime;
            endDateTimeElement.DateValue = appointmentEntryElement.endDateTime;
            allDayEvent.Value = appointmentEntryElement.allDayEvent;

            var root = new RootElement ("Meeting Time");
            var section = new Section ();
            section.Add (startDateTimeElement);
            section.Add (endDateTimeElement);
            section.Add (allDayEvent);
            root.Add (section);
                  
            var dvc = new DialogViewController (root, true);

            dvc.ViewDisappearing += (object sender, EventArgs e) => {
                appointmentEntryElement.allDayEvent = allDayEvent.Value;
                appointmentEntryElement.startDateTime = startDateTimeElement.DateValue;
                appointmentEntryElement.endDateTime = endDateTimeElement.DateValue;
                Root.Reload (appointmentEntryElement, UITableViewRowAnimation.Fade);
            };

            NavigationController.PushViewController (dvc, true);
        }

        public void AttendeeEntryPopup ()
        {
            PerformSegue ("CalendarItemToAttendeeView", this);
        }

        public void PushAttendeeView ()
        {
            var root = new RootElement (c.Subject);
            var section = new Section ();

            foreach (var attendee in c.attendees) {
                var name = attendee.Name;
                var email = attendee.Email;
                var status = attendee.AttendeeStatus;
                section.Add (new AttendeeElement (name, email, status));
            }
            root.Add (section);

            var dynamic = new DialogViewController (root, true);
            NavigationController.PushViewController (dynamic, true);
        }

        /// <summary>
        /// Extract values from dialog.root into 'c'.
        /// </summary>
        protected IICalendar ExtractDialogValues ()
        {
            c.Subject = subjectEntryElement.Value;
            c.AllDayEvent = appointmentEntryElement.allDayEvent;
            c.StartTime = appointmentEntryElement.startDateTime.ToUniversalTime ();
            c.EndTime = appointmentEntryElement.endDateTime.ToUniversalTime ();
            // c.attendees is already set via PullAttendees
            c.Location = locationEntryElement.Value;
            var reminderSection = reminderEntryElement [0] as ReminderSection;
            var hiddenElement = reminderSection [0] as HiddenElement;
            c.Reminder = hiddenElement.Value;
            folder = calendars.GetFolder (calendarEntryElement.RadioSelected);
            // Extras
            c.OrganizerName = Pretty.DisplayNameForAccount (account);
            c.OrganizerEmail = account.EmailAddr;
            c.AccountId = account.Id;
            c.DtStamp = DateTime.UtcNow;
            if (0 == c.attendees.Count) {
                c.MeetingStatusIsSet = true;
                c.MeetingStatus = NcMeetingStatus.Appointment;
                c.ResponseRequested = false;
                c.ResponseRequestedIsSet = true;
            } else {
                c.MeetingStatusIsSet = true;
                c.MeetingStatus = NcMeetingStatus.Meeting;
                c.ResponseRequested = true;
                c.ResponseRequestedIsSet = true;
            }
            // Timezone
            var tzid = RadioElementWithData.SelectedData (timezoneEntryElement);
            var tzi = TimeZoneInfo.FindSystemTimeZoneById (tzid);
            var tz = new AsTimeZone (tzi);
            c.TimeZone = tz.toEncodedTimeZone ();

            // IICalendar
            var iCal = iCalendarFromMcCalendar (c);
            if (String.IsNullOrEmpty (c.UID)) {
                // Note - this only works becasue DDay makes UID as a dashed GUID.
                c.UID = iCal.Events [0].UID.Replace ("-", null).ToUpper ();
                iCal.Events [0].UID = c.UID;
            } else {
                iCal.Events [0].UID = c.UID;
            }
            return iCal;
        }

        private void PopulateiCalTimeZoneInfo (ITimeZoneInfo tzi, System.TimeZoneInfo.TransitionTime transition, int year)
        {
//            Calendar c = CultureInfo.CurrentCulture.Calendar;

            RecurrencePattern recurrence = new RecurrencePattern (FrequencyType.Yearly, 1);           
            recurrence.Frequency = FrequencyType.Yearly;
            recurrence.ByMonth.Add (transition.Month);
            recurrence.ByHour.Add (transition.TimeOfDay.Hour);
            recurrence.ByMinute.Add (transition.TimeOfDay.Minute);

            if (transition.IsFixedDateRule) {
                // TODO: why does this get an error?
//                recurrence.ByMonthDay.Add(transition.Day);
                var dt = new DateTime (year, transition.Month, transition.Day);
                var dayOfWeek = dt.DayOfWeek;
                int week = 0;
                while (dt.Month == transition.Month) {
                    week += 1;
                    dt = dt.AddDays (-7);
                }
                recurrence.ByDay.Add (new WeekDay (dayOfWeek, week));

            } else {
                if (transition.Week != 5) {
                    recurrence.ByDay.Add (new WeekDay (transition.DayOfWeek, transition.Week));
                } else {
                    recurrence.ByDay.Add (new WeekDay (transition.DayOfWeek, -1));
                }
            }

            tzi.RecurrenceRules.Add (recurrence);
        }

        protected iCalTimeZone FromSystemTimeZone (System.TimeZoneInfo tzinfo, DateTime earlistDateTimeToSupport, bool includeHistoricalData)
        {
            var adjustmentRules = tzinfo.GetAdjustmentRules ();
            var utcOffset = tzinfo.BaseUtcOffset;
            var dday_tz = new iCalTimeZone ();
            dday_tz.TZID = tzinfo.Id;

            IDateTime earliest = new iCalDateTime (earlistDateTimeToSupport);
            foreach (var adjustmentRule in adjustmentRules) {
                // Only include historical data if asked to do so.  Otherwise,
                // use only the most recent adjustment rule available.
                if (!includeHistoricalData && adjustmentRule.DateEnd < earlistDateTimeToSupport)
                    continue;

                var delta = adjustmentRule.DaylightDelta;
                var dday_tzinfo_standard = new DDay.iCal.iCalTimeZoneInfo ();
                dday_tzinfo_standard.Name = "STANDARD";
                dday_tzinfo_standard.TimeZoneName = tzinfo.StandardName;
                dday_tzinfo_standard.Start = new iCalDateTime (new DateTime (adjustmentRule.DateStart.Year, adjustmentRule.DaylightTransitionEnd.Month, adjustmentRule.DaylightTransitionEnd.Day, adjustmentRule.DaylightTransitionEnd.TimeOfDay.Hour, adjustmentRule.DaylightTransitionEnd.TimeOfDay.Minute, adjustmentRule.DaylightTransitionEnd.TimeOfDay.Second).AddDays (1));
                if (dday_tzinfo_standard.Start.LessThan (earliest))
                    dday_tzinfo_standard.Start = dday_tzinfo_standard.Start.AddYears (earliest.Year - dday_tzinfo_standard.Start.Year);
                dday_tzinfo_standard.OffsetFrom = new UTCOffset (utcOffset + delta);
                dday_tzinfo_standard.OffsetTo = new UTCOffset (utcOffset);
                PopulateiCalTimeZoneInfo (dday_tzinfo_standard, adjustmentRule.DaylightTransitionEnd, adjustmentRule.DateStart.Year);

                // Add the "standard" time rule to the time zone
                dday_tz.AddChild (dday_tzinfo_standard);

                if (tzinfo.SupportsDaylightSavingTime) {
                    var dday_tzinfo_daylight = new DDay.iCal.iCalTimeZoneInfo ();
                    dday_tzinfo_daylight.Name = "DAYLIGHT";
                    dday_tzinfo_daylight.TimeZoneName = tzinfo.DaylightName;
                    dday_tzinfo_daylight.Start = new iCalDateTime (new DateTime (adjustmentRule.DateStart.Year, adjustmentRule.DaylightTransitionStart.Month, adjustmentRule.DaylightTransitionStart.Day, adjustmentRule.DaylightTransitionStart.TimeOfDay.Hour, adjustmentRule.DaylightTransitionStart.TimeOfDay.Minute, adjustmentRule.DaylightTransitionStart.TimeOfDay.Second));
                    if (dday_tzinfo_daylight.Start.LessThan (earliest))
                        dday_tzinfo_daylight.Start = dday_tzinfo_daylight.Start.AddYears (earliest.Year - dday_tzinfo_daylight.Start.Year);
                    dday_tzinfo_daylight.OffsetFrom = new UTCOffset (utcOffset);
                    dday_tzinfo_daylight.OffsetTo = new UTCOffset (utcOffset + delta);
                    PopulateiCalTimeZoneInfo (dday_tzinfo_daylight, adjustmentRule.DaylightTransitionStart, adjustmentRule.DateStart.Year);

                    // Add the "daylight" time rule to the time zone
                    dday_tz.AddChild (dday_tzinfo_daylight);
                }                
            }

            // If no time zone information was recorded, at least
            // add a STANDARD time zone element to indicate the
            // base time zone information.
            if (dday_tz.TimeZoneInfos.Count == 0) {
                var dday_tzinfo_standard = new DDay.iCal.iCalTimeZoneInfo ();
                dday_tzinfo_standard.Name = "STANDARD";
                dday_tzinfo_standard.TimeZoneName = tzinfo.StandardName;
                dday_tzinfo_standard.Start = earliest;                
                dday_tzinfo_standard.OffsetFrom = new UTCOffset (utcOffset);
                dday_tzinfo_standard.OffsetTo = new UTCOffset (utcOffset);

                // Add the "standard" time rule to the time zone
                dday_tz.AddChild (dday_tzinfo_standard);
            }

            return dday_tz;
        }

        protected IICalendar iCalendarFromMcCalendar (McCalendar c)
        {
            var iCal = new iCalendar ();
            iCal.ProductID = "Nacho Mail";

            var tzid = RadioElementWithData.SelectedData (timezoneEntryElement);

            var tzi = TimeZoneInfo.FindSystemTimeZoneById (tzid);
            var timezone = FromSystemTimeZone (tzi, c.StartTime.AddYears (-1), false);
            var localTimeZone = iCal.AddTimeZone (timezone);

            if (null != tzi.StandardName) {
                timezone.TZID = tzi.StandardName;
                localTimeZone.TZID = tzi.StandardName;
            }

            var evt = iCal.Create<DDay.iCal.Event> ();
            evt.Summary = c.Subject;
            evt.LastModified = new iCalDateTime (DateTime.UtcNow);
            evt.Start = new iCalDateTime (c.StartTime.ToLocalTime (), localTimeZone.TZID);
            evt.End = new iCalDateTime (c.EndTime.ToLocalTime (), localTimeZone.TZID);
            evt.IsAllDay = c.AllDayEvent;
            evt.Priority = 5;
            if (c.AllDayEvent) {
                evt.Properties.Set ("X-MICROSOFT-CDO-ALLDAYEVENT", "TRUE");
                evt.Properties.Set ("X-MICROSOFT-CDO-INTENDEDSTATUS", "FREE");
            } else {
                evt.Properties.Set ("X-MICROSOFT-CDO-ALLDAYEVENT", "FALSE");
                evt.Properties.Set ("X-MICROSOFT-CDO-INTENDEDSTATUS", "BUSY");
            }
            evt.Location = c.Location;
            evt.Organizer = new Organizer (account.EmailAddr);
            evt.Organizer.CommonName = "Steve";
            evt.Organizer.SentBy = new Uri ("MAILTO:steves@nachocove.com");
            evt.Status = EventStatus.Confirmed;
            evt.Class = "PUBLIC";
            evt.Transparency = TransparencyType.Opaque;
            foreach (var a in c.attendees) {
                var iAttendee = new Attendee ("MAILTO:" + a.Email);
                NachoAssert.True (null != a.Name);
                iAttendee.CommonName = a.Name;
                NachoAssert.True (a.AttendeeTypeIsSet);
                switch (a.AttendeeType) {
                case NcAttendeeType.Required:
                    iAttendee.RSVP = c.ResponseRequestedIsSet && c.ResponseRequested;
                    iAttendee.Role = "REQ-PARTICIPANT";
                    iAttendee.ParticipationStatus = "NEEDS-ACTION";
                    iAttendee.Type = "INDIVIDUAL";
                    break;
                case NcAttendeeType.Optional:
                    iAttendee.RSVP = c.ResponseRequestedIsSet && c.ResponseRequested;
                    iAttendee.Role = "OPT-PARTICIPANT";
                    iAttendee.ParticipationStatus = "NEEDS-ACTION";
                    iAttendee.Type = "INDIVIDUAL";
                    break;
                case NcAttendeeType.Unknown:
                    iAttendee.Role = "NON-PARTICIPANT";
                    break;
                }
                evt.Attendees.Add (iAttendee);
            }
            return iCal;
        }

        protected void SyncMeetingRequest ()
        {
            if (0 == c.Id) {
                c.Insert (); // new entry
            } else {
                c.Update ();
            }
            folder.Link (c);
            BackEnd.Instance.CreateCalCmd (account.Id, c.Id, folder.Id);
        }

        /// <summary>
        /// Sends the message. Message (UID) must already exist in EAS.
        /// </summary>
        protected void SendInvites (IICalendar iCal)
        {
            var mimeMessage = new MimeMessage ();

            mimeMessage.From.Add (new MailboxAddress (Pretty.DisplayNameForAccount (account), account.EmailAddr));

            foreach (var a in c.attendees) {
                mimeMessage.To.Add (new MailboxAddress (a.Name, a.Email));
            }
            if (null != c.Subject) {
                mimeMessage.Subject = c.Subject;
            }
            mimeMessage.Date = System.DateTime.UtcNow;

            var body = new TextPart ("calendar");
            body.ContentType.Parameters.Add ("METHOD", "REQUEST");
            iCal.Method = "REQUEST";
            using (var iCalStream = new MemoryStream ()) {
                iCalendarSerializer serializer = new iCalendarSerializer ();
                serializer.Serialize (iCal, iCalStream, System.Text.Encoding.ASCII);
                iCalStream.Seek (0, SeekOrigin.Begin);
                using (var textStream = new StreamReader (iCalStream)) {
                    body.Text = textStream.ReadToEnd ();
                }
            }
            body.ContentTransferEncoding = ContentEncoding.Base64;

            var textPart = new TextPart ("plain") {
                Text = ""
            };

            var alternative = new Multipart ("alternative");
            alternative.Add (textPart);
            alternative.Add (body);

            mimeMessage.Body = alternative;

            MimeHelpers.SendEmail (account.Id, mimeMessage, c.Id);
        }

        protected string MyCalendarName (McCalendar c)
        {
            var candidates = McFolder.QueryByFolderEntryId<McCalendar> (account.Id, c.Id);
            return candidates.First ().DisplayName;
        }

        protected void UpdateStatus (NcResponseType status)
        {
            // FIXME BackEnd.Instance.RespondCalCmd (account.Id, c.Id, status);
        }
    }
}
