// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Dialog;
using MonoTouch.UIKit;
using MonoTouch.Foundation;
using NachoCore.Model;

namespace NachoClient.iOS
{
    public partial class CalendarItemViewController : DialogViewController
    {
        public bool editing;
        UIBarButtonItem doneButton;
        UIBarButtonItem editButton;
        public McCalendar calendarItem;
        private McCalendar c;

        public CalendarItemViewController (IntPtr handle) : base (handle)
        {
            doneButton = new UIBarButtonItem (UIBarButtonSystemItem.Done);
            editButton = new UIBarButtonItem (UIBarButtonSystemItem.Edit);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // When user clicks done, check, confirm, and save
            doneButton.Clicked += (object sender, EventArgs e) => {
                // TODO: Check for changes before asking the user
                UIAlertView alert = new UIAlertView ();
                alert.Title = "Confirmation";
                alert.Message = "Save this calendar event?";
                alert.AddButton ("Yes");
                alert.AddButton ("No");
                alert.Dismissed += (object alertSender, UIButtonEventArgs alertEvent) => {
                    if (0 == alertEvent.ButtonIndex) {
                        editing = false;
                        // TODO: Save the new
                        NavigationItem.RightBarButtonItem = editButton;
                        Root = ShowDetail ();
                        ReloadComplete ();
                    }
                };
                alert.Show ();
            };

            editButton.Clicked += (object sender, EventArgs e) => {
                editing = true;
                NavigationItem.RightBarButtonItem = doneButton;
                Root = EditDetail ();
                ReloadComplete ();
            };
                
            // Set up view
            Pushing = true;
            if (null == calendarItem) {
                editing = true;
                c = new McCalendar ();
                Root = EditDetail ();
                NavigationItem.RightBarButtonItem = doneButton;
            } else {
                editing = false;
                calendarItem.ReadAncillaryData ();
                c = calendarItem;
                Root = ShowDetail ();
                NavigationItem.RightBarButtonItem = editButton;
            }

            TableView.SeparatorColor = UIColor.Clear;
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("CalendarItemToAttendeeView")) {
                var dc = (AttendeeViewController)segue.DestinationViewController;
                dc.PushAttendees (c.attendees);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    dc.PullAttendees (ref c.attendees);
                };
            }
        }

        /// <summary>
        /// Shows the calendar, read-only.
        /// </summary>
        public RootElement ShowDetail ()
        {
            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = CustomSection ();
            section.Add (new SubjectElement (c.Subject));
            section.Add (new StartTimeElement (Pretty.FullDateString (c.StartTime)));
            if (c.AllDayEvent) {
                section.Add (new DurationElement (Pretty.AllDayStartToEnd (c)));
            } else {
                section.Add (new DurationElement (Pretty.EventStartToEnd (c)));
            }
            root.Add (section);

            if (null != c.Location) {
                section = CustomSection ();
                section.Add (new LocationElement (c.Location));
                root.Add (section);
            }

            section = CustomSection ();
            {
                var e = new StyledStringElement ("People");
                var image = UIImage.FromBundle ("ic_action_group");
                e.Image = image.Scale (new SizeF (22.0f, 22.0f));
                e.Font = UIFont.SystemFontOfSize (17.0f);
                e.Tapped += () => {
                    PushAttendeeView ();
                };
                e.Accessory = UITableViewCellAccessory.DisclosureIndicator;
                section.Add (e);
            }
            root.Add (section);

            section = CustomSection ();
            section.Add (new StyledStringElementWithIcon ("Reminder", Pretty.ReminderString (c.Reminder), "ic_action_alarms"));
            root.Add (section);

            return root;
        }

        EntryElementWithIcon titleEntryElement;
        AppointmentEntryElement appointmentEntryElement;
        RootElementWithIcon reminderEntryElement;
        PeopleEntryElement peopleEntryElement;
        EntryElementWithIcon locationEntryElement;

        /// <summary>
        /// Edit the (possibly empty) calendar entry
        /// </summary>
        public RootElement EditDetail ()
        {
            titleEntryElement = new EntryElementWithIcon (DotWithColor (UIColor.Blue), "Title", c.Subject);
            using (var icon = UIImage.FromBundle ("ic_action_place")) {
                var scaledIcon = icon.Scale (new SizeF (22.0f, 22.0f));
                locationEntryElement = new EntryElementWithIcon (scaledIcon, "Location", c.Location);
            }
            appointmentEntryElement = new AppointmentEntryElement (DateTime.Now, DateTime.Now);
            peopleEntryElement = new PeopleEntryElement ();

            reminderEntryElement = new RootElementWithIcon ("Reminder");
            reminderEntryElement.Add (new ReminderSection (c.Reminder));
            reminderEntryElement.UnevenRows = true;

            appointmentEntryElement.Tapped += (DialogViewController arg1, UITableView arg2, NSIndexPath arg3) => {
                arg2.DeselectRow (arg3, true);
                AppointmentEntryPopup ();
            };

            peopleEntryElement.Tapped += () => {
                AttendeeEntryPopup ();
            };
                
            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = CustomSection ();
            section.Add (titleEntryElement);
            root.Add (section);

            section = CustomSection ();
            section.Add (appointmentEntryElement);
            root.Add (section);

            section = CustomSection ();
            section.Add (peopleEntryElement);
            root.Add (section);

            section = CustomSection ();
            section.Add (locationEntryElement);
            root.Add (section);

            section = CustomSection ();
            section.Add (reminderEntryElement);
            root.Add (section);

            return root;
        }

        public class ReminderSection : Section
        {
            List<CheckboxElementWithData> list;
            NumericEntryElementWithCheckmark custom;
            HiddenElement hidden;

            public ReminderSection (uint initialValue)
            {
                list = new List<CheckboxElementWithData> ();

                hidden = new HiddenElement ("");
                this.Add (hidden);

                CreateCheckboxElementWithData (Pretty.ReminderString (1), 1);
                CreateCheckboxElementWithData (Pretty.ReminderString (5), 5);
                CreateCheckboxElementWithData (Pretty.ReminderString (60), 60);
                CreateCheckboxElementWithData (Pretty.ReminderString (24 * 60), 24 * 60);
                CreateCheckboxElementWithData (Pretty.ReminderString (0), 0);

                custom = new NumericEntryElementWithCheckmark ("Custom", "", "", false);
                custom.ClearButtonMode = UITextFieldViewMode.WhileEditing;
                custom.KeyboardType = UIKeyboardType.Default;
                this.Add (custom);

                bool found = false;
                foreach (var l in list) {
                    if (initialValue == l.Data) {
                        hidden.SetSummary (l.Summary (), l.Data);
                        l.Value = true;
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    custom.checkmark = true;
                    custom.Value = Pretty.ReminderString (initialValue);
                    hidden.SetSummary (custom.Value, initialValue);
                }

                custom.EntryStarted += delegate {
                    foreach (var l in list) {
                        l.Value = false;
                    }
                    custom.checkmark = true;
                    custom.GetImmediateRootElement ().Reload (this, UITableViewRowAnimation.None);
                    custom.BecomeFirstResponder (true);
                };
                custom.EntryEnded += delegate {
                    if (custom.checkmark) {
                        if (String.IsNullOrEmpty (custom.Value)) {
                            hidden.SetSummary ("None", 0);
                        } else {
                            hidden.SetSummary (Pretty.ReminderString (custom.NumericValue), custom.NumericValue);
                        }
                    }
                    custom.GetImmediateRootElement ().Reload (this, UITableViewRowAnimation.None);
                };
            }

            protected CheckboxElementWithData CreateCheckboxElementWithData (string caption, uint data)
            {
                var c = new CheckboxElementWithData (caption, data);
                this.Add (c);
                list.Add (c);

                c.Tapped += () => {
                    foreach (var l in list) {
                        l.Value = false;
                    }
                    c.Value = true;
                    custom.checkmark = false;
                    hidden.SetSummary (c.Summary (), c.Data);
                    c.GetImmediateRootElement ().Reload (this, UITableViewRowAnimation.None);
                };

                return c;
            }
        }

        public Section CustomSection ()
        {
            var s = new Section ();
            s.HeaderView = new UIView (new RectangleF (0.0f, 0.0f, 1.0f, 15.0f));
            s.FooterView = new UIView (new RectangleF (0.0f, 0.0f, 1.0f, 1.0f));
            return s;
        }

        /// <summary>
        /// Update the screen representation with new
        /// start, end, and all-day event information.
        /// </summary>
        public void AppointmentEntryPopup ()
        {
            var allDayEvent = new BooleanElement ("All day event", appointmentEntryElement.allDayEvent);
            var startDateTimeElement = new DateTimeEntryElement ("Start time");
            var endDateTimeElement = new DateTimeEntryElement ("End time");

            startDateTimeElement.DateValue = appointmentEntryElement.startDateTime;
            endDateTimeElement.DateValue = appointmentEntryElement.endDateTime;
            allDayEvent.Value = appointmentEntryElement.allDayEvent;

            var root = new RootElement ("Meeting Time");
            var section = new Section ();
            section.Add (startDateTimeElement);
            section.Add (endDateTimeElement);
            section.Add (allDayEvent);
            root.Add (section);
                  
            var dvc = new DialogViewController (root, true);

            dvc.ViewDisappearing += (object sender, EventArgs e) => {
                appointmentEntryElement.allDayEvent = allDayEvent.Value;
                appointmentEntryElement.startDateTime = startDateTimeElement.DateValue;
                appointmentEntryElement.endDateTime = endDateTimeElement.DateValue;
                Root.Reload (appointmentEntryElement, UITableViewRowAnimation.Fade);
            };

            NavigationController.PushViewController (dvc, true);
        }

        public void AttendeeEntryPopup ()
        {
            PerformSegue ("CalendarItemToAttendeeView", this);
        }

        public static UIImage DotWithColor (UIColor color)
        {
            UIGraphics.BeginImageContext (new SizeF (22, 22));
            var ctx = UIGraphics.GetCurrentContext ();

            ctx.SetFillColor (color.CGColor);
            ctx.FillEllipseInRect (new RectangleF (5, 5, 12, 12));

            var image = UIGraphics.GetImageFromCurrentImageContext ();
            UIGraphics.EndImageContext ();
            return image;
        }

        public void PushAttendeeView ()
        {
            var root = new RootElement (c.Subject);
            var section = new Section ();

            foreach (var attendee in c.attendees) {
                var name = attendee.Name;
                var email = attendee.Email;
                var status = attendee.AttendeeStatus;
                section.Add (new AttendeeElement (name, email, status));
            }

            var dynamic = new DialogViewController (root, true);
            NavigationController.PushViewController (dynamic, true);
        }
    }
}
