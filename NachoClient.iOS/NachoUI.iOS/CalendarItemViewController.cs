// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Text;
using DDay.iCal;
using DDay.iCal.Serialization.iCalendar;
using MimeKit;
using MonoTouch.Dialog;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class CalendarItemViewController : DialogViewController
    {
        public bool editing;
        public McCalendar calendarItem;
        protected UIBarButtonItem doneButton;
        protected UIBarButtonItem editButton;
        protected McAccount account;
        protected McCalendar c;
        protected McFolder f;
        protected NachoFolders calendars;

        public CalendarItemViewController (IntPtr handle) : base (handle)
        {
            doneButton = new UIBarButtonItem (UIBarButtonSystemItem.Done);
            editButton = new UIBarButtonItem (UIBarButtonSystemItem.Edit);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // TODO: Need account manager.
            // We only have one account, for now.
            account = BackEnd.Instance.Db.Table<McAccount> ().First ();
            calendars = new NachoFolders (NachoFolders.FilterForCalendars);

            // When user clicks done, check, confirm, and save
            doneButton.Clicked += (object sender, EventArgs e) => {
                // TODO: Check for changes before asking the user
                UIAlertView alert = new UIAlertView ();
                alert.Title = "Confirmation";
                alert.Message = "Save this calendar event?";
                alert.AddButton ("Yes");
                alert.AddButton ("No");
                alert.Dismissed += (object alertSender, UIButtonEventArgs alertEvent) => {
                    if (0 == alertEvent.ButtonIndex) {
                        editing = false;
                        // TODO: Save the new
                        var iCal = ExtractDialogValues ();
                        SyncMeetingRequest ();
                        SendInvites (iCal);
                        NavigationItem.RightBarButtonItem = editButton;
                        Root = ShowDetail ();
                        ReloadComplete ();
                    }
                };
                alert.Show ();
            };

            editButton.Clicked += (object sender, EventArgs e) => {
                editing = true;
                NavigationItem.RightBarButtonItem = doneButton;
                Root = EditDetail ();
                ReloadComplete ();
            };
                
            // Set up view
            Pushing = true;
            if (null == calendarItem) {
                editing = true;
                c = new McCalendar ();
                Root = EditDetail ();
                NavigationItem.RightBarButtonItem = doneButton;
            } else {
                editing = false;
                calendarItem.ReadAncillaryData ();
                c = calendarItem;
                Root = ShowDetail ();
                NavigationItem.RightBarButtonItem = editButton;
            }

            TableView.SeparatorColor = UIColor.Clear;
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("CalendarItemToAttendeeView")) {
                var dc = (AttendeeViewController)segue.DestinationViewController;
                dc.SetAttendeeList (c.attendees);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    dc.GetAttendeeList (ref c.attendees);
                };
            }
        }

        /// <summary>
        /// Shows the calendar, read-only.
        /// </summary>
        protected RootElement ShowDetail ()
        {
            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = new ThinSection ();
            section.Add (new SubjectElement (c.Subject));
            section.Add (new StartTimeElement (Pretty.FullDateString (c.StartTime)));
            if (c.AllDayEvent) {
                section.Add (new DurationElement (Pretty.AllDayStartToEnd (c.StartTime, c.EndTime)));
            } else {
                section.Add (new DurationElement (Pretty.EventStartToEnd (c.StartTime, c.EndTime)));
            }
            root.Add (section);

            if (null != c.Location) {
                section = new ThinSection ();
                section.Add (new LocationElement (c.Location));
                root.Add (section);
            }

            section = new ThinSection ();
            {
                var e = new StyledStringElement ("People");
                var image = UIImage.FromBundle ("ic_action_group");
                e.Image = image.Scale (new SizeF (22.0f, 22.0f));
                e.Font = UIFont.SystemFontOfSize (17.0f);
                e.Tapped += () => {
                    PushAttendeeView ();
                };
                e.Accessory = UITableViewCellAccessory.DisclosureIndicator;
                section.Add (e);
            }
            root.Add (section);

            section = new ThinSection ();
            using (var image = UIImage.FromBundle ("ic_action_alarms")) {
                var scaledImage = image.Scale (new SizeF (22.0f, 22.0f));
                section.Add (new StyledStringElementWithIcon ("Reminder", Pretty.ReminderString (c.Reminder), scaledImage));
            }
            root.Add (section);

            return root;
        }

        EntryElementWithIcon subjectEntryElement;
        AppointmentEntryElement appointmentEntryElement;
        RootElementWithIcon reminderEntryElement;
        PeopleEntryElement peopleEntryElement;
        EntryElementWithIcon locationEntryElement;
        RootElementWithIcon calendarEntryElement;

        /// <summary>
        /// Edit the (possibly empty) calendar entry
        /// </summary>
        protected RootElement EditDetail ()
        {
            subjectEntryElement = new EntryElementWithIcon (NachoClient.Util.DotWithColor (UIColor.Blue), "Title", c.Subject);
            using (var icon = UIImage.FromBundle ("ic_action_place")) {
                var scaledIcon = icon.Scale (new SizeF (22.0f, 22.0f));
                locationEntryElement = new EntryElementWithIcon (scaledIcon, "Location", c.Location);
            }
            appointmentEntryElement = new AppointmentEntryElement (DateTime.Now, DateTime.Now);
            peopleEntryElement = new PeopleEntryElement ();

            calendarEntryElement = new RootElementWithIcon ("ic_action_event", "Calendar", new RadioGroup (0)) {
                new CalendarRadioElementSection (calendars)
            };

            reminderEntryElement = new RootElementWithIcon ("ic_action_alarms", "Reminder");
            reminderEntryElement.Add (new ReminderSection (c.Reminder));
            reminderEntryElement.UnevenRows = true;

            appointmentEntryElement.Tapped += (DialogViewController arg1, UITableView arg2, NSIndexPath arg3) => {
                arg2.DeselectRow (arg3, true);
                AppointmentEntryPopup ();
            };

            peopleEntryElement.Tapped += () => {
                AttendeeEntryPopup ();
            };
                
            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = new ThinSection ();
            section.Add (subjectEntryElement);
            root.Add (section);

            section = new ThinSection ();
            section.Add (appointmentEntryElement);
            root.Add (section);

            section = new ThinSection ();
            section.Add (peopleEntryElement);
            root.Add (section);

            section = new ThinSection ();
            section.Add (locationEntryElement);
            root.Add (section);

            section = new ThinSection ();
            section.Add (calendarEntryElement);
            section.Add (reminderEntryElement);
            root.Add (section);

            return root;
        }

        /// <summary>
        /// Update the screen representation with new
        /// start, end, and all-day event information.
        /// </summary>
        protected void AppointmentEntryPopup ()
        {
            var allDayEvent = new BooleanElement ("All day event", appointmentEntryElement.allDayEvent);
            var startDateTimeElement = new DateTimeEntryElement ("Start time");
            var endDateTimeElement = new DateTimeEntryElement ("End time");

            startDateTimeElement.DateValue = appointmentEntryElement.startDateTime;
            endDateTimeElement.DateValue = appointmentEntryElement.endDateTime;
            allDayEvent.Value = appointmentEntryElement.allDayEvent;

            var root = new RootElement ("Meeting Time");
            var section = new Section ();
            section.Add (startDateTimeElement);
            section.Add (endDateTimeElement);
            section.Add (allDayEvent);
            root.Add (section);
                  
            var dvc = new DialogViewController (root, true);

            dvc.ViewDisappearing += (object sender, EventArgs e) => {
                appointmentEntryElement.allDayEvent = allDayEvent.Value;
                appointmentEntryElement.startDateTime = startDateTimeElement.DateValue;
                appointmentEntryElement.endDateTime = endDateTimeElement.DateValue;
                Root.Reload (appointmentEntryElement, UITableViewRowAnimation.Fade);
            };

            NavigationController.PushViewController (dvc, true);
        }

        public void AttendeeEntryPopup ()
        {
            PerformSegue ("CalendarItemToAttendeeView", this);
        }

        public void PushAttendeeView ()
        {
            var root = new RootElement (c.Subject);
            var section = new Section ();

            foreach (var attendee in c.attendees) {
                var name = attendee.Name;
                var email = attendee.Email;
                var status = attendee.AttendeeStatus;
                section.Add (new AttendeeElement (name, email, status));
            }
            root.Add (section);

            var dynamic = new DialogViewController (root, true);
            NavigationController.PushViewController (dynamic, true);
        }

        /// <summary>
        /// Extract values from dialog.root into 'c'.
        /// </summary>
        protected IICalendar ExtractDialogValues ()
        {
            c.Subject = subjectEntryElement.Value;
            c.AllDayEvent = appointmentEntryElement.allDayEvent;
            c.StartTime = appointmentEntryElement.startDateTime;
            c.EndTime = appointmentEntryElement.endDateTime;
            // c.attendees is already set via PullAttendees
            c.Location = locationEntryElement.Value;
            var reminderSection = reminderEntryElement [0] as ReminderSection;
            var hiddenElement = reminderSection [0] as HiddenElement;
            c.Reminder = hiddenElement.Value;
            f = calendars.GetFolder (calendarEntryElement.RadioSelected);
            // Extras
            c.OrganizerName = Pretty.DisplayNameForAccount (account);
            c.OrganizerEmail = account.EmailAddr;
            c.AccountId = account.Id;
            c.DtStamp = DateTime.Now;
            // IICalendar
            var iCal = iCalendarFromMcCalendar (c);
            if (String.IsNullOrEmpty (c.UID)) {
                c.UID = iCal.Events [0].UID;
            } else {
                iCal.Events [0].UID = c.UID;
            }
            return iCal;
        }

        protected IICalendar iCalendarFromMcCalendar (McCalendar c)
        {
            var iCal = new iCalendar ();
            var evt = iCal.Create<DDay.iCal.Event> ();
            evt.Summary = c.Subject;
            evt.Start = new iCalDateTime (c.StartTime);
            evt.End = new iCalDateTime (c.EndTime);
            evt.IsAllDay = c.AllDayEvent;
            evt.Location = c.Location;
            evt.Organizer = new Organizer (account.EmailAddr);
            foreach (var a in c.attendees) {
                var iAttendee = new Attendee ("mailto:" + a.Email);
                iAttendee.CommonName = a.Name;
                evt.Attendees.Add (iAttendee);
            }
            return iCal;
        }

        protected void SyncMeetingRequest ()
        {
            c.Insert ();
            var map = new McMapFolderItem (c.AccountId) {
                FolderId = f.Id,
                ItemId = c.Id,
                ClassCode = (uint)McItem.ClassCodeEnum.Calendar,
            };
            map.Insert ();
            BackEnd.Instance.CreateCalCmd (account.Id, c.Id);
        }

        /// <summary>
        /// Sends the message. Message (UID) must already exist in EAS.
        /// </summary>
        protected void SendInvites (IICalendar iCal)
        {
            var mimeMessage = new MimeMessage ();

            mimeMessage.From.Add (new MailboxAddress (Pretty.DisplayNameForAccount (account), account.EmailAddr));

            foreach (var a in c.attendees) {
                mimeMessage.To.Add (new MailboxAddress (a.Name, a.Email));
            }
            if (null != c.Subject) {
                mimeMessage.Subject = c.Subject;
            }
            mimeMessage.Date = System.DateTime.UtcNow;

            var body = new TextPart ("calendar");
            // TODO: REQUEST is coming out quoted; is that ok? (see KLUDGE)
            body.ContentType.Parameters.Add (new Parameter ("method", "REQUEST"));
            // TODO: Do we really need to add name parameter, like AS doc shows?
            body.ContentType.Parameters.Add (new Parameter ("name", "meeting.ics"));

            // TODO: Smarter about character encoding
            using (var iCalStream = new MemoryStream ()) {
                iCalendarSerializer serializer = new iCalendarSerializer ();
                serializer.Serialize (iCal, iCalStream, System.Text.Encoding.ASCII);
                iCalStream.Seek (0, SeekOrigin.Begin);
                using (var textStream = new StreamReader (iCalStream)) {
                    body.Text = textStream.ReadToEnd ();
                }
            }

            body.ContentTransferEncoding = ContentEncoding.EightBit;

            // TODO: Do we really need multipart?
            var msg = new Multipart ("alternative",
                          new TextPart ("plain", "Calendar item"),
                          body
                      );

            mimeMessage.Body = msg;

            MimeHelpers.SendEmail (account.Id, mimeMessage, c.Id);
        }
    }
}
