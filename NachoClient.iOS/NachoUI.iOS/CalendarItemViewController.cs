// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore.Model;
using MonoTouch.Dialog;

namespace NachoClient.iOS
{
    public partial class CalendarItemViewController : DialogViewController
    {
        public bool editing;
        public McCalendar calendarItem;
        UIBarButtonItem doneButton;
        UIBarButtonItem editButton;

        public CalendarItemViewController (IntPtr handle) : base (handle)
        {
            doneButton = new UIBarButtonItem (UIBarButtonSystemItem.Done);
            editButton = new UIBarButtonItem (UIBarButtonSystemItem.Edit);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // When user clicks done, check, confirm, and save
            doneButton.Clicked += (object sender, EventArgs e) => {
                // TODO: Check for changes before asking the user
                UIAlertView alert = new UIAlertView ();
                alert.Title = "Confirmation";
                alert.Message = "Save this calendar event?";
                alert.AddButton ("Yes");
                alert.AddButton ("No");
                alert.Dismissed += (object alertSender, UIButtonEventArgs alertEvent) => {
                    if (0 == alertEvent.ButtonIndex) {
                        editing = false;
                        // TODO: Save the new
                        NavigationItem.RightBarButtonItem = editButton;
                        Root = ToDialogElement (calendarItem);
                        ReloadComplete ();
                    }
                };
                alert.Show ();
            };

            editButton.Clicked += (object sender, EventArgs e) => {
                editing = true;
                NavigationItem.RightBarButtonItem = doneButton;
                Root = ToDialogElement (calendarItem);
                ReloadComplete ();
            };
                
            // Set up view
            Pushing = true;
            if (null == calendarItem) {
                editing = true;
                calendarItem = new McCalendar ();
                Root = ToDialogElement (calendarItem);
                NavigationItem.RightBarButtonItem = doneButton;
            } else {
                editing = false;
                calendarItem.ReadAncillaryData ();
                Root = ShowDetail (calendarItem);
                NavigationItem.RightBarButtonItem = editButton;
            }

            TableView.SeparatorColor = UIColor.Clear;
        }

        public void AddIfSet (ref Section section, string name, string value, UIKeyboardType kbt = UIKeyboardType.Default)
        {
            if (editing) {
                EntryElement e = new EntryElement (name, "", value ?? "");
                e.KeyboardType = kbt;
                section.Add (e);
            } else if (null != value) {
                section.Add (new StringElement (name, value));
            }
        }

        public void AddIfSet (ref Section section, string name, DateTime value)
        {
            if (!McContact.IsNull (value)) {
                // Note DateTime, not Date, for calendar
                section.Add (new DateTimeElement (name, value));
            }
        }

        public void AddIfSet (ref Section section, string name, int value)
        {
            if (!McContact.IsNull (value)) {
                section.Add (new StringElement (name, value.ToString ()));
            }
        }

        public void AddRadioGroup (ref Section section, string name, Enum value)
        {
            Section radioButtons = new Section ();
            Array values = Enum.GetValues (value.GetType ());
            foreach (Enum e in values) {
                radioButtons.Add (new RadioElement (e.ToString ()));
            }
            int i = Array.IndexOf (values, value);
            NachoCore.NachoAssert.True (i >= 0);

            var radioGroup = new RadioGroup (i);
            var radioRoot = new RootElement (name, radioGroup);
            radioRoot.Add (radioButtons);
            section.Add (radioRoot);
        }

        public RootElement ShowDetail (McCalendar c)
        {
            var root = new RootElement (c.Subject);
            root.UnevenRows = true;

            Section section = null;

            section = CustomSection ();

            section.Add (new SubjectElement (c.Subject));
            section.Add (new StartTimeElement (PrettyFullDateString (c.StartTime)));
            if (c.AllDayEvent) {
                section.Add (new DurationElement (PrettyAllDayStartToEnd (c)));
            } else {
                section.Add (new DurationElement (PrettyEventStartToEnd (c)));
            }
            root.Add (section);

            if (null != c.Location) {
                section = new Section ();
                section.Add (new LocationElement (c.Location));
                root.Add (section);
            }

            section = CustomSection ();
            {
                var e = new StyledStringElement ("People");
                var image = UIImage.FromBundle ("ic_action_group");
                e.Image = image.Scale (new SizeF (22f, 22f));
                e.Font = UIFont.SystemFontOfSize (17);
                e.Tapped += () => {
                    PushAttendeeView (c);
                };
                e.Accessory = UITableViewCellAccessory.DisclosureIndicator;
                section.Add (e);
            }
            root.Add (section);


            return root;
        }

 
        public Section CustomSection()
        {
            var s = new Section ();
            s.HeaderView = new UIView (new RectangleF (0.0f, 0.0f, 1.0f, 15.0f));
            s.FooterView = new UIView (new RectangleF (0.0f, 0.0f, 1.0f, 1.0f));
            return s;
        }

        public class SubjectElement : StyledMultilineElement
        {
            public SubjectElement (string caption) : base (caption)
            {
                this.Image = CalendarItemViewController.DotWithColor (UIColor.Blue);
                this.Font = UIFont.SystemFontOfSize (17);
            }
        }

        public class StartTimeElement : StyledStringElement
        {
            public StartTimeElement (string caption) : base (caption)
            {
                this.Image = CalendarItemViewController.DotWithColor (UIColor.Clear);
                this.Font = UIFont.SystemFontOfSize (15);
            }
        }

        public class DurationElement : StyledStringElement
        {
            public DurationElement (string caption) : base (caption)
            {
                var image = UIImage.FromBundle ("ic_action_time");
                this.Image = image.Scale (new SizeF (22f, 22f));
                this.Font = UIFont.SystemFontOfSize (15);
            }
        }

        public class LocationElement : StyledMultilineElement
        {
            public LocationElement (string caption) : base (caption)
            {
                var image = UIImage.FromBundle ("ic_action_place");
                this.Image = image.Scale (new SizeF (22f, 22f));
                this.Font = UIFont.SystemFontOfSize (17);
            }
        }

        public string PrettyFullDateString (DateTime d)
        {
            return d.ToString ("D");
        }

        public string PrettyAllDayStartToEnd (McCalendar c)
        {
            var d = c.EndTime.Date.Subtract (c.StartTime.Date);
            if (d.Minutes < 1) {
                return "All day";
            }
            return String.Format ("All day ({0} days)", d.Days);
        }

        public string PrettyEventStartToEnd (McCalendar c)
        {
            var startString = c.StartTime.ToString ("t");

            if (c.StartTime == c.EndTime) {
                return startString;
            }
            var durationString = PrettyEventDuration (c);
            if (c.StartTime.Date == c.EndTime.Date) {
                return String.Format ("{0} - {1} ({2})", startString, c.EndTime.ToString ("t"), durationString);
            } else {
                return String.Format ("{0} -\n{1} ({2})", startString, PrettyFullDateString (c.EndTime), durationString);
            }
        }

        public string PrettyEventDuration (McCalendar c)
        {
            var d = c.EndTime.Subtract (c.StartTime);

            if (0 == d.TotalMinutes) {
                return ""; // no duration
            }

            // Even number of days?
            if (0 == (d.TotalMinutes % (24 * 60))) {
                if (1 == d.Days) {
                    return "1 day";
                } else {
                    return String.Format ("{0} days", d.Days);
                }
            }
            // Even number of hours?
            if (0 == (d.TotalMinutes % 60)) {
                if (1 == d.Hours) {
                    return "1 hour";
                } else {
                    return String.Format ("{0} hours", d.Hours);
                }
            }
            // Less than one hour?
            if (60 > d.Minutes) {
                if (1 == d.Minutes) {
                    return "1 minute";
                } else {
                    return String.Format ("{0} minutes", d.Minutes);
                }
            }
            // Less than one day?
            if ((24 * 60) > d.Minutes) {
                return String.Format ("{0}:{1} hours", d.Hours, d.Minutes % 60);
            } else {
                return String.Format ("{0}d{1}h{2}m", d.Days, d.Hours % 24, d.Minutes % 60);
            }
        }

        public RootElement ToDialogElement (McCalendar c)
        {
            NachoCore.NachoAssert.True (null != c);

            var root = new RootElement (c.Subject);
            var section = new Section ();

            AddIfSet (ref section, "Location", c.Location);

            section.Add (new BooleanElement ("All Day Event", c.AllDayEvent));

            AddIfSet (ref section, "Start time", c.StartTime);
            AddIfSet (ref section, "End time", c.EndTime);

            AddIfSet (ref section, "Reminder", (int)c.Reminder);

            AddIfSet (ref section, "Organizer name", c.OrganizerName);
            AddIfSet (ref section, "Organizer email", c.OrganizerEmail);

            AddRadioGroup (ref section, "Sensitivity", c.Sensitivity);
            AddRadioGroup (ref section, "Busy status", c.BusyStatus);
            AddRadioGroup (ref section, "Response type", c.ResponseType);
            AddRadioGroup (ref section, "Meeting status", c.MeetingStatus);

            section.Add (new BooleanElement ("Disallow new time proposal", c.DisallowNewTimeProposal));
            section.Add (new BooleanElement ("Response requested", c.ResponseRequested));
            AddIfSet (ref section, "Appointment reply time", c.AppointmentReplyTime);

            AddIfSet (ref section, "Online meeting link", c.OnlineMeetingConfLink);
            AddIfSet (ref section, "Online meeting external link", c.OnlineMeetingExternalLink);

            // TODO: Shouldn't be null
            if (null != c.attendees) {
                NachoCore.NachoAssert.True (null != c.attendees);
                foreach (McAttendee a in c.attendees) {
                    AddIfSet (ref section, "Attendee", a.Email);
                }
            }

            // TODO: Shouldn't be null
            if (null != c.recurrences) {
                NachoCore.NachoAssert.True (null != c.recurrences);
                foreach (var r in c.recurrences) {
                    var s = new Section ();
                    AddRadioGroup (ref s, "Recurrence Type", r.Type);
                    AddIfSet (ref s, "Occurences", r.Occurences);
                    AddIfSet (ref s, "Interval", r.Interval);
                    AddIfSet (ref s, "Week of month", r.WeekOfMonth);
                    AddRadioGroup (ref s, "Day of week", r.DayOfWeek); // hmmm
                    AddIfSet (ref s, "Month of year", r.MonthOfYear);
                    AddIfSet (ref s, "Until", r.Until);
                    AddIfSet (ref s, "Day of month", r.DayOfMonth);
                    AddRadioGroup (ref s, "Calendar type", r.CalendarType);
                    s.Add (new BooleanElement ("Is leap month", r.isLeapMonth));
                    AddIfSet (ref s, "First day of week", r.FirstDayOfWeek);
                    var recurrenceElement = new RootElement ("Recurrence");
                    recurrenceElement.Add (s);
                    section.Add (recurrenceElement);
                }
            }

            root.Add (section);
            return root;
        }

        public static UIImage DotWithColor (UIColor color)
        {
            UIGraphics.BeginImageContext (new SizeF (22, 22));
            var ctx = UIGraphics.GetCurrentContext ();

            ctx.SetFillColor (color.CGColor);
            ctx.FillEllipseInRect (new RectangleF (5, 5, 12, 12));

            var image = UIGraphics.GetImageFromCurrentImageContext ();
            UIGraphics.EndImageContext ();
            return image;
        }

        public void PushAttendeeView (McCalendar c)
        {
            var root = new RootElement (c.Subject);
            var section = new Section ();

            foreach (var attendee in c.attendees) {
                var name = attendee.Name;
                var email = attendee.Email;
                var status = attendee.AttendeeStatus;
                section.Add (new AttendeeElement (name, email, status));
            }

            var dynamic = new DialogViewController (root, true);
            NavigationController.PushViewController (dynamic, true);
        }

        class AttendeeElement : StyledStringElement
        {
            public AttendeeElement (string name, string email, NcAttendeeStatus status) : base (name, email, UITableViewCellStyle.Value2)
            {
                switch (status) {
                case NcAttendeeStatus.Accept:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Green);
                    break;
                case NcAttendeeStatus.Decline:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Green);
                    break;
                case NcAttendeeStatus.NotResponded:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Green);
                    break;
                case NcAttendeeStatus.ResponseUnknown:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Green);
                    break;
                case NcAttendeeStatus.Tentative:
                    this.Image = CalendarItemViewController.DotWithColor (UIColor.Green);
                    break;
                }
            }
        }
    }
}
