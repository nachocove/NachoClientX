// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using MimeKit;
using NachoCore.Brain;
using System.Text.RegularExpressions;
using NachoCore.ActiveSync;

namespace NachoClient.iOS
{
    public partial class ContactDetailViewController : NcUIViewControllerNoLeaks, IMessageTableViewSourceDelegate, INachoMessageEditorParent, INachoCalendarItemEditorParent, INachoFolderChooserParent, INachoNotesControllerParent, INachoDateControllerParent, INachoContactDefaultSelector
    {
        public McContact contact;

        protected UIColor originalBarTintColor;
        protected UIBarButtonItem editContact;

        protected const string UICellReuseIdentifier = "UICell";
        protected const string EmailMessageReuseIdentifier = "EmailMessage";
        protected ContactsHelper contactHelper = new ContactsHelper();
        protected MessageTableViewSource messageSource;
        protected HashSet<int> MultiSelect = null;

        protected int selectedSegment = 0;
        protected bool isFirstInfoItem = true;

        protected const float ROW_SPACER = 15f;
        protected const float PADDING = 18f;
        protected const float VERTICAL_PADDING = 20f;
        protected const float SEGMENTED_CONTROL_HEIGHT = 30f;

        protected const int HEADER_INITIALS_CIRCLE_TAG = 100;
        protected const int HEADER_NAME_TAG = 101;
        protected const int HEADER_TITLE_TAG = 102;
        protected const int HEADER_CALL_VIEW_TAG = 103;
        protected const int HEADER_EMAIL_VIEW_TAG = 104;
        protected const int HEADER_VIP_BUTTON_TAG = 105;
        protected const int HEADER_PORTRAIT_TAG = 106;

        protected const int SEGMENTED_CONTROL_TAG = 200;
        protected const int SEGMENTED_VIEW_HOLDER_TAG = 201;

        protected const int CONTACT_INFO_VIEW_TAG = 300;
        protected const int TRANSIENT_TAG_INITIAL_VALUE = 301;
        protected int variableTransientTag = TRANSIENT_TAG_INITIAL_VALUE;

        protected const int INTERACTIONS_TABLE_VIEW_TAG = 400;

        protected const int NOTES_VIEW_TAG = 500;
        protected const int NOTES_TEXT_VIEW_TAG = 501;
        protected const int NOTES_EDIT_BUTTON_TAG = 502;

        protected UITapGestureRecognizer headerCallViewGestureTapGesture;
        protected UITapGestureRecognizer.Token headerCallViewGestureTapGestureHandlerToken;

        protected UITapGestureRecognizer headerEmailViewTapGesture;
        protected UITapGestureRecognizer.Token headerEmailViewTapGestureHandlerToken;

        protected UIView copyCellView = new UIView();
        protected List<LongPressPair> longPressRecognizers = new List<LongPressPair> ();
        protected LongPressCopyData longPressData;

        protected class TapGesturePair
        {
            public UITapGestureRecognizer recognizer;
            public UITapGestureRecognizer.Token token;
            public int viewTag;

            public TapGesturePair (UITapGestureRecognizer recognizer, UITapGestureRecognizer.Token token, int viewTag)
            {
                this.recognizer = recognizer;
                this.token = token;
                this.viewTag = viewTag;
            }
        }

        protected List<TapGesturePair> tapGestures = new List<TapGesturePair> ();

        public ContactDetailViewController (IntPtr handle) : base (handle)
        {
            messageSource = new MessageTableViewSource ();
            MultiSelect = new HashSet<int> ();
        }

        public override void ViewDidAppear (bool animated)
        {
            if (CanBecomeFirstResponder) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIMenuController.WillHideMenuNotification, HideMenu);
            }
            base.ViewDidAppear (animated);
        }

        private void HideMenu (NSNotification notification)
        {
            if (IsViewLoaded) {
                if (!copyCellView.Hidden) {
                    copyCellView.Hidden = true;
                }
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                originalBarTintColor = this.NavigationController.NavigationBar.BarTintColor;
            }

            Util.ConfigureNavBar (false, NavigationController);
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;

            var SegmentedControl = (UISegmentedControl)View.ViewWithTag (SEGMENTED_CONTROL_TAG);
            if (null != SegmentedControl) {
                SegmentedControl.SelectedSegment = selectedSegment;
                SegmentedControl.SendActionForControlEvents (UIControlEvent.ValueChanged);
            }

            contact = McContact.QueryById<McContact> (contact.Id);
            ConfigureAndLayout ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                this.NavigationController.NavigationBar.BarTintColor = originalBarTintColor;

            }

            if (CanBecomeFirstResponder) {
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIMenuController.WillHideMenuNotification);
            }

            Util.ConfigureNavBar (false, NavigationController);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;

            var SegmentedControl = (UISegmentedControl)View.ViewWithTag (SEGMENTED_CONTROL_TAG);
            if (null != SegmentedControl) {
                selectedSegment = SegmentedControl.SelectedSegment;
            }
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        public override bool CanBecomeFirstResponder {
            get {
                return true;
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("SegueToContactDefaultSelector")) {
                var h = sender as SegueHolder;
                var c = (McContact)h.value;
                var type = (ContactDefaultSelectionViewController.DefaultSelectionType)h.value2;
                ContactDefaultSelectionViewController destinationController = (ContactDefaultSelectionViewController)segue.DestinationViewController;
                destinationController.SetContact (c);
                destinationController.viewType = type;
                destinationController.owner = this;
                return;
            }

            if (segue.Identifier.Equals ("SegueToMessageCompose")) {
                var h = sender as SegueHolder;
                MessageComposeViewController mcvc = (MessageComposeViewController)segue.DestinationViewController;
                mcvc.SetEmailPresetFields (new NcEmailAddress (NcEmailAddress.Kind.To, (string)h.value));
                return;
            }

            if (segue.Identifier.Equals ("ContactToNotes")) {
                var dc = (NotesViewController)segue.DestinationViewController;
                dc.SetOwner (this, false);
                return;
            }

            if (segue.Identifier.Equals ("ContactToContactEdit")) {
                var destinationViewController = (ContactEditViewController)segue.DestinationViewController;
                destinationViewController.contact = contact;
                return;
            }

            if (segue.Identifier == "NachoNowToMessagePriority") {
                var holder = (SegueHolder)sender;
                var thread = (McEmailMessageThread)holder.value;
                var vc = (INachoDateController)segue.DestinationViewController;
                vc.Setup (this, thread, DateControllerType.Defer);
                return;
            }
            if (segue.Identifier == "MessageListToFolders") {
                var vc = (INachoFolderChooser)segue.DestinationViewController;
                var h = (SegueHolder)sender;
                vc.SetOwner (this, true, h);
                return;
            }
            if (segue.Identifier == "NachoNowToMessageView") {
                var vc = (MessageViewController)segue.DestinationViewController;
                var holder = (SegueHolder)sender;
                vc.thread = (McEmailMessageThread)holder.value;           
                return;
            }
            if (segue.Identifier == "NachoNowToEditEvent") {
                var vc = (EditEventViewController)segue.DestinationViewController;
                var holder = (SegueHolder)sender;
                var c = (McCalendar)holder.value;
                vc.SetCalendarItem (c);
                vc.SetOwner (this);
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        protected override void CreateViewHierarchy ()
        {
            contentView.BackgroundColor = A.Color_NachoBackgroundGray;
            View.BackgroundColor = A.Color_NachoBackgroundGray;

            Util.SetBackButton (NavigationController, NavigationItem, A.Color_NachoBlue);
            NavigationItem.Title = "Contacts";

            editContact = new UIBarButtonItem ();
            editContact.Image = UIImage.FromBundle ("gen-edit");
            editContact.Clicked += EditButtonClicked;
            NavigationItem.SetRightBarButtonItem (editContact, true); 

            //CONTACT HEADER SECTION
            UIView headerView = new UIView (new RectangleF (A.Card_Horizontal_Indent, A.Card_Vertical_Indent, View.Frame.Width - (A.Card_Horizontal_Indent * 2), 147));
            headerView.Layer.CornerRadius = A.Card_Corner_Radius;
            headerView.Layer.BorderColor = A.Card_Border_Color;
            headerView.Layer.BorderWidth = A.Card_Border_Width;
            headerView.BackgroundColor = UIColor.White;
            View.AddSubview (headerView);

            UIButton vipButton = new UIButton (new RectangleF (headerView.Frame.Right - 48, 10, VERTICAL_PADDING, VERTICAL_PADDING));
            vipButton.Tag = HEADER_VIP_BUTTON_TAG;
            vipButton.SetImage (UIImage.FromBundle ("contacts-vip"), UIControlState.Normal);
            vipButton.TouchUpInside += VipButtonTouchUpInside;
            headerView.AddSubview (vipButton);

            UILabel initialsCircleLabel = new UILabel (new RectangleF (PADDING, VERTICAL_PADDING, 60, 60));
            initialsCircleLabel.Font = A.Font_AvenirNextRegular24;
            initialsCircleLabel.BackgroundColor = A.Color_NachoLightText;
            initialsCircleLabel.TextColor = UIColor.White;
            initialsCircleLabel.TextAlignment = UITextAlignment.Center;
            initialsCircleLabel.LineBreakMode = UILineBreakMode.Clip;
            initialsCircleLabel.Layer.CornerRadius = 30;
            initialsCircleLabel.Layer.MasksToBounds = true;
            initialsCircleLabel.Layer.BorderColor = A.Card_Border_Color;
            initialsCircleLabel.Layer.BorderWidth = A.Card_Border_Width;
            initialsCircleLabel.Tag = HEADER_INITIALS_CIRCLE_TAG;
            headerView.AddSubview (initialsCircleLabel);

            UIImageView userImageView = new UIImageView (new RectangleF (PADDING, VERTICAL_PADDING, 60, 60));
            userImageView.Layer.BorderColor = A.Card_Border_Color;
            userImageView.Layer.BorderWidth = A.Card_Border_Width;
            userImageView.Layer.CornerRadius = 30;
            userImageView.Layer.MasksToBounds = true;
            userImageView.Tag = HEADER_PORTRAIT_TAG;
            userImageView.Hidden = true;
            headerView.AddSubview (userImageView);

            UILabel nameLabel = new UILabel (new RectangleF (initialsCircleLabel.Frame.Right + 16, 31, 190, 20));
            nameLabel.Font = A.Font_AvenirNextDemiBold17;
            nameLabel.TextColor = A.Color_NachoGreen;
            nameLabel.TextAlignment = UITextAlignment.Left;
            nameLabel.BackgroundColor = UIColor.White;
            nameLabel.Tag = HEADER_NAME_TAG;
            headerView.AddSubview (nameLabel);

            UILabel titleLabel = new UILabel (new RectangleF (nameLabel.Frame.X, nameLabel.Frame.Bottom + 6, nameLabel.Frame.Width, nameLabel.Frame.Height - 5));
            titleLabel.Font = A.Font_AvenirNextMedium14;
            titleLabel.TextColor = A.Color_NachoTextGray;
            titleLabel.Tag = HEADER_TITLE_TAG;
            headerView.AddSubview (titleLabel);

            Util.AddHorizontalLine (0, initialsCircleLabel.Frame.Bottom + PADDING, headerView.Frame.Width, A.Color_NachoBorderGray, headerView);
            Util.AddVerticalLine (headerView.Frame.Width / 2, initialsCircleLabel.Frame.Bottom + PADDING, headerView.Frame.Height - (initialsCircleLabel.Frame.Bottom + PADDING), A.Color_NachoBorderGray, headerView);

            UIView callView = new UIView (new RectangleF (0, initialsCircleLabel.Frame.Bottom + PADDING, headerView.Frame.Width / 2, headerView.Frame.Height - (initialsCircleLabel.Frame.Bottom + PADDING)));
            callView.Tag = HEADER_CALL_VIEW_TAG;
            callView.BackgroundColor = UIColor.Clear;
            headerCallViewGestureTapGesture = new UITapGestureRecognizer ();
            headerCallViewGestureTapGestureHandlerToken = headerCallViewGestureTapGesture.AddTarget (DefaultCallTapHandler);
            callView.AddGestureRecognizer (headerCallViewGestureTapGesture);
            headerView.AddSubview (callView);

            UIImageView callIcon;
            using (var image = UIImage.FromBundle ("contacts-call")) {
                callIcon = new UIImageView (image);
            }
            callIcon.Frame = new RectangleF (40, 11, callIcon.Frame.Height, callIcon.Frame.Width);
            callView.AddSubview (callIcon);

            UILabel callLabel = new UILabel (new RectangleF (callIcon.Frame.Right + 10, 15, 50, 15));
            callLabel.TextColor = A.Color_NachoGreen;
            callLabel.Font = A.Font_AvenirNextMedium14;
            callLabel.Text = "Call";
            callLabel.TextAlignment = UITextAlignment.Left;
            callLabel.SizeToFit ();
            callView.AddSubview (callLabel);

            UIView emailView = new UIView (new RectangleF (headerView.Frame.Width / 2, initialsCircleLabel.Frame.Bottom + PADDING, headerView.Frame.Width, headerView.Frame.Height - (initialsCircleLabel.Frame.Bottom + PADDING)));
            emailView.Tag = HEADER_EMAIL_VIEW_TAG;
            emailView.BackgroundColor = UIColor.Clear;
            headerEmailViewTapGesture = new UITapGestureRecognizer ();
            headerEmailViewTapGestureHandlerToken = headerEmailViewTapGesture.AddTarget (DefaultEmailTapHandler);
            emailView.AddGestureRecognizer (headerEmailViewTapGesture);
            headerView.AddSubview (emailView);

            UIImageView emailIcon;
            using (var image = UIImage.FromBundle ("contacts-email")) {
                emailIcon = new UIImageView (image);
            }
            emailIcon.Frame = new RectangleF (35, 11, emailIcon.Frame.Height, emailIcon.Frame.Width);
            emailView.AddSubview (emailIcon);

            UILabel emailLabel = new UILabel (new RectangleF (emailIcon.Frame.Right + 10, 15, 50, 15));
            emailLabel.TextColor = A.Color_NachoGreen;
            emailLabel.Font = A.Font_AvenirNextMedium14;
            emailLabel.Text = "Email";
            emailLabel.TextAlignment = UITextAlignment.Left;
            emailLabel.SizeToFit ();
            emailView.AddSubview (emailLabel);

            float yOffset = headerView.Frame.Bottom + 12;

            UIView segmentedViewHolder = new UIView (new RectangleF (A.Card_Horizontal_Indent, yOffset, View.Frame.Width - (A.Card_Horizontal_Indent * 2), 100));
            segmentedViewHolder.Layer.BorderColor = A.Card_Border_Color;
            segmentedViewHolder.Layer.BorderWidth = A.Card_Border_Width;
            segmentedViewHolder.Layer.CornerRadius = A.Card_Corner_Radius;
            segmentedViewHolder.Tag = SEGMENTED_VIEW_HOLDER_TAG;
            segmentedViewHolder.BackgroundColor = UIColor.White;
            View.AddSubview (segmentedViewHolder);

            //SEGMENTED CONTROL
            var segmentedControl = new UISegmentedControl ();
            segmentedControl.Frame = new RectangleF (PADDING, VERTICAL_PADDING, segmentedViewHolder.Frame.Width - (PADDING * 2), SEGMENTED_CONTROL_HEIGHT);
            segmentedControl.TintColor = A.Color_NachoGreen;
            segmentedControl.InsertSegment ("Contact", 0, false);
            segmentedControl.InsertSegment ("Interactions", 1, false);
            segmentedControl.InsertSegment ("Notes", 2, false);
            segmentedControl.SelectedSegment = 0;

            var segmentedControlTextNormal = new UITextAttributes ();
            segmentedControlTextNormal.Font = A.Font_AvenirNextDemiBold14;
            segmentedControlTextNormal.TextColor = A.Color_NachoGreen;

            var segmentedControlTextSelected = new UITextAttributes ();
            segmentedControlTextSelected.Font = A.Font_AvenirNextDemiBold14;
            segmentedControlTextSelected.TextColor = UIColor.White;
            segmentedControl.ValueChanged += SegmentedControlHandler;
            segmentedControl.Tag = SEGMENTED_CONTROL_TAG;
            segmentedControl.SetTitleTextAttributes (segmentedControlTextNormal, UIControlState.Normal);
            segmentedControl.SetTitleTextAttributes (segmentedControlTextSelected, UIControlState.Selected);
            segmentedViewHolder.AddSubview (segmentedControl);

            //CONTACT INFO
            UIScrollView contactInfoScrollView = new UIScrollView (new RectangleF (0, segmentedControl.Frame.Bottom + 5, segmentedViewHolder.Frame.Width, View.Frame.Height - segmentedViewHolder.Frame.Top - 80 - 64));
            contactInfoScrollView.BackgroundColor = UIColor.White;
            contactInfoScrollView.Tag = CONTACT_INFO_VIEW_TAG;
            segmentedViewHolder.AddSubview (contactInfoScrollView);

            //INTERACTIONS
            UITableView interactionsTableView = new UITableView (new RectangleF (0, segmentedControl.Frame.Bottom + 4, segmentedViewHolder.Frame.Width, View.Frame.Height - segmentedViewHolder.Frame.Top - 80 - 64));
            interactionsTableView.Tag = INTERACTIONS_TABLE_VIEW_TAG;
            interactionsTableView.Hidden = true;
            interactionsTableView.BackgroundColor = UIColor.White;
            segmentedViewHolder.AddSubview (interactionsTableView);

            //NOTES
            UIView notesView = new UIView (new RectangleF (PADDING, segmentedControl.Frame.Bottom, segmentedViewHolder.Frame.Width - (PADDING * 2), View.Frame.Height - segmentedViewHolder.Frame.Top - 80 - 64));
            notesView.Tag = NOTES_VIEW_TAG;
            UITextView notesTextView = new UITextView (new RectangleF (0, 5, notesView.Frame.Width, notesView.Frame.Height - 45));
            notesTextView.Font = A.Font_AvenirNextRegular14;
            notesTextView.Editable = false;
            notesTextView.TextColor = A.Color_NachoBlack;
            notesTextView.BackgroundColor = UIColor.White;
            notesTextView.Tag = NOTES_TEXT_VIEW_TAG;
            notesTextView.ScrollEnabled = true;
            notesView.AddSubview (notesTextView);

            segmentedViewHolder.AddSubview (notesView);
        }

        protected void EditButtonClicked (object sender, EventArgs e)
        {
            switch (selectedSegment) {
            case 0:
                PerformSegue ("ContactToContactEdit", this);
                break;
            case 1:
                //TODO: Multi-Select
                break;
            case 2:
                PerformSegue ("ContactToNotes", new SegueHolder (contact));
                break;
            }
        }

        protected void LayoutView ()
        {
            UIView segmentedViewHolder = (UIView)View.ViewWithTag (SEGMENTED_VIEW_HOLDER_TAG);
            UIScrollView contactInfoScrollView = (UIScrollView)View.ViewWithTag (CONTACT_INFO_VIEW_TAG);
            UITableView interactionsTableView = (UITableView)View.ViewWithTag (INTERACTIONS_TABLE_VIEW_TAG);
            UIView notesView = (UIView)View.ViewWithTag (NOTES_VIEW_TAG);

            switch (selectedSegment) {
            case 0:
                SetViewHeight (segmentedViewHolder, VERTICAL_PADDING + SEGMENTED_CONTROL_HEIGHT + contactInfoScrollView.Frame.Height + VERTICAL_PADDING / 2);
                break;
            case 1:
                SetViewHeight (segmentedViewHolder, VERTICAL_PADDING + SEGMENTED_CONTROL_HEIGHT + interactionsTableView.Frame.Height + VERTICAL_PADDING / 2);
                break;
            case 2:
                SetViewHeight (segmentedViewHolder, VERTICAL_PADDING + SEGMENTED_CONTROL_HEIGHT + notesView.Frame.Height + VERTICAL_PADDING / 2);
                break;
            }
        }

        protected override void ConfigureAndLayout ()
        {
            isFirstInfoItem = true;
            UpdateVipButton ();

            UIColor userBackgroundColor;

            if (null == contact) {
                var unavailableTitle = (UILabel)View.ViewWithTag (HEADER_TITLE_TAG);
                unavailableTitle.Text = "Contact is unavailable.";
                return;
            }
            if (0 == contact.EmailAddresses.Count) {
                userBackgroundColor = Util.ColorForUser (Util.PickRandomColorForUser ());
            } else {
                var emailAddressAttribute = contact.EmailAddresses [0];
                var emailAddress = McEmailAddress.QueryById<McEmailAddress> (emailAddressAttribute.EmailAddress);
                userBackgroundColor = Util.ColorForUser (emailAddress.ColorIndex);
            }

            UILabel headerInitialsLabel = (UILabel)View.ViewWithTag (HEADER_INITIALS_CIRCLE_TAG);
            UIImageView headerPortraitImageView = (UIImageView)View.ViewWithTag (HEADER_PORTRAIT_TAG);

            headerInitialsLabel.Hidden = true;
            headerPortraitImageView.Hidden = true;

            if (0 == contact.PortraitId) {
                headerInitialsLabel.BackgroundColor = userBackgroundColor; 
                headerInitialsLabel.Text = NachoCore.Utils.ContactsHelper.GetInitials (contact);
                headerInitialsLabel.Hidden = false;

            } else {
                headerPortraitImageView.Image = Util.ImageOfContact (contact);
                headerPortraitImageView.Hidden = false;
            }

            UILabel headerNameLabel = (UILabel)View.ViewWithTag (HEADER_NAME_TAG);
            headerNameLabel.Text = contact.GetDisplayNameOrEmailAddress ();

            UILabel headerTitleLabel = (UILabel)View.ViewWithTag (HEADER_TITLE_TAG);
            if (!string.IsNullOrEmpty (contact.JobTitle)) {
                headerTitleLabel.Text = contact.JobTitle;
            } else if (!string.IsNullOrEmpty (contact.Title)) {
                headerTitleLabel.Text = contact.Title;
            } else {
                headerTitleLabel.Text = GetTitleFromContact ();
            }

            if (tapGestures.Count > 0) {
                foreach (var v in tapGestures.ToList()) {
                    UIView view;
                    if (null == (view = View.ViewWithTag (v.viewTag))) {
                        break;
                    }
                    v.recognizer.RemoveTarget (v.token);
                    view.RemoveFromSuperview ();
                    tapGestures.Remove (v);
                }
                variableTransientTag = TRANSIENT_TAG_INITIAL_VALUE;
            }

            //CONFIGURE CONTACT INFO VIEW
            UIScrollView contactInfoScrollView = (UIScrollView)View.ViewWithTag (CONTACT_INFO_VIEW_TAG);

            foreach (var v in contactInfoScrollView.Subviews) {
                v.RemoveFromSuperview ();
            }
            float contactInfoHeight = 0;

            if (contact.EmailAddresses.Count > 0) {
                foreach (var e in contact.EmailAddresses) {
                    if (e.IsDefault) {
                        contactInfoHeight += AddEmailAddress (e, contactInfoHeight, contactInfoScrollView, true);
                        break;
                    }
                }
            }

            contact.PhoneNumbers.Sort (new Util.PhoneAttributeComparer ());
           
            if (contact.PhoneNumbers.Count > 0) {
                foreach (var p in contact.PhoneNumbers) {
                    if (p.IsDefault) {
                        contactInfoHeight += AddPhoneNumber (contact.PhoneNumbers.FirstOrDefault (), contactInfoHeight, contactInfoScrollView, true);
                        break;
                    }
                }
            }

            if (contact.EmailAddresses.Count > 0) {
                foreach (var emailAddressAttributes in contact.EmailAddresses) {
                    if (!emailAddressAttributes.IsDefault) {
                        contactInfoHeight += AddEmailAddress (emailAddressAttributes, contactInfoHeight, contactInfoScrollView, false);
                    }
                }
            }

            if (contact.PhoneNumbers.Count > 0) {
                foreach (var phoneNumberAttribute in contact.PhoneNumbers) {
                    if (!phoneNumberAttribute.IsDefault) {
                        contactInfoHeight += AddPhoneNumber (phoneNumberAttribute, contactInfoHeight, contactInfoScrollView, false);
                    }
                }
            }

            if (contact.Addresses.Count > 0) {
                foreach (var a in contact.Addresses) {
                    contactInfoHeight += AddMiscInfo (a.Name, contactInfoHeight, contactInfoScrollView);
                }
            }

            if(DateTime.MinValue != contact.GetDateAttribute(Xml.Contacts.Birthday)){
                contactInfoHeight += AddMiscInfo (Xml.Contacts.Birthday, contactInfoHeight, contactInfoScrollView);
            }

            if(DateTime.MinValue != contact.GetDateAttribute(Xml.Contacts.Anniversary)){
                contactInfoHeight += AddMiscInfo (Xml.Contacts.Anniversary, contactInfoHeight, contactInfoScrollView);
            }

            if (contact.Relationships.Count > 0) {
                foreach (var c in contact.Relationships) {
                    if (c.Name == Xml.Contacts.Child) {
                        contactInfoHeight += AddMiscInfo (Xml.Contacts.Children, contactInfoHeight, contactInfoScrollView);
                        break;
                    }
                }
            }

            if (contact.Relationships.Count > 0) {
                foreach (var c in contact.Relationships) {
                    if (c.Name != Xml.Contacts.Child) {
                        contactInfoHeight += AddMiscInfo (c.Name, contactInfoHeight, contactInfoScrollView);
                    }
                }
            }

            foreach (var t in contactHelper.GetTakenMiscNames(contact)) {
                contactInfoHeight += AddMiscInfo (t, contactInfoHeight, contactInfoScrollView);
            }

            copyCellView.Frame = new RectangleF (0, 0, contactInfoScrollView.Frame.Width, 50);
            copyCellView.Hidden = true;
            contactInfoScrollView.AddSubview (copyCellView);

            UIView segmentedViewHolder = (UIView)View.ViewWithTag (SEGMENTED_VIEW_HOLDER_TAG);
            if (contactInfoHeight <= contactInfoScrollView.Frame.Height) {
                SetViewHeight (contactInfoScrollView, contactInfoHeight);
            } else {
                SetViewHeight (contactInfoScrollView, View.Frame.Height - segmentedViewHolder.Frame.Top - 80);
            }
            contactInfoScrollView.ContentSize = new SizeF(contactInfoScrollView.Frame.Width, contactInfoHeight);

            //CONFIGURE INTERACTIONS VIEW
            UITableView interactionsTableView = (UITableView)View.ViewWithTag (INTERACTIONS_TABLE_VIEW_TAG);
            messageSource.owner = this;
            interactionsTableView.Source = messageSource;
            MultiSelectToggle (messageSource, false);
            SetEmailMessages (new UserInteractionEmailMessages (contact));

            // CONFIGURE NOTES VIEW
            var notesTextView = (UITextView)View.ViewWithTag (NOTES_TEXT_VIEW_TAG);

            McBody contactBody = McBody.QueryById<McBody> (contact.BodyId);
            if (null != contactBody) {
                notesTextView.Text = contactBody.GetContentsString ();
            }

            if (contact.Source != McAbstrItem.ItemSource.ActiveSync) {
                notesTextView.Text = "This contact has not been synced. Adding or editing notes is disabled.";
            }

            LayoutView ();
        }

        protected void SegmentedControlHandler (Object sender, EventArgs e)
        {
            UIView contactInfoScrollView = (UIView)View.ViewWithTag (CONTACT_INFO_VIEW_TAG);
            UITableView interactionsTableView = (UITableView)View.ViewWithTag (INTERACTIONS_TABLE_VIEW_TAG);
            UIView notesView = (UIView)View.ViewWithTag (NOTES_VIEW_TAG);

            selectedSegment = ((UISegmentedControl)sender).SelectedSegment;
            switch (selectedSegment) {
            case 0:
                if (contact.Source != McAbstrItem.ItemSource.ActiveSync) {
                    editContact.Enabled = false;
                } else {
                    editContact.Enabled = true;
                }
                contactInfoScrollView.Hidden = false;
                interactionsTableView.Hidden = true;
                notesView.Hidden = true;
                break;
            case 1:
                editContact.Enabled = true;
                contactInfoScrollView.Hidden = true;
                interactionsTableView.Hidden = false;
                notesView.Hidden = true;
                RefreshData ();
                break;
            case 2:
                interactionsTableView.Hidden = true;
                contactInfoScrollView.Hidden = true;
                notesView.Hidden = false;
                if (contact.Source != McAbstrItem.ItemSource.ActiveSync) {
                    editContact.Enabled = false;
                } else {
                    editContact.Enabled = true;
                }
                break;
            default:
                NcAssert.CaseError ();
                break;
            }
            LayoutView ();
        }

        protected void ContactInfoTapHandler (bool isEmail, string contactInfo)
        {
            if (isEmail) {
                TouchedEmailButton (contactInfo);
            } else {
                TouchedCallButton (contactInfo);
            }
        }

        protected override void Cleanup ()
        {
            UIButton vipButton = (UIButton)View.ViewWithTag (HEADER_VIP_BUTTON_TAG);
            vipButton.TouchUpInside -= VipButtonTouchUpInside;
            vipButton = null;

            UIView callView = (UIView)View.ViewWithTag (HEADER_CALL_VIEW_TAG);
            headerCallViewGestureTapGesture.RemoveTarget (headerCallViewGestureTapGestureHandlerToken);
            callView.RemoveGestureRecognizer (headerCallViewGestureTapGesture);

            UIView emailView = (UIView)View.ViewWithTag (HEADER_EMAIL_VIEW_TAG);
            headerCallViewGestureTapGesture.RemoveTarget (headerEmailViewTapGestureHandlerToken);
            emailView.RemoveGestureRecognizer (headerEmailViewTapGesture);

            foreach (var v in tapGestures.ToList()) {
                UIView view;
                if (null == (view = View.ViewWithTag (v.viewTag))) {
                    break;
                }
                v.recognizer.RemoveTarget (v.token);
                view.RemoveFromSuperview ();
                tapGestures.Remove (v);
            }
            variableTransientTag = TRANSIENT_TAG_INITIAL_VALUE;

            editContact.Clicked -= EditButtonClicked;
            editContact = null;

            foreach (var lp in longPressRecognizers) {
                lp.Cleanup ();
            }
        }

        protected void DefaultEmailTapHandler ()
        {
            Util.EmailContact ("SegueToContactDefaultSelector", contact, this);
        }

        protected void DefaultCallTapHandler ()
        {
            Util.CallContact ("SegueToContactDefaultSelector", contact, this);
        }

        protected float AddEmailAddress (McContactEmailAddressAttribute email, float yOffset, UIView contactInfoScrollView, bool isFirstEmail) /*TODO Remove isFirstEmail once we're settings defaults */
        {
            UIView segmentedControllerHolderView = (UIView)View.ViewWithTag (SEGMENTED_VIEW_HOLDER_TAG);

            var emailView = new UIView (new RectangleF (PADDING, yOffset, contactInfoScrollView.Frame.Width - PADDING, 40));
            emailView.Tag = variableTransientTag;
            contactInfoScrollView.AddSubview (emailView);

            UIImageView emailIcon = new UIImageView (UIImage.FromBundle ("contacts-icn-email"));
            emailIcon.Frame = new RectangleF (0, ROW_SPACER, emailIcon.Frame.Width, emailIcon.Frame.Height);
            emailView.AddSubview (emailIcon);

            var emailLabel = new UILabel (new RectangleF (emailIcon.Frame.Right + 8, ROW_SPACER, 45, 15));
            emailLabel.Font = A.Font_AvenirNextMedium10;
            emailLabel.TextColor = UIColor.DarkGray;
            emailLabel.Text = "EMAIL";
            emailLabel.SizeToFit ();
            emailView.AddSubview (emailLabel);

            var emailComposeIcon = new UIImageView (UIImage.FromBundle ("contacts-email"));
            emailComposeIcon.Frame = new RectangleF (emailView.Frame.Width - (emailComposeIcon.Frame.Width + PADDING), ROW_SPACER, emailComposeIcon.Frame.Width, emailComposeIcon.Frame.Height);
            emailView.UserInteractionEnabled = true;
            emailView.AddSubview (emailComposeIcon);

            var emailAddress = McEmailAddress.QueryById <McEmailAddress> (email.EmailAddress);
            string canonicalEmail = "";
            if (null != emailAddress) {
                canonicalEmail = emailAddress.CanonicalEmailAddress;
            }

            UITapGestureRecognizer emailTap = new UITapGestureRecognizer ();
            UITapGestureRecognizer.Token emailTapToken = emailTap.AddTarget (() => ContactInfoTapHandler (true, canonicalEmail));
            emailView.AddGestureRecognizer (emailTap);

            tapGestures.Add (new TapGesturePair (emailTap, emailTapToken, variableTransientTag));
            variableTransientTag++;

            if (isFirstEmail /*TODO email.IsDefault */) {
                UIImageView defaultEmailIcon = new UIImageView (UIImage.FromBundle ("contacts-marker"));
                defaultEmailIcon.Frame = new RectangleF (0, emailLabel.Frame.Bottom + 14, defaultEmailIcon.Frame.Width, defaultEmailIcon.Frame.Height);
                emailView.AddSubview (defaultEmailIcon);
            }

            var emailTextView = new UILabel (new RectangleF (emailLabel.Frame.X, emailLabel.Frame.Bottom + 10, emailView.Frame.Width - (emailLabel.Frame.X + 45), 16));
            emailTextView.Font = A.Font_AvenirNextMedium14;
            emailTextView.TextColor = A.Color_NachoGreen;
            emailTextView.Text = canonicalEmail;
            emailTextView.Lines = 2;
            emailTextView.LineBreakMode = UILineBreakMode.CharacterWrap;
            emailTextView.SizeToFit ();
            emailView.AddSubview (emailTextView);

            if (!isFirstInfoItem) {
                Util.AddHorizontalLine (emailLabel.Frame.X, 0, segmentedControllerHolderView.Frame.Width - contactInfoScrollView.Frame.X - emailLabel.Frame.X, A.Color_NachoBorderGray, emailView);
            }
            isFirstInfoItem = false;

            SetViewHeight (emailView, emailTextView.Frame.Bottom + 10);

            UILongPressGestureRecognizer viewLongPress = new UILongPressGestureRecognizer ();
            UILongPressGestureRecognizer.Token viewLongPressToken = viewLongPress.AddTarget (() => {
                longPressData = new LongPressCopyData (canonicalEmail, emailView);
                CopyThis ();
            });
            longPressRecognizers.Add(new LongPressPair(viewLongPress, viewLongPressToken));
            emailView.AddGestureRecognizer (viewLongPress);
            emailView.UserInteractionEnabled = true;

            return emailView.Frame.Height;
        }

        protected float AddPhoneNumber (McContactStringAttribute phone, float yOffset, UIView contactInfoScrollView, bool isFirstPhone) /*TODO Remove isFirstEmail once we're settings defaults */
        {
            UIView segmentedControllerHolderView = (UIView)View.ViewWithTag (SEGMENTED_VIEW_HOLDER_TAG);

            var phoneView = new UIView (new RectangleF (PADDING, yOffset, contactInfoScrollView.Frame.Width - PADDING, 40));
            phoneView.Tag = variableTransientTag;
            phoneView.UserInteractionEnabled = true;
            contactInfoScrollView.AddSubview (phoneView);

            UIImageView phoneIcon = new UIImageView (UIImage.FromBundle ("contacts-icn-phone"));
            phoneIcon.Frame = new RectangleF (0, ROW_SPACER, phoneIcon.Frame.Width, phoneIcon.Frame.Height);

            phoneView.AddSubview (phoneIcon);

            string phoneLabelText = "";

            if (!string.IsNullOrEmpty (phone.Label)) {
                phoneLabelText = phone.Label.ToUpper ();
            } else {
                phoneLabelText = "PHONE";
            }

            var phoneLabel = new UILabel (new RectangleF (phoneIcon.Frame.Right + 8, ROW_SPACER, 45, 15));
            phoneLabel.Font = A.Font_AvenirNextMedium10;
            phoneLabel.TextColor = UIColor.DarkGray;
            phoneLabel.Text = phoneLabelText;
            phoneLabel.SizeToFit ();
            phoneView.AddSubview (phoneLabel);

            var callIcon = new UIImageView (UIImage.FromBundle ("contacts-call"));
            callIcon.Frame = new RectangleF (phoneView.Frame.Width - (callIcon.Frame.Width + PADDING), ROW_SPACER, callIcon.Frame.Width, callIcon.Frame.Height);
            phoneView.AddSubview (callIcon);

            UITapGestureRecognizer phoneTap = new UITapGestureRecognizer ();
            UITapGestureRecognizer.Token phoneTapToken = phoneTap.AddTarget (() => ContactInfoTapHandler (false, phone.Value));
            phoneView.AddGestureRecognizer (phoneTap);

            tapGestures.Add (new TapGesturePair (phoneTap, phoneTapToken, variableTransientTag));
            variableTransientTag++;

            if (isFirstPhone /*TODO phone.IsDefault */) {
                UIImageView defaultPhoneIcon = new UIImageView (UIImage.FromBundle ("contacts-marker"));
                defaultPhoneIcon.Frame = new RectangleF (0, phoneLabel.Frame.Bottom + 13, defaultPhoneIcon.Frame.Width, defaultPhoneIcon.Frame.Height);
                phoneView.AddSubview (defaultPhoneIcon);
            }

            var phoneNumberTextView = new UILabel (new RectangleF (phoneLabel.Frame.X, phoneLabel.Frame.Bottom + 10, View.Frame.Width - 75, 30));
            phoneNumberTextView.Font = A.Font_AvenirNextMedium14;
            phoneNumberTextView.TextColor = A.Color_NachoGreen;
            phoneNumberTextView.Text = phone.Value;
            phoneNumberTextView.SizeToFit ();
            phoneView.AddSubview (phoneNumberTextView);

            if (!isFirstInfoItem) {
                Util.AddHorizontalLine (phoneLabel.Frame.X, 0, segmentedControllerHolderView.Frame.Width - contactInfoScrollView.Frame.X - phoneLabel.Frame.X, A.Color_NachoBorderGray, phoneView);
            }
            isFirstInfoItem = false;

            SetViewHeight (phoneView, phoneNumberTextView.Frame.Bottom + 10);

            UILongPressGestureRecognizer viewLongPress = new UILongPressGestureRecognizer ();
            UILongPressGestureRecognizer.Token viewLongPressToken = viewLongPress.AddTarget (() => {
                longPressData = new LongPressCopyData (phone.Value, phoneView);
                CopyThis ();
            });
            longPressRecognizers.Add(new LongPressPair(viewLongPress, viewLongPressToken));
            phoneView.AddGestureRecognizer (viewLongPress);
            phoneView.UserInteractionEnabled = true;

            return phoneView.Frame.Height;
        }

        protected float AddMiscInfo(string whatInfo, float yOffset, UIView contactInfoScrollView)
        {
            UIView segmentedControllerHolderView = (UIView)View.ViewWithTag (SEGMENTED_VIEW_HOLDER_TAG);

            var miscInfoView = new UIView (new RectangleF (PADDING, yOffset, contactInfoScrollView.Frame.Width - PADDING, 40));
            contactInfoScrollView.AddSubview (miscInfoView);

            string label = "";
            string iconName = "";
            string value = "";

            SetViewProperties (whatInfo, ref label, ref value, ref iconName);

            UIImageView viewIcon = new UIImageView (UIImage.FromBundle (iconName));
            viewIcon.Frame = new RectangleF (0, ROW_SPACER, viewIcon.Frame.Width, viewIcon.Frame.Height);

            miscInfoView.AddSubview (viewIcon);

            var viewLabel = new UILabel (new RectangleF (viewIcon.Frame.Right + 8, ROW_SPACER, 45, 15));
            viewLabel.Font = A.Font_AvenirNextMedium10;
            viewLabel.TextColor = UIColor.DarkGray;
            viewLabel.Text = label;
            viewLabel.SizeToFit ();
            miscInfoView.AddSubview (viewLabel);

            var viewTextView = new UILabel (new RectangleF (viewLabel.Frame.X, viewLabel.Frame.Bottom + 10, miscInfoView.Frame.Width - (viewLabel.Frame.X + 10), 40));
            viewTextView.Font = A.Font_AvenirNextMedium14;
            viewTextView.TextColor = A.Color_NachoGreen;
            viewTextView.Text = value;
            viewTextView.Lines = 2;
            viewTextView.SizeToFit ();
            viewTextView.LineBreakMode = UILineBreakMode.WordWrap;
            miscInfoView.AddSubview (viewTextView);

            if (!isFirstInfoItem) {
                Util.AddHorizontalLine (viewLabel.Frame.X, 0, segmentedControllerHolderView.Frame.Width - contactInfoScrollView.Frame.X - viewLabel.Frame.X, A.Color_NachoBorderGray, miscInfoView);
            }
            isFirstInfoItem = false;

            SetViewHeight (miscInfoView, viewTextView.Frame.Bottom + 10);

            UILongPressGestureRecognizer viewLongPress = new UILongPressGestureRecognizer ();
            UILongPressGestureRecognizer.Token viewLongPressToken = viewLongPress.AddTarget (() => {
                longPressData = new LongPressCopyData (value, miscInfoView);
                CopyThis ();
            });
            longPressRecognizers.Add(new LongPressPair(viewLongPress, viewLongPressToken));
            miscInfoView.AddGestureRecognizer (viewLongPress);
            miscInfoView.UserInteractionEnabled = true;

            return miscInfoView.Frame.Height;
        }

        protected void CopyThis()
        {
            copyCellView.Frame = new RectangleF (0, longPressData.containerView.Frame.Y, longPressData.containerView.Superview.Frame.Width, longPressData.containerView.Frame.Height + 1);
            copyCellView.BackgroundColor = UIColor.LightGray.ColorWithAlpha (.3f);
            copyCellView.Hidden = false;

            longPressData.containerView.Superview.BecomeFirstResponder ();

            UIMenuController copyMenu = UIMenuController.SharedMenuController;
            copyMenu.SetTargetRect (new RectangleF (longPressData.containerView.Superview.Frame.Width / 2, longPressData.containerView.Frame.Y + 7, 0, 0), longPressData.containerView.Superview);
            copyMenu.ArrowDirection = UIMenuControllerArrowDirection.Down;

            UIMenuItem copyMenuItem = new UIMenuItem ("Copy", new MonoTouch.ObjCRuntime.Selector ("DoCopy"));
            copyMenu.MenuItems = new UIMenuItem[] { copyMenuItem };
            copyMenu.SetMenuVisible (true, true);
        }       

        [Export("DoCopy")]
        protected void DoCopy ()
        {
            UIPasteboard pasteBoard = UIPasteboard.General;
            pasteBoard.Persistent = true;
            pasteBoard.String = longPressData.textToCopy;
        }

        protected void SetViewProperties (string whatType, ref string label, ref string value, ref string icon)
        {
            switch (whatType) {
            //Address names
            case "Other":
            case "Home":
            case "Business":
                var address = contact.GetAddressAttribute (whatType);
                label = whatType.ToUpper ();
                value = address.Street + " " + address.City + " " + address.State + " " + address.PostalCode + " " + address.Country;
                icon = "contacts-icn-address";
                break;
            case Xml.Contacts.Birthday:
                label = Xml.Contacts.Birthday.ToUpper();
                value = contact.GetDateAttribute (whatType).ToLongDateString();
                icon = "contacts-icn-bday";
                break;
            case Xml.Contacts.Anniversary:
                label = Xml.Contacts.Anniversary.ToUpper();
                value = contact.GetDateAttribute (whatType).ToLongDateString();
                //FIXME: Add anniversary icon
                icon = "contacts-icn-bday";
                break;
            case Xml.Contacts.Spouse:
                label = "SPOUSE";
                value = contact.GetRelationshipAttribute (whatType);
                //FIXME: Add spouse icon
                icon = "contacts-icn-bday";
                break;
            case Xml.Contacts.AssistantName:
                label = "ASSISTANT";
                value = contact.GetRelationshipAttribute (whatType);
                //FIXME: Add Assistant icon
                icon = "contacts-icn-bday";
                break;
            case Xml.Contacts2.ManagerName:
                label = "MANAGER";
                value = contact.GetRelationshipAttribute (whatType);
                //FIXME: Add manager icon
                icon = "contacts-icn-bday";
                break;
            case Xml.Contacts.WebPage:
                label = "WEB PAGE";
                value = contact.WebPage;
                //FIXME: Add web page icon
                icon = "contacts-icn-bday";
                break;
            case Xml.Contacts.OfficeLocation:
                label = "OFFICE LOCATION";
                value = contact.OfficeLocation;
                //FIXME: Add office location icon
                icon = "contacts-icn-bday";
                break;
            case Xml.Contacts.Children:
                string childrenString = "";
                label = Xml.Contacts.Children.ToUpper ();

                int remainingChildren = 0;
                foreach (var c in contact.Relationships) {
                    if (c.Name == Xml.Contacts.Child) {
                        remainingChildren++;
                    }
                }

                foreach (var c in contact.Relationships) {
                    if (c.Name == Xml.Contacts.Child) {
                        remainingChildren--;
                        childrenString += c.Value;
                        if (remainingChildren > 0) {
                            childrenString += ", ";
                        }
                    }
                }
                value = childrenString;
                //FIXME: Add children icon
                icon = "contacts-icn-bday";
                break;
            default:
                label = contactHelper.ExchangeNameToLabel (whatType).ToUpper ();
                value = contactHelper.MiscContactAttributeNameToValue (whatType, contact);
                icon = "contacts-icn-bday";
                break;
            }

        }

        public bool ShouldRecognizeSimultaneously (UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer)
        {
            return true;
        }

        protected UIColor LighterColor (UIColor color)
        {
            float hue, saturation, brightness, alpha;
            color.GetHSBA (out hue, out saturation, out brightness, out alpha);
            return UIColor.FromHSBA (hue, saturation, Math.Min (brightness * 1.3f, 1.0f), alpha);
        }

        protected void SetViewHeight (UIView view, float height)
        {
            var frame = view.Frame;
            frame.Height = height;
            view.Frame = frame;
        }

        /// Return email address iff display name is set
        protected string GetTitleFromContact ()
        {
            var name = contact.GetDisplayName ();

            if (String.IsNullOrEmpty (name)) {
                return "";
            }

            if (contact.EmailAddresses.Count > 0) {
                var emailAddressAttribute = contact.EmailAddresses [0];
                var emailAddress = McEmailAddress.QueryById<McEmailAddress> (emailAddressAttribute.EmailAddress);
                return emailAddress.CanonicalEmailAddress;
            } else {
                return "";
            }

        }

        protected void TouchedEmailButton (string address)
        {
            if (string.IsNullOrEmpty (address)) {
                ComplainAbout ("No email address", "You've selected a contact who does not have an email address");
                return;
            }
            PerformSegue ("SegueToMessageCompose", new SegueHolder (address));
        }

        protected void TouchedCallButton (string number)
        {
            if (string.IsNullOrEmpty (number)) {
                ComplainAbout ("No phone number", "You've selected a contact who does not have a phone number");
                return;
            }
            PerformAction ("tel", number);
        }

        protected void PerformAction (string action, string number)
        {
            UIApplication.SharedApplication.OpenUrl (new Uri (String.Format ("{0}:{1}", action, number)));
        }

        protected void ComplainAbout (string complaintTitle, string complaintMessage)
        {
            UIAlertView alert = new UIAlertView (complaintTitle, complaintMessage, null, "OK", null);
            alert.Show ();
        }

        protected void VipButtonTouchUpInside (object sender, EventArgs e)
        {
            contact.SetVIP (!contact.IsVip);
            UpdateVipButton ();
        }

        protected void UpdateVipButton ()
        {
            UIButton vipButton = (UIButton)View.ViewWithTag (HEADER_VIP_BUTTON_TAG);
            var vipImageName = (contact.IsVip ? "contacts-vip-checked" : "contacts-vip");

            using (var rawImage = UIImage.FromBundle (vipImageName)) {
                var image = rawImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal);
                vipButton.SetImage (image, UIControlState.Normal);
            }
        }

        ////////InteractionsTableViewStuff

        public void PerformSegueForDelegate (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        public void MessageThreadSelected (McEmailMessageThread messageThread)
        {
            PerformSegue ("NachoNowToMessageView", new SegueHolder (messageThread));
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_EmailMessageSetChanged == s.Status.SubKind) {
                Log.Debug (Log.LOG_UI, "StatusIndicatorCallback");
                RefreshData ();
            }

            if (NcResult.SubKindEnum.Info_ContactSetChanged == s.Status.SubKind) {
                Log.Debug (Log.LOG_UI, "StatusIndicatorCallback: Contact Set Changed");
                RefreshData ();
            }
        }

        public void RefreshData ()
        {
            UITableView interactionsTableView = (UITableView)View.ViewWithTag (INTERACTIONS_TABLE_VIEW_TAG);

            NachoCore.Utils.NcAbate.HighPriority ("ContactDetailViewController RefreshData");
            messageSource.RefreshEmailMessages ();
            interactionsTableView.ReloadData ();
            NachoCore.Utils.NcAbate.RegularPriority ("ContactDetailViewController RefreshData");
        }

        public void DateSelected (MessageDeferralType request, McEmailMessageThread thread, DateTime selectedDate)
        {
            NcMessageDeferral.DeferThread (thread, request, selectedDate);
        }

        public void DismissChildDateController (INachoDateController vc)
        {
            vc.Setup (null, null, DateControllerType.None);
            vc.DismissDateController (false, new NSAction (delegate {
                this.DismissViewController (true, null);
            }));
        }

        public void DismissChildMessageEditor (INachoMessageEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                this.DismissViewController (true, null);
            }));
        }

        public void CreateTaskForEmailMessage (INachoMessageEditor vc, McEmailMessageThread thread)
        {
            var m = thread.SingleMessageSpecialCase ();
            var t = CalendarHelper.CreateTask (m);
            vc.SetOwner (null);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                PerformSegue ("", new SegueHolder (t));
            }));
        }

        public void CreateMeetingEmailForMessage (INachoMessageEditor vc, McEmailMessageThread thread)
        {
            var m = thread.SingleMessageSpecialCase ();
            var c = CalendarHelper.CreateMeeting (m);
            vc.DismissMessageEditor (false, new NSAction (delegate {
                PerformSegue ("NachoNowToEditEvent", new SegueHolder (c));
            }));
        }

        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (true, null);
        }

        public void DismissChildFolderChooser (INachoFolderChooser vc)
        {
            vc.SetOwner (null, false, null);
            vc.DismissFolderChooser (false, null);
        }

        public void FolderSelected (INachoFolderChooser vc, McFolder folder, object cookie)
        {
            if (null != messageSource) {
                messageSource.FolderSelected (vc, folder, cookie);
            }
            vc.DismissFolderChooser (true, null);
        }

        public void MultiSelectToggle (MessageTableViewSource source, bool enabled)
        {
            return;
        }

        public void SetEmailMessages (INachoEmailMessages messageThreads)
        {
            this.messageSource.SetEmailMessages (messageThreads);
        }

        public void SaveNote (int accountId, string noteText)
        {
            if (null != contact) {
                McBody contactBody = McBody.QueryById<McBody> (contact.BodyId);
                if (null != contactBody) {
                    contactBody.UpdateData (noteText);
                } else {
                    contact.BodyId = McBody.InsertFile (accountId, McAbstrFileDesc.BodyTypeEnum.PlainText_1, noteText).Id;
                }
                contact.Update ();
                NachoCore.BackEnd.Instance.UpdateContactCmd (contact.AccountId, contact.Id);
            }
        }

        public string GetNoteText ()
        {
            NcAssert.True (null != contact);

            if (contact.Source != McAbstrItem.ItemSource.ActiveSync) {
                return "This contact has not been synced. Adding or editing notes is disabled.";
            } else {
                McBody contactBody = McBody.QueryById<McBody> (contact.BodyId);
                if (null != contactBody) {
                    return contactBody.GetContentsString ();
                }
                return "";
            }
        }

        public void PerformSegueForContactDefaultSelector (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        public class LongPressCopyData
        {
            public string textToCopy;
            public UIView containerView;

            public LongPressCopyData(string textToCopy, UIView containerView)
            {
                this.textToCopy = textToCopy;
                this.containerView = containerView;
            }
        }

        //Manage the LongPressGestureRecognizer for Copy better
        public class LongPressPair
        {
            UILongPressGestureRecognizer longPress;
            UILongPressGestureRecognizer.Token longPressToken;

            public LongPressPair(UILongPressGestureRecognizer longPress, UILongPressGestureRecognizer.Token longPressToken)
            {
                this.longPress = longPress;
                this.longPressToken = longPressToken;
            }

            public void Cleanup ()
            {
                longPress.RemoveTarget (longPressToken);
                longPress.ShouldRecognizeSimultaneously = null;
            }
        }

    }
}
