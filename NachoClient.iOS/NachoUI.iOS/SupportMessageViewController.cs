// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Collections.Generic;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;
using NachoPlatform;

namespace NachoClient.iOS
{
    public partial class SupportMessageViewController : NcUIViewControllerNoLeaks
    {
        protected float yOffset;
        protected static float CELL_HEIGHT = 44f;
        protected static float LINE_OFFSET = 30f;
        protected static float KEYBOARD_HEIGHT = 216f;
        protected const float HORIZONTAL_PADDING = 12f;
        protected const float INDENT = 18f;
        protected const float VERTICAL_PADDING = 20f;

        protected float keyboardHeight;

        protected const int MESSAGEBODY_VIEW_TAG = 100;
        protected const int CONTACT_TEXTFIELD_TAG = 101;

        protected const int GRAY_BACKGROUND_VIEW_TAG = 200;
        protected const int SENDING_SPINNER_TAG = 201;
        protected const double WAIT_TIMER_LENGTH = 12;

        protected NSTimer sendMessageTimer;
        protected bool hasDisplayedStatusMessage = false;

        public SupportMessageViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;

            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
            }
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;

            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillHideNotification);
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillShowNotification);
            }
        }

        public virtual bool HandlesKeyboardNotifications {
            get { return true; }
        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {
                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;

                bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                if (visible) {
                    var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                } else {
                    var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                }
            }
        }

        protected virtual void OnKeyboardChanged (bool visible, float height)
        {
            var newHeight = (visible ? height : 0);

            if (newHeight == keyboardHeight) {
                return;
            }
            keyboardHeight = newHeight;

            LayoutView ();
        }

        protected void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if (NcResult.SubKindEnum.Info_TelemetrySupportMessageReceived == s.Status.SubKind) {
                MessageReceived (true);
            }
        }

        protected override void CreateViewHierarchy ()
        {
            View.BackgroundColor = A.Color_NachoBackgroundGray;
            contentView.BackgroundColor = A.Color_NachoBackgroundGray;

            navigationBar.Frame = new RectangleF (0, 0, View.Frame.Width, 64);
            navigationBar.Alpha = 1.0f;
            navigationBar.Opaque = true;
            navigationBar.BackgroundColor = A.Color_NachoGreen.ColorWithAlpha (1.0f);
            navigationBar.BarTintColor = A.Color_NachoGreen;
            navigationBar.Translucent = false;

            yOffset = navigationBar.Frame.Bottom + VERTICAL_PADDING;

            UIView sectionOneView = new UIView (new RectangleF (HORIZONTAL_PADDING, yOffset, View.Frame.Width - (HORIZONTAL_PADDING * 2), CELL_HEIGHT * 2));
            sectionOneView.Layer.BorderWidth = .5f;
            sectionOneView.Layer.BorderColor = A.Color_NachoBorderGray.CGColor;
            sectionOneView.BackgroundColor = UIColor.White;
            sectionOneView.Layer.CornerRadius = 4;

            UILabel sectionOneHeader = new UILabel (new RectangleF (INDENT, 0, sectionOneView.Frame.Width - INDENT, CELL_HEIGHT));
            sectionOneHeader.Font = A.Font_AvenirNextRegular14;
            sectionOneHeader.TextColor = A.Color_NachoBlack;
            sectionOneHeader.Text = "How can we reach you?";
            sectionOneHeader.TextAlignment = UITextAlignment.Left;
            sectionOneView.AddSubview (sectionOneHeader);

            UIView sectionOneHR = new UIView (new RectangleF (INDENT, sectionOneHeader.Frame.Bottom - .5f, sectionOneView.Frame.Width - INDENT, .5f));
            sectionOneHR.BackgroundColor = A.Color_NachoBorderGray;
            sectionOneView.AddSubview (sectionOneHR);

            UITextField sectionOneTextField = new UITextField (new RectangleF (INDENT, sectionOneHR.Frame.Bottom, sectionOneView.Frame.Width - INDENT, CELL_HEIGHT));
            sectionOneTextField.Placeholder = "yourname@email.com";
            sectionOneTextField.BackgroundColor = sectionOneView.BackgroundColor;
            sectionOneTextField.Font = A.Font_AvenirNextMedium14;
            sectionOneTextField.KeyboardType = UIKeyboardType.EmailAddress;
            sectionOneTextField.AutocapitalizationType = UITextAutocapitalizationType.None;
            sectionOneTextField.AutocorrectionType = UITextAutocorrectionType.No;
            sectionOneTextField.Tag = CONTACT_TEXTFIELD_TAG;
            sectionOneTextField.Layer.CornerRadius = 4f;
            sectionOneView.AddSubview (sectionOneTextField);
            contentView.AddSubview (sectionOneView);

            yOffset = sectionOneView.Frame.Bottom + HORIZONTAL_PADDING;

            UIView sectionTwoView = new UIView (new RectangleF (HORIZONTAL_PADDING, yOffset, View.Frame.Width - (HORIZONTAL_PADDING * 2), View.Frame.Height - yOffset - VERTICAL_PADDING));
            sectionTwoView.Layer.BorderWidth = .5f;
            sectionTwoView.Layer.BorderColor = A.Color_NachoBorderGray.CGColor;
            sectionTwoView.BackgroundColor = UIColor.White;
            sectionTwoView.Layer.CornerRadius = 4;

            UILabel sectionTwoHeader = new UILabel (new RectangleF (INDENT, 0, sectionTwoView.Frame.Width - INDENT, CELL_HEIGHT));
            sectionTwoHeader.Font = A.Font_AvenirNextRegular14;
            sectionTwoHeader.TextColor = A.Color_NachoBlack;
            sectionTwoHeader.Text = "What can we help you with?";
            sectionTwoHeader.TextAlignment = UITextAlignment.Left;
            sectionTwoView.AddSubview (sectionTwoHeader);

            UIView sectionTwoHR = new UIView (new RectangleF (INDENT, sectionTwoHeader.Frame.Bottom - .5f, sectionTwoView.Frame.Width - INDENT, .5f));
            sectionTwoHR.BackgroundColor = A.Color_NachoBorderGray;
            sectionTwoView.AddSubview (sectionTwoHR);

            UITextView sectionTwoTextView = new UITextView (new RectangleF (INDENT - 4, sectionTwoHR.Frame.Bottom + 8, sectionTwoView.Frame.Width - INDENT, sectionTwoView.Frame.Height - CELL_HEIGHT - 8));
            sectionTwoTextView.Font = A.Font_AvenirNextMedium14;
            sectionTwoTextView.TextColor = UIColor.LightGray;
            sectionTwoTextView.Text = "Briefly describe what's going on";
            sectionTwoTextView.Tag = MESSAGEBODY_VIEW_TAG;
            sectionTwoTextView.BackgroundColor = UIColor.White;
            sectionTwoTextView.ScrollEnabled = true;
            sectionTwoTextView.Changed += (object sender, EventArgs e) => {
                MessageBodySelectionChanged (sectionTwoTextView);
            };
            sectionTwoView.AddSubview (sectionTwoTextView);
            contentView.AddSubview (sectionTwoView);

            yOffset = sectionTwoTextView.Frame.Bottom;

            sectionOneTextField.ShouldReturn += ((textField) => {
                sectionTwoTextView.BecomeFirstResponder ();
                return true;
            });

            sectionTwoTextView.ShouldBeginEditing += ((textView) => {
                if (textView.TextColor == UIColor.LightGray) {
                    textView.Text = "";
                    textView.TextColor = A.Color_NachoBlack;
                }
                return true;
            });

            sectionTwoTextView.ShouldEndEditing += ((textView) => {
                if (0 == textView.Text.Trim ().Length) {
                    sectionTwoTextView.TextColor = UIColor.LightGray;
                    sectionTwoTextView.Text = "Briefly describe what's going on...";
                }
                textView.ResignFirstResponder();
                return true;
            });

            scrollView.BackgroundColor = A.Color_NachoNowBackground;

            UINavigationItem navItems = new UINavigationItem ("Support");

            using (var image = UIImage.FromBundle ("nav-backarrow")) {
                UIBarButtonItem backButton = new UIBarButtonItem (image, UIBarButtonItemStyle.Plain, (sender, args) => {
                    this.DismissViewController (true, null);
                });
                backButton.Title = "Back";
                backButton.TintColor = A.Color_NachoBlue;
                navItems.SetLeftBarButtonItem (backButton, true);
            }
          
            Util.SetAutomaticImageForButton (sendButton, "icn-send");

            sendButton.Clicked += SendButtonClicked;

            navItems.RightBarButtonItem = sendButton;
            navigationBar.Items = new UINavigationItem[]{ navItems };
            View.AddSubview (navigationBar);

            UIView grayBackgroundView = new UIView (new RectangleF (0, 0, View.Frame.Width, View.Frame.Height));
            grayBackgroundView.BackgroundColor = UIColor.DarkGray.ColorWithAlpha (.6f);
            grayBackgroundView.Tag = GRAY_BACKGROUND_VIEW_TAG;
            grayBackgroundView.Hidden = true;
            grayBackgroundView.Alpha = 0.0f;
            View.AddSubview (grayBackgroundView);

            UIView alertMimicView = new UIView (new RectangleF (grayBackgroundView.Frame.Width / 2 - 90, grayBackgroundView.Frame.Height / 2 - 80, 180, 110));
            alertMimicView.BackgroundColor = UIColor.White;
            alertMimicView.Layer.CornerRadius = 6.0f;
            grayBackgroundView.AddSubview (alertMimicView);

            UILabel statusMessage = new UILabel (new System.Drawing.RectangleF (8, 10, alertMimicView.Frame.Width - 16, 25));
            statusMessage.BackgroundColor = UIColor.White;
            statusMessage.Alpha = 1.0f;
            statusMessage.Font = UIFont.SystemFontOfSize (17);
            statusMessage.TextColor = UIColor.Black;
            statusMessage.Text = "Sending Message";
            statusMessage.TextAlignment = UITextAlignment.Center;
            alertMimicView.AddSubview (statusMessage);

            UIActivityIndicatorView sendingActivityIndicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);
            sendingActivityIndicator.Frame = new RectangleF (alertMimicView.Frame.Width / 2 - 20, statusMessage.Frame.Bottom + 15, 40, 40);
            sendingActivityIndicator.Color = A.Color_SystemBlue;
            sendingActivityIndicator.Alpha = 1.0f;
            sendingActivityIndicator.StartAnimating ();
            sendingActivityIndicator.Tag = SENDING_SPINNER_TAG;
            alertMimicView.AddSubview (sendingActivityIndicator);
        }

        protected void SendButtonClicked (object sender, EventArgs e)
        {
            UITextField contactInfoTextField = (UITextField)View.ViewWithTag(CONTACT_TEXTFIELD_TAG);
            UITextView messageInfoTextView = (UITextView)View.ViewWithTag (MESSAGEBODY_VIEW_TAG);

            if (!hasNetworkConnection ()) {
                UIAlertView badNetworkConnection = new UIAlertView ("Network Error",
                    "There is an issue with the network and we cannot send this message. Please try again when you have a connection.",
                    null,
                    "Ok");
                badNetworkConnection.Show ();
            } else {
                sendMessageTimer = NSTimer.CreateScheduledTimer (WAIT_TIMER_LENGTH, delegate {
                    MessageReceived (false);
                });

                Dictionary<string,string> supportInfo = new Dictionary<string, string> ();
                supportInfo.Add ("ContactInfo", contactInfoTextField.Text);
                supportInfo.Add ("Message", messageInfoTextView.Text);

                Telemetry.RecordSupport (supportInfo, () => {
                    NcApplication.Instance.InvokeStatusIndEvent (new StatusIndEventArgs () { 
                        Status = NachoCore.Utils.NcResult.Info (NcResult.SubKindEnum.Info_TelemetrySupportMessageReceived),
                        Account = ConstMcAccount.NotAccountSpecific,
                    });
                });
                ToggleSpinnerView ();
            }
        }

        protected void ToggleSpinnerView ()
        {
            UIView grayBackgroundView = (UIView)View.ViewWithTag (GRAY_BACKGROUND_VIEW_TAG);
            UIActivityIndicatorView sendingActivityIndicator = (UIActivityIndicatorView)View.ViewWithTag (SENDING_SPINNER_TAG);

            grayBackgroundView.Hidden = !grayBackgroundView.Hidden;

            if (grayBackgroundView.Hidden) {
                sendingActivityIndicator.StopAnimating ();
                grayBackgroundView.Alpha = 0.0f;
            } else {
                UIView.Animate (.15, () => {
                    grayBackgroundView.Alpha = 1.0f;
                });
                sendingActivityIndicator.StartAnimating ();
            }
        }

        public bool hasNetworkConnection ()
        {
            if (NcCommStatus.Instance.Status != NetStatusStatusEnum.Up) {
                return false;
            } else {
                return true;
            }
        }

        protected void LayoutView ()
        {
            scrollView.Frame = new RectangleF (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            var contentFrame = new RectangleF (0, 0, View.Frame.Width, View.Frame.Height - VERTICAL_PADDING);
            contentView.Frame = contentFrame;
            scrollView.ContentSize = contentFrame.Size;
        }

        protected override void ConfigureAndLayout ()
        {
            UITextField contactText = (UITextField)View.ViewWithTag (CONTACT_TEXTFIELD_TAG);
            contactText.Text = GetEmailAddress ();

            LayoutView ();
        }

        protected string GetEmailAddress ()
        {
            if (LoginHelpers.IsCurrentAccountSet ()) {
                McAccount Account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
                return Account.EmailAddr;
            } else {
                return "";
            }
        }

        protected void MessageBodySelectionChanged (UITextView textView)
        {
            var caretRect = textView.GetCaretRectForPosition (textView.SelectedTextRange.End);
            caretRect.Size = new SizeF (caretRect.Size.Width, caretRect.Size.Height);

            var notesView = (UIView)contentView.ViewWithTag (MESSAGEBODY_VIEW_TAG);
            caretRect.Y += notesView.Frame.Y + KEYBOARD_HEIGHT;
            scrollView.ScrollRectToVisible (caretRect, true);
        }

        public void MessageReceived(bool didSend)
        {
            if (!hasDisplayedStatusMessage) {
                hasDisplayedStatusMessage = true;

                ToggleSpinnerView ();

                if (null != sendMessageTimer) {
                    sendMessageTimer.Dispose ();
                    sendMessageTimer = null;
                }

                if (didSend) {
                    UIAlertView confirmSentAlert = new UIAlertView();
                    confirmSentAlert.Title = "Message Successfully Sent";
                    confirmSentAlert.Message = "We have received your message and will respond as quickly as possible. Thank you for your feedback.";
                    confirmSentAlert.AddButton("Close");
                    confirmSentAlert.Clicked += DismissFromAlert;
                    confirmSentAlert.Show ();
                } else {
                    UIAlertView sendFailedAlert = new UIAlertView();
                    sendFailedAlert.Title = "Message Was Not Sent";
                    sendFailedAlert.Message = "There was a delay in sending the message. We will continue trying to send the message in the background.";
                    sendFailedAlert.AddButton("Close");
                    sendFailedAlert.Clicked += DismissFromAlert;
                    sendFailedAlert.Show ();
                }
            }
        }

        protected void DismissFromAlert (object sender, UIButtonEventArgs e)
        {
            this.DismissViewController (true, null);

            UIAlertView alert = (UIAlertView)sender;
            alert.Clicked -= DismissFromAlert;
            alert = null;
        }

        protected override void Cleanup ()
        {
            sendButton.Clicked -= SendButtonClicked;
            sendButton = null;
        }
    }
}
