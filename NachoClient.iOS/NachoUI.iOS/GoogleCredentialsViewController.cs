// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Net;
using Foundation;
using UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using System.Linq;
using System.Collections.Generic;
using Xamarin.Auth;

namespace NachoClient.iOS
{
    public partial class GoogleCredentialsViewController : AccountCredentialsViewController
    {

        GoogleOAuth2Authenticator Authenticator;
        UIView AuthView;

        public GoogleCredentialsViewController (IntPtr handle) : base (handle)
        {
            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            var scopes = new List<string> ();
            scopes.Add ("email");
            scopes.Add ("profile");
            scopes.Add ("https://mail.google.com");
            scopes.Add ("https://www.googleapis.com/auth/calendar");
            scopes.Add ("https://www.google.com/m8/feeds/");
            string loginHint = null;
            if (Account != null) {
                loginHint = Account.EmailAddr;
            }
            Authenticator = new GoogleOAuth2Authenticator (
                clientId: GoogleOAuthConstants.ClientId,
                clientSecret: GoogleOAuthConstants.ClientSecret,
                scope: String.Join (" ", scopes.ToArray ()),
                accessTokenUrl: new Uri ("https://accounts.google.com/o/oauth2/token"),
                authorizeUrl: new Uri ("https://accounts.google.com/o/oauth2/auth"),
                redirectUrl: new Uri ("http://www.nachocove.com/authorization_callback"),
                loginHint: loginHint);
            Authenticator.AllowCancel = true;
            Authenticator.Completed += AuthCompleted;
            Authenticator.Error += AuthError;
            var vc = Authenticator.GetUI ();
            if (vc is UINavigationController) {
                vc = ((UINavigationController)vc).TopViewController;
            }
            AuthView = vc.View;
            AuthView.Frame = View.Bounds;
            View.AddSubview (AuthView);
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            AuthView.Frame = View.Bounds;
        }

        public void AuthCompleted (object sender, AuthenticatorCompletedEventArgs e)
        {
            if (e.IsAuthenticated) {
                string access_token;
                e.Account.Properties.TryGetValue ("access_token", out access_token);

                string refresh_token;
                e.Account.Properties.TryGetValue ("refresh_token", out refresh_token);

                int expires = 0;
                string expiresString = "0";
                DateTime expirationDateTime = DateTime.UtcNow;
                if (e.Account.Properties.TryGetValue ("expires", out expiresString)) {
                    if (int.TryParse (expiresString, out expires)) {
                        expirationDateTime = expirationDateTime.AddSeconds (expires);
                    }
                }

                var url = String.Format ("https://www.googleapis.com/oauth2/v1/userinfo?access_token={0}", access_token);
                var userInfoString = new WebClient ().DownloadString (url);

                var userInfo = Newtonsoft.Json.Linq.JObject.Parse (userInfoString);

                if (LoginHelpers.ConfiguredAccountExists ((string)userInfo ["email"])) {
                    Log.Info (Log.LOG_UI, "avl: AppDelegate DidSignInForUser existing account: {0}", userInfo.Property ("email"));
                } else {
                    if (Account != null) {
                        Log.Info (Log.LOG_UI, "GoogleCredentialsViewController removing account ID{0}", Account.Id);
                        NcAccountHandler.Instance.RemoveAccount (Account.Id);
                        Account = null;
                    }
                    Account = NcAccountHandler.Instance.CreateAccount (Service,
                        (string)userInfo ["email"],
                        access_token,
                        refresh_token,
                        expirationDateTime);
                    NcAccountHandler.Instance.MaybeCreateServersForIMAP (Account, Service);
                    Log.Info (Log.LOG_UI, "GoogleCredentialsViewController created account ID{0}", Account.Id);

                    Newtonsoft.Json.Linq.JToken picture;
                    if (userInfo.TryGetValue ("picture", out picture)) {
                        var imageUrlString = ((string)picture).Replace ("/photo.jpg", "/s200-c-k/photo.jpg");
                        var imageUrl = new NSUrl (imageUrlString);
                        PopulateProfilePhotoFromURL (imageUrl);
                    }
                    AccountDelegate.AccountCredentialsViewControllerDidValidateAccount (this, Account);
                }
            } else {
                Log.Info (Log.LOG_UI, "GoogleCredentialsViewController completed unauthenticated");
                NcAlertView.ShowMessage (this, "Nacho Mail", "We could not complete your account authentication.  Please try again.");
            }
        }

        public void AuthError (object sender, AuthenticatorErrorEventArgs e)
        {
            Log.Info (Log.LOG_UI, "GoogleCredentialsViewController auth error");
            NcAlertView.ShowMessage (this, "Nacho Mail", "We could not complete your account authentication.  Please try again.");
        }
    }
}
