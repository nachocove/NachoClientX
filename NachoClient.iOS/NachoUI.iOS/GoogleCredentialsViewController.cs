// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Net;
using Foundation;
using UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using System.Linq;
using System.Collections.Generic;
using Xamarin.Auth;

namespace NachoClient.iOS
{
    public partial class GoogleCredentialsViewController : AccountCredentialsViewController
    {

        #region Properties

        GoogleOAuth2Authenticator Authenticator;
        UIView AuthView;

        #endregion

        #region Constructors

        public GoogleCredentialsViewController (IntPtr handle) : base (handle)
        {
            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";
        }

        #endregion

        #region Authenticator Setup

        void RestartAuthenticator ()
        {
            if (Authenticator != null) {
                Authenticator.Completed -= AuthCompleted;
                Authenticator.Error -= AuthError;
            }
            if (AuthView != null) {
                AuthView.RemoveFromSuperview ();
            }
            WebAuthenticator.ClearCookies ();
            string loginHint = null;
            if (Account != null) {
                loginHint = Account.EmailAddr;
            }
            Authenticator = new GoogleOAuth2Authenticator (loginHint);
            Authenticator.AllowCancel = true;
            Authenticator.Completed += AuthCompleted;
            Authenticator.Error += AuthError;
            var vc = Authenticator.GetUI ();
            if (vc is UINavigationController) {
                vc = ((UINavigationController)vc).TopViewController;
                AddChildViewController (vc);
            }
            AuthView = vc.View;
            AuthView.Frame = View.Bounds;
            View.AddSubview (AuthView);
        }

        #endregion

        #region iOS View Lifecycle

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            RestartAuthenticator ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            AuthView.Frame = View.Bounds;
        }

        #endregion

        #region OAuth Events

        public void AuthCompleted (object sender, AuthenticatorCompletedEventArgs e)
        {
            if (e.IsAuthenticated) {
                string access_token;
                e.Account.Properties.TryGetValue ("access_token", out access_token);

                string refresh_token;
                e.Account.Properties.TryGetValue ("refresh_token", out refresh_token);

                string expiresString;
                uint expireSecs = 0;
                if (e.Account.Properties.TryGetValue ("expires_in", out expiresString)) {
                    if (!uint.TryParse (expiresString, out expireSecs)) {
                        Log.Info (Log.LOG_UI, "AuthCompleted: Could not convert expires value {0} to int", expiresString);
                    } else {
                        Log.Info (Log.LOG_SYS, "OAUTH2 Token acquired. expires_in={0}", expireSecs);
                    }
                }

                var source = "https://www.googleapis.com/oauth2/v1/userinfo";
                var url = String.Format ("{0}?access_token={1}", source, access_token);
                Newtonsoft.Json.Linq.JObject userInfo;
                try {
                    var userInfoString = new WebClient ().DownloadString (url);
                    userInfo = Newtonsoft.Json.Linq.JObject.Parse (userInfoString);
                } catch (Exception ex) {
                    Log.Info (Log.LOG_HTTP, "OAUTH2: Could not download user info from {0}: {1}", source, ex);
                    NcAlertView.ShowMessage (this, "Apollo Mail", "We could not complete your account authentication.  Please try again.");
                    return;
                }

                if (LoginHelpers.ConfiguredAccountExists ((string)userInfo ["email"])) {
                    Log.Info (Log.LOG_UI, "GoogleCredentialsViewController existing account: {0}", userInfo.Property ("email"));
                    NcAlertView.ShowMessage (this, "Account Exists", "An account with that email address already exists. Duplicate accounts are not supported.");
                    RestartAuthenticator ();
                } else {
                    if (Account != null) {
                        Log.Info (Log.LOG_UI, "GoogleCredentialsViewController removing account ID{0}", Account.Id);
                        NcAccountHandler.Instance.RemoveAccount (Account.Id);
                        Account = null;
                    }
                    Account = NcAccountHandler.Instance.CreateAccount (Service,
                        (string)userInfo ["email"],
                        access_token,
                        refresh_token,
                        expireSecs);
                    NcAccountHandler.Instance.MaybeCreateServersForIMAP (Account, Service);
                    Log.Info (Log.LOG_UI, "GoogleCredentialsViewController created account ID{0}", Account.Id);

                    Newtonsoft.Json.Linq.JToken picture;
                    if (userInfo.TryGetValue ("picture", out picture)) {
                        var imageUrlString = ((string)picture).Replace ("/photo.jpg", "/s200-c-k/photo.jpg");
                        Account.PopulateProfilePhotoFromURL (new Uri (imageUrlString));
                    }
                    AccountDelegate.AccountCredentialsViewControllerDidValidateAccount (this, Account);
                }
            } else {
                Log.Info (Log.LOG_UI, "GoogleCredentialsViewController completed unauthenticated");
                NcAlertView.ShowMessage (this, "Apollo Mail", "We could not complete your account authentication.  Please try again.");
            }
        }

        public void AuthError (object sender, AuthenticatorErrorEventArgs e)
        {
            Log.Info (Log.LOG_UI, "GoogleCredentialsViewController auth error");
            NcAlertView.ShowMessage (this, "Apollo Mail", "We could not complete your account authentication.  Please try again.");
        }

        #endregion
    }
}
