// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using System.IO;
using CoreGraphics;
using System.Collections.Generic;
using MimeKit;

using NachoCore.Model;
using NachoCore.Brain;
using NachoCore.Utils;
using NachoPlatform;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

using NachoCore;
using NachoCore.ActiveSync;

using MapKit;

namespace NachoClient.iOS
{
    public partial class EventViewController : NcUIViewControllerNoLeaks, INachoNotesControllerParent, IBodyViewOwner, IEditEventViewOwner
    {
        // Model information
        protected McEvent e;
        protected NcEventDetail detail;
        //protected McCalendar root;
        //protected McAbstrCalendarRoot c;
        //protected McAccount account;

        UIView contentView;
        UIScrollView scrollView;

        // UI elements
        protected UIView eventCardView;
        protected UcLocationView locationView;
        protected BodyView descriptionView;
        protected UIView eventAttendeeView;
        protected UIView eventAlertsView;
        protected UIView eventAlertsViewArrow;
        protected UIView eventOrganizerView;
        protected AttachmentListView attachmentListView;
        protected UIView eventNotesView;
        protected UIImageView organizerIcon;
        protected UIButton acceptButton;
        protected UILabel acceptLabel;
        protected UIButton tentativeButton;
        protected UILabel tentativeLabel;
        protected UIButton declineButton;
        protected UILabel declineLabel;
        protected UILabel messageLabel;
        protected UIButton removeFromCalendarButton;
        protected UILabel removeFromCalendarLabel;
        protected UIView rsvpSeparatorLine;
        protected UIButton extraAttendeesButton;
        protected UIBarButtonItem editEventButton;
        protected UIButton cancelMeetingButton;
        protected UILabel cancelMeetingLabel;
        protected UIView cancelMeetingSeparatorLine;

        // UI colors
        protected UIColor textLabelColor = A.Color_NachoDarkText;
        protected UIColor textColor = A.Color_NachoDarkText;
        protected UIColor cellBGColor = UIColor.White;
        protected UIColor contentViewBGColor = A.Color_NachoBackgroundGray;
        protected UIColor borderColor = A.Color_NachoBorderGray;

        // UI Gesture recognizers
        protected UITapGestureRecognizer attendeeTapGestureRecognizer;
        protected UIGestureRecognizer.Token attendeeTapGestureRecognizerTapToken;
        protected UITapGestureRecognizer alertTapGestureRecognizer;
        protected UIGestureRecognizer.Token alertTapGestureRecognizerTapToken;
        protected UITapGestureRecognizer organizerTapGestureRecognizer;
        protected UIGestureRecognizer.Token organizerTapGestureRecognizerTapToken;
        protected UITapGestureRecognizer attachmentsTapGestureRecognizer;
        protected UIGestureRecognizer.Token attachmentsTapGestureRecognizerTapToken;
        protected UITapGestureRecognizer notesTapGestureRecognizer;
        protected UIGestureRecognizer.Token notesTapGestureRecognizerTapToken;

        // Helper objects
        protected bool hasLocation = false;
        protected bool hasAttachments = false;
        protected bool hasAttendees = false;
        protected bool hasNotes = false;
        protected bool attachmentsDrawerOpen = false;
        // Keep track of the user's Attend/Maybe/Decline choice, so we don't have to worry about
        // whether or not the database item is up to date.
        protected NcResponseType userResponse = NcResponseType.None;
        protected bool userResponseIsSet = false;

        // UI-related constants, or pseudo-constants
        protected static nfloat SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected const int CELL_HEIGHT = 44;
        protected const float TEXT_LINE_HEIGHT = 19.124f;
        protected static nfloat EVENT_CARD_WIDTH = SCREEN_WIDTH - 30;
        protected nfloat NOTE_OFFSET = 0f;
        protected nfloat notesInitialHeight = 0f;

        public enum TagType
        {
            EVENT_CARD_VIEW_TAG = 101,
            EVENT_TITLE_LABEL_TAG = 102,

            EVENT_WHEN_TITLE_TAG = 103,
            EVENT_WHEN_DETAIL_LABEL_TAG = 104,
            EVENT_WHEN_DURATION_TAG = 105,
            EVENT_WHEN_RECURRENCE_TAG = 106,

            EVENT_LOCATION_TITLE_TAG = 107,
            EVENT_LOCATION_DETAIL_LABEL_TAG = 108,

            EVENT_PHONE_TITLE_TAG = 109,
            EVENT_PHONE_DETAIL_BUTTON_TAG = 110,

            EVENT_DESCRIPTION_TITLE_TAG = 111,
            EVENT_DESCRIPTION_LABEL_TAG = 112,

            EVENT_ALERTS_VIEW_TAG = 113,
            EVENT_ALERT_TITLE_TAG = 114,
            EVENT_ALERT_DETAIL_TAG = 115,

            EVENT_ORGANIZER_VIEW_TAG = 116,
            EVENT_ORGANIZER_TITLE_TAG = 117,
            EVENT_ORGANIZER_NAME_LABEL = 118,
            EVENT_ORGANIZER_EMAIL_LABEL = 119,

            EVENT_ATTENDEE_VIEW_TAG = 2000,
            EVENT_ATTENDEES_TITLE_TAG = 2001,
            EVENT_ATTENDEE_DETAIL_TAG = 2002,
            EVENT_ATTENDEE_TAG = 2010,
            EVENT_ATTENDEE_LABEL_TAG = 2020,

            EVENT_NOTES_TEXT_VIEW_TAG = 120,
            EVENT_NOTE_TITLE_TAG = 121,
            EVENT_NOTES_DETAIL_TAG = 122,

            EVENT_CALENDAR_TITLE_TAG = 123,
            EVENT_CALENDAR_DETAIL_TAG = 124,
        }

        protected static TupleList<uint, string> minList = new TupleList<uint, string> {
            { 0, "None" },
            { 1, "At time of event" },
            { 5, "5 min before" },
            { 15, "15 min before" },
            { 30, "30 min before" },
            { 60, "1 hour before" },
            { 120, "2 hours before" },
            { 1440, "1 day before" },
            { 2880, "2 days before" },
            { 10080, "1 week before" },
        };

        public EventViewController () : base ()
        {
        }

        public EventViewController (IntPtr handle)
            : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            scrollView = new UIScrollView (View.Bounds);
            contentView = new UIView (scrollView.Bounds);
            scrollView.AddSubview (contentView);
            View.AddSubview (scrollView);
            base.ViewDidLoad ();
        }

        protected override void CreateViewHierarchy ()
        {
            // Navigation controls
            NavigationController.NavigationBar.Translucent = false;

            if (this.NavigationController.RespondsToSelector (new ObjCRuntime.Selector ("interactivePopGestureRecognizer"))) {
                this.NavigationController.InteractivePopGestureRecognizer.Enabled = true;
                this.NavigationController.InteractivePopGestureRecognizer.Delegate = null;
            }

            Util.SetBackButton (NavigationController, NavigationItem, A.Color_NachoBlue);

            // Main view
            scrollView.Frame = new CGRect(0, 0, View.Frame.Width, View.Frame.Height);
            scrollView.AutoresizingMask = UIViewAutoresizing.FlexibleDimensions;
            scrollView.BackgroundColor = contentViewBGColor;
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;
            scrollView.Scrolled += ScrollViewScrolled;
            scrollView.MinimumZoomScale = 0.2f;
            scrollView.MaximumZoomScale = 5.0f;
            scrollView.ZoomingEnded += ScrollViewZoomingEnded;
            scrollView.ViewForZoomingInScrollView = ViewForZooming;

            contentView.BackgroundColor = contentViewBGColor;
            contentView.AutoresizingMask = UIViewAutoresizing.None;

            nfloat yOffset = 20;

            editEventButton = new NcUIBarButtonItem ();
            editEventButton.TintColor = A.Color_NachoBlue;
            editEventButton.Image = UIImage.FromBundle ("gen-edit");
            editEventButton.AccessibilityLabel = "Edit";
            editEventButton.Clicked += EditButtonClicked;

            // Title label
            var eventTitleLabel = new UILabel (new CGRect (15 + 18, yOffset, SCREEN_WIDTH - 66, 20));
            eventTitleLabel.Font = A.Font_AvenirNextDemiBold17;
            eventTitleLabel.TextColor = A.Color_NachoBlack;
            eventTitleLabel.Tag = (int)TagType.EVENT_TITLE_LABEL_TAG;
            contentView.AddSubview (eventTitleLabel);

            yOffset += 20;

            eventCardView = new UIView (new CGRect (A.Card_Horizontal_Indent, 0, contentView.Frame.Width - 30, 0));
            eventCardView.Tag = (int)TagType.EVENT_CARD_VIEW_TAG;
            eventCardView.BackgroundColor = cellBGColor;
            eventCardView.Layer.CornerRadius = A.Card_Corner_Radius;
            eventCardView.Layer.BorderColor = A.Card_Border_Color;
            eventCardView.Layer.BorderWidth = A.Card_Border_Width;
            contentView.AddSubview (eventCardView);

            // RSVP bar 
            organizerIcon = new UIImageView (new CGRect (18, 18, 24, 24));
            organizerIcon.Image = UIImage.FromBundle ("event-organizer");
            organizerIcon.Hidden = true;
            eventCardView.AddSubview (organizerIcon);

            acceptButton = new UIButton ();
            Util.AddButtonImage (acceptButton, "event-attend", UIControlState.Normal);
            Util.AddButtonImage (acceptButton, "event-attend-active", UIControlState.Selected);
            acceptButton.Frame = new CGRect (18, 18, 24, 24);
            acceptButton.TintColor = UIColor.Clear;
            acceptButton.TouchUpInside += AcceptButtonTouchUpInside;
            acceptButton.Hidden = true;
            eventCardView.AddSubview (acceptButton);

            tentativeButton = new UIButton ();
            Util.AddButtonImage (tentativeButton, "event-maybe", UIControlState.Normal);
            Util.AddButtonImage (tentativeButton, "event-maybe-active", UIControlState.Selected);
            tentativeButton.Frame = new CGRect (eventCardView.Frame.Width / 2 - 37.5f, 18, 24, 24);
            tentativeButton.TintColor = UIColor.Clear;
            tentativeButton.TouchUpInside += TentativeButtonTouchUpInside;
            tentativeButton.Hidden = true;
            eventCardView.AddSubview (tentativeButton);

            declineButton = new UIButton ();
            Util.AddButtonImage (declineButton, "event-decline", UIControlState.Normal);
            Util.AddButtonImage (declineButton, "event-decline-active", UIControlState.Selected);
            declineButton.Frame = new CGRect (eventCardView.Frame.Width - 96.5f, 18, 24, 24);
            declineButton.TintColor = UIColor.Clear;
            declineButton.TouchUpInside += DeclineButtonTouchUpInside;
            declineButton.Hidden = true;
            eventCardView.AddSubview (declineButton);

            acceptLabel = new UILabel (new CGRect (acceptButton.Frame.X + 24 + 6, 20, 45, 20));
            acceptLabel.TextColor = textColor;
            acceptLabel.Font = A.Font_AvenirNextMedium14;
            acceptLabel.Text = "Attend";
            acceptLabel.Hidden = true;
            eventCardView.Add (acceptLabel);

            tentativeLabel = new UILabel (new CGRect (tentativeButton.Frame.X + 24 + 6, 20, 45, 20));
            tentativeLabel.TextColor = textColor;
            tentativeLabel.Font = A.Font_AvenirNextMedium14;
            tentativeLabel.Text = "Maybe";
            tentativeLabel.Hidden = true;
            eventCardView.Add (tentativeLabel);

            declineLabel = new UILabel (new CGRect (declineButton.Frame.X + 24 + 6, 20, 50, 20));
            declineLabel.TextColor = textColor;
            declineLabel.Font = A.Font_AvenirNextMedium14;
            declineLabel.Text = "Decline";
            declineLabel.Hidden = true;
            eventCardView.Add (declineLabel);

            messageLabel = new UILabel (new CGRect (18 + 24 + 6, 20, 100, 20));
            messageLabel.TextColor = textColor;
            messageLabel.TextAlignment = UITextAlignment.Left;
            messageLabel.Font = A.Font_AvenirNextMedium14;
            messageLabel.Hidden = true;
            eventCardView.Add (messageLabel);

            removeFromCalendarButton = new UIButton ();
            Util.AddButtonImage (removeFromCalendarButton, "event-decline", UIControlState.Normal);
            Util.AddButtonImage (removeFromCalendarButton, "event-decline-active", UIControlState.Selected);
            removeFromCalendarButton.Frame = new CGRect (18, 18, 24, 24);
            removeFromCalendarButton.TintColor = UIColor.Clear;
            removeFromCalendarButton.TouchUpInside += RemoveFromCalendarClicked;
            removeFromCalendarButton.Hidden = true;
            eventCardView.AddSubview (removeFromCalendarButton);

            removeFromCalendarLabel = new UILabel (new CGRect (18 + 24 + 10, 20, 100, 20));
            removeFromCalendarLabel.TextColor = textColor;
            removeFromCalendarLabel.Font = A.Font_AvenirNextMedium14;
            removeFromCalendarLabel.Text = "Remove from calendar";
            removeFromCalendarLabel.SizeToFit ();
            removeFromCalendarLabel.Hidden = true;
            eventCardView.Add (removeFromCalendarLabel);

            yOffset = 60;

            rsvpSeparatorLine = Util.AddHorizontalLine (0, yOffset, EVENT_CARD_WIDTH, A.Color_NachoBorderGray);
            eventCardView.Add (rsvpSeparatorLine);

            yOffset += 18;

            // When label, image, and detail
            Util.AddTextLabelWithImageView (yOffset, "WHEN", "event-when", TagType.EVENT_WHEN_TITLE_TAG, eventCardView);
            yOffset += 16 + 6;
            Util.AddDetailTextLabel (42, yOffset, SCREEN_WIDTH - 90, 20, TagType.EVENT_WHEN_DETAIL_LABEL_TAG, eventCardView);
            yOffset += 20;
            Util.AddDetailTextLabel (42, yOffset, SCREEN_WIDTH - 90, 20, TagType.EVENT_WHEN_DURATION_TAG, eventCardView);
            yOffset += 20;
            Util.AddDetailTextLabel (42, yOffset, SCREEN_WIDTH - 90, 20, TagType.EVENT_WHEN_RECURRENCE_TAG, eventCardView);
            yOffset += 20 + 20;

            // Location label, image, and detail
            Util.AddTextLabelWithImageView (yOffset, "LOCATION", "event-location", TagType.EVENT_LOCATION_TITLE_TAG, eventCardView);
            locationView = new UcLocationView (0, yOffset, EVENT_CARD_WIDTH - 60, LinkSelected);
            locationView.Tag = (int)TagType.EVENT_LOCATION_DETAIL_LABEL_TAG;
            locationView.Font = A.Font_AvenirNextRegular14;
            locationView.TextColor = A.Color_NachoDarkText;
            eventCardView.AddSubview (locationView);
            yOffset += 30;

            // Description, for which we use a BodyView.
            Util.AddTextLabelWithImageView (yOffset, "DESCRIPTION", "event-description", TagType.EVENT_DESCRIPTION_TITLE_TAG, eventCardView);
            yOffset += 16 + 6;
            descriptionView = BodyView.VariableHeightBodyView (new CGPoint (42, yOffset), EVENT_CARD_WIDTH - 60, scrollView.Frame.Size, this);
            descriptionView.Tag = (int)TagType.EVENT_DESCRIPTION_LABEL_TAG;
            eventCardView.AddSubview (descriptionView);

            if (20 >= descriptionView.Frame.Height) {
                yOffset += 30;
            } else {
                yOffset += descriptionView.Frame.Height + 20;
            }

            // Reminder
            eventAlertsView = new UIView (new CGRect (0, yOffset, EVENT_CARD_WIDTH, CELL_HEIGHT));
            eventAlertsView.Tag = (int)TagType.EVENT_ALERTS_VIEW_TAG;
            eventAlertsView.BackgroundColor = cellBGColor;

            Util.AddTextLabelWithImageView (0, "REMINDER", "event-reminder", TagType.EVENT_ALERT_TITLE_TAG, eventAlertsView);
            Util.AddDetailTextLabel (42, 22, EVENT_CARD_WIDTH - 84 - 18, 20, TagType.EVENT_ALERT_DETAIL_TAG, eventAlertsView);

            eventAlertsViewArrow = Util.AddArrowAccessory (eventAlertsView.Frame.Width - 18 - 12, 2, 12, eventAlertsView);

            alertTapGestureRecognizer = new UITapGestureRecognizer ();
            alertTapGestureRecognizerTapToken = alertTapGestureRecognizer.AddTarget (AlertTapGestureRecognizerTap);
            eventAlertsView.AddGestureRecognizer (alertTapGestureRecognizer);
            eventCardView.AddSubview (eventAlertsView);

            yOffset += CELL_HEIGHT + 20;

            // Attachments
            attachmentListView = new AttachmentListView (new CGRect (
                0, yOffset + 1.0f,
                EVENT_CARD_WIDTH, 50));
            var imageView = new UIImageView (new CGRect (18, 0, 16, 16));
            using (var image = UIImage.FromBundle ("email-icn-attachment")) {
                imageView.Image = image;
            }
            attachmentListView.SetHeader ("ATTACHMENTS", A.Font_AvenirNextMedium12, A.Color_NachoLightText, imageView, A.Font_AvenirNextMedium12, A.Color_NachoLightText, UIColor.White, 0f);
            attachmentListView.SetAttachmentCellIndent (42f);
            attachmentListView.OnAttachmentSelected = AttachmentsOnSelected;
            attachmentListView.OnAttachmentError = AttachmentOnError;
            attachmentListView.OnStateChanged = AttachmentsOnStateChange;
            eventCardView.AddSubview (attachmentListView);

            yOffset += CELL_HEIGHT + 20;

            // Phone label, image, and detail.  The phone field has been removed from the UI
            // until we figure out how to make it useful.
            #if PHONE_UI
            AddTextLabelWithImageView (45, yOffset, "Phone", "icn-mtng-phone", TagType.EVENT_PHONE_TITLE_TAG, contentView);
            yOffset += 20 + 5;
            UIButton phoneDetailButton = new UIButton (new RectangleF (45, yOffset, SCREEN_WIDTH - 50, 20));
            phoneDetailButton.AccessibilityLabel = "Phone";
            phoneDetailButton.Font = A.Font_AvenirNextRegular14;
            phoneDetailButton.SetTitleColor (A.Color_NachoDarkText, UIControlState.Normal);
            phoneDetailButton.Tag = (int)TagType.EVENT_PHONE_DETAIL_BUTTON_TAG;
            phoneDetailButton.HorizontalAlignment = UIControlContentHorizontalAlignment.Left;
            contentView.AddSubview (phoneDetailButton);
            yOffset += 20 + 20;
            #endif

            // Organizer
            eventOrganizerView = new UIView (new CGRect (0, yOffset, EVENT_CARD_WIDTH, CELL_HEIGHT + 16 + 16));
            eventOrganizerView.Tag = (int)TagType.EVENT_ORGANIZER_VIEW_TAG;
            eventOrganizerView.BackgroundColor = cellBGColor;
            eventOrganizerView.Hidden = true;

            Util.AddArrowAccessory (eventOrganizerView.Frame.Width - 18 - 12, 2, 12, eventOrganizerView);

            Util.AddTextLabelWithImageView (0, "ORGANIZER", "event-organizer", TagType.EVENT_ORGANIZER_TITLE_TAG, eventOrganizerView);

            //User Name
            var userNameLabel = new UILabel (new CGRect (92, 16 + 10, eventOrganizerView.Frame.Width - 92 - 18, 20));
            userNameLabel.LineBreakMode = UILineBreakMode.TailTruncation;
            userNameLabel.TextColor = UIColor.LightGray;
            userNameLabel.Font = A.Font_AvenirNextRegular14;
            userNameLabel.Tag = (int)TagType.EVENT_ORGANIZER_NAME_LABEL;
            eventOrganizerView.AddSubview (userNameLabel);

            //User Email
            var userEmailLabel = new UILabel (new CGRect (92, 26 + 20, eventOrganizerView.Frame.Width - 92 - 18, 20));
            userEmailLabel.LineBreakMode = UILineBreakMode.TailTruncation;
            userEmailLabel.TextColor = UIColor.LightGray;
            userEmailLabel.Font = A.Font_AvenirNextRegular14;
            userEmailLabel.Tag = (int)TagType.EVENT_ORGANIZER_EMAIL_LABEL;
            eventOrganizerView.AddSubview (userEmailLabel);

            organizerTapGestureRecognizer = new UITapGestureRecognizer ();
            organizerTapGestureRecognizerTapToken = organizerTapGestureRecognizer.AddTarget (OrganizerTapGestureRecognizerTap);
            eventOrganizerView.AddGestureRecognizer (organizerTapGestureRecognizer);
            eventCardView.AddSubview (eventOrganizerView);

            yOffset += CELL_HEIGHT + 20;

            // Attendees label, image, and detail
            eventAttendeeView = new UIView (new CGRect (0, yOffset, EVENT_CARD_WIDTH, 96 + 16));
            eventAttendeeView.Tag = (int)TagType.EVENT_ATTENDEE_VIEW_TAG;
            attendeeTapGestureRecognizer = new UITapGestureRecognizer ();
            attendeeTapGestureRecognizerTapToken = attendeeTapGestureRecognizer.AddTarget (AttendeeTapGestureRecognizerTap);
            eventAttendeeView.AddGestureRecognizer (attendeeTapGestureRecognizer);
            Util.AddTextLabelWithImageView (0, "ATTENDEES", "event-attendees", TagType.EVENT_ATTENDEES_TITLE_TAG, eventAttendeeView);
            eventCardView.AddSubview (eventAttendeeView);

            yOffset += 96 + 20;

            // Notes
            eventNotesView = new UIView (new CGRect (0, yOffset, EVENT_CARD_WIDTH, CELL_HEIGHT));
            eventNotesView.Tag = (int)TagType.EVENT_NOTES_TEXT_VIEW_TAG;
            eventNotesView.BackgroundColor = cellBGColor;
            Util.AddArrowAccessory (eventNotesView.Frame.Width - 18 - 12, 2, 12, eventNotesView);

            notesTapGestureRecognizer = new UITapGestureRecognizer ();
            notesTapGestureRecognizerTapToken = notesTapGestureRecognizer.AddTarget (NotesTapGestureRecognizerTap);
            eventNotesView.AddGestureRecognizer (notesTapGestureRecognizer);
            eventCardView.AddSubview (eventNotesView);

            Util.AddTextLabelWithImageView (0, "NOTES", "event-notes", TagType.EVENT_NOTE_TITLE_TAG, eventNotesView);
            Util.AddDetailTextLabel (42, 22, SCREEN_WIDTH - 90, 20, TagType.EVENT_NOTES_DETAIL_TAG, eventNotesView);

            yOffset += CELL_HEIGHT;

            Util.AddTextLabelWithImageView (yOffset, "CALENDAR", "event-when", TagType.EVENT_CALENDAR_TITLE_TAG, eventCardView);
            yOffset += 16 + 6;
            Util.AddDetailTextLabel (42, yOffset, SCREEN_WIDTH - 90, 20, TagType.EVENT_CALENDAR_DETAIL_TAG, eventCardView);
            yOffset += 20 + 20;

            cancelMeetingSeparatorLine = Util.AddHorizontalLine (0, yOffset, EVENT_CARD_WIDTH, A.Color_NachoBorderGray);
            eventCardView.AddSubview (cancelMeetingSeparatorLine);

            cancelMeetingButton = new UIButton ();
            cancelMeetingButton.Frame = new CGRect (18, yOffset, 24, 24);
            Util.AddButtonImage (cancelMeetingButton, "event-decline", UIControlState.Normal);
            Util.AddButtonImage (cancelMeetingButton, "event-decline-active", UIControlState.Selected);
            cancelMeetingButton.TintColor = UIColor.Clear;
            cancelMeetingButton.TouchUpInside += CancelMeetingButtonClicked;
            cancelMeetingButton.Hidden = true;
            eventCardView.AddSubview (cancelMeetingButton);

            cancelMeetingLabel = new UILabel ();
            nfloat xPos = cancelMeetingButton.Frame.Right + 6;
            cancelMeetingLabel.Frame = new CGRect (xPos, yOffset, EVENT_CARD_WIDTH - xPos, 24);
            cancelMeetingLabel.Text = "Cancel this meeting";
            cancelMeetingLabel.Font = A.Font_AvenirNextRegular14;
            cancelMeetingLabel.Hidden = true;
            eventCardView.AddSubview (cancelMeetingLabel);

            eventCardView.Frame = new CGRect (A.Card_Horizontal_Indent, 60, contentView.Frame.Width - 30, yOffset + A.Card_Vertical_Indent);

            yOffset += 20;

            scrollView.ContentSize = new CGSize (SCREEN_WIDTH, eventCardView.Frame.Bottom + 15);

            // This is not UI related, but this flag should be reset at the same time that the
            // view hierarchy is created.
            if (null != detail) {
                detail.HasBeenEdited = false;
            }
        }

        protected override void ConfigureAndLayout ()
        {
            NcAssert.NotNull (e);

            detail = new NcEventDetail (e);

            if (!detail.IsValid) {
                ShowNothing ();
                return;
            }

            if (detail.CanEdit) {
                NavigationItem.RightBarButtonItem = editEventButton;
            }

            if (!userResponseIsSet) {
                userResponse = detail.SpecificItem.HasResponseType () ? detail.SpecificItem.GetResponseType () : NcResponseType.None;
                userResponseIsSet = true;
            }

            ConfigureRsvpBar ();

            NavigationItem.Title = Pretty.LongMonthForceYear (detail.StartTime);

            var titleLabel = View.ViewWithTag ((int)TagType.EVENT_TITLE_LABEL_TAG) as UILabel;
            titleLabel.Text = detail.SpecificItem.GetSubject ();
            titleLabel.Lines = 0;
            titleLabel.LineBreakMode = UILineBreakMode.WordWrap;
            titleLabel.SizeToFit ();

            var whenLabel = View.ViewWithTag ((int)TagType.EVENT_WHEN_DETAIL_LABEL_TAG) as UILabel;
            whenLabel.Text = detail.DateString;

            var durationLabel = View.ViewWithTag ((int)TagType.EVENT_WHEN_DURATION_TAG) as UILabel;
            durationLabel.Text = detail.DurationString;
            durationLabel.Frame = new CGRect (durationLabel.Frame.X, durationLabel.Frame.Y, SCREEN_WIDTH - 90, 20);
            durationLabel.Lines = 0;
            durationLabel.LineBreakMode = UILineBreakMode.WordWrap;
            durationLabel.SizeToFit ();

            if (detail.IsRecurring) {
                var recurrenceLabel = View.ViewWithTag ((int)TagType.EVENT_WHEN_RECURRENCE_TAG) as UILabel;
                recurrenceLabel.Text = detail.RecurrenceString;
                recurrenceLabel.Lines = 0;
                recurrenceLabel.LineBreakMode = UILineBreakMode.WordWrap;
                recurrenceLabel.SizeToFit ();
            }

            if (string.IsNullOrEmpty (detail.SpecificItem.GetLocation ())) {
                hasLocation = false;
                View.ViewWithTag ((int)TagType.EVENT_LOCATION_TITLE_TAG).Hidden = true;
                locationView.Hidden = true;
            } else {
                hasLocation = true;
                View.ViewWithTag ((int)TagType.EVENT_LOCATION_TITLE_TAG).Hidden = false;
                locationView.Hidden = false;
                locationView.SetText (detail.SpecificItem.GetLocation ());
            }

            // Phone disabled for now.
            #if PHONE_UI
            var phoneButton = View.ViewWithTag ((int)TagType.EVENT_PHONE_DETAIL_BUTTON_TAG) as UIButton;
            phoneButton.SetTitle ("Not available", UIControlState.Normal);
            phoneButton.Enabled = false;
            #endif
            descriptionView.Configure (detail.SpecificItem, false);

            var alertDetailLabel = View.ViewWithTag ((int)TagType.EVENT_ALERT_DETAIL_TAG) as UILabel;
            alertDetailLabel.Text = detail.ReminderString;
            alertDetailLabel.SizeToFit ();
            eventAlertsViewArrow.Hidden = !detail.CanChangeReminder;
            alertTapGestureRecognizer.Enabled = detail.CanChangeReminder;

            hasAttachments = 0 != detail.SpecificItem.attachments.Count ();
            attachmentListView.Hidden = !hasAttachments;
            ConfigureAttachments ();

            // Organizer
            if (detail.HasNonSelfOrganizer) {
                var organizerEmailLabel = View.ViewWithTag ((int)TagType.EVENT_ORGANIZER_EMAIL_LABEL) as UILabel;
                if (null != detail.SeriesItem.OrganizerName) {
                    var organizerNameLabel = View.ViewWithTag ((int)TagType.EVENT_ORGANIZER_NAME_LABEL) as UILabel;
                    organizerNameLabel.Text = detail.SeriesItem.OrganizerName;
                } else {
                    organizerEmailLabel.Frame = new CGRect (92, (eventOrganizerView.Frame.Height / 2) - 2, eventOrganizerView.Frame.Width - 92 - 18, 20);
                }
                organizerEmailLabel.Text = detail.SeriesItem.OrganizerEmail;

                var userImage = Util.ImageOfSender (detail.Account.Id, detail.SeriesItem.OrganizerEmail);

                if (null != userImage) {
                    using (var rawImage = userImage) {
                        using (var originalImage = rawImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal)) {
                            // User image
                            var userImageView = new UIImageView (new CGRect (42, 10 + 16, 40, 40));
                            userImageView.Layer.CornerRadius = (40.0f / 2.0f);
                            userImageView.Layer.MasksToBounds = true;
                            userImageView.Image = originalImage;
                            userImageView.Layer.BorderWidth = 0.25f;
                            userImageView.Layer.BorderColor = A.Color_NachoBorderGray.CGColor;
                            eventOrganizerView.AddSubview (userImageView);
                        }
                    }
                } else {

                    // User userLabelView view, if no image
                    var userLabelView = new UILabel (new CGRect (42, 10 + 16, 40, 40));
                    userLabelView.Font = A.Font_AvenirNextRegular17;
                    userLabelView.BackgroundColor = Util.GetCircleColorForEmail (detail.SeriesItem.OrganizerEmail, detail.Account.Id);
                    userLabelView.TextColor = UIColor.White;
                    userLabelView.TextAlignment = UITextAlignment.Center;
                    userLabelView.LineBreakMode = UILineBreakMode.Clip;
                    userLabelView.Layer.CornerRadius = (40 / 2);
                    userLabelView.Layer.MasksToBounds = true;
                    var nameString = (null != detail.SeriesItem.OrganizerName ? detail.SeriesItem.OrganizerName : detail.SeriesItem.OrganizerEmail);
                    userLabelView.Text = ContactsHelper.NameToLetters (nameString);
                    eventOrganizerView.AddSubview (userLabelView);
                }
                eventOrganizerView.Hidden = false;
            }

            // Attendees
            if (null != extraAttendeesButton) {
                extraAttendeesButton.TouchUpInside -= ExtraAttendeesTouchUpInside;
            }
            ClearView (eventAttendeeView);
            eventAttendeeView.BackgroundColor = cellBGColor;
            Util.AddTextLabelWithImageView (0, "ATTENDEES", "event-attendees", TagType.EVENT_ATTENDEES_TITLE_TAG, eventAttendeeView);
            Util.AddArrowAccessory (eventAttendeeView.Frame.Width - 18 - 12, 2, 12, eventAttendeeView);
            extraAttendeesButton = null;
            var titleOffset = 16;
            var attendeeImageDiameter = 40;
            var iconSpace = EVENT_CARD_WIDTH - 60;
            var iconPadding = (iconSpace - (attendeeImageDiameter * 5)) / 4;
            if (0 == detail.SpecificItem.attendees.Count) {
                // Disable the attendees view.
                hasAttendees = false;
                View.ViewWithTag ((int)TagType.EVENT_ATTENDEES_TITLE_TAG).Hidden = true;
                eventAttendeeView.Hidden = true;
            } else {
                hasAttendees = true;
                View.ViewWithTag ((int)TagType.EVENT_ATTENDEES_TITLE_TAG).Hidden = false;
                eventAttendeeView.Hidden = false;
                nfloat spacing = 0;
                int attendeeNum = 0;
                foreach (var attendee in detail.SpecificItem.attendees) {

                    Util.CreateAttendeeButton (attendeeImageDiameter, spacing, titleOffset, attendee, attendeeNum, detail.IsOrganizer, eventAttendeeView);

                    spacing += (attendeeImageDiameter + iconPadding);
                    if (4 <= ++attendeeNum && 5 < detail.SpecificItem.attendees.Count) {
                        // There is room for five attendees in the view.  If the meeting
                        // has more than five attendees, only show four of them and save
                        // the last slot for showing the number of extra attendees.
                        break;
                    }
                }
                if (5 < detail.SpecificItem.attendees.Count) {
                    extraAttendeesButton = UIButton.FromType (UIButtonType.RoundedRect);
                    extraAttendeesButton.Layer.CornerRadius = attendeeImageDiameter / 2;
                    extraAttendeesButton.Layer.MasksToBounds = true;
                    extraAttendeesButton.Layer.BorderColor = A.Color_NachoGreen.CGColor;
                    extraAttendeesButton.Layer.BorderWidth = 1;
                    extraAttendeesButton.Frame = new CGRect (42 + iconSpace - 39, 10 + titleOffset, attendeeImageDiameter, attendeeImageDiameter);
                    extraAttendeesButton.Font = A.Font_AvenirNextRegular14;
                    extraAttendeesButton.SetTitleColor (A.Color_NachoGreen, UIControlState.Normal);
                    extraAttendeesButton.Tag = (int)TagType.EVENT_ATTENDEE_DETAIL_TAG;
                    extraAttendeesButton.SetTitle (string.Format ("+{0}", detail.SpecificItem.attendees.Count - 4), UIControlState.Normal);
                    extraAttendeesButton.AccessibilityLabel = "More";
                    extraAttendeesButton.TouchUpInside += ExtraAttendeesTouchUpInside;
                    eventAttendeeView.AddSubview (extraAttendeesButton);
                }
            }

            var eventNotes = View.ViewWithTag ((int)TagType.EVENT_NOTES_DETAIL_TAG) as UILabel;
            hasNotes = ("" == GetNoteText () ? false : true);
            eventNotes.Text = GetNoteText ();
            eventNotes.Lines = 0;
            eventNotes.LineBreakMode = UILineBreakMode.WordWrap;
            eventNotes.Frame = new CGRect (42, 22, EVENT_CARD_WIDTH - 60, 0);
            eventNotes.SizeToFit ();

            var calendarName = (UILabel)View.ViewWithTag ((int)TagType.EVENT_CALENDAR_DETAIL_TAG);
            calendarName.Text = detail.CalendarNameString;

            // Cancel meeting button.  Only visible for recurring meetings owned by the user in writable calendars
            if (detail.ShowCancelMeetingButton) {
                cancelMeetingSeparatorLine.Hidden = false;
                cancelMeetingButton.Hidden = false;
                cancelMeetingLabel.Hidden = false;
            } else {
                cancelMeetingSeparatorLine.Hidden = true;
                cancelMeetingButton.Hidden = true;
                cancelMeetingLabel.Hidden = true;
            }

            LayoutView ();
        }

        protected override void Cleanup ()
        {
            // Cleanup gesture recognizers

            attendeeTapGestureRecognizer.RemoveTarget (attendeeTapGestureRecognizerTapToken);
            eventAttendeeView.RemoveGestureRecognizer (attendeeTapGestureRecognizer);

            alertTapGestureRecognizer.RemoveTarget (alertTapGestureRecognizerTapToken);
            eventAlertsView.RemoveGestureRecognizer (alertTapGestureRecognizer);

            organizerTapGestureRecognizer.RemoveTarget (organizerTapGestureRecognizerTapToken);
            eventOrganizerView.RemoveGestureRecognizer (organizerTapGestureRecognizer);

            notesTapGestureRecognizer.RemoveTarget (notesTapGestureRecognizerTapToken);
            eventNotesView.RemoveGestureRecognizer (notesTapGestureRecognizer);

            // Remove event handlers
            scrollView.Scrolled -= ScrollViewScrolled;
            scrollView.ZoomingEnded -= ScrollViewZoomingEnded;
            scrollView.ViewForZoomingInScrollView = null;
            acceptButton.TouchUpInside -= AcceptButtonTouchUpInside;
            tentativeButton.TouchUpInside -= TentativeButtonTouchUpInside;
            declineButton.TouchUpInside -= DeclineButtonTouchUpInside;
            editEventButton.Clicked -= EditButtonClicked;
            removeFromCalendarButton.TouchUpInside -= RemoveFromCalendarClicked;
            cancelMeetingButton.TouchUpInside -= CancelMeetingButtonClicked;
            //eventNotesTextView.Changed -= NotesChanged;
            //eventNotesTextView.Started -= NotesEditingStarted;
            if (null != extraAttendeesButton) {
                extraAttendeesButton.TouchUpInside -= ExtraAttendeesTouchUpInside;
            }
            attachmentListView.Cleanup ();
            locationView.Cleanup ();

            acceptButton = null;
            contentView = null;
            declineButton = null;
            editEventButton = null;
            scrollView = null;
            tentativeButton = null;
            descriptionView = null;
            eventAttendeeView = null;
            eventAlertsView = null;
            eventAlertsViewArrow = null;
            eventOrganizerView = null;
            attachmentListView = null;
            eventNotesView = null;
            cancelMeetingSeparatorLine = null;
            cancelMeetingButton = null;
            cancelMeetingLabel = null;
            acceptLabel = null;
            tentativeLabel = null;
            declineLabel = null;
            messageLabel = null;
            removeFromCalendarButton = null;
            removeFromCalendarLabel = null;
            rsvpSeparatorLine = null;
            extraAttendeesButton = null;
            attendeeTapGestureRecognizer = null;
            alertTapGestureRecognizer = null;
            attachmentsTapGestureRecognizer = null;
            notesTapGestureRecognizer = null;
        }

        public void SetCalendarItem (McEvent e)
        {
            this.e = e;
            userResponseIsSet = false;
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            //SaveNote (account.Id, eventNotesTextView.Text);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            PermissionManager.DealWithCalendarPermission ();
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return true;
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_CalendarChanged == s.Status.SubKind) {
                ConfigureAndLayout ();
            }
        }

        protected string MyCalendarName (McCalendar c)
        {
            var candidates = McFolder.QueryByFolderEntryId<McCalendar> (detail.Account.Id, c.Id);
            if ((null == candidates) || (0 == candidates.Count)) {
                return "None";
            } else {
                return candidates.First ().DisplayName;
            }
        }

        void ShowContact (McContact contact)
        {
            var vc = new ContactDetailViewController ();
            vc.contact = contact;
            NavigationController.PushViewController (vc, true);
        }

        void ShowAttendees ()
        {
            var dc = new EventAttendeeViewController ();
            dc.Setup (null, detail.Account, detail.SpecificItem.attendees, detail.SpecificItem,
                false, CalendarHelper.IsOrganizer (detail.SeriesItem.OrganizerEmail, detail.Account.EmailAddr),
                detail.IsRecurring);
            NavigationController.PushViewController (dc, true);
        }

        protected void ShowNothing ()
        {
            Util.HideViewHierarchy (View);
            var titleLabelView = View.ViewWithTag ((int)TagType.EVENT_TITLE_LABEL_TAG) as UILabel;
            titleLabelView.Hidden = false;
            contentView.Hidden = false;
            scrollView.Hidden = false;
            View.Hidden = false;
            titleLabelView.Text = "Information is unavailable";
            titleLabelView.Lines = 0;
            titleLabelView.LineBreakMode = UILineBreakMode.WordWrap;
            titleLabelView.SizeToFit ();
        }

        protected void ConfigureAttachments ()
        {
            attachmentListView.Reset ();
            bool firstAttachment = true;
            foreach (var attachment in detail.SpecificItem.attachments) {
                if (!firstAttachment) {
                    attachmentListView.LastAttachmentView ().ShowSeparator ();
                }
                firstAttachment = false;
                attachmentListView.AddAttachment (attachment);
            }
        }

        public void LayoutView ()
        {
            nfloat yOffset = 0;

            AdjustViewLayout (TagType.EVENT_TITLE_LABEL_TAG, 15 + 18, ref yOffset, 20, SCREEN_WIDTH - 66);
            AdjustY (eventCardView, yOffset + 15);

            nfloat internalYOffset = detail.IsAppointment ? 0 : 60;

            AdjustViewLayout (TagType.EVENT_WHEN_TITLE_TAG, 0, ref internalYOffset, 18, EVENT_CARD_WIDTH - 100);
            AdjustViewLayout (TagType.EVENT_WHEN_DETAIL_LABEL_TAG, 42, ref internalYOffset, 5, EVENT_CARD_WIDTH - 60);
            AdjustViewLayout (TagType.EVENT_WHEN_DURATION_TAG, 42, ref internalYOffset, 0);
            if (detail.IsRecurring) {
                AdjustViewLayout (TagType.EVENT_WHEN_RECURRENCE_TAG, 42, ref internalYOffset, 0);
            }

            if (hasLocation) {
                AdjustViewLayout (TagType.EVENT_LOCATION_TITLE_TAG, 0, ref internalYOffset, 18, EVENT_CARD_WIDTH - 100);
                AdjustViewLayout (TagType.EVENT_LOCATION_DETAIL_LABEL_TAG, 37, ref internalYOffset, 5, EVENT_CARD_WIDTH - 60);
            }

            AdjustViewLayout (TagType.EVENT_DESCRIPTION_TITLE_TAG, 0, ref internalYOffset, 18, EVENT_CARD_WIDTH - 100);
            if (yOffset != descriptionView.Frame.Y) {
                ViewFramer.Create (descriptionView).Y (internalYOffset);
            }
            // descriptionView should already be layed out correctly. There is no need to call Layout() again.
            internalYOffset += NMath.Max (descriptionView.Frame.Height, 20);

            #if PHONE_UI
            AdjustViewLayout (TagType.EVENT_PHONE_TITLE_TAG, 23, ref yOffset, 20, SCREEN_WIDTH - 50);
            AdjustViewLayout (TagType.EVENT_PHONE_DETAIL_BUTTON_TAG, 45, ref yOffset, 5);
            #endif

            AdjustViewLayout (TagType.EVENT_ALERTS_VIEW_TAG, 0, ref internalYOffset, 18);

            var padding = 18;
            if (hasAttachments) {
                AdjustY (attachmentListView, internalYOffset);
                internalYOffset += attachmentListView.Frame.Height;
                if (!attachmentsDrawerOpen) {
                    padding = 5;
                }
            }

            if (detail.HasNonSelfOrganizer) {
                AdjustViewLayout (TagType.EVENT_ORGANIZER_VIEW_TAG, 0, ref internalYOffset, padding);
            }

            if (hasAttendees) {
                AdjustViewLayout (TagType.EVENT_ATTENDEE_VIEW_TAG, 0, ref internalYOffset, padding);
            }

            internalYOffset += 18;

            var eventNotesViewHeight = (nfloat)CELL_HEIGHT;
            if (hasNotes) {
                eventNotesViewHeight = (View.ViewWithTag ((int)TagType.EVENT_NOTES_DETAIL_TAG).Frame.Height + View.ViewWithTag ((int)TagType.EVENT_NOTE_TITLE_TAG).Frame.Height + 6);
            }
            View.ViewWithTag ((int)TagType.EVENT_NOTES_TEXT_VIEW_TAG).Frame = new CGRect (0, internalYOffset, EVENT_CARD_WIDTH, eventNotesViewHeight);
            internalYOffset += eventNotesViewHeight;

            AdjustViewLayout (TagType.EVENT_CALENDAR_TITLE_TAG, 0, ref internalYOffset, 18, EVENT_CARD_WIDTH - 100);
            AdjustViewLayout (TagType.EVENT_CALENDAR_DETAIL_TAG, 42, ref internalYOffset, 5, EVENT_CARD_WIDTH - 60);

            if (detail.ShowCancelMeetingButton) {
                AdjustViewLayout (cancelMeetingSeparatorLine, 0, ref internalYOffset, 0);
                AdjustViewLayout (cancelMeetingButton, 18, ref internalYOffset, 18);
                ViewFramer.Create (cancelMeetingLabel).Y (cancelMeetingButton.Frame.Y);
            }

            nfloat logicalWidth = NMath.Max (SCREEN_WIDTH, descriptionView.Frame.Right);
            scrollView.Frame = new CGRect (0, 0, SCREEN_WIDTH, View.Frame.Height - keyboardHeight);
            eventCardView.Frame = new CGRect (15, eventCardView.Frame.Y, logicalWidth - 30, internalYOffset + 20);
            contentView.Frame = new CGRect (0, 0, logicalWidth, eventCardView.Frame.Bottom + 20);
            scrollView.ContentSize = contentView.Frame.Size;
        }

        protected override void OnKeyboardChanged ()
        {
            LayoutView ();
        }

        // In case we want inline notes
        //        protected void SelectionChanged (UITextView textView)
        //        {
        //            // We want to scroll the caret rect into view
        //            var caretRect = textView.GetCaretRectForPosition (textView.SelectedTextRange.End);
        //            caretRect.Size = new SizeF (caretRect.Size.Width, caretRect.Size.Height + textView.TextContainerInset.Bottom);
        //            // Make sure our textview is big enough to hold the text
        //            var frame = textView.Frame;
        //            var frameBefore = frame;
        //            frame.Size = new SizeF (textView.ContentSize.Width, textView.ContentSize.Height);
        //            var frameAfter = frame;
        //            if (frameBefore.Height < frameAfter.Height) {
        //                NOTE_OFFSET += TEXT_LINE_HEIGHT;
        //                LayoutView ();
        //            }
        //            if (frameBefore.Height > frameAfter.Height) {
        //                NOTE_OFFSET -= TEXT_LINE_HEIGHT;
        //                LayoutView ();
        //            }
        //
        //            textView.Frame = frame;
        //            // And update our enclosing scrollview for the new content size
        //            scrollView.ContentSize = contentView.Frame.Size;
        //            // Adjust the caretRect to be in our enclosing scrollview, and then scroll it
        //            caretRect.Y += textView.Frame.Y;
        //            scrollView.ScrollRectToVisible (caretRect, true);
        //        }

        protected static void AdjustViewLayout (UIView view, nfloat X, ref nfloat Y, nfloat extraY)
        {
            AdjustViewLayout (view, X, ref Y, extraY, view.Frame.Width);
        }

        protected static void AdjustViewLayout (UIView view, nfloat X, ref nfloat Y, nfloat extraY, nfloat width)
        {
            Y += extraY;
            view.Frame = new CGRect (X, Y, width, view.Frame.Height);
            Y += view.Frame.Height;
        }

        protected void AdjustViewLayout (TagType tag, nfloat X, ref nfloat Y, nfloat extraY)
        {
            var view = View.ViewWithTag ((int)tag);
            NcAssert.NotNull (view);
            AdjustViewLayout (view, X, ref Y, extraY, view.Frame.Width);
        }

        protected void AdjustViewLayout (TagType tag, nfloat X, ref nfloat Y, nfloat extraY, nfloat width)
        {
            var view = View.ViewWithTag ((int)tag);
            NcAssert.NotNull (view);
            AdjustViewLayout (view, X, ref Y, extraY, width);
        }

        protected void AdjustY (UIView view, nfloat yOffset)
        {
            var frame = view.Frame;
            frame.Y = yOffset;
            view.Frame = frame;
        }

        /// <summary>
        /// Return the appropriate icon for the given response type.
        /// </summary>
        public UIImage GetImageForAttendeeResponse (NcResponseType status)
        {
            switch (status) {
            case NcResponseType.Accepted:
                return Util.GetImageForAttendeeResponse (NcAttendeeStatus.Accept);
            case NcResponseType.Tentative:
                return Util.GetImageForAttendeeResponse (NcAttendeeStatus.Tentative);
            case NcResponseType.Declined:
                return Util.GetImageForAttendeeResponse (NcAttendeeStatus.Decline);
            default:
                return null;
            }
        }

        public void ConfigureRsvpBar ()
        {
            if (detail.SpecificItem.MeetingStatus == NcMeetingStatus.MeetingAttendeeCancelled) {

                if (detail.Account.HasCapability (McAccount.AccountCapabilityEnum.CalWriter)) {
                    // Show "Remove from calendar"
                    messageLabel.Hidden = true;
                    acceptButton.Hidden = true;
                    organizerIcon.Hidden = true;
                    acceptButton.Selected = true;
                    acceptLabel.Hidden = true;
                    tentativeButton.Hidden = true;
                    tentativeLabel.Hidden = true;
                    declineButton.Hidden = true;
                    declineLabel.Hidden = true;
                    removeFromCalendarButton.Hidden = false;
                    removeFromCalendarLabel.Hidden = false;
                    rsvpSeparatorLine.Hidden = false;
                } else {
                    // The calendar is not writable, so the "Remove from calendar" button doesn't make sense.
                    // Instead, just show a message about the meeting being cancelled.
                    messageLabel.Text = "The meeting has been canceled.";
                    messageLabel.Hidden = false;
                    messageLabel.Frame = new CGRect (18, 18, 150, 24);
                    organizerIcon.Hidden = true;
                    acceptButton.Hidden = true;
                    acceptLabel.Hidden = true;
                    tentativeButton.Hidden = true;
                    tentativeLabel.Hidden = true;
                    declineButton.Hidden = true;
                    declineLabel.Hidden = true;
                    removeFromCalendarButton.Hidden = true;
                    removeFromCalendarLabel.Hidden = true;
                    rsvpSeparatorLine.Hidden = false;
                }

            } else if (detail.IsAppointment) {

                // It's an appointment.  Leave out the header section entirely.
                messageLabel.Hidden = true;
                acceptButton.Hidden = true;
                organizerIcon.Hidden = true;
                acceptButton.Selected = true;
                acceptLabel.Hidden = true;
                tentativeButton.Hidden = true;
                tentativeLabel.Hidden = true;
                declineButton.Hidden = true;
                declineLabel.Hidden = true;
                removeFromCalendarButton.Hidden = true;
                removeFromCalendarLabel.Hidden = true;
                rsvpSeparatorLine.Hidden = true;

            } else if (detail.IsOrganizer) {

                // Show "You are the organizer"
                messageLabel.Hidden = false;
                messageLabel.Text = "You are the organizer";
                messageLabel.Frame = new CGRect (18 + 24 + 12, 18, 150, 24);
                organizerIcon.Hidden = false;
                acceptButton.Hidden = true;
                acceptLabel.Hidden = true;
                tentativeButton.Hidden = true;
                tentativeLabel.Hidden = true;
                declineButton.Hidden = true;
                declineLabel.Hidden = true;
                removeFromCalendarButton.Hidden = true;
                removeFromCalendarLabel.Hidden = true;
                rsvpSeparatorLine.Hidden = false;

            } else {

                // Show the Attend, Maybe, and Decline buttons.
                SelectButtonForResponse (userResponse);
                rsvpSeparatorLine.Hidden = false;
            }
        }

        public void ClearView (UIView parentView)
        {
            foreach (var s in parentView.Subviews) {
                s.RemoveFromSuperview ();
            }
        }

        /// <summary>
        /// Select the appropriate Attend, Maybe, or Decline button for the given meeting response.
        /// </summary>
        protected void SelectButtonForResponse (NcResponseType response)
        {
            ClearResponseButtons ();
            switch (response) {
            case NcResponseType.Accepted:
                acceptButton.Selected = true;
                acceptButton.UserInteractionEnabled = false;
                break;
            case NcResponseType.Tentative:
                tentativeButton.Selected = true;
                tentativeButton.UserInteractionEnabled = false;
                break;
            case NcResponseType.Declined:
                declineButton.Selected = true;
                declineButton.UserInteractionEnabled = false;
                break;
            default:
                // For any other response, leave all of the buttons unset.
                break;
            }
        }

        /// <summary>
        /// Clear the Attend, Maybe, and Decline buttons so that none of them are selected.
        /// </summary>
        protected void ClearResponseButtons ()
        {
            acceptButton.Selected = false;
            tentativeButton.Selected = false;
            declineButton.Selected = false;
            acceptButton.Hidden = false;
            acceptLabel.Hidden = false;
            tentativeButton.Hidden = false;
            declineButton.Hidden = false;
            tentativeLabel.Hidden = false;
            declineLabel.Hidden = false;
            acceptButton.UserInteractionEnabled = true;
            tentativeButton.UserInteractionEnabled = true;
            declineButton.UserInteractionEnabled = true;
        }

        public class TupleList<T1, T2> : List<Tuple<T1, T2>>
        {
            public void Add (T1 item, T2 item2)
            {
                Add (new Tuple<T1, T2> (item, item2));
            }
        }

        protected void SyncMeetingRequest ()
        {
            NcAssert.True (0 != detail.SpecificItem.Id);
            detail.SpecificItem.Update ();
            BackEnd.Instance.UpdateCalCmd (detail.Account.Id, detail.SpecificItem.Id, false);
            detail.Refresh ();
        }

        protected void UpdateStatus (NcResponseType response)
        {
            if (detail.IsRecurring) {
                if (NcResponseType.Declined == response) {
                    NcActionSheet.Show (declineButton, this, null,
                        "Declining the meeting will also delete the meeting from your calendar.",
                        new NcAlertAction ("Decline the entire series", NcAlertActionStyle.Destructive, () => {
                            MakeStatusUpdates (response, false);
                        }),
                        new NcAlertAction ("Decline just this occurrence", NcAlertActionStyle.Destructive, () => {
                            MakeStatusUpdates (response, true);
                        }),
                        new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, () => {
                            SelectButtonForResponse (userResponse);
                        }));
                } else {
                    NcActionSheet.Show (acceptButton, this,
                        new NcAlertAction ("Respond for the entire series", () => {
                            MakeStatusUpdates (response, false);
                        }),
                        new NcAlertAction ("Respond to just this occurrence", () => {
                            MakeStatusUpdates (response, true);
                        }),
                        new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, () => {
                            SelectButtonForResponse (userResponse);
                        }));
                }
            } else if (NcResponseType.Declined == response) {
                NcActionSheet.Show (declineButton, this, null,
                    "Declining the meeting will also delete the meeting from your calendar.",
                    new NcAlertAction ("Decline the meeting", NcAlertActionStyle.Destructive, () => {
                        MakeStatusUpdates (response, false);
                    }),
                    new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, () => {
                        SelectButtonForResponse (userResponse);
                    }));
            } else {
                // No prompting necessary.  Just go ahead with the update.
                MakeStatusUpdates (response, false);
            }
        }

        protected void MakeStatusUpdates (NcResponseType response, bool occurrenceOnly)
        {
            userResponse = response;
            userResponseIsSet = true;
            if (occurrenceOnly) {
                DateTime occurrenceStartTime;
                if (detail.SpecificItem is McException) {
                    occurrenceStartTime = ((McException)detail.SpecificItem).ExceptionStartTime;
                } else {
                    occurrenceStartTime = e.StartTime;
                }
                BackEnd.Instance.RespondCalCmd (detail.Account.Id, detail.SeriesItem.Id, response, occurrenceStartTime);
                if (detail.SeriesItem.ResponseRequestedIsSet && detail.SeriesItem.ResponseRequested) {
                    var icalpart = CalendarHelper.MimeResponseFromCalendar (detail.SeriesItem, response, occurrenceStartTime);
                    var mimeBody = CalendarHelper.CreateMime ("", icalpart, new List<McAttachment> ());
                    CalendarHelper.SendMeetingResponse (detail.Account, detail.SeriesItem, mimeBody, response);
                }
            } else {
                BackEnd.Instance.RespondCalCmd (detail.Account.Id, detail.SeriesItem.Id, response);
                if (detail.SeriesItem.ResponseRequestedIsSet && detail.SeriesItem.ResponseRequested) {
                    var iCalPart = CalendarHelper.MimeResponseFromCalendar (detail.SeriesItem, response);
                    var mimeBody = CalendarHelper.CreateMime ("", iCalPart, new List<McAttachment> ());
                    CalendarHelper.SendMeetingResponse (detail.Account, detail.SeriesItem, mimeBody, response);
                }
            }
        }

        public string GetNoteText ()
        {
            McNote Note = McNote.QueryByTypeId (detail.SeriesItem.Id, McNote.NoteType.Event).FirstOrDefault ();
            if (null == Note) {
                return "";
            }
            return Note.noteContent;
        }

        public void SaveNote (string noteText)
        {
            McNote Note = McNote.QueryByTypeId (detail.SeriesItem.Id, McNote.NoteType.Event).FirstOrDefault ();
            if (null == Note) {
                Note = new McNote ();
                Note.AccountId = detail.Account.Id;
                Note.DisplayName = (detail.SpecificItem.GetSubject () + " - " + Pretty.ShortDate (DateTime.UtcNow));
                Note.TypeId = detail.SeriesItem.Id;
                Note.noteType = McNote.NoteType.Event;
                Note.noteContent = noteText;
                Note.Insert ();
            } else {
                Note.noteContent = noteText;
                Note.Update ();
            }
        }

        // Event handlers

        private void ScrollViewScrolled (object sender, EventArgs e)
        {
            // BodyView needs to know when scrolling happens, so it can do its magic and make sure
            // the correct stuff is visible.
            descriptionView.ScrollingAdjustment (new CGPoint (
                scrollView.ContentOffset.X - (eventCardView.Frame.X + descriptionView.Frame.X),
                scrollView.ContentOffset.Y - (eventCardView.Frame.Y + descriptionView.Frame.Y)));
        }

        private void AttendeeTapGestureRecognizerTap ()
        {
            ShowAttendees ();
        }

        private void AlertTapGestureRecognizerTap ()
        {
            if (detail.Account.HasCapability (McAccount.AccountCapabilityEnum.CalWriter)) {
                ShowAlert ();
            }
        }

        void ShowAlert ()
        {
            var dc = new AlertChooserViewController ();
            dc.SetReminder (detail.SpecificItem.HasReminder (), detail.SpecificItem.GetReminder ());
            dc.ViewDisappearing += (object s, EventArgs e) => {
                uint reminder;
                detail.SpecificItem.ReminderIsSet = dc.GetReminder (out reminder);
                if (detail.SpecificItem.ReminderIsSet) {
                    detail.SpecificItem.Reminder = reminder;
                }
                SyncMeetingRequest ();
            };
            NavigationController.PushViewController (dc, true);
        }

        private void OrganizerTapGestureRecognizerTap ()
        {
            McContact contact = McContact.QueryByEmailAddress (detail.Account.Id, detail.SeriesItem.OrganizerEmail).FirstOrDefault ();
            if (null == contact) {
                NcContactGleaner.GleanContacts (detail.SeriesItem.OrganizerEmail, detail.Account.Id, false);
                contact = McContact.QueryByEmailAddress (detail.Account.Id, detail.SeriesItem.OrganizerEmail).FirstOrDefault ();
            }
            ShowContact (contact);
        }

        private void NotesTapGestureRecognizerTap ()
        {
            ShowNotes ();
        }

        void ShowNotes ()
        {
            var dc = new NotesViewController();
            dc.SetOwner (this, detail.SpecificItem.GetSubject (), insertDate: false);
            NavigationController.PushViewController (dc, true);
        }

        /// <summary>
        /// The "Remove from calendar" button has been touched. Adjust the UI, and remove
        /// the calendar entry.
        /// </summary>
        private void RemoveFromCalendarClicked (object sender, EventArgs args)
        {
            NavigationController.PopViewController (true);

            // Remove the item from the calendar.
            if (detail.SpecificItem is McException && NcMeetingStatus.MeetingAttendeeCancelled != detail.SeriesItem.MeetingStatus) {
                // The user is viewing an occurrence of a recurring meeting, and it appears that the
                // entire series has not been canceled.  So delete just this one occurrence.
                CalendarHelper.CancelOccurrence (detail.SeriesItem, ((McException)detail.SpecificItem).ExceptionStartTime);
                BackEnd.Instance.UpdateCalCmd (detail.Account.Id, detail.SeriesItem.Id, sendBody: false);
            } else {
                BackEnd.Instance.DeleteCalCmd (detail.Account.Id, detail.SeriesItem.Id);
            }
        }

        private void UserResponseChanged (NcResponseType response)
        {
            if (McAccount.AccountTypeEnum.Device == detail.Account.AccountType) {
                NcAlertView.ShowMessage (this, "Can't Change Response",
                    "Your response to the meeting can't be changed because the meeting is managed by the Calendar app, not by Nacho Mail. " +
                    "Use the Calendar app or some other client to change your response.");
            } else if (!detail.Account.HasCapability (McAccount.AccountCapabilityEnum.CalWriter)) {
                NcAlertView.ShowMessage (this, "Can't Change Response",
                    "Your response to the meeting can't be changed because the meeting is stored in a calendar that is not writable by this app. " +
                    "Use a different client to change your response.");
            } else {
                SelectButtonForResponse (response);
                UpdateStatus (response);
            }
        }

        private void AcceptButtonTouchUpInside (object sender, EventArgs e)
        {
            UserResponseChanged (NcResponseType.Accepted);
        }

        private void TentativeButtonTouchUpInside (object sender, EventArgs e)
        {
            UserResponseChanged (NcResponseType.Tentative);
        }

        private void DeclineButtonTouchUpInside (object sender, EventArgs e)
        {
            UserResponseChanged (NcResponseType.Declined);
        }

        private void EditButtonClicked (object sender, EventArgs e)
        {
            detail.HasBeenEdited = true;
            EditEvent ();
        }

        void EditEvent ()
        {
            var dc = new EditEventViewController ();
            dc.SetOwner (this);
            dc.SetCalendarEvent (e, CalendarItemEditorAction.edit);
            var navigationController = new UINavigationController (dc);
            Util.ConfigureNavBar (false, navigationController);
            PresentViewController (navigationController, true, null);
        }

        private void CancelMeetingButtonClicked (object sender, EventArgs args)
        {
            NcActionSheet.Show (cancelMeetingButton, this, null,
                "Cancel this occurrence of the meeting and send a cancellation notice to all of the attendees.",
                new NcAlertAction ("Cancel this occurrence", NcAlertActionStyle.Destructive, () => {
                    DateTime occurrenceStartTime;
                    if (detail.SpecificItem is McException) {
                        occurrenceStartTime = ((McException)detail.SpecificItem).ExceptionStartTime;
                    } else {
                        occurrenceStartTime = e.StartTime;
                    }

                    CalendarHelper.CancelOccurrence (detail.SeriesItem, occurrenceStartTime);
                    BackEnd.Instance.UpdateCalCmd (detail.Account.Id, detail.SeriesItem.Id, false);

                    var iCalCancelPart = CalendarHelper.MimeCancelFromOccurrence (detail.SeriesItem, detail.SpecificItem, detail.Occurrence, occurrenceStartTime);
                    var mimeBody = CalendarHelper.CreateMime ("", iCalCancelPart, new List<McAttachment> ());

                    CalendarHelper.SendMeetingCancelations (detail.Account, detail.SeriesItem, "Canceled: " + detail.SpecificItem.GetSubject (), mimeBody);

                    NavigationController.PopViewController (true);
                }),
                new NcAlertAction ("Don't cancel the meeting", NcAlertActionStyle.Cancel, null));
        }

        private void ExtraAttendeesTouchUpInside (object sender, EventArgs e)
        {
            ShowAttendees ();
        }

        private void AttachmentsOnSelected (McAttachment attachment)
        {
            if (McAbstrFileDesc.FilePresenceEnum.Complete == attachment.FilePresence) {
                PlatformHelpers.DisplayAttachment (this, attachment);
            }
        }

        private void AttachmentOnError (McAttachment attachment, NcResult result)
        {
            string message;
            if (!ErrorHelper.ExtractErrorString (result, out message)) {
                message = "Download failed.";
            }
            NcAlertView.ShowMessage (this, "Attachment error", message);
        }

        private void AttachmentsOnStateChange (bool isExpanded)
        {
            attachmentsDrawerOpen = !attachmentsDrawerOpen;
            UIView.Animate (0.2, 0, UIViewAnimationOptions.CurveLinear,
                () => {
                    LayoutView ();
                },
                () => {
                }
            );
        }

        private void ScrollViewZoomingEnded (object sender, EventArgs e)
        {
            // The body view needs to redo its layout to account for the new
            // apparent screen size.
            ScrollViewScrolled (null, null);
            // iOS messes up the scroll view's ContentSize when zooming.
            // Unfortunately, we have to re-layout the entire view to fix it.
            LayoutView ();
        }

        private UIView ViewForZooming (UIScrollView sv)
        {
            // The description is the only thing that zooms.
            return descriptionView;
        }

        private void NotesEditingStarted (object sender, EventArgs e)
        {
            scrollView.SetContentOffset (new CGPoint (0, contentView.Frame.Height - scrollView.Frame.Height), true);
        }

        private void NotesChanged (object sender, EventArgs e)
        {
            scrollView.SetContentOffset (new CGPoint (0, contentView.Frame.Height - scrollView.Frame.Height), true);
        }

        #region IBodyViewOwner implementation

        void IBodyViewOwner.SizeChanged ()
        {
            LayoutView ();
        }

        public void LinkSelected (NSUrl url)
        {
            if (EmailHelper.IsMailToURL (url.AbsoluteString)) {
                ComposeMessage (url);
            } else {
                UIApplication.SharedApplication.OpenUrl (url);
            }
        }

        void IBodyViewOwner.DismissView ()
        {
            NavigationController.PopViewController (true);
        }

        private void ComposeMessage (NSUrl url)
        {
            string body;
            var account = McAccount.EmailAccountForEvent (e);
            var composeViewController = new MessageComposeViewController (account);
            composeViewController.Composer.Message = EmailHelper.MessageFromMailTo (account, url.AbsoluteString, out body);
            composeViewController.Composer.InitialText = body;
            composeViewController.Present ();
        }

        #endregion

        #region IEditEventViewOwner implementation

        void IEditEventViewOwner.EventWasDeleted (EditEventViewController vc)
        {
            // At first glance, it looks like the views are dismissed in the wrong order.
            // But by closing the event detail view first with no animation, the event
            // editor view will transition directly to the calendar list view (or whatever
            // the parent view is) without the user seeing the event detail view in between.
            NavigationController.PopViewController (false);
            vc.DismissViewController (true, null);
        }

        #endregion
    }
}
