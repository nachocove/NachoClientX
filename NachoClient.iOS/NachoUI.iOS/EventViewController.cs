// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using System.IO;
using System.Drawing;
using System.Collections.Generic;
using MimeKit;

using NachoCore.Model;
using NachoCore.Utils;
using NachoPlatform;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

using NachoCore;
using NachoCore.ActiveSync;

using MonoTouch.MapKit;

namespace NachoClient.iOS
{
    public partial class EventViewController : NcUIViewControllerNoLeaks, INachoNotesControllerParent
    {
        // Model information
        protected McEvent e;
        protected McCalendar root;
        protected McAbstrCalendarRoot c;
        protected McAccount account;

        // UI elements
        protected BodyView descriptionView;
        protected UIView eventAttendeeView;
        protected UIView eventAlertsView;
        protected UIView eventAttachmentsView;
        protected UIView eventNotesView;
        protected UILabel acceptLabel;
        protected UILabel tentativeLabel;
        protected UILabel declineLabel;
        protected UILabel messageLabel;
        protected UIButton changeResponseButton;
        protected UIButton extraAttendeesButton;
        protected UIView line1;
        protected UIView line2;
        protected UIView line3;
        protected UIView line4;

        // UI Gesture recognizers
        protected UITapGestureRecognizer attendeeTapGestureRecognizer;
        protected UIGestureRecognizer.Token attendeeTapGestureRecognizerTapToken;
        protected UITapGestureRecognizer alertTapGestureRecognizer;
        protected UIGestureRecognizer.Token alertTapGestureRecognizerTapToken;
        protected UITapGestureRecognizer attachmentsTapGestureRecognizer;
        protected UIGestureRecognizer.Token attachmentsTapGestureRecognizerTapToken;
        protected UITapGestureRecognizer notesTapGestureRecognizer;
        protected UIGestureRecognizer.Token notesTapGestureRecognizerTapToken;

        // Helper objects
        protected bool isRecurring = false;
        protected RecursionCounter deferLayout;

        // UI-related constants, or pseudo-constants
        protected static float SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected const int CELL_HEIGHT = 44;
        protected const float TEXT_LINE_HEIGHT = 19.124f;

        public enum TagType {
            ALERT_DETAIL_TAG = 207,

            EVENT_TITLE_LABEL_TAG = 101,
            EVENT_DESCRIPTION_LABEL_TAG = 102,
            EVENT_LOCATION_DETAIL_LABEL_TAG = 103,
            EVENT_WHEN_DETAIL_LABEL_TAG = 104,
            EVENT_WHEN_DURATION_TAG = 500,
            EVENT_WHEN_RECURRENCE_TAG = 601,
            EVENT_PHONE_DETAIL_BUTTON_TAG = 105,
            EVENT_ATTENDEE_TAG = 106,
            EVENT_ATTENDEE_DETAIL_TAG = 110,
            EVENT_ATTENDEE_LABEL_TAG = 120,
            EVENT_ATTENDEE_VIEW_TAG = 1000,
            EVENT_ATTACHMENT_DETAIL_TAG = 121,

            EVENT_LOCATION_TITLE_TAG = 301,
            EVENT_WHEN_TITLE_TAG = 302,
            EVENT_PHONE_TITLE_TAG = 303,
            EVENT_ATTENDEE_TITLE_TAG = 308,
            EVENT_ALERT_TITLE_TAG = 305,
            EVENT_ATTACHMENT_TITLE_TAG = 306,
            EVENT_NOTE_TITLE_TAG = 307,

            EVENT_ALERTS_VIEW_TAG = 700,
            EVENT_ATTACHMENTS_VIEW_TAG = 800,
            EVENT_NOTES_VIEW_TAG = 900,
        }

        protected static TupleList<uint, string> minList = new TupleList<uint, string> {
            { 0, "None" },
            { 1, "At time of event" },
            { 5, "5 min before" },
            { 15, "15 min before" },
            { 30, "30 min before" },
            { 60, "1 hour before" },
            { 120, "2 hours before" },
            { 1440, "1 day before" },
            { 2880, "2 days before" },
            { 10080, "1 week before" },
        };

        public EventViewController (IntPtr handle)
            : base (handle)
        {
        }

        protected override void CreateViewHierarchy ()
        {
            // Navigation controls

            NavigationItem.Title = "Event Details";
            NavigationController.NavigationBar.Translucent = false;

            Util.SetBackButton (NavigationController, NavigationItem, A.Color_NachoBlue);

            // Main view

            scrollView.Frame = new RectangleF (0, 0, SCREEN_WIDTH, View.Frame.Height - 54);
            scrollView.BackgroundColor = UIColor.White;
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;

            contentView.BackgroundColor = UIColor.White;

            float yOffset = 20;

            editButton.Clicked += EditButtonClicked;

            // Title label
            var eventTitleLabel = new UILabel (new RectangleF (25, yOffset, SCREEN_WIDTH - 50, 20));
            eventTitleLabel.Font = A.Font_AvenirNextDemiBold17;
            eventTitleLabel.TextColor = A.Color_NachoBlack;
            eventTitleLabel.Tag = (int)TagType.EVENT_TITLE_LABEL_TAG;
            contentView.AddSubview (eventTitleLabel);

            yOffset += 30;

            // Description, for which we use a BodyView.
            descriptionView = new BodyView (
                new RectangleF (0, yOffset, SCREEN_WIDTH - 2 * BodyView.BODYVIEW_INSET, 10),
                contentView, 20, 20);
            descriptionView.Tag = (int)TagType.EVENT_DESCRIPTION_LABEL_TAG;
            descriptionView.HorizontalScrollingEnabled = true;
            descriptionView.VerticalScrollingEnabled = false;
            descriptionView.OnRenderStart = () => {
                deferLayout.Increment ();
            };
            descriptionView.OnRenderComplete = () => {
                deferLayout.Decrement ();
            };
            contentView.AddSubview (descriptionView);

            yOffset += 10 + 20;

            // Location label, image, and detail
            AddTextLabelWithImageView (45, yOffset, "Location", "icn-mtng-location", TagType.EVENT_LOCATION_TITLE_TAG, contentView);
            yOffset += 20 + 5;
            AddDetailTextLabel (45, yOffset, SCREEN_WIDTH - 90, 20, TagType.EVENT_LOCATION_DETAIL_LABEL_TAG, contentView);
            yOffset += 20 + 20;

            // When label, image, and detail
            AddTextLabelWithImageView (45, yOffset, "When", "icn-mtng-time", TagType.EVENT_WHEN_TITLE_TAG, contentView);
            yOffset += 20 + 5;
            AddDetailTextLabel (45, yOffset, SCREEN_WIDTH - 50, 20, TagType.EVENT_WHEN_DETAIL_LABEL_TAG, contentView);
            yOffset += 20;
            AddDetailTextLabel (45, yOffset, SCREEN_WIDTH - 50, 20, TagType.EVENT_WHEN_DURATION_TAG, contentView);
            yOffset += 20;
            AddDetailTextLabel (45, yOffset, SCREEN_WIDTH - 90, 20, TagType.EVENT_WHEN_RECURRENCE_TAG, contentView);
            yOffset += 20 + 20;

            // Phone label, image, and detail.  The phone field has been removed from the UI
            // until we figure out how to make it useful.
            #if PHONE_UI
            AddTextLabelWithImageView (45, yOffset, "Phone", "icn-mtng-phone", TagType.EVENT_PHONE_TITLE_TAG, contentView);
            yOffset += 20 + 5;
            UIButton phoneDetailButton = new UIButton (new RectangleF (45, yOffset, SCREEN_WIDTH - 50, 20));
            phoneDetailButton.Font = A.Font_AvenirNextRegular14;
            phoneDetailButton.SetTitleColor (A.Color_NachoDarkText, UIControlState.Normal);
            phoneDetailButton.Tag = (int)TagType.EVENT_PHONE_DETAIL_BUTTON_TAG;
            phoneDetailButton.HorizontalAlignment = UIControlContentHorizontalAlignment.Left;
            contentView.AddSubview (phoneDetailButton);
            yOffset += 20 + 20;
            #endif

            // Attendees label, image, and detail
            AddTextLabelWithImageView (45, yOffset, "Attendees", "icn-mtng-people", TagType.EVENT_ATTENDEE_TITLE_TAG, contentView);
            yOffset += 20;
            eventAttendeeView = new UIView (new RectangleF (8, yOffset, SCREEN_WIDTH, 96));
            eventAttendeeView.Tag = (int)TagType.EVENT_ATTENDEE_VIEW_TAG;
            attendeeTapGestureRecognizer = new UITapGestureRecognizer ();
            attendeeTapGestureRecognizerTapToken = attendeeTapGestureRecognizer.AddTarget (AttendeeTapGestureRecognizerTap);
            eventAttendeeView.AddGestureRecognizer (attendeeTapGestureRecognizer);
            contentView.AddSubview (eventAttendeeView);

            yOffset += 96 + 20;

            float bottomCellsYOffset = yOffset;

            // Alerts
            eventAlertsView = new UIView (new RectangleF (0, yOffset, SCREEN_WIDTH, CELL_HEIGHT));
            eventAlertsView.Tag = (int)TagType.EVENT_ALERTS_VIEW_TAG;
            eventAlertsView.BackgroundColor = UIColor.White;

            Util.AddArrowAccessory (SCREEN_WIDTH - 23, CELL_HEIGHT / 2 - 6, 12, eventAlertsView);

            AddTextLabelWithImageView (45, 12.438f, "Alerts", "icn-defer", TagType.EVENT_ALERT_TITLE_TAG, eventAlertsView);

            var alertsDetail = new UILabel ();
            alertsDetail.Text = "None";
            alertsDetail.Tag = (int)TagType.ALERT_DETAIL_TAG;
            alertsDetail.SizeToFit ();
            alertsDetail.TextAlignment = UITextAlignment.Right;
            alertsDetail.Frame = new RectangleF (
                SCREEN_WIDTH - alertsDetail.Frame.Width - 34, 12.438f,
                alertsDetail.Frame.Width, TEXT_LINE_HEIGHT);
            alertsDetail.Font = A.Font_AvenirNextRegular14;
            alertsDetail.TextColor = A.Color_808080;
            eventAlertsView.AddSubview (alertsDetail);

            alertTapGestureRecognizer = new UITapGestureRecognizer ();
            alertTapGestureRecognizerTapToken = alertTapGestureRecognizer.AddTarget (AlertTapGestureRecognizerTap);
            eventAlertsView.AddGestureRecognizer (alertTapGestureRecognizer);

            contentView.AddSubview (eventAlertsView);

            yOffset += CELL_HEIGHT;

            // Attachments
            eventAttachmentsView = new UIView (new RectangleF (0, yOffset, SCREEN_WIDTH, CELL_HEIGHT));
            eventAttachmentsView.Tag = (int)TagType.EVENT_ATTACHMENTS_VIEW_TAG;
            eventAttachmentsView.BackgroundColor = UIColor.White;

            Util.AddArrowAccessory (SCREEN_WIDTH - 23, CELL_HEIGHT / 2 - 6, 12, eventAttachmentsView);

            AddTextLabelWithImageView (45, 12.438f, "Attachments", "icn-attachedfile", TagType.EVENT_ATTACHMENT_TITLE_TAG, eventAttachmentsView);

            var attachmentDetail = new UILabel ();
            attachmentDetail.Text = "(0)";
            attachmentDetail.Tag = (int)TagType.EVENT_ATTACHMENT_DETAIL_TAG;
            attachmentDetail.SizeToFit ();
            attachmentDetail.TextAlignment = UITextAlignment.Right;
            attachmentDetail.Frame = new RectangleF (
                SCREEN_WIDTH - attachmentDetail.Frame.Width - 34, 12.438f,
                attachmentDetail.Frame.Width, TEXT_LINE_HEIGHT);
            attachmentDetail.Font = A.Font_AvenirNextRegular14;
            attachmentDetail.TextColor = A.Color_808080;
            eventAttachmentsView.AddSubview (attachmentDetail);

            attachmentsTapGestureRecognizer = new UITapGestureRecognizer ();
            attachmentsTapGestureRecognizerTapToken = attachmentsTapGestureRecognizer.AddTarget (AttachmentsTapGestureRecognizerTap);
            eventAttachmentsView.AddGestureRecognizer (attachmentsTapGestureRecognizer);

            contentView.AddSubview (eventAttachmentsView);

            yOffset += CELL_HEIGHT;

            // Notes
            eventNotesView = new UIView (new RectangleF (0, yOffset, SCREEN_WIDTH, CELL_HEIGHT));
            eventNotesView.Tag = (int)TagType.EVENT_NOTES_VIEW_TAG;
            eventNotesView.BackgroundColor = UIColor.White;

            Util.AddArrowAccessory (SCREEN_WIDTH - 23, CELL_HEIGHT / 2 - 6, 12, eventNotesView);

            AddTextLabelWithImageView (45, 12.438f, "Notes", "icn-notes", TagType.EVENT_NOTE_TITLE_TAG, eventNotesView);

            var notesDetail = new UILabel ();
            notesDetail.SizeToFit ();
            notesDetail.TextAlignment = UITextAlignment.Right;
            notesDetail.Frame = new RectangleF (SCREEN_WIDTH - notesDetail.Frame.Width - 34, 12.438f, notesDetail.Frame.Width, TEXT_LINE_HEIGHT);
            notesDetail.Font = A.Font_AvenirNextRegular14;
            notesDetail.TextColor = A.Color_808080;
            eventNotesView.AddSubview (notesDetail);

            notesTapGestureRecognizer = new UITapGestureRecognizer ();
            notesTapGestureRecognizerTapToken = notesTapGestureRecognizer.AddTarget (NotesTapGestureRecognizerTap);
            eventNotesView.AddGestureRecognizer (notesTapGestureRecognizer);

            contentView.AddSubview (eventNotesView);

            yOffset += CELL_HEIGHT;

            line1 = Util.AddHorizontalLineView (23, bottomCellsYOffset, SCREEN_WIDTH - 23, A.Color_NachoBorderGray);
            line2 = Util.AddHorizontalLineView (23, bottomCellsYOffset + CELL_HEIGHT, SCREEN_WIDTH - 23, A.Color_NachoBorderGray);
            line3 = Util.AddHorizontalLineView (23, bottomCellsYOffset + CELL_HEIGHT * 2, SCREEN_WIDTH - 23, A.Color_NachoBorderGray);
            line4 = Util.AddHorizontalLineView (23, bottomCellsYOffset + CELL_HEIGHT * 3, SCREEN_WIDTH - 23, A.Color_NachoBorderGray);
            contentView.AddSubviews (new UIView[] {
                line1, line2, line3, line4
            });

            scrollView.ContentSize = new SizeF (SCREEN_WIDTH, yOffset + 20);

            // RSVP bar at the bottom of the screen

            var rsvpBar = new UIView (new RectangleF (0, View.Frame.Height - 118, SCREEN_WIDTH, 54));
            rsvpBar.BackgroundColor = A.Color_NachoBlack;

            AddButtonImage (acceptButton, "btn-mtng-accept", UIControlState.Normal);
            AddButtonImage (acceptButton, "btn-mtng-accept-pressed", UIControlState.Selected);
            acceptButton.Frame = new RectangleF (25, 10, 24, 24);
            acceptButton.TintColor = UIColor.Clear;
            acceptButton.TouchUpInside += AcceptButtonTouchUpInside;
            rsvpBar.AddSubview (acceptButton);

            AddButtonImage (tentativeButton, "btn-mtng-tenative", UIControlState.Normal);
            AddButtonImage (tentativeButton, "btn-mtng-tenative-pressed", UIControlState.Selected);
            tentativeButton.Frame = new RectangleF (SCREEN_WIDTH / 2 - 12, 10, 24, 24);
            tentativeButton.TintColor = UIColor.Clear;
            tentativeButton.TouchUpInside += TentativeButtonTouchUpInside;
            rsvpBar.AddSubview (tentativeButton);

            AddButtonImage (declineButton, "btn-mtng-decline", UIControlState.Normal);
            AddButtonImage (declineButton, "btn-mtng-decline-pressed", UIControlState.Selected);
            declineButton.Frame = new RectangleF (SCREEN_WIDTH - 24 - 25, 10, 24, 24);
            declineButton.TintColor = UIColor.Clear;
            declineButton.TouchUpInside += DeclineButtonTouchUpInside;
            rsvpBar.AddSubview (declineButton);

            acceptLabel = new UILabel (new RectangleF (15, 36, 44, 10));
            acceptLabel.TextColor = UIColor.White;
            acceptLabel.TextAlignment = UITextAlignment.Center;
            acceptLabel.Font = A.Font_AvenirNextRegular10;
            acceptLabel.Text = "Accept";
            rsvpBar.Add (acceptLabel);

            tentativeLabel = new UILabel (new RectangleF ((SCREEN_WIDTH / 2) - 22, 36, 44, 10));
            tentativeLabel.TextColor = UIColor.White;
            tentativeLabel.TextAlignment = UITextAlignment.Center;
            tentativeLabel.Font = A.Font_AvenirNextRegular10;
            tentativeLabel.Text = "Tentative";
            rsvpBar.Add (tentativeLabel);

            declineLabel = new UILabel (new RectangleF (SCREEN_WIDTH - 24 - 35, 36, 44, 10));
            declineLabel.TextColor = UIColor.White;
            declineLabel.TextAlignment = UITextAlignment.Center;
            declineLabel.Font = A.Font_AvenirNextRegular10;
            declineLabel.Text = "Decline";
            rsvpBar.Add (declineLabel);

            messageLabel = new UILabel (new RectangleF (25 + 24 + 10, 15, 100, 24));
            messageLabel.TextColor = UIColor.White;
            messageLabel.TextAlignment = UITextAlignment.Left;
            messageLabel.Font = A.Font_AvenirNextRegular12;
            messageLabel.Hidden = true;
            rsvpBar.Add (messageLabel);

            changeResponseButton = new UIButton (UIButtonType.RoundedRect);
            changeResponseButton.SetTitle ("Change response", UIControlState.Normal);
            changeResponseButton.Font = A.Font_AvenirNextRegular12;
            changeResponseButton.SizeToFit ();
            changeResponseButton.Frame = new RectangleF (SCREEN_WIDTH - changeResponseButton.Frame.Width - 25, 16, changeResponseButton.Frame.Width, 24);
            changeResponseButton.SetTitleColor (A.Color_NachoBlue, UIControlState.Normal);
            changeResponseButton.Hidden = true;
            changeResponseButton.TouchUpInside += ChangeResponseTouchUpInside;
            rsvpBar.Add (changeResponseButton);

            // The RSVP bar doesn't scroll with the rest of the view, so it gets added to the main View element, not the contentView.
            View.AddSubview (rsvpBar);
        }

        protected override void ConfigureAndLayout ()
        {
            NcAssert.NotNull (e);

            account = McAccount.QueryById<McAccount> (e.AccountId);
            root = McCalendar.QueryById<McCalendar> (e.CalendarId);
            if (0 == e.ExceptionId) {
                c = root;
            } else {
                c = McException.QueryById<McException> (e.ExceptionId);
            }
            if (null == account || null == root || null == c) {
                ShowNothing ();
                return;
            }

            if (0 != root.recurrences.Count) {
                isRecurring = true;
            }

            bool isOrganizer = account.EmailAddr == root.OrganizerEmail && account.Id == c.AccountId;
            if (isOrganizer) {
                NavigationItem.RightBarButtonItem = editButton;
            }

            var titleLabel = View.ViewWithTag ((int)TagType.EVENT_TITLE_LABEL_TAG) as UILabel;
            titleLabel.Text = c.Subject;
            titleLabel.Lines = 0;
            titleLabel.LineBreakMode = UILineBreakMode.WordWrap;
            titleLabel.SizeToFit ();

            var locationLabel = View.ViewWithTag ((int)TagType.EVENT_LOCATION_DETAIL_LABEL_TAG) as UILabel;
            if (string.IsNullOrEmpty (c.Location)) {
                locationLabel.Text = "Not specified";
            } else {
                locationLabel.Text = c.Location;
            }
            locationLabel.Lines = 0;
            locationLabel.LineBreakMode = UILineBreakMode.WordWrap;
            locationLabel.SizeToFit ();

            var whenLabel = View.ViewWithTag ((int)TagType.EVENT_WHEN_DETAIL_LABEL_TAG) as UILabel;
            whenLabel.Text = Pretty.ExtendedDateString (e.StartTime);

            var durationLabel = View.ViewWithTag ((int)TagType.EVENT_WHEN_DURATION_TAG) as UILabel;
            if (c.AllDayEvent) {
                // TODO Does this handle time zones correctly?
                if (e.StartTime.DayOfYear == e.EndTime.DayOfYear) {
                    durationLabel.Text = "all day event";
                } else {
                    durationLabel.Text = string.Format ("from {0} until {1}",
                        Pretty.FullDateString (e.StartTime), Pretty.FullDateString (e.EndTime));
                }
            } else {
                if (e.StartTime.LocalT ().DayOfYear == e.EndTime.LocalT ().DayOfYear) {
                    durationLabel.Text = string.Format ("from {0} until {1}",
                        Pretty.FullTimeString (e.StartTime), Pretty.FullTimeString (e.EndTime));
                } else {
                    durationLabel.Text = string.Format ("from {0} until {1}",
                        Pretty.FullTimeString (e.StartTime), Pretty.FullDateTimeString (e.EndTime));
                }
            }

            if (isRecurring) {
                var recurrenceLabel = View.ViewWithTag ((int)TagType.EVENT_WHEN_RECURRENCE_TAG) as UILabel;
                recurrenceLabel.Text = MakeRecurrenceString (root.recurrences);
                recurrenceLabel.Lines = 0;
                recurrenceLabel.LineBreakMode = UILineBreakMode.WordWrap;
                recurrenceLabel.SizeToFit ();
            }

            // Phone disabled for now.
            #if PHONE_UI
            var phoneButton = View.ViewWithTag ((int)TagType.EVENT_PHONE_DETAIL_BUTTON_TAG) as UIButton;
            phoneButton.SetTitle ("Not available", UIControlState.Normal);
            phoneButton.Enabled = false;
            #endif

            var alertDetailLabel = View.ViewWithTag ((int)TagType.ALERT_DETAIL_TAG) as UILabel;
            alertDetailLabel.Text = UIntToString (c.Reminder);
            alertDetailLabel.SizeToFit ();
            alertDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - alertDetailLabel.Frame.Width - 34, 12.438f, alertDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);

            // Attendees

            if (null != extraAttendeesButton) {
                extraAttendeesButton.TouchUpInside -= ExtraAttendeesTouchUpInside;
            }
            ClearView (eventAttendeeView);
            extraAttendeesButton = null;
            if (0 == c.attendees.Count) {
                // Disable the attendees view.
                View.ViewWithTag ((int)TagType.EVENT_ATTENDEE_TITLE_TAG).Hidden = true;
                eventAttendeeView.Hidden = true;
            } else {
                View.ViewWithTag ((int)TagType.EVENT_ATTENDEE_TITLE_TAG).Hidden = false;
                eventAttendeeView.Hidden = false;
                float spacing = 0;
                int attendeeNum = 0;
                foreach (var attendee in c.attendees) {

                    var attendeeButton = UIButton.FromType (UIButtonType.RoundedRect);
                    attendeeButton.Layer.CornerRadius = 45 / 2;
                    attendeeButton.Layer.MasksToBounds = true;
                    attendeeButton.Frame = new RectangleF (23 + spacing, 10, 45, 45);
                    attendeeButton.Font = A.Font_AvenirNextRegular24;
                    attendeeButton.ShowsTouchWhenHighlighted = true;
                    attendeeButton.SetTitleColor (UIColor.White, UIControlState.Normal);
                    attendeeButton.SetTitleColor (UIColor.LightGray, UIControlState.Selected);
                    attendeeButton.Tag = (int)TagType.EVENT_ATTENDEE_TAG + attendeeNum;
                    attendeeButton.SetTitle (Util.NameToLetters (attendee.DisplayName), UIControlState.Normal);
                    attendeeButton.Layer.BackgroundColor = GetCircleColorForEmail (attendee.Email).CGColor;
                    // There are future plans to do something with these buttons, but right now
                    // they don't have any behavior.  So pass their events to the parent view.
                    attendeeButton.UserInteractionEnabled = false;
                    eventAttendeeView.AddSubview (attendeeButton);

                    var attendeeName = new UILabel (new RectangleF (23 + spacing, 65, 45, 15));
                    attendeeName.Font = A.Font_AvenirNextRegular14;
                    attendeeName.TextColor = UIColor.LightGray;
                    attendeeName.Tag = (int)TagType.EVENT_ATTENDEE_LABEL_TAG + attendeeNum;
                    attendeeName.TextAlignment = UITextAlignment.Center;
                    attendeeName.Text = Util.GetFirstName (attendee.DisplayName);
                    eventAttendeeView.AddSubview (attendeeName);

                    // If the current user is the organizer, then construct a little circle in the
                    // lower right corner of the main attendee circle, where the attendee's status
                    // can be displayed.  If the user is not the organizer, then the attendees'
                    // status is not known, so we don't want to display a blank circle.
                    if (isOrganizer) {
                        var responseView = new UIView (new RectangleF (23 + spacing + 27, 37, 20, 20));
                        responseView.Tag = (int)TagType.EVENT_ATTENDEE_LABEL_TAG + attendeeNum + 200;
                        responseView.BackgroundColor = UIColor.White;
                        responseView.Layer.CornerRadius = 10;
                        eventAttendeeView.AddSubview (responseView);
                        var circleView = new UIView (new RectangleF (2.5f, 2.5f, 15, 15));
                        circleView.BackgroundColor = UIColor.White;
                        circleView.Layer.CornerRadius = 15 / 2;
                        circleView.Layer.BorderColor = A.Color_NachoLightGrayBackground.CGColor;
                        circleView.Layer.BorderWidth = 1;
                        responseView.AddSubview (circleView);
                        var responseImageView = new UIImageView (new RectangleF (2.5f, 2.5f, 15, 15));
                        responseImageView.Tag = (int)TagType.EVENT_ATTENDEE_LABEL_TAG + attendeeNum + 100;
                        using (var image = GetImageForAttendeeResponse (attendee.AttendeeStatus)) {
                            if (null != image) {
                                responseImageView.Image = image;
                            }
                        }
                        responseView.AddSubview (responseImageView);
                    }

                    spacing += 55;
                    if (4 <= ++attendeeNum && 5 < c.attendees.Count) {
                        // There is room for five attendees in the view.  If the meeting
                        // has more than five attendees, only show four of them and save
                        // the last slot for showing the number of extra attendees.
                        break;
                    }
                }
                if (4 < c.attendees.Count) {
                    extraAttendeesButton = UIButton.FromType (UIButtonType.RoundedRect);
                    extraAttendeesButton.Layer.CornerRadius = 45 / 2;
                    extraAttendeesButton.Layer.MasksToBounds = true;
                    extraAttendeesButton.Layer.BorderColor = A.Color_NachoBlack.CGColor;
                    extraAttendeesButton.Layer.BorderWidth = 1;
                    extraAttendeesButton.Frame = new RectangleF (243, 10, 45, 45);
                    extraAttendeesButton.Font = A.Font_AvenirNextRegular14;
                    extraAttendeesButton.SetTitleColor (A.Color_NachoBlack, UIControlState.Normal);
                    extraAttendeesButton.SetTitleColor (UIColor.LightGray, UIControlState.Selected);
                    extraAttendeesButton.Tag = (int)TagType.EVENT_ATTENDEE_DETAIL_TAG;
                    extraAttendeesButton.SetTitle (string.Format ("+{0}", c.attendees.Count - 4), UIControlState.Normal);
                    extraAttendeesButton.TouchUpInside += ExtraAttendeesTouchUpInside;
                    eventAttendeeView.AddSubview (extraAttendeesButton);
                }
                Util.AddArrowAccessory (SCREEN_WIDTH - 23, 24.5f, 12, eventAttendeeView);
            }

            var attachmentView = View.ViewWithTag ((int)TagType.EVENT_ATTACHMENTS_VIEW_TAG) as UIView;
            if (0 == c.attachments.Count) {
                attachmentView.Hidden = true;
                line2.Hidden = true;
            } else {
                attachmentView.Hidden = false;
                line2.Hidden = false;
                var attachmentDetail = View.ViewWithTag ((int)TagType.EVENT_ATTACHMENT_DETAIL_TAG) as UILabel;
                attachmentDetail.Text = string.Format ("({0})", c.attachments.Count);
                attachmentDetail.SizeToFit ();
                attachmentDetail.Frame = new RectangleF (SCREEN_WIDTH - attachmentDetail.Frame.Width - 34, 12.438f, attachmentDetail.Frame.Width, TEXT_LINE_HEIGHT);
            }

            deferLayout = new RecursionCounter (() => {
                LayoutView ();
            });
            deferLayout.Increment ();

            descriptionView.Configure (c);

            ConfigureRsvpBar ();

            deferLayout.Decrement ();
        }

        protected override void Cleanup ()
        {
            // Cleanup gesture recognizers

            attendeeTapGestureRecognizer.RemoveTarget (attendeeTapGestureRecognizerTapToken);
            eventAttendeeView.RemoveGestureRecognizer (attendeeTapGestureRecognizer);

            alertTapGestureRecognizer.RemoveTarget (alertTapGestureRecognizerTapToken);
            eventAlertsView.RemoveGestureRecognizer (alertTapGestureRecognizer);

            attachmentsTapGestureRecognizer.RemoveTarget (attachmentsTapGestureRecognizerTapToken);
            eventAttachmentsView.RemoveGestureRecognizer (attachmentsTapGestureRecognizer);

            notesTapGestureRecognizer.RemoveTarget (notesTapGestureRecognizerTapToken);
            eventNotesView.RemoveGestureRecognizer (notesTapGestureRecognizer);

            // Remove event handlers
            acceptButton.TouchUpInside -= AcceptButtonTouchUpInside;
            tentativeButton.TouchUpInside -= TentativeButtonTouchUpInside;
            declineButton.TouchUpInside -= DeclineButtonTouchUpInside;
            changeResponseButton.TouchUpInside -= ChangeResponseTouchUpInside;
            editButton.Clicked -= EditButtonClicked;
            if (null != extraAttendeesButton) {
                extraAttendeesButton.TouchUpInside -= ExtraAttendeesTouchUpInside;
            }

            acceptButton = null;
            contentView = null;
            declineButton = null;
            editButton = null;
            scrollView = null;
            tentativeButton = null;
            descriptionView = null;
            eventAttendeeView = null;
            eventAlertsView = null;
            eventAttachmentsView = null;
            eventNotesView = null;
            acceptLabel = null;
            tentativeLabel = null;
            declineLabel = null;
            messageLabel = null;
            changeResponseButton = null;
            extraAttendeesButton = null;
            line1 = null;
            line2 = null;
            line3 = null;
            line4 = null;
            attendeeTapGestureRecognizer = null;
            alertTapGestureRecognizer = null;
            attachmentsTapGestureRecognizer = null;
            notesTapGestureRecognizer = null;
        }

        protected static void AddButtonImage (UIButton button, string imageName, UIControlState buttonState)
        {
            using (var buttonImage = UIImage.FromBundle(imageName)) {
                button.SetImage (buttonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), buttonState);
            }
        }

        public void SetCalendarItem (McEvent e)
        {
            this.e = e;
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_CalendarChanged == s.Status.SubKind) {
                ConfigureAndLayout ();
            }
        }

        protected string MyCalendarName (McCalendar c)
        {
            var candidates = McFolder.QueryByFolderEntryId<McCalendar> (account.Id, c.Id);
            if ((null == candidates) || (0 == candidates.Count)) {
                return "None";
            } else {
                return candidates.First ().DisplayName;
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("EventToEventAttendees")) {
                var dc = (EventAttendeeViewController)segue.DestinationViewController;
                dc.SetOwner (null, c.attendees, c, false);
                return;
            }

            if (segue.Identifier.Equals ("EventToAlert")) {
                var dc = (AlertChooserViewController)segue.DestinationViewController;
                dc.SetReminder (c.Reminder);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    c.Reminder = dc.GetReminder ();
                    SyncMeetingRequest ();
                };
                return;
            }

            if (segue.Identifier.Equals ("EventToPhone")) {
                // TODO I don't this this seque is possible.
                var dc = (PhoneViewController)segue.DestinationViewController;
                dc.SetPhone ("");
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    // TODO Do something with the phone number that is returned.
                    // dc.GetPhone ();
                };
                return;
            }

            if (segue.Identifier.Equals ("EventToCal")) {
                // TODO I don't this this segue is possible.
                var dc = (ChooseCalendarViewController)segue.DestinationViewController;
                dc.SetCalendars (new NachoFolders (NachoFolders.FilterForCalendars));
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    // TODO Do something with the calendar index that is returned.
                    // dc.GetCalIndex ();
                };
                return;
            }

            if (segue.Identifier.Equals ("EventToAttachment")) {
                var dc = (EventAttachmentViewController)segue.DestinationViewController;
                dc.SetOwner (null, c.attachments, c, false);
                return;
            }

            if (segue.Identifier.Equals ("EventToNotes")) {
                var dc = (NotesViewController)segue.DestinationViewController;
                dc.SetOwner (this);
                return;
            }

            if (segue.Identifier.Equals ("EventToEditEvent")) {
                var dc = (EditEventViewController)segue.DestinationViewController;
                dc.SetCalendarItem (e, CalendarItemEditorAction.edit);
                return;
            }

            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        protected void ShowNothing()
        {
            Util.HideViewHierarchy (View);
            var titleLabelView = View.ViewWithTag ((int)TagType.EVENT_TITLE_LABEL_TAG) as UILabel;
            titleLabelView.Hidden = false;
            contentView.Hidden = false;
            scrollView.Hidden = false;
            View.Hidden = false;
            titleLabelView.Text = "Information is unavailable";
            titleLabelView.Lines = 0;
            titleLabelView.LineBreakMode = UILineBreakMode.WordWrap;
            titleLabelView.SizeToFit ();
        }

        public void LayoutView ()
        {
            float yOffset = 0;

            AdjustViewLayout (TagType.EVENT_TITLE_LABEL_TAG, 25, ref yOffset, 20, SCREEN_WIDTH - 50);

            yOffset += 5;
            descriptionView.Layout (0, yOffset, SCREEN_WIDTH - 2 * BodyView.BODYVIEW_INSET, 10, true);
            yOffset += descriptionView.Frame.Height;

            AdjustViewLayout (TagType.EVENT_LOCATION_TITLE_TAG, 23, ref yOffset, 10, SCREEN_WIDTH - 50);
            AdjustViewLayout (TagType.EVENT_LOCATION_DETAIL_LABEL_TAG, 45, ref yOffset, 5, SCREEN_WIDTH - 90);

            AdjustViewLayout (TagType.EVENT_WHEN_TITLE_TAG, 23, ref yOffset, 20, SCREEN_WIDTH - 50);
            AdjustViewLayout (TagType.EVENT_WHEN_DETAIL_LABEL_TAG, 45, ref yOffset, 5, SCREEN_WIDTH - 50);
            AdjustViewLayout (TagType.EVENT_WHEN_DURATION_TAG, 45, ref yOffset, 0);
            if (isRecurring) {
                AdjustViewLayout (TagType.EVENT_WHEN_RECURRENCE_TAG, 45, ref yOffset, 0);
            }

            #if PHONE_UI
            AdjustViewLayout (TagType.EVENT_PHONE_TITLE_TAG, 23, ref yOffset, 20, SCREEN_WIDTH - 50);
            AdjustViewLayout (TagType.EVENT_PHONE_DETAIL_BUTTON_TAG, 45, ref yOffset, 5);
            #endif

            if (0 != c.attendees.Count) {
                AdjustViewLayout (TagType.EVENT_ATTENDEE_TITLE_TAG, 23, ref yOffset, 20, SCREEN_WIDTH - 50);
                AdjustViewLayout (TagType.EVENT_ATTENDEE_VIEW_TAG, 0, ref yOffset, 5);
            }

            AdjustViewLayout (line1, 23, ref yOffset, 20, line1.Frame.Width);
            AdjustViewLayout (TagType.EVENT_ALERTS_VIEW_TAG, 0, ref yOffset, 0);

            if (0 != c.attachments.Count) {
                AdjustViewLayout (line2, 23, ref yOffset, 0, line2.Frame.Width);
                AdjustViewLayout (TagType.EVENT_ATTACHMENTS_VIEW_TAG, 0, ref yOffset, 0);
            }

            AdjustViewLayout (line3, 23, ref yOffset, 0, line3.Frame.Width);
            AdjustViewLayout (TagType.EVENT_NOTES_VIEW_TAG, 0, ref yOffset, 0);

            AdjustViewLayout (line4, 23, ref yOffset, 0, line4.Frame.Width);

            float bottom = yOffset + 20;
            contentView.Frame = new RectangleF (0, 0, SCREEN_WIDTH, bottom);
            scrollView.ContentSize = new SizeF (SCREEN_WIDTH, bottom);
        }

        protected static void AdjustViewLayout (UIView view, float X, ref float Y, float extraY)
        {
            AdjustViewLayout (view, X, ref Y, extraY, view.Frame.Width);
        }

        protected static void AdjustViewLayout (UIView view, float X, ref float Y, float extraY, float width)
        {
            Y += extraY;
            view.Frame = new RectangleF (X, Y, width, view.Frame.Height);
            Y += view.Frame.Height;
        }

        protected void AdjustViewLayout (TagType tag, float X, ref float Y, float extraY)
        {
            var view = View.ViewWithTag ((int)tag);
            NcAssert.NotNull (view);
            AdjustViewLayout (view, X, ref Y, extraY, view.Frame.Width);
        }

        protected void AdjustViewLayout (TagType tag, float X, ref float Y, float extraY, float width)
        {
            var view = View.ViewWithTag ((int)tag);
            NcAssert.NotNull (view);
            AdjustViewLayout (view, X, ref Y, extraY, width);
        }

        protected static void AddTextLabel (float xOffset, float yOffset, float width, float height, string text, UIView parentView)
        {
            var textLabel = new UILabel (new RectangleF (xOffset, yOffset, width, height));
            textLabel.Text = text;
            textLabel.Font = A.Font_AvenirNextRegular14;
            textLabel.TextColor = A.Color_NachoLightText;
            parentView.AddSubview (textLabel);
        }

        protected static void AddTextLabelWithImageView (float xOffset, float yOffset, string text, string imageName, TagType tag, UIView parentView)
        {
            var view = new UIView (new RectangleF (xOffset - 22, yOffset, SCREEN_WIDTH, 20));
            view.Tag = (int)tag;

            var textLabel = new UILabel (new RectangleF (22, 0, 100, 20));
            textLabel.Text = text;
            textLabel.Font = A.Font_AvenirNextRegular14;
            textLabel.TextColor = A.Color_NachoLightText;
            view.AddSubview (textLabel);

            var imageView = new UIImageView (new RectangleF (0, 0, 15, 15));
            using (var image = UIImage.FromBundle (imageName)) {
                imageView.Image = image;
            }
            view.AddSubview (imageView);

            parentView.AddSubview (view);
        }

        protected static void AddDetailTextLabel (float xOffset, float yOffset, float width, float height, TagType tag, UIView parentView)
        {
            var textLabel = new UILabel (new RectangleF (xOffset, yOffset, width, height));
            textLabel.Font = A.Font_AvenirNextRegular14;
            textLabel.TextColor = A.Color_NachoDarkText;
            textLabel.Tag = (int)tag;
            parentView.AddSubview (textLabel);
        }

        public UIColor GetCircleColorForEmail (string displayEmailAddress)
        {
            int colorIndex = 1;

            if (!String.IsNullOrEmpty (displayEmailAddress)) {
                McEmailAddress emailAddress;
                if (McEmailAddress.Get (account.Id, displayEmailAddress, out emailAddress)) {
                    displayEmailAddress = emailAddress.CanonicalEmailAddress;
                    colorIndex = emailAddress.ColorIndex;
                }
            }

            return Util.ColorForUser (colorIndex);
        }

        /// <summary>
        /// Return the appropriate icon for the given attendee status.
        /// </summary>
        public UIImage GetImageForAttendeeResponse (NcAttendeeStatus status)
        {
            switch (status) {
            case NcAttendeeStatus.Accept:
                return UIImage.FromBundle ("btn-mtng-accept-pressed");
            case NcAttendeeStatus.Tentative:
                return UIImage.FromBundle ("btn-mtng-tenative-pressed");
            case NcAttendeeStatus.Decline:
                return UIImage.FromBundle ("btn-mtng-decline-pressed");
            default:
                return null;
            }
        }

        /// <summary>
        /// Return the appropriate icon for the given response type.
        /// </summary>
        public UIImage GetImageForAttendeeResponse (NcResponseType status)
        {
            switch (status) {
            case NcResponseType.Accepted:
                return GetImageForAttendeeResponse (NcAttendeeStatus.Accept);
            case NcResponseType.Tentative:
                return GetImageForAttendeeResponse (NcAttendeeStatus.Tentative);
            case NcResponseType.Declined:
                return GetImageForAttendeeResponse (NcAttendeeStatus.Decline);
            default:
                return null;
            }
        }

        public void ConfigureRsvpBar ()
        {
            if (account.EmailAddr == root.OrganizerEmail || (c.ResponseTypeIsSet && NcResponseType.Organizer == c.ResponseType)) {
                messageLabel.Hidden = false;
                messageLabel.Text = "You are the organizer";
                messageLabel.Frame = new RectangleF (25 + 24 + 10, 15, 150, 24);
                acceptButton.Hidden = false;
                acceptButton.UserInteractionEnabled = false;
                acceptButton.Selected = true;
                acceptButton.Frame = new RectangleF (25, 15, 24, 24);
                acceptLabel.Hidden = true;
                tentativeButton.Hidden = true;
                tentativeLabel.Hidden = true;
                declineButton.Hidden = true;
                declineLabel.Hidden = true;

            } else if (c.ResponseTypeIsSet) {

                switch (c.ResponseType) {

                case NcResponseType.Accepted:
                    acceptButton.Selected = true;
                    messageLabel.Text = "You are going";
                    messageLabel.Hidden = false;
                    changeResponseButton.Hidden = false;
                    acceptButton.Frame = new RectangleF (25, 15, 24, 24);
                    acceptLabel.Hidden = true;
                    tentativeButton.Hidden = true;
                    declineButton.Hidden = true;
                    tentativeLabel.Hidden = true;
                    declineLabel.Hidden = true;
                    acceptButton.UserInteractionEnabled = false;
                    break;

                case NcResponseType.Tentative:
                    tentativeButton.Selected = true;
                    messageLabel.Text = "Tentative";
                    messageLabel.Hidden = false;
                    changeResponseButton.Hidden = false;
                    tentativeButton.Frame = new RectangleF (25, 15, 24, 24);
                    acceptButton.Hidden = true;
                    acceptLabel.Hidden = true;
                    tentativeLabel.Hidden = true;
                    declineButton.Hidden = true;
                    declineLabel.Hidden = true;
                    tentativeButton.UserInteractionEnabled = false;
                    break;

                case NcResponseType.Declined:
                    declineButton.Selected = true;
                    messageLabel.Text = "You are not going to this meeting";
                    messageLabel.Hidden = false;
                    changeResponseButton.Hidden = false;
                    declineButton.Frame = new RectangleF (25, 15, 24, 24);
                    acceptButton.Hidden = true;
                    acceptLabel.Hidden = true;
                    tentativeButton.Hidden = true;
                    tentativeLabel.Hidden = true;
                    declineLabel.Hidden = true;
                    declineButton.UserInteractionEnabled = false;
                    break;
                }
            }
        }

        public void ClearView (UIView parentView)
        {
            foreach (var s in parentView.Subviews) {
                s.RemoveFromSuperview ();
            }
        }

        protected void ToggleButtons (NcResponseType r)
        {
            if (NcResponseType.Accepted == r) {
                acceptButton.Selected = true;
                tentativeButton.Selected = false;
                declineButton.Selected = false;
                messageLabel.Text = "You are going";
                messageLabel.Hidden = false;
                messageLabel.Alpha = 0;
                changeResponseButton.Hidden = false;
                changeResponseButton.Alpha = 0;

                UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        acceptLabel.Alpha = 0;
                        tentativeButton.Alpha = 0;
                        declineButton.Alpha = 0;
                        tentativeLabel.Alpha = 0;
                        declineLabel.Alpha = 0;
                        messageLabel.Alpha = 1;
                        changeResponseButton.Alpha = 1;

                        acceptButton.Frame = new RectangleF (25, 15, 24, 24);
                    },
                    () => {
                        acceptLabel.Hidden = true;
                        tentativeButton.Hidden = true;
                        declineButton.Hidden = true;
                        tentativeLabel.Hidden = true;
                        declineLabel.Hidden = true;
                        acceptButton.UserInteractionEnabled = false;
                    }
                );
            } else if (NcResponseType.Tentative == r) {
                acceptButton.Selected = false;
                tentativeButton.Selected = true;
                declineButton.Selected = false;
                messageLabel.Text = "Tentative";
                messageLabel.Hidden = false;
                messageLabel.Alpha = 0;
                changeResponseButton.Hidden = false;
                changeResponseButton.Alpha = 0;

                UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        acceptLabel.Alpha = 0;
                        acceptButton.Alpha = 0;
                        declineButton.Alpha = 0;
                        tentativeLabel.Alpha = 0;
                        declineLabel.Alpha = 0;
                        messageLabel.Alpha = 1;
                        changeResponseButton.Alpha = 1;

                        tentativeButton.Frame = new RectangleF (25, 15, 24, 24);
                    },
                    () => {
                        acceptLabel.Hidden = true;
                        acceptButton.Hidden = true;
                        declineButton.Hidden = true;
                        tentativeLabel.Hidden = true;
                        declineLabel.Hidden = true;
                        tentativeButton.UserInteractionEnabled = false;
                    }
                );
            } else {
                acceptButton.Selected = false;
                tentativeButton.Selected = false;
                declineButton.Selected = true;
                messageLabel.Text = "You are not going";
                messageLabel.Hidden = false;
                messageLabel.Alpha = 0;
                changeResponseButton.Hidden = false;
                changeResponseButton.Alpha = 0;

                UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        acceptLabel.Alpha = 0;
                        acceptButton.Alpha = 0;
                        tentativeButton.Alpha = 0;
                        tentativeLabel.Alpha = 0;
                        declineLabel.Alpha = 0;
                        messageLabel.Alpha = 1;
                        changeResponseButton.Alpha = 1;

                        declineButton.Frame = new RectangleF (25, 15, 24, 24);
                    },
                    () => {
                        acceptLabel.Hidden = true;
                        acceptButton.Hidden = true;
                        tentativeButton.Hidden = true;
                        tentativeLabel.Hidden = true;
                        declineLabel.Hidden = true;
                        declineButton.UserInteractionEnabled = false;

                    }
                );
            }
        }

        protected void RestoreButtons ()
        {

            acceptButton.Selected = false;
            tentativeButton.Selected = false;
            declineButton.Selected = false;
            acceptButton.Hidden = false;
            acceptLabel.Hidden = false;
            tentativeButton.Hidden = false;
            declineButton.Hidden = false;
            tentativeLabel.Hidden = false;
            declineLabel.Hidden = false;
            acceptButton.UserInteractionEnabled = true;
            tentativeButton.UserInteractionEnabled = true;
            declineButton.UserInteractionEnabled = true;

            UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                () => {

                    acceptButton.Alpha = 1;
                    tentativeButton.Alpha = 1;
                    declineButton.Alpha = 1;
                    acceptLabel.Alpha = 1;
                    tentativeLabel.Alpha = 1;
                    declineLabel.Alpha = 1;

                    messageLabel.Alpha = 0;
                    changeResponseButton.Alpha = 0;

                    acceptButton.Frame = new RectangleF (25, 10, 24, 24);
                    tentativeButton.Frame = new RectangleF ((SCREEN_WIDTH / 2) - 12, 10, 24, 24);
                    declineButton.Frame = new RectangleF (SCREEN_WIDTH - 24 - 25, 10, 24, 24);
                },
                () => {

                    messageLabel.Hidden = true;
                    changeResponseButton.Hidden = true;

                }
            );

        }

        public class TupleList<T1, T2> : List<Tuple<T1, T2>>
        {
            public void Add (T1 item, T2 item2)
            {
                Add (new Tuple<T1, T2> (item, item2));
            }
        }

        public string UIntToString (uint min)
        {
            string time = "None";
            foreach (var pair in minList) {
                if (pair.Item1 == min) {
                    time = pair.Item2;
                }
            }
            return time;
        }

        protected string MakeRecurrenceString (List<McRecurrence> r)
        {
            McRecurrence rPattern = r.ElementAt (0);
            if (0 == rPattern.Type) { 
                if (1 < rPattern.Interval) {
                    return "repeats every " + rPattern.Interval.ToString ().ToLower () + " days";
                }
                return "repeats " + rPattern.Type.ToString ().ToLower ();
            }
            if ("Weekly" == rPattern.Type.ToString ()) { 
                bool hasInterval = false;
                string weekRecurrenceString = "repeats every ";
                if (1 < rPattern.Interval) {
                    weekRecurrenceString += rPattern.Interval.ToString ().ToLower () + " weeks";
                    hasInterval = true;
                }
                if (0 != rPattern.DayOfWeek) {
                    var dayValue = (byte)rPattern.DayOfWeek;
                    if (127 == dayValue) {
                        return "repeats at the end of every month";
                    }
                    if (62 == dayValue) {
                        return "repeats weekly on workdays";
                    }
                    if (65 == dayValue) {
                        return "repeats weekly on weekends";
                    }
                    bool isSunday = (dayValue & (1 << 0)) != 0;
                    bool isMonday = (dayValue & (1 << 1)) != 0;
                    bool isTuesday = (dayValue & (1 << 2)) != 0;
                    bool isWednesday = (dayValue & (1 << 3)) != 0;
                    bool isThursday = (dayValue & (1 << 4)) != 0;
                    bool isFriday = (dayValue & (1 << 5)) != 0;
                    bool isSaturday = (dayValue & (1 << 6)) != 0;
                    var s = new List<string> ();
                    if (isSunday) {
                        s.Add ("Sun");
                    }
                    if (isMonday) {
                        s.Add ("Mon");
                    }
                    if (isTuesday) {
                        s.Add ("Tue");
                    }
                    if (isWednesday) {
                        s.Add ("Wed");
                    }
                    if (isThursday) {
                        s.Add ("Thu");
                    }
                    if (isFriday) {
                        s.Add ("Fri");
                    }
                    if (isSaturday) {
                        s.Add ("Sat");
                    }
                    if (1 == s.Count) {
                        if (hasInterval) {
                            return weekRecurrenceString;
                        } else {
                            return "repeats weekly";
                        }
                    } else if (hasInterval) {
                        weekRecurrenceString += " on " + Util.MakeCommaSeparatedList (s);
                    } else {
                        weekRecurrenceString += "week on " + Util.MakeCommaSeparatedList (s);
                    }
                    return weekRecurrenceString;

                }
                return "repeats " + rPattern.Type.ToString ().ToLower ();
            }
            if ("Monthly" == rPattern.Type.ToString ()) {
                if (1 < rPattern.Interval) {
                    return "repeats every " + rPattern.Interval.ToString ().ToLower () + " months";
                }
                return "repeats " + rPattern.Type.ToString ().ToLower ();
            }
            if ("MonthlyOnDay" == rPattern.Type.ToString ()) {
                if (1 < rPattern.Interval) {
                    return "repeats every " + rPattern.Interval.ToString ().ToLower () + " months";
                }
                return "repeats on the " + Util.AddOrdinalSuffix ((Int32)rPattern.WeekOfMonth) + " " + rPattern.DayOfWeek.ToString () + " of every month";
            }
            if ("Yearly" == rPattern.Type.ToString ()) {
                if (1 < rPattern.Interval) {
                    return "repeats every " + rPattern.Interval.ToString ().ToLower () + " years";
                }
                return "repeats " + rPattern.Type.ToString ().ToLower ();
            }
            if ("YearlyOnDay" == rPattern.Type.ToString ()) {
                return "repeats every year on the " + Util.AddOrdinalSuffix ((Int32)rPattern.WeekOfMonth) + " " + rPattern.DayOfWeek.ToString ()
                + " of " + rPattern.MonthOfYear.ToString ();
            }
            return "Case error: " + rPattern.Type.ToString ();
        }

        protected void SyncMeetingRequest ()
        {
            NcAssert.True (0 != c.Id);
            c.Update ();
            BackEnd.Instance.UpdateCalCmd (account.Id, c.Id);
        }

        protected void UpdateStatus (NcResponseType status)
        {
            // MeetingResponse command to let the server know about our status
            BackEnd.Instance.RespondCalCmd (account.Id, c.Id, status);

            if (c is McCalendar && c.ResponseRequestedIsSet && c.ResponseRequested) {
                // Send an e-mail message to the organizer with the response.
                var iCalPart = CalendarHelper.iCalResponseToMimePart (account, (McCalendar)c, status);
                // TODO Give the user a chance to enter some text. For now, the message body is empty.
                var mimeBody = CalendarHelper.CreateMime ("", iCalPart, new List<McAttachment> ());
                CalendarHelper.SendMeetingResponse (account, (McCalendar)c, mimeBody, status);
            }
        }

        public string GetNoteText ()
        {
            McNote Note;
            if (null != c) {
                Note = McNote.QueryByTypeId (c.Id, McNote.NoteType.Event).FirstOrDefault ();
                return (null != Note ? Note.noteContent : "");
            } else {
                return "";
            }
        }

        public void SaveNote (int accountId, string noteText)
        {
            McNote Note;
            if (null != c) {
                Note = McNote.QueryByTypeId (c.Id, McNote.NoteType.Event).FirstOrDefault ();
                if (null == Note) {
                    Note = new McNote ();
                    Note.DisplayName = (c.Subject + " - " + Pretty.ShortDateString (DateTime.UtcNow));
                    Note.TypeId = c.Id;
                    Note.noteType = McNote.NoteType.Event;
                    Note.noteContent = noteText;
                    Note.Insert ();
                } else {
                    Note.noteContent = noteText;
                    Note.Update ();
                }
            }
        }

        // Event handlers

        private void AttendeeTapGestureRecognizerTap ()
        {
            PerformSegue ("EventToEventAttendees", this);
        }

        private void AlertTapGestureRecognizerTap ()
        {
            PerformSegue ("EventToAlert", this);
        }

        private void AttachmentsTapGestureRecognizerTap ()
        {
            PerformSegue ("EventToAttachment", this);
        }

        private void NotesTapGestureRecognizerTap ()
        {
            PerformSegue ("EventToNotes", this);
        }

        private void AcceptButtonTouchUpInside (object sender, EventArgs e)
        {
            ToggleButtons (NcResponseType.Accepted);
            UpdateStatus (NcResponseType.Accepted);
        }

        private void TentativeButtonTouchUpInside (object sender, EventArgs e)
        {
            ToggleButtons (NcResponseType.Tentative);
            UpdateStatus (NcResponseType.Tentative);
        }

        private void DeclineButtonTouchUpInside (object sender, EventArgs e)
        {
            ToggleButtons (NcResponseType.Declined);
            UpdateStatus (NcResponseType.Declined);
        }

        private void ChangeResponseTouchUpInside (object sender, EventArgs e)
        {
            RestoreButtons ();
        }

        private void EditButtonClicked (object sender, EventArgs e)
        {
            PerformSegue ("EventToEditEvent", this);
        }

        private void ExtraAttendeesTouchUpInside (object sender, EventArgs e)
        {
            PerformSegue ("EventToEventAttendees", this);
        }
    }
}
