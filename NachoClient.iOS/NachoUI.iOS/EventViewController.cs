// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using System.IO;
using System.Drawing;
using System.Collections.Generic;
using MimeKit;

using NachoCore.Model;
using NachoCore.Utils;
using SWRevealViewControllerBinding;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

using NachoCore;
using NachoCore.ActiveSync;

using MonoTouch.MapKit;

namespace NachoClient.iOS
{
    public partial class EventViewController : UIViewController, INachoCalendarItemEditor
    {
        protected INachoCalendarItemEditorParent owner;
        protected CalendarItemEditorAction action;
        protected McCalendar item;
        protected McCalendar c;
        protected McFolder folder;
        protected McAccount account;
        protected NachoFolders calendars;
        protected string TempPhone = "";
        protected int calendarIndex = 0;

        UITextField titleField;
        UITextView descriptionTextView;

        UIView titleView;
        UIView descriptionView;

        UIView allDayView;
        UIView startView;
        UIView endView;

        UIView locationView;
        UITextField locationField;
        UIView phoneView;
        UILabel phoneDetailLabel;
        UIView attachmentsView;
        UIView peopleView;

        UIView alertsView;

        UIView calendarView;

        DateTime startDate;
        DateTime endDate;

        UILabel startDateLabel;
        UILabel endDateLabel;

        UIColor separatorColor = new UIColor (.8f, .8f, .8f, .6f);
        protected static float SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected int LINE_OFFSET = 30;
        protected int CELL_HEIGHT = 44;
        protected int START_PICKER_HEIGHT = 0;
        protected int END_PICKER_HEIGHT = 0;
        protected float TEXT_LINE_HEIGHT = 19.124f;
        protected float DESCRIPTION_OFFSET = 0f;
        protected float keyboardHeight;
        protected bool suppressLayout = false;
        protected bool suppressLowerLayout = false;
        protected bool startDateOpen = false;
        protected bool endDateOpen = false;
        protected bool startIsOpening = false;
        protected bool endIsOpening = false;
        protected bool endChanged = false;
        protected bool allDayEvent = false;

        public bool showMenu;
        protected UIView line1;
        protected UIView line2;
        protected UIView line3;
        protected UIView line4;
        protected UIView line5;
        protected UIView line6;
        protected UIView line7;
        protected UIView line8;
        protected UIView line9;
        protected UIView line10;
        protected UIView line11;
        protected UIView line12;
        protected UIView line13;
        protected UIView line14;
        protected UIView line15;
        protected UIView line16;
        protected UIView strikethrough;
        protected UIView endDivider;
        protected UIView startDivider;
        protected UIColor solidTextColor = A.Color_NachoBlack;

        const int ALL_DAY_SWITCH_TAG = 200;
        const int START_DATE_TAG = 201;
        const int END_DATE_TAG = 202;
        const int LOCATION_DETAIL_TAG = 203;
        const int PHONE_DETAIL_TAG = 204;
        const int ATTACHMENTS_DETAIL_TAG = 205;
        const int PEOPLE_DETAIL_TAG = 206;
        const int ALERT_DETAIL_TAG = 207;
        const int CAL_DETAIL_TAG = 210;


        public EventViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            if (showMenu) {
                // Navigation
                cancelButton.Clicked += (object sender, EventArgs e) => {
                    this.RevealViewController ().RevealToggle (this);
                };
                    
                NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { cancelButton};

            }

            NavigationItem.RightBarButtonItem = doneButton;
            doneButton.Clicked += (object sender, EventArgs e) => {
                ExtractValues();
                SyncMeetingRequest ();
                SendInvites ();
                this.RevealViewController ().RevealToggle (this);
            };

            c = CalendarHelper.DefaultMeeting ();
            account = NcModel.Instance.Db.Table<McAccount> ().First ();
            calendars = new NachoFolders (NachoFolders.FilterForCalendars);
            CreateEventView ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillHideNotification);
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillShowNotification);
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }

            ConfigureEventView ();

        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
            }
        }

        /// <summary>
        /// Interface INachoCalendarItemEditor
        /// </summary>
        /// <param name="owner">Owner.</param>
        public void SetOwner (INachoCalendarItemEditorParent owner)
        {
            this.owner = owner;
        }

        /// <summary>
        /// Interface INachoCalendarItemEditor
        /// </summary>
        /// <param name="item">Item.</param>
        /// <param name="action">Action.</param>
        public void SetCalendarItem (McCalendar item, CalendarItemEditorAction action)
        {
            this.item = item;
            this.action = action;
        }

        /// <summary>
        /// Interface INachoCalendarItemEditor
        /// </summary>
        /// <param name="animated">If set to <c>true</c> animated.</param>
        /// <param name="action">Action.</param>
        public void DismissCalendarItemEditor (bool animated, NSAction action)
        {
            owner = null;
            NavigationController.PopViewControllerAnimated (true);
        }

        protected string MyCalendarName (McCalendar c)
        {
            var candidates = McFolder.QueryByFolderEntryId<McCalendar> (account.Id, c.Id);
            if ((null == candidates) || (0 == candidates.Count)) {
                return "None";
            } else {
                return candidates.First ().DisplayName;
            }
        }

        public virtual bool HandlesKeyboardNotifications {
            get { return true; }
        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {
                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;
                //Start an animation, using values from the keyboard
                UIView.BeginAnimations ("AnimateForKeyboard");
                UIView.SetAnimationBeginsFromCurrentState (true);
                UIView.SetAnimationDuration (UIKeyboard.AnimationDurationFromNotification (notification));
                UIView.SetAnimationCurve ((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification (notification));
                //Pass the notification, calculating keyboard height, etc.
                bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                if (visible) {
                    var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                } else {
                    var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                }
                //Commit the animation
                UIView.CommitAnimations (); 
            }
        }

        protected virtual void OnKeyboardChanged (bool visible, float height)
        {
            var newHeight = (visible ? height : 0);

            if (newHeight == keyboardHeight) {
                return;
            }
            keyboardHeight = newHeight;

            LayoutView ();
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("EventToAttendee")) {
                var dc = (AttendeeViewController)segue.DestinationViewController;
                dc.SetAttendeeList (c.attendees);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    c.attendees = dc.GetAttendeeList ();
                    ConfigureEventView();
                };
            }

            if (segue.Identifier.Equals ("EventToAlert")) {
                var dc = (AlertChooserViewController)segue.DestinationViewController;
                dc.SetReminder (c.Reminder);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    c.Reminder = dc.GetReminder ();
                    ConfigureEventView();
                };
            }

            if (segue.Identifier.Equals ("EventToPhone")) {
                var dc = (PhoneViewController)segue.DestinationViewController;
                dc.SetPhone (TempPhone);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    TempPhone = dc.GetPhone ();
                    ConfigureEventView();
                };
            }

            if (segue.Identifier.Equals ("EventToCal")) {
                var dc = (ChooseCalendarViewController)segue.DestinationViewController;
                dc.SetCalendars (calendars);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    calendarIndex = dc.GetCalIndex ();
                    ConfigureEventView();
                };
            }
        }


        protected void CreateEventView ()
        {

            //Title
            titleView = new UIView (new RectangleF (0, 30, SCREEN_WIDTH, CELL_HEIGHT));
            titleView.BackgroundColor = UIColor.White;

            titleField = new UITextField (new RectangleF (15, 12.438f, SCREEN_WIDTH - 30, TEXT_LINE_HEIGHT));
            titleField.Font = A.Font_AvenirNextRegular14;
            titleField.TextColor = solidTextColor;
            titleField.Placeholder = "Title";
            titleField.ClearButtonMode = UITextFieldViewMode.Always;
            titleView.AddSubview (titleField);

            titleField.ShouldReturn += (textField) => {
                textField.ResignFirstResponder ();
                return true;
            };


            //Description
            descriptionView = new UIView (new RectangleF (0, 74, SCREEN_WIDTH, CELL_HEIGHT + TEXT_LINE_HEIGHT));
            descriptionView.BackgroundColor = UIColor.White;

            UILabel descriptionPlaceHolder = new UILabel (new RectangleF (15, 12.438f, SCREEN_WIDTH - 30, TEXT_LINE_HEIGHT));
            descriptionPlaceHolder.Text = "Description";
            descriptionPlaceHolder.Font = A.Font_AvenirNextRegular14;
            descriptionPlaceHolder.TextColor = new UIColor (.8f, .8f, .8f, 1f);

            descriptionTextView = new UITextView (new RectangleF (15, 12.438f, SCREEN_WIDTH - 30, TEXT_LINE_HEIGHT));
            descriptionTextView.Font = A.Font_AvenirNextRegular14;
            descriptionTextView.TextColor = solidTextColor;
            descriptionTextView.BackgroundColor = UIColor.Clear;
            var beginningRange = new NSRange (0, 0);
            descriptionTextView.SelectedRange = beginningRange;
            descriptionTextView.ContentInset = new UIEdgeInsets (-7, -4, 0, 0);

            descriptionTextView.Changed += (object sender, EventArgs e) => {
                descriptionPlaceHolder.Hidden = true;
                SelectionChanged (descriptionTextView);
            };
            descriptionTextView.Ended += (object sender, EventArgs e) => {
                if (!descriptionTextView.HasText) {
                    descriptionPlaceHolder.Hidden = false;
                }
            };
            //descriptionView.AddSubview (descriptionTextView);
            descriptionView.AddSubview (descriptionPlaceHolder);


            //All Day Event
            allDayView = new UIView (new RectangleF (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            allDayView.BackgroundColor = UIColor.White;
            UILabel allDayLabel = new UILabel (new RectangleF (15, 12.438f, 50, TEXT_LINE_HEIGHT));
            allDayLabel.Text = "All Day";
            allDayLabel.Font = A.Font_AvenirNextRegular14;
            allDayLabel.TextColor = solidTextColor;
            allDayView.AddSubview (allDayLabel);

            UISwitch allDaySwitch = new UISwitch ();
            allDaySwitch.Tag = ALL_DAY_SWITCH_TAG;
            allDaySwitch.SizeToFit ();
            allDaySwitch.OnTintColor = A.Color_NachoBlue;
            allDaySwitch.HorizontalAlignment = UIControlContentHorizontalAlignment.Right;
            allDaySwitch.Frame = new RectangleF (SCREEN_WIDTH - allDaySwitch.Frame.Width - 15, 6.5f, allDaySwitch.Frame.Width, TEXT_LINE_HEIGHT);
            allDayView.AddSubview (allDaySwitch);


            //Start Time
            startView = new UIView (new RectangleF (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 3) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            startView.BackgroundColor = UIColor.White;
            UILabel startLabel = new UILabel (new RectangleF (15, 12.438f, 40, TEXT_LINE_HEIGHT));
            startLabel.Text = "Starts";
            startLabel.Font = A.Font_AvenirNextRegular14;
            startLabel.TextColor = solidTextColor;
            startView.AddSubview (startLabel);

            startDateLabel = new UILabel ();
            startDate = c.StartTime;
            startDateLabel.Text = Pretty.FullDateTimeString (startDate);
            startDateLabel.Tag = START_DATE_TAG;
            startDateLabel.SizeToFit ();
            startDateLabel.TextAlignment = UITextAlignment.Right;
            startDateLabel.Frame = new RectangleF (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
            startDateLabel.Font = A.Font_AvenirNextRegular14;
            startDateLabel.TextColor = A.Color_808080;
            startView.AddSubview (startDateLabel);

            startDatePicker.Frame = new RectangleF (0, 44, SCREEN_WIDTH, START_PICKER_HEIGHT);
            startDatePicker.Hidden = true;
            startView.AddSubview (startDatePicker);

            startDatePicker.ValueChanged += (object sender, EventArgs e) => {
                DateTime date = startDatePicker.Date;
                if (allDaySwitch.On) { 
                    startDateLabel.Text = Pretty.FullDateString (date);
                } else {
                    startDateLabel.Text = Pretty.FullDateTimeString (date);
                }
                startDate = date;
                if (!endChanged) {
                    endDate = date.AddHours (1);
                    endDateLabel.Text = Pretty.FullTimeString (endDate);
                    endDateLabel.SizeToFit ();
                    endDateLabel.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                    endDateLabel.TextColor = A.Color_NachoBlue;
                }
                startDateLabel.SizeToFit ();
                startDateLabel.Frame = new RectangleF (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                startDateLabel.TextColor = A.Color_NachoBlue;
                if (0 > endDate.CompareTo (startDate)) {
                    strikethrough.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                    strikethrough.Hidden = false;
                    endDateLabel.TextColor = A.Color_NachoRed;
                } else { 
                    strikethrough.Hidden = true;
                    endDateLabel.TextColor = A.Color_808080;
                }
            };

            startDivider = AddLine (15, CELL_HEIGHT, SCREEN_WIDTH, separatorColor);
            startDivider.Hidden = true;
            startView.AddSubview (startDivider);

            var startTap = new UITapGestureRecognizer ();
            startTap.AddTarget (() => {

                if (startDateOpen) {
                    ConfigureDateView ("startClose");
                    startDate = startDatePicker.Date;
                } else {
                    if (endDateOpen) {
                        suppressLowerLayout = true;
                        ConfigureDateView ("endClose");
                    }
                    ConfigureDateView ("startOpen");

                    startDatePicker.Date = startDate;
                    suppressLowerLayout = false;
                }

            });
            startView.AddGestureRecognizer (startTap);


            //End Time
            endView = new UIView (new RectangleF (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 4) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            endView.BackgroundColor = UIColor.White;
            UILabel endLabel = new UILabel (new RectangleF (15, 12.438f, 30, TEXT_LINE_HEIGHT));
            endLabel.Text = "Until";
            endLabel.Font = A.Font_AvenirNextRegular14;
            endLabel.TextColor = solidTextColor;
            endView.AddSubview (endLabel);

            endDateLabel = new UILabel ();
            endDate = c.EndTime;
            endDateLabel.Text = Pretty.FullTimeString (endDate);
            endDateLabel.Tag = END_DATE_TAG;
            endDateLabel.SizeToFit ();
            endDateLabel.TextAlignment = UITextAlignment.Right;
            endDateLabel.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
            endDateLabel.Font = A.Font_AvenirNextRegular14;
            endDateLabel.TextColor = A.Color_808080;
            endView.AddSubview (endDateLabel);

            endDatePicker.Frame = new RectangleF (0, CELL_HEIGHT, SCREEN_WIDTH, END_PICKER_HEIGHT);
            endDatePicker.Hidden = true;
            endView.AddSubview (endDatePicker);

            endDatePicker.ValueChanged += (object sender, EventArgs e) => {
                endChanged = true;
                DateTime date = endDatePicker.Date;
                if (allDaySwitch.On) { 
                    endDateLabel.Text = Pretty.FullDateString (date);
                } else {
                    endDateLabel.Text = Pretty.FullDateTimeString (date);
                }
                endDate = date;
                endDateLabel.SizeToFit ();
                endDateLabel.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                if (0 > endDate.CompareTo (startDate)) {
                    strikethrough.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                    strikethrough.Hidden = false;
                    endDateLabel.TextColor = A.Color_NachoRed;
                } else { 
                    strikethrough.Hidden = true;
                    endDateLabel.TextColor = A.Color_NachoBlue;
                }

 
            };

            endDivider = AddLine (15, CELL_HEIGHT, SCREEN_WIDTH, separatorColor);
            startDivider.Hidden = true;
            endView.AddSubview (endDivider);

            var endTap = new UITapGestureRecognizer ();
            endTap.AddTarget (() => {
                if (endDateOpen) {
                    ConfigureDateView ("endClose");
                    endDate = endDatePicker.Date;
                    if (0 > endDate.CompareTo (startDate)) {
                        strikethrough.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                        strikethrough.Hidden = false;
                        endDateLabel.TextColor = A.Color_NachoRed;
                    } else { 
                        strikethrough.Hidden = true;
                        endDateLabel.TextColor = A.Color_808080;
                    }
                } else {
                    if (startDateOpen) {
                        suppressLowerLayout = true;
                        ConfigureDateView ("startClose");
                    }
                    ConfigureDateView ("endOpen");
                    endDatePicker.Date = endDate;
                    suppressLowerLayout = false;
                }

            });
            endView.AddGestureRecognizer (endTap);

            allDaySwitch.ValueChanged += (object sender, EventArgs e) => {
                if (allDaySwitch.On) { 
                    startDateLabel.Text = Pretty.FullDateString (startDate);
                    startDateLabel.SizeToFit ();
                    startDateLabel.Frame = new RectangleF (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                    endDateLabel.Text = Pretty.FullDateString (endDate);
                    endDateLabel.SizeToFit ();
                    endDateLabel.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                    strikethrough.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                    startDatePicker.Mode = UIDatePickerMode.Date;
                    endDatePicker.Mode = UIDatePickerMode.Date;
                    allDayEvent = true;
                } else {
                    startDateLabel.Text = Pretty.FullDateTimeString (startDate);
                    startDateLabel.SizeToFit ();
                    startDateLabel.Frame = new RectangleF (SCREEN_WIDTH - startDateLabel.Frame.Width - 15, 12.438f, startDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                    endDatePicker.Date = endDate;
                    endDateLabel.Text = Pretty.FullDateTimeString (endDate);
                    endDateLabel.SizeToFit ();
                    endDateLabel.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, 12.438f, endDateLabel.Frame.Width, TEXT_LINE_HEIGHT);
                    strikethrough.Frame = new RectangleF (SCREEN_WIDTH - endDateLabel.Frame.Width - 15, CELL_HEIGHT / 2, endDateLabel.Frame.Width, 1);
                    startDatePicker.Mode = UIDatePickerMode.DateAndTime;
                    endDatePicker.Mode = UIDatePickerMode.DateAndTime;
                    allDayEvent = false;
                }
            };

            strikethrough = AddLine (0, CELL_HEIGHT / 2, SCREEN_WIDTH, A.Color_NachoRed);
            strikethrough.Hidden = true;
            endView.AddSubview (strikethrough);


            //Location
            locationView = new UIView (new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            locationView.BackgroundColor = UIColor.White;

            UIImageView locationImage = new UIImageView (new RectangleF (15, 14.5f, 15, 15));
            locationImage.Image = UIImage.FromBundle ("icn-mtng-location");
            locationView.AddSubview (locationImage);

            locationField = new UITextField (new RectangleF (37, 12.438f, SCREEN_WIDTH - 52, TEXT_LINE_HEIGHT));
            locationField.Font = A.Font_AvenirNextRegular14;
            locationField.TextColor = solidTextColor;
            locationField.ClearButtonMode = UITextFieldViewMode.Always;
            locationField.Placeholder = "Location";
            locationView.AddSubview (locationField);

            locationField.ShouldReturn += (textField) => {
                textField.ResignFirstResponder ();
                return true;
            };


            //Phone
            phoneView = new UIView (new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 6) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            phoneView.BackgroundColor = UIColor.White;

            UIImageView phoneImage = new UIImageView (new RectangleF (15, 14.5f, 15, 15));
            phoneImage.Image = UIImage.FromBundle ("icn-mtng-phone");
            phoneView.AddSubview (phoneImage);

            UILabel phoneLabel = new UILabel (new RectangleF (37, 12.438f, 55, TEXT_LINE_HEIGHT));
            phoneLabel.Text = "Phone";
            phoneLabel.Font = A.Font_AvenirNextRegular14;
            phoneLabel.TextColor = solidTextColor;
            phoneView.AddSubview (phoneLabel);

            UIImageView phoneAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 14, 10, 16));
            phoneAccessoryImage.Image = UIImage.FromBundle ("acc-arrow");
            phoneView.AddSubview (phoneAccessoryImage);

            phoneDetailLabel = new UILabel ();
            phoneDetailLabel.Text = "559-320-9923";
            phoneDetailLabel.Tag = PHONE_DETAIL_TAG;
            phoneDetailLabel.SizeToFit ();
            phoneDetailLabel.TextAlignment = UITextAlignment.Right;
            phoneDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - phoneDetailLabel.Frame.Width - 34, 12.438f, phoneDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            phoneDetailLabel.Font = A.Font_AvenirNextRegular14;
            phoneDetailLabel.TextColor = A.Color_808080;
            phoneView.AddSubview (phoneDetailLabel);

            var phoneTap = new UITapGestureRecognizer ();
            phoneTap.AddTarget (() => {
                PerformSegue ("EventToPhone", this);
            });
            //phoneView.AddGestureRecognizer (phoneTap);


            //Attachments
            attachmentsView = new UIView (new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 7) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            attachmentsView.BackgroundColor = UIColor.White;

            UIImageView attachmentsImage = new UIImageView (new RectangleF (15, 14.5f, 15, 15));
            attachmentsImage.Image = UIImage.FromBundle ("icn-mtng-attachment");
            attachmentsView.AddSubview (attachmentsImage);

            UILabel attachmentsLabel = new UILabel (new RectangleF (37, 12.438f, 100, TEXT_LINE_HEIGHT));
            attachmentsLabel.Text = "Attachments";
            attachmentsLabel.Font = A.Font_AvenirNextRegular14;
            attachmentsLabel.TextColor = solidTextColor;
            attachmentsView.AddSubview (attachmentsLabel);

            UIImageView attachmentsAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 14, 10, 16));
            attachmentsAccessoryImage.Image = UIImage.FromBundle ("acc-arrow");
            attachmentsView.AddSubview (attachmentsAccessoryImage);

            UILabel attachmentsDetailLabel = new UILabel ();
            attachmentsDetailLabel.Text = "";
            attachmentsDetailLabel.Tag = ATTACHMENTS_DETAIL_TAG;
            attachmentsDetailLabel.SizeToFit ();
            attachmentsDetailLabel.TextAlignment = UITextAlignment.Right;
            attachmentsDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - attachmentsDetailLabel.Frame.Width - 34, 12.438f, attachmentsDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            attachmentsDetailLabel.Font = A.Font_AvenirNextRegular14;
            attachmentsDetailLabel.TextColor = A.Color_808080;
            attachmentsView.AddSubview (attachmentsDetailLabel);

            var attachmentTap = new UITapGestureRecognizer ();
            attachmentTap.AddTarget (() => {
                PerformSegue ("EventToAttachment", this);
            });
            //attachmentsView.AddGestureRecognizer (attachmentTap);


            //People
            peopleView = new UIView (new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 8) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            peopleView.BackgroundColor = UIColor.White;

            UIImageView peopleImage = new UIImageView (new RectangleF (15, 14.5f, 15, 15));
            peopleImage.Image = UIImage.FromBundle ("icn-peoples");
            peopleView.AddSubview (peopleImage);

            UILabel peopleLabel = new UILabel (new RectangleF (37, 12.438f, 55, TEXT_LINE_HEIGHT));
            peopleLabel.Text = "People";
            peopleLabel.Font = A.Font_AvenirNextRegular14;
            peopleLabel.TextColor = solidTextColor;
            peopleView.AddSubview (peopleLabel);

            UIImageView peopleAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 14, 10, 16));
            peopleAccessoryImage.Image = UIImage.FromBundle ("acc-arrow");
            peopleView.AddSubview (peopleAccessoryImage);

            UILabel peopleDetailLabel = new UILabel ();
            peopleDetailLabel.Text = "(" + c.attendees.Count + ")";
            peopleDetailLabel.Tag = PEOPLE_DETAIL_TAG;
            peopleDetailLabel.SizeToFit ();
            peopleDetailLabel.TextAlignment = UITextAlignment.Right;
            peopleDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - peopleDetailLabel.Frame.Width - 34, 12.438f, peopleDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            peopleDetailLabel.Font = A.Font_AvenirNextRegular14;
            peopleDetailLabel.TextColor = A.Color_808080;
            peopleView.AddSubview (peopleDetailLabel);

            var peopleTap = new UITapGestureRecognizer ();
            peopleTap.AddTarget (() => {
                PerformSegue ("EventToAttendee", this);
            });
            peopleView.AddGestureRecognizer (peopleTap);


            //Alerts
            alertsView = new UIView (new RectangleF (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            alertsView.BackgroundColor = UIColor.White;

            UIImageView alertsImage = new UIImageView (new RectangleF (15, 14.5f, 15, 15));
            alertsImage.Image = UIImage.FromBundle ("icn-mtng-time");
            alertsView.AddSubview (alertsImage);

            UIImageView alertsAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 14, 10, 16));
            alertsAccessoryImage.Image = UIImage.FromBundle ("acc-arrow");
            alertsView.AddSubview (alertsAccessoryImage);

            UILabel alertsLabel = new UILabel (new RectangleF (37, 12.438f, 70, TEXT_LINE_HEIGHT));
            alertsLabel.Text = "Add Alert";
            alertsLabel.Font = A.Font_AvenirNextRegular14;
            alertsLabel.TextColor = solidTextColor;
            alertsView.AddSubview (alertsLabel);

            UILabel alertsDetailLabel = new UILabel ();
            alertsDetailLabel.Text = "None";
            alertsDetailLabel.Tag = ALERT_DETAIL_TAG;
            alertsDetailLabel.SizeToFit ();
            alertsDetailLabel.TextAlignment = UITextAlignment.Right;
            alertsDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - alertsDetailLabel.Frame.Width - 34, 12.438f, alertsDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            alertsDetailLabel.Font = A.Font_AvenirNextRegular14;
            alertsDetailLabel.TextColor = A.Color_808080;
            alertsView.AddSubview (alertsDetailLabel);

            var alertTap = new UITapGestureRecognizer ();
            alertTap.AddTarget (() => {
                PerformSegue ("EventToAlert", this);
            });
            alertsView.AddGestureRecognizer (alertTap);

            //Calendar
            calendarView = new UIView (new RectangleF (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 10) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT));
            calendarView.BackgroundColor = UIColor.White;

            UIImageView calendarImage = new UIImageView (new RectangleF (15, 14.5f, 15, 15));
            calendarImage.Image = UIImage.FromBundle ("icn-calendars");
            calendarView.AddSubview (calendarImage);

            UILabel calendarLabel = new UILabel (new RectangleF (37, 12.438f, 70, TEXT_LINE_HEIGHT));
            calendarLabel.Text = "Calendar";
            calendarLabel.Font = A.Font_AvenirNextRegular14;
            calendarLabel.TextColor = solidTextColor;
            calendarView.AddSubview (calendarLabel);

            UIImageView calendarAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 14, 10, 16));
            calendarAccessoryImage.Image = UIImage.FromBundle ("acc-arrow");
            calendarView.AddSubview (calendarAccessoryImage);

            UILabel calendarDetailLabel = new UILabel ();
            calendarDetailLabel.Text = "Calendar";
            calendarDetailLabel.Tag = PEOPLE_DETAIL_TAG;
            calendarDetailLabel.SizeToFit ();
            calendarDetailLabel.TextAlignment = UITextAlignment.Right;
            calendarDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - calendarDetailLabel.Frame.Width - 34, 12.438f, calendarDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            calendarDetailLabel.Font = A.Font_AvenirNextRegular14;
            calendarDetailLabel.TextColor = A.Color_808080;
            calendarView.AddSubview (calendarDetailLabel);

            var calTap = new UITapGestureRecognizer ();
            calTap.AddTarget (() => {
                PerformSegue ("EventToCal", this);
            });
            calendarView.AddGestureRecognizer (calTap);


            //Content View
            contentView.Frame = new RectangleF (0, 0, SCREEN_WIDTH, (LINE_OFFSET * 7) + (CELL_HEIGHT * 12) + TEXT_LINE_HEIGHT);
            contentView.BackgroundColor = A.Color_NachoNowBackground;
            contentView.AddSubviews (new UIView[] {
                titleView,
                descriptionView,
                allDayView,
                startView,
                endView,
                locationView,
                phoneView,
                attachmentsView,
                peopleView,
                alertsView,
                calendarView
            }); 
            //LO
            line1 = AddLine (0, LINE_OFFSET, SCREEN_WIDTH, separatorColor);
            line2 = AddLine (15, LINE_OFFSET + CELL_HEIGHT, SCREEN_WIDTH, separatorColor);
            line3 = AddLine (0, LINE_OFFSET + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            line4 = AddLine (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line5 = AddLine (15, (LINE_OFFSET * 2) + (CELL_HEIGHT * 3) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line6 = AddLine (15, (LINE_OFFSET * 2) + (CELL_HEIGHT * 4) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line7 = AddLine (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            line8 = AddLine (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line9 = AddLine (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 6) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line10 = AddLine (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 7) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line11 = AddLine (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 8) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line12 = AddLine (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            line13 = AddLine (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line14 = AddLine (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 10) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            line15 = AddLine (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 10) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            line16 = AddLine (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 11) + TEXT_LINE_HEIGHT, SCREEN_WIDTH, separatorColor);
            //LO
            contentView.AddSubviews (new UIView[] {
                line1,
                line2,
                line3,
                line4,
                line5,
                line6,
                line7,
                line8,
                line9,
                line10,
                line11,
                line12,
                line13,
                line14,
                line15,
                line16
            }); 


            //Scroll View
            scrollView.BackgroundColor = A.Color_NachoNowBackground;
            scrollView.ContentSize = new SizeF (SCREEN_WIDTH, (LINE_OFFSET * 6) + (CELL_HEIGHT * 11) + TEXT_LINE_HEIGHT);
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;

        }

        protected void ConfigureEventView ()
        {
            //people view
            var peopleDetailLabelView = contentView.ViewWithTag (PEOPLE_DETAIL_TAG) as UILabel;
            peopleDetailLabelView.Text =  "(" + c.attendees.Count + ")";

            //alert view
            var alertDetailLabelView = contentView.ViewWithTag (ALERT_DETAIL_TAG) as UILabel;
            alertDetailLabelView.Text =  UIntToString(c.Reminder);
            alertDetailLabelView.SizeToFit ();
            alertDetailLabelView.Frame = new RectangleF (SCREEN_WIDTH - alertDetailLabelView.Frame.Width - 34, 12.438f, alertDetailLabelView.Frame.Width, TEXT_LINE_HEIGHT);

            //phone view
            var phoneDetailLabelView = contentView.ViewWithTag (PHONE_DETAIL_TAG) as UILabel;
            phoneDetailLabelView.Text =  TempPhone;
            phoneDetailLabelView.SizeToFit ();
            phoneDetailLabelView.Frame = new RectangleF (SCREEN_WIDTH - phoneDetailLabelView.Frame.Width - 34, 12.438f, phoneDetailLabelView.Frame.Width, TEXT_LINE_HEIGHT);

        }

        protected void ConfigureDateView (string command)
        {
            if ("startOpen" == command) {
                START_PICKER_HEIGHT = 216;
                startIsOpening = true;
                startDivider.Hidden = false;
                LayoutView ();
                startDateOpen = true;

            }
            if ("startClose" == command) {
                START_PICKER_HEIGHT = 0;
                startDatePicker.Hidden = true;
                startIsOpening = false;
                startDivider.Hidden = true;
                LayoutView ();
                startDateOpen = false;
                startDateLabel.TextColor = A.Color_808080;
            }
            if ("endOpen" == command) {
                END_PICKER_HEIGHT = 216;
                endIsOpening = true;
                endDivider.Hidden = false;
                LayoutView ();
                endDateOpen = true;
            }
            if ("endClose" == command) {
                END_PICKER_HEIGHT = 0;
                endDatePicker.Hidden = true;
                endIsOpening = false;
                endDivider.Hidden = true;
                LayoutView ();
                endDateOpen = false;
                endDateLabel.TextColor = A.Color_808080;
            }



        }

        protected void AnimatePicker (int picker)
        {
            if (1 == picker) {
                UIView.Animate (.5, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        startDatePicker.Alpha = 1;
                    },
                    () => {
                        startDatePicker.Hidden = false;
                    }
                );
            }
            if (2 == picker) {
                UIView.Animate (.5, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        endDatePicker.Alpha = 1;
                    },
                    () => {
                        endDatePicker.Hidden = false;
                    }
                );
            }

        }

        public UIView AddLine (float offset, float yVal, float width, UIColor color)
        {
            var lineUIView = new UIView (new RectangleF (offset, yVal, width, .5f));
            lineUIView.BackgroundColor = color;
            return (lineUIView);
        }

        protected void SelectionChanged (UITextView textView)
        {
            // We want to scroll the caret rect into view
            var caretRect = textView.GetCaretRectForPosition (textView.SelectedTextRange.end);
            caretRect.Size = new SizeF (caretRect.Size.Width, caretRect.Size.Height + textView.TextContainerInset.Bottom);
            // Make sure our textview is big enough to hold the text
            var frame = textView.Frame;
            var frameBefore = frame;
            frame.Size = new SizeF (textView.ContentSize.Width, textView.ContentSize.Height);
            var frameAfter = frame;
            if (frameBefore.Height < frameAfter.Height) {
                DESCRIPTION_OFFSET += TEXT_LINE_HEIGHT;
                LayoutView ();
            }
            if (frameBefore.Height > frameAfter.Height) {
                DESCRIPTION_OFFSET -= TEXT_LINE_HEIGHT;
                LayoutView ();
            }

            textView.Frame = frame;
            // And update our enclosing scrollview for the new content size
            scrollView.ContentSize = contentView.Frame.Size;
            // Adjust the caretRect to be in our enclosing scrollview, and then scroll it
            caretRect.Y += textView.Frame.Y;
            scrollView.ScrollRectToVisible (caretRect, true);
        }

        public string UIntToString (uint min)
        {
            if (0 == min) {
                return "None";
            }
            if (1 == min) {
                return "At time of event";
            }
            if (5 == min) {
                return "5 min before";
            }
            if (15 == min) {
                return "15 min before";
            }
            if (30 == min) {
                return "30 min before";
            }
            if (60 == min) {
                return "1 hour before";
            }
            if (120 == min) {
                return "2 hours before";
            }
            if (1440 == min) {
                return "1 day before";
            }
            if (2880 == min) {
                return "2 days before";
            }
            if (20160 == min) {
                return "1 week before";
            }
            return "None";
        }

        protected void LayoutView ()
        {
            if (suppressLayout) {
                return;
            }

            UIView.Animate (0.2, () => {
                descriptionView.Frame = new RectangleF (0, 74, SCREEN_WIDTH, CELL_HEIGHT + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET);

                allDayView.Frame = new RectangleF (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET, SCREEN_WIDTH, CELL_HEIGHT);
                startView.Frame = new RectangleF (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 3) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET, SCREEN_WIDTH, CELL_HEIGHT + START_PICKER_HEIGHT);
                endView.Frame = new RectangleF (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 4) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT + END_PICKER_HEIGHT);

                if (!suppressLowerLayout) {
                    locationView.Frame = new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT);
                    phoneView.Frame = new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 6) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT);
                    attachmentsView.Frame = new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 7) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT);
                    peopleView.Frame = new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 8) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT);

                    alertsView.Frame = new RectangleF (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT);
                    calendarView.Frame = new RectangleF (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 10) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, CELL_HEIGHT);

                    line8.Frame = new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                    line9.Frame = new RectangleF (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 6) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                    line10.Frame = new RectangleF (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 7) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                    line11.Frame = new RectangleF (15, (LINE_OFFSET * 3) + (CELL_HEIGHT * 8) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                    line12.Frame = new RectangleF (0, (LINE_OFFSET * 3) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);

                    line13.Frame = new RectangleF (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 9) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                    line14.Frame = new RectangleF (0, (LINE_OFFSET * 4) + (CELL_HEIGHT * 10) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);

                    line15.Frame = new RectangleF (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 10) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                    line16.Frame = new RectangleF (0, (LINE_OFFSET * 5) + (CELL_HEIGHT * 11) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                }

                line3.Frame = new RectangleF (0, LINE_OFFSET + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET, SCREEN_WIDTH, .5f);

                line4.Frame = new RectangleF (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 2) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET, SCREEN_WIDTH, .5f);
                line5.Frame = new RectangleF (15, (LINE_OFFSET * 2) + (CELL_HEIGHT * 3) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET, SCREEN_WIDTH, .5f);
                line6.Frame = new RectangleF (15, (LINE_OFFSET * 2) + (CELL_HEIGHT * 4) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                line7.Frame = new RectangleF (0, (LINE_OFFSET * 2) + (CELL_HEIGHT * 5) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT, SCREEN_WIDTH, .5f);
                
            },
                () => {
                    if (startIsOpening) {
                        AnimatePicker (1);
                    } 
                    if (endIsOpening) {
                        AnimatePicker (2);
                    } 
                  
                });
            scrollView.Frame = new RectangleF (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            contentView.Frame = new RectangleF (0, 0, SCREEN_WIDTH, (LINE_OFFSET * 6) + (CELL_HEIGHT * 11) + TEXT_LINE_HEIGHT + DESCRIPTION_OFFSET + START_PICKER_HEIGHT + END_PICKER_HEIGHT);
            scrollView.ContentSize = contentView.Frame.Size;
        }

        protected void ExtractValues ()
        {
            c.Subject = titleField.Text;
            //c.Description = descriptionTextView.Text;
            c.AllDayEvent = allDayEvent;
            c.StartTime = startDate;
            c.EndTime = endDate;
            // c.attendees is already set via PullAttendees
            //c.Phone = phoneDetailLabel.Text;
            c.Location = locationField.Text;

            folder = calendars.GetFolder (calendarIndex);
            // Extras
            c.OrganizerName = Pretty.DisplayNameForAccount (account);
            c.OrganizerEmail = account.EmailAddr;
            c.AccountId = account.Id;
            c.DtStamp = DateTime.UtcNow;
            if (0 == c.attendees.Count) {
                c.MeetingStatusIsSet = true;
                c.MeetingStatus = NcMeetingStatus.Appointment;
                c.ResponseRequested = false;
                c.ResponseRequestedIsSet = true;
            } else {
                c.MeetingStatusIsSet = true;
                c.MeetingStatus = NcMeetingStatus.Meeting;
                c.ResponseRequested = true;
                c.ResponseRequestedIsSet = true;
            }
            // Timezone
//            var tzid = RadioElementWithData.SelectedData (timezoneEntryElement);
//            var tzi = TimeZoneInfo.FindSystemTimeZoneById (tzid);
//            var tz = new AsTimeZone (tzi);
//            c.TimeZone = tz.toEncodedTimeZone ();
            c.TimeZone = TimeZone.CurrentTimeZone.ToString();
            if (String.IsNullOrEmpty (c.UID)) {
                c.UID = System.Guid.NewGuid ().ToString ().Replace ("-", null).ToUpper ();
            }

        }

        protected void SyncMeetingRequest ()
        {
            // TODO: If calendar changes folders
            if (0 == c.Id) {
                c.Insert (); // new entry
                folder.Link (c);
                BackEnd.Instance.CreateCalCmd (account.Id, c.Id, folder.Id);
            } else {
                c.Update ();
                BackEnd.Instance.UpdateCalCmd (account.Id, c.Id);
            }

        }

        /// <summary>
        /// Sends the message. Message (UID) must already exist in EAS.
        /// </summary>
        protected void SendInvites ()
        {
            //var tzid = RadioElementWithData.SelectedData (timezoneEntryElement);

            CalendarHelper.SendInvites (account, c, "Local");
        }
    }
}
