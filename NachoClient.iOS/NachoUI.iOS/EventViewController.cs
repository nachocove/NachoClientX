// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using System.IO;
using System.Drawing;
using System.Collections.Generic;
using MimeKit;

using NachoCore.Model;
using NachoCore.Utils;
using NachoPlatform;
using SWRevealViewControllerBinding;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;

using NachoCore;
using NachoCore.ActiveSync;

using MonoTouch.MapKit;

namespace NachoClient.iOS
{
    public partial class EventViewController : NcUIViewController, INachoCalendarItemEditor, INachoAttendeeListChooserDelegate, INachoAttachmentListChooserDelegate
    {
        protected INachoCalendarItemEditorParent owner;
        protected CalendarItemEditorAction action;
        protected McCalendar item;
        protected McCalendar c;
        protected McFolder folder;
        protected McAccount account;
        protected NachoFolders calendars;
        protected string TempPhone = "";
        protected int calendarIndex = 0;

        protected List<McAttendee> PresetAttendees;
        protected bool PresetsWereSet = false;

        List<McAttachment> attachments = new List<McAttachment> ();

        protected UIView EventInfoView;
        protected UIImageView MapImage;
        protected MKMapView map;

        UIView eventAttendeeView;

        UIView eventAlertsView;
        UIView eventAttachmentsView;
        UIView eventNotesView;

        UIColor separatorColor = A.Color_NachoSeparator;
        protected static float SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected int LINE_OFFSET = 30;
        protected int CELL_HEIGHT = 44;
        protected int START_PICKER_HEIGHT = 0;
        protected int END_PICKER_HEIGHT = 0;
        protected float TEXT_LINE_HEIGHT = 19.124f;
        protected float DESCRIPTION_OFFSET = 0f;
        public float IMAGE_HEIGHT = SCREEN_WIDTH / 2 - 45;
        protected float TOOL_BAR_HEIGHT = 65f;
        protected float keyboardHeight;
        protected bool suppressLayout = false;
        protected bool suppressLowerLayout = false;
        protected bool startDateOpen = false;
        protected bool endDateOpen = false;
        protected bool startIsOpening = false;
        protected bool endIsOpening = false;
        protected bool endChanged = false;
        protected bool allDayEvent = false;
        protected bool eventEditStarted = false;
        protected bool isRecurring = false;

        protected bool createEvent = false;
        protected bool displayEvent = false;
        protected bool editEvent = false;

        public bool showMenu;
        protected UIView line1;
        protected UIView line2;
        protected UIView line3;
        protected UIView line4;
        protected UIView line5;
        protected UIView line6;
        protected UIView line7;
        protected UIView line8;
        protected UIView line9;
        protected UIView line10;
        protected UIView line11;
        protected UIView line12;
        protected UIView line13;
        protected UIView line14;
        protected UIView line15;
        protected UIView line16;
        protected UIView strikethrough;
        protected UIView endDivider;
        protected UIView startDivider;
        protected UIColor solidTextColor = A.Color_NachoBlack;

        const int ALL_DAY_SWITCH_TAG = 200;
        const int START_DATE_TAG = 201;
        const int END_DATE_TAG = 202;
        const int LOCATION_DETAIL_TAG = 203;
        const int PHONE_DETAIL_TAG = 204;
        const int ATTACHMENTS_DETAIL_TAG = 205;
        const int PEOPLE_DETAIL_TAG = 206;
        const int ALERT_DETAIL_TAG = 207;
        const int CAL_DETAIL_TAG = 210;

        const int EVENT_TITLE_LABEL_TAG = 101;
        const int EVENT_DESCRIPTION_LABEL_TAG = 102;
        const int EVENT_LOCATION_DETAIL_LABEL_TAG = 103;
        const int EVENT_WHEN_DETAIL_LABEL_TAG = 104;
        const int EVENT_PHONE_DETAIL_BUTTON_TAG = 105;
        const int EVENT_ATTENDEE_TAG = 106;
        const int EVENT_ATTENDEE_DETAIL_TAG = 110;
        const int EVENT_ATTENDEE_LABEL_TAG = 120;
        const int EVENT_ATTACHMENT_DETAIL_TAG = 121;

        protected static TupleList<uint, string> minList = new TupleList<uint, string> {
            { 0, "None" },
            { 1, "At time of event" },
            { 5, "5 min before" },
            { 15, "15 min before" },
            { 30, "30 min before" },
            { 60, "1 hour before" },
            { 120, "2 hours before" },
            { 1440, "1 day before" },
            { 2880, "2 days before" },
            { 10080, "1 week before" },
        };

        public EventViewController (IntPtr handle) : base (handle)
        {
        }

        public EventViewController ()
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            MakeToolbar ();
            var g = new UITapGestureRecognizer (() => View.EndEditing (true));
            contentView.AddGestureRecognizer (g);

            account = NcModel.Instance.Db.Table<McAccount> ().Where (x => x.AccountType == McAccount.AccountTypeEnum.Exchange).FirstOrDefault ();
            calendars = new NachoFolders (NachoFolders.FilterForCalendars);

            switch (action) {
            case CalendarItemEditorAction.view:
                item = McCalendar.QueryById<McCalendar> (item.Id);
                c = item;
                if (0 != c.recurrences.Count) {
                    isRecurring = true;
                }
                CreateEventView ();
                break;
            default:
                NcAssert.CaseError ();
                break;
            }

        }

        public void SetEventPresetFields (List<McAttendee> attendees)
        {
            PresetAttendees = attendees;
            PresetsWereSet = true;
        }

        protected void ToggleButtons ()
        {
            acceptButton.Selected = false;
            declineButton.Selected = false;
            tentativeButton.Selected = false;
        }

        public void SetCalendarItem (McCalendar item, CalendarItemEditorAction action)
        {
            this.item = item;
            this.action = action;
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;

            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
            }
 
            ConfigureEventView ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
        }

        /// <summary>
        /// Interface INachoCalendarItemEditor
        /// </summary>
        /// <param name="owner">Owner.</param>
        public void SetOwner (INachoCalendarItemEditorParent owner)
        {
            this.owner = owner;
        }

        /// <summary>
        /// Interface INachoCalendarItemEditor
        /// </summary>
        /// <param name="animated">If set to <c>true</c> animated.</param>
        /// <param name="action">Action.</param>
        public void DismissCalendarItemEditor (bool animated, NSAction action)
        {
            owner = null;
            NavigationController.PopViewControllerAnimated (true);
        }

        protected string MyCalendarName (McCalendar c)
        {
            var candidates = McFolder.QueryByFolderEntryId<McCalendar> (account.Id, c.Id);
            if ((null == candidates) || (0 == candidates.Count)) {
                return "None";
            } else {
                return candidates.First ().DisplayName;
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("EventToAttendee")) {
                var dc = (AttendeeViewController)segue.DestinationViewController;
                dc.SetAttendeeList (c.attendees);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    c.attendees = dc.GetAttendeeList ();
                    ConfigureEventView ();
                };
                return;
            }

            if (segue.Identifier.Equals ("EventToFiles")) {
                var dc = (FilesHierarchyViewController)segue.DestinationViewController;
                //dc.SetOwner (this);
                return;
            }

            if (segue.Identifier.Equals ("EventToEventAttendees")) {
                var dc = (EventAttendeeViewController)segue.DestinationViewController;
                dc.SetOwner (this, c.attendees, c, false);
                return;
            }

            if (segue.Identifier.Equals ("EventToAlert")) {
                var dc = (AlertChooserViewController)segue.DestinationViewController;
                dc.SetReminder (c.Reminder);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    c.Reminder = dc.GetReminder ();
                    SyncMeetingRequest ();
                    ScheduleNotification();
                    ConfigureEventView ();
                };
                return;
            }

            if (segue.Identifier.Equals ("EventToPhone")) {
                var dc = (PhoneViewController)segue.DestinationViewController;
                dc.SetPhone (TempPhone);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    TempPhone = dc.GetPhone ();
                    ConfigureEventView ();
                };
                return;
            }

            if (segue.Identifier.Equals ("EventToCal")) {
                var dc = (ChooseCalendarViewController)segue.DestinationViewController;
                dc.SetCalendars (calendars);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    calendarIndex = dc.GetCalIndex ();
                    ConfigureEventView ();
                };
                return;
            }

            if (segue.Identifier.Equals ("EventToAttachment")) {
                var dc = (EventAttachmentViewController)segue.DestinationViewController;
                if (createEvent) {
                    dc.SetOwner (this, attachments, c, true);
                } else {
                    dc.SetOwner (this, attachments, c, false);
                }
                return;
            }

            if (segue.Identifier.Equals ("EventToNotes")) {
                var dc = (NotesViewController)segue.DestinationViewController;
                dc.SetEvent (item);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    displayEvent = true;
                };
                return;
            }

            if (segue.Identifier.Equals ("EventToEditEvent")) {
                var dc = (EditEventViewController)segue.DestinationViewController;
                dc.SetCalendarItem (item, CalendarItemEditorAction.edit);
                dc.ViewDisappearing += (object s, EventArgs e) => {
                    displayEvent = true;
                };
                return;
            }

            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }


        protected void CreateEventView ()
        {

                    

            //NavigationItem.LeftBarButtonItem = null;
            NavigationItem.RightBarButtonItem = editButton;
            editButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("EventToEditEvent", this);
            };
            NavigationItem.Title = "Event Details";

            //Map/location header image
            map = new MKMapView (new RectangleF (0, 0, SCREEN_WIDTH, IMAGE_HEIGHT));
            map.ZoomEnabled = false;
            map.ScrollEnabled = false;

//                if (map != null) {
//                    contentView.AddSubview (map);
//                } else {
//                    IMAGE_HEIGHT = 0;
//                }
            IMAGE_HEIGHT = 0;

            //event view
            EventInfoView = new UIView (new RectangleF (0, IMAGE_HEIGHT, SCREEN_WIDTH, 700));
            EventInfoView.BackgroundColor = UIColor.White;

            //title label
            UILabel eventTitleLabel = new UILabel (new RectangleF (25, 19, SCREEN_WIDTH - 50, 18));
            eventTitleLabel.Font = A.Font_AvenirNextDemiBold17;
            eventTitleLabel.TextColor = A.Color_NachoBlack;
            eventTitleLabel.Tag = EVENT_TITLE_LABEL_TAG;
            EventInfoView.Add (eventTitleLabel);

            //desciption label
            AddDetailTextLabel (25, 43, SCREEN_WIDTH - 50, 15, EVENT_DESCRIPTION_LABEL_TAG, EventInfoView);

            //location label, image and detail
            AddTextLabelWithImage (45, 78, SCREEN_WIDTH - 50, 15, "Location", UIImage.FromBundle ("icn-mtng-location"), 77, EventInfoView);
            AddDetailTextLabel (25, 103, SCREEN_WIDTH - 50, 15, EVENT_LOCATION_DETAIL_LABEL_TAG, EventInfoView);

            //when label, image and detail
            AddTextLabelWithImage (45, 135, SCREEN_WIDTH - 50, 15, "When", UIImage.FromBundle ("icn-mtng-time"), 134, EventInfoView);
            AddDetailTextLabel (25, 160, SCREEN_WIDTH - 50, 15, EVENT_WHEN_DETAIL_LABEL_TAG, EventInfoView);
            AddDetailTextLabel (25, 180, SCREEN_WIDTH - 50, 15, 500, EventInfoView);
            AddDetailTextLabel (25, 200, SCREEN_WIDTH - 50, 30, 600, EventInfoView);
            float RECURRING_OFFEST = 0f;
            if (isRecurring) {
                RECURRING_OFFEST = 40f;
            } 

            //phone label, image and detail
            AddTextLabelWithImage (45, RECURRING_OFFEST + 20 + 135 + 57, SCREEN_WIDTH - 50, 15, "Phone", UIImage.FromBundle ("icn-mtng-phone"), RECURRING_OFFEST + 20 + 134 + 57, EventInfoView);

            UIButton eventPhoneDetailButton = new UIButton (new RectangleF (25, RECURRING_OFFEST + 20 + 160 + 57, SCREEN_WIDTH - 50, 15));
            eventPhoneDetailButton.Font = A.Font_AvenirNextRegular14;
            eventPhoneDetailButton.SetTitleColor (UIColor.LightGray, UIControlState.Normal);
            eventPhoneDetailButton.Tag = EVENT_PHONE_DETAIL_BUTTON_TAG;
            eventPhoneDetailButton.HorizontalAlignment = UIControlContentHorizontalAlignment.Left;
            eventPhoneDetailButton.TouchUpInside += (object sender, EventArgs e) => {
                var urlToSend = new NSUrl ("tel:" + "5036861654"); 
                UIApplication.SharedApplication.OpenUrl (urlToSend);
            };
            EventInfoView.Add (eventPhoneDetailButton);  

            //attendees label, image and detail
            AddTextLabelWithImage (45, RECURRING_OFFEST + 20 + 135 + 57 + 57, SCREEN_WIDTH - 50, 15, "Attendees", UIImage.FromBundle ("icn-mtng-people"), RECURRING_OFFEST + 20 + 134 + 57 + 57, EventInfoView);

            eventAttendeeView = new UIView (new RectangleF (0, RECURRING_OFFEST + 20 + 135 + 57 + 57 + 15, SCREEN_WIDTH, 96));
            var attendeeTap = new UITapGestureRecognizer ();
            attendeeTap.AddTarget (() => {
                PerformSegue ("EventToEventAttendees", this);
            });
            eventAttendeeView.AddGestureRecognizer (attendeeTap);
            EventInfoView.Add (eventAttendeeView);
            CreateAttendeesButtons (eventAttendeeView);

            //////////////////////
            /// Bottom three cells
            //////////////////////

            //alerts 
            eventAlertsView = new UIView (new RectangleF (0, RECURRING_OFFEST + 20 + 245 + IMAGE_HEIGHT + 115, SCREEN_WIDTH, CELL_HEIGHT));
            eventAlertsView.BackgroundColor = UIColor.White;

            UIImageView alertsAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 14, 10, 16));
            alertsAccessoryImage.Image = Util.MakeArrow (A.Color_NachoBlue);
            eventAlertsView.AddSubview (alertsAccessoryImage);

            AddTextLabel (23, 12.438f, 70, TEXT_LINE_HEIGHT, "Alerts", eventAlertsView);

            UILabel alertsDetailLabel = new UILabel ();
            alertsDetailLabel.Text = "None";
            alertsDetailLabel.Tag = ALERT_DETAIL_TAG;
            alertsDetailLabel.SizeToFit ();
            alertsDetailLabel.TextAlignment = UITextAlignment.Right;
            alertsDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - alertsDetailLabel.Frame.Width - 34, 12.438f, alertsDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            alertsDetailLabel.Font = A.Font_AvenirNextRegular14;
            alertsDetailLabel.TextColor = A.Color_808080;
            eventAlertsView.AddSubview (alertsDetailLabel);

            var alertTap = new UITapGestureRecognizer ();
            alertTap.AddTarget (() => {
                PerformSegue ("EventToAlert", this);
            });
            eventAlertsView.AddGestureRecognizer (alertTap);
            EventInfoView.Add (eventAlertsView);

            //attachments
            eventAttachmentsView = new UIView (new RectangleF (0, RECURRING_OFFEST + 20 + 245 + IMAGE_HEIGHT + CELL_HEIGHT + 115, SCREEN_WIDTH, CELL_HEIGHT));
            eventAttachmentsView.BackgroundColor = UIColor.White;

            UIImageView attachmentAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 14, 10, 16));
            attachmentAccessoryImage.Image = Util.MakeArrow (A.Color_NachoBlue);
            eventAttachmentsView.AddSubview (attachmentAccessoryImage);

            AddTextLabelWithImage (45, 12.438f, 100, TEXT_LINE_HEIGHT, "Attachments", UIImage.FromBundle ("icn-mtng-attachment"), 14.5f, eventAttachmentsView);

            UILabel attachmentDetailLabel = new UILabel ();
            attachmentDetailLabel.Text = "(0)";
            attachmentDetailLabel.Tag = EVENT_ATTACHMENT_DETAIL_TAG;
            attachmentDetailLabel.SizeToFit ();
            attachmentDetailLabel.TextAlignment = UITextAlignment.Right;
            attachmentDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - attachmentDetailLabel.Frame.Width - 34, 12.438f, attachmentDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            attachmentDetailLabel.Font = A.Font_AvenirNextRegular14;
            attachmentDetailLabel.TextColor = A.Color_808080;
            eventAttachmentsView.AddSubview (attachmentDetailLabel);

            var attachmentTap = new UITapGestureRecognizer ();
            attachmentTap.AddTarget (() => {
                PerformSegue ("EventToAttachment", this);
            });
            eventAttachmentsView.AddGestureRecognizer (attachmentTap);
            EventInfoView.Add (eventAttachmentsView);

            //notes
            eventNotesView = new UIView (new RectangleF (0, RECURRING_OFFEST + 20 + 245 + IMAGE_HEIGHT + 115 + (CELL_HEIGHT * 2), SCREEN_WIDTH, CELL_HEIGHT));
            eventNotesView.BackgroundColor = UIColor.White;

            UIImageView notesAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 14, 10, 16));
            notesAccessoryImage.Image = Util.MakeArrow (A.Color_NachoBlue);
            eventNotesView.AddSubview (notesAccessoryImage);

            UIImageView notesImage = new UIImageView (new RectangleF (23, 14.5f, 15, 15));
            notesImage.Image = UIImage.FromBundle ("icn-mtng-notes");
            eventNotesView.AddSubview (notesImage);

            AddTextLabel (45, 12.438f, 100, TEXT_LINE_HEIGHT, "Notes", eventNotesView);

            UILabel notesDetailLabel = new UILabel ();
            notesDetailLabel.Tag = EVENT_ATTACHMENT_DETAIL_TAG;
            notesDetailLabel.SizeToFit ();
            notesDetailLabel.TextAlignment = UITextAlignment.Right;
            notesDetailLabel.Frame = new RectangleF (SCREEN_WIDTH - notesDetailLabel.Frame.Width - 34, 12.438f, notesDetailLabel.Frame.Width, TEXT_LINE_HEIGHT);
            notesDetailLabel.Font = A.Font_AvenirNextRegular14;
            notesDetailLabel.TextColor = A.Color_808080;
            eventNotesView.AddSubview (notesDetailLabel);

            var notesTap = new UITapGestureRecognizer ();
            notesTap.AddTarget (() => {
                PerformSegue ("EventToNotes", this);
            });
            eventNotesView.AddGestureRecognizer (notesTap);
            EventInfoView.Add (eventNotesView);

            for (int i = 0; i < 4; i++) {
                AddLine (23f, RECURRING_OFFEST + 20 + 245 + IMAGE_HEIGHT + 115 + (CELL_HEIGHT * i), SCREEN_WIDTH, separatorColor, EventInfoView);
            }

            //Content View
            contentView.Add (EventInfoView);
            contentView.Frame = new RectangleF (0, 0, SCREEN_WIDTH, 700);
            contentView.BackgroundColor = UIColor.White;

            //Scroll View
            scrollView.BackgroundColor = UIColor.White;
            scrollView.ContentSize = new SizeF (SCREEN_WIDTH, RECURRING_OFFEST + 20 + 608 + 20 - 115);
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;


        }

        protected void ConfigureEventView ()
        {

            item = McCalendar.QueryById<McCalendar> (item.Id);
            c = item;

            if (c.ResponseRequested) {
                this.NavigationController.ToolbarHidden = false;
            }
            contentView.BackgroundColor = UIColor.White;

            //title view
            var titleLabelView = View.ViewWithTag (EVENT_TITLE_LABEL_TAG) as UILabel;
            titleLabelView.Text = c.Subject;

            //description view
            var descriptionLabelView = View.ViewWithTag (EVENT_DESCRIPTION_LABEL_TAG) as UILabel;
            descriptionLabelView.Text = "Description";
            //descriptionLabelView.Text = c.Description;

            //location view
            var locationLabelView = View.ViewWithTag (EVENT_LOCATION_DETAIL_LABEL_TAG) as UILabel;
            if (null != c.Location & "" != c.Location) {
                locationLabelView.Text = c.Location;
            } else {
                locationLabelView.Text = "Not specified";
            }

            //when view
            var whenLabelView = View.ViewWithTag (EVENT_WHEN_DETAIL_LABEL_TAG) as UILabel;
            whenLabelView.Text = Pretty.ExtendedDateString (c.StartTime);
            //whenLabelView.Text = "3pm to 4pm PDT - Duration: 1 Hour";
            //whenLabelView.Text = TODO;

            var durationLabelView = View.ViewWithTag (500) as UILabel;
            if (!c.AllDayEvent) {
                if (c.StartTime.DayOfYear == c.EndTime.DayOfYear) {
                    durationLabelView.Text = "from " + Pretty.FullTimeString (c.StartTime) + " until " + Pretty.FullTimeString (c.EndTime);
                } else {
                    durationLabelView.Text = "from " + Pretty.FullTimeString (c.StartTime) + " until " + Pretty.FullDateTimeString (c.EndTime);
                }
            } else {
                if (c.StartTime.DayOfYear == c.EndTime.DayOfYear) {
                    durationLabelView.Text = "all day event";
                } else {
                    durationLabelView.Text = "from " + Pretty.FullDateString (c.StartTime) + " until " + Pretty.FullDateString (c.EndTime);
                }
            }

            var recurrenceLabelView = View.ViewWithTag (600) as UILabel;
            if (isRecurring) {
                recurrenceLabelView.Text = MakeRecurrenceString (c.recurrences);

                recurrenceLabelView.Lines = 0;
                recurrenceLabelView.LineBreakMode = UILineBreakMode.WordWrap;
                recurrenceLabelView.SizeToFit ();
            }

            //phone view
            var phoneButtonView = View.ViewWithTag (EVENT_PHONE_DETAIL_BUTTON_TAG) as UIButton;
            //phoneButtonView.SetTitle (c.Phone, UIControlState.Normal);
            phoneButtonView.SetTitle ("Not available", UIControlState.Normal);
            phoneButtonView.Enabled = false;

            //alert view
            var alertDetailLabelView = contentView.ViewWithTag (ALERT_DETAIL_TAG) as UILabel;
            alertDetailLabelView.Text = UIntToString (c.Reminder);
            alertDetailLabelView.SizeToFit ();
            alertDetailLabelView.Frame = new RectangleF (SCREEN_WIDTH - alertDetailLabelView.Frame.Width - 34, 12.438f, alertDetailLabelView.Frame.Width, TEXT_LINE_HEIGHT);

            // Attendee image view
            CreateAttendeesButtons (eventAttendeeView);
            if (5 < c.attendees.Count ()) {
                int i = 0;
                while (i < 4) {
                    var attendeeButtonView = View.ViewWithTag (EVENT_ATTENDEE_TAG + i) as UIButton;
                    attendeeButtonView.SetTitle (Util.NameToLetters (c.attendees.ElementAt (i).DisplayName), UIControlState.Normal);
                       
                    var circleColor = GetCircleColorForEmail (c.attendees.ElementAt (i).Email);
                    attendeeButtonView.Layer.BackgroundColor = circleColor.CGColor;

                    var attendeeLabelView = View.ViewWithTag (EVENT_ATTENDEE_LABEL_TAG + i) as UILabel;
                    attendeeLabelView.Text = Util.GetFirstName (c.attendees.ElementAt (i).DisplayName);

                    var attendeeResponseImageView = View.ViewWithTag (EVENT_ATTENDEE_LABEL_TAG + i + 100) as UIImageView;
                    if (null != GetImageForAttendeeResponse (c.attendees.ElementAt (i))) {
                        attendeeResponseImageView.Image = GetImageForAttendeeResponse (c.attendees.ElementAt (i));
                    }
                    i++;
                }
                var attendeeDetailButtonView = View.ViewWithTag (EVENT_ATTENDEE_DETAIL_TAG) as UIButton;
                attendeeDetailButtonView.SetTitle ("+" + (c.attendees.Count () - 4), UIControlState.Normal);
            } else {
                int i = 0;
                while (i < c.attendees.Count ()) {
                    var attendeeButtonView = View.ViewWithTag (EVENT_ATTENDEE_TAG + i) as UIButton;
                    attendeeButtonView.SetTitle (Util.NameToLetters (c.attendees.ElementAt (i).DisplayName), UIControlState.Normal);

                    var circleColor = GetCircleColorForEmail (c.attendees.ElementAt (i).Email);
                    attendeeButtonView.Layer.BackgroundColor = circleColor.CGColor;

                    var attendeeLabelView = View.ViewWithTag (EVENT_ATTENDEE_LABEL_TAG + i) as UILabel;
                    attendeeLabelView.Text = Util.GetFirstName (c.attendees.ElementAt (i).DisplayName);

                    var attendeeResponseImageView = View.ViewWithTag (EVENT_ATTENDEE_LABEL_TAG + i + 100) as UIImageView;
                    if (null != GetImageForAttendeeResponse (c.attendees.ElementAt (i))) {
                        attendeeResponseImageView.Image = GetImageForAttendeeResponse (c.attendees.ElementAt (i));
                    }
                    i++;
                }
            }

        }

        public UIView AddLineView (float offset, float yVal, float width, UIColor color)
        {
            var lineUIView = new UIView (new RectangleF (offset, yVal, width, .5f));
            lineUIView.BackgroundColor = color;
            return lineUIView;
        }

        public void AddLine (float offset, float yVal, float width, UIColor color, UIView parentView)
        {
            var lineUIView = new UIView (new RectangleF (offset, yVal, width, .5f));
            lineUIView.BackgroundColor = color;
            parentView.Add (lineUIView);
        }

        public void AddTextLabel (float xOffset, float yOffset, float width, float height, string text, UIView parentView)
        {
            var textLabel = new UILabel (new RectangleF (xOffset, yOffset, width, height));
            textLabel.Text = text;
            textLabel.Font = A.Font_AvenirNextRegular14;
            textLabel.TextColor = solidTextColor;
            parentView.AddSubview (textLabel);
        }

        public void AddTextLabelWithImage (float xOffset, float yOffset, float width, float height, string text, UIImage image, float imageOffset, UIView parentView)
        {
            var textLabel = new UILabel (new RectangleF (xOffset, yOffset, width, height));
            textLabel.Text = text;
            textLabel.Font = A.Font_AvenirNextRegular14;
            textLabel.TextColor = solidTextColor;
            parentView.AddSubview (textLabel);

            UIImageView theImage = new UIImageView (new RectangleF ((xOffset - 22), imageOffset, 15, 15));
            theImage.Image = image;
            parentView.Add (theImage);
        }

        public void AddDetailTextLabel (float xOffset, float yOffset, float width, float height, int tag, UIView parentView)
        {
            UILabel DetailTextLabel = new UILabel (new RectangleF (xOffset, yOffset, width, height));
            DetailTextLabel.Font = A.Font_AvenirNextRegular14;

            DetailTextLabel.TextColor = UIColor.LightGray;
            DetailTextLabel.Tag = tag;
            parentView.Add (DetailTextLabel);
        }

        public void AttendeeNameLabel (float xOffset, float yOffset, float width, float height, int tag, UIView parentView)
        {
            UILabel NameLabel = new UILabel (new RectangleF (xOffset, yOffset, width, height));
            NameLabel.Font = A.Font_AvenirNextRegular14;
            NameLabel.TextColor = UIColor.LightGray;
            NameLabel.Tag = tag;
            NameLabel.TextAlignment = UITextAlignment.Center;
            parentView.Add (NameLabel);
        }

        public void AttendeeButton (float xOffset, float yOffset, float width, float height, int tag, UIView parentView)
        {
            UIButton attendeeButton = UIButton.FromType (UIButtonType.RoundedRect);
            attendeeButton.Layer.CornerRadius = (45 / 2);
            attendeeButton.Layer.MasksToBounds = true;
            attendeeButton.Frame = new RectangleF (xOffset, yOffset, width, height);
            attendeeButton.Font = A.Font_AvenirNextRegular24;
            attendeeButton.ShowsTouchWhenHighlighted = true;
            attendeeButton.SetTitleColor (UIColor.White, UIControlState.Normal);
            attendeeButton.SetTitleColor (UIColor.LightGray, UIControlState.Selected);
            attendeeButton.Tag = tag;
            attendeeButton.TouchUpInside += (object sender, EventArgs e) => {
                //                var identifer = buttonInfo.segueIdentifier;
                //                PerformSegue (identifer, new SegueHolder (null));
            };
            parentView.Add (attendeeButton);
        }

        public void MakeEmptyCircle (UIView parentView)
        {
            var attendeeResponseView = new UIView (new RectangleF (2.5f, 2.5f, 15, 15));
            attendeeResponseView.BackgroundColor = UIColor.White;
            attendeeResponseView.Layer.CornerRadius = 15 / 2;
            attendeeResponseView.Layer.BorderColor = A.Color_NachoSeparator.CGColor;
            attendeeResponseView.Layer.BorderWidth = 1;
            parentView.Add (attendeeResponseView);
        }

        public UIColor GetCircleColorForEmail (string displayEmailAddress)
        {
            int colorIndex = 1;

            if (!String.IsNullOrEmpty (displayEmailAddress)) {
                McEmailAddress emailAddress;
                if (McEmailAddress.Get (account.Id, displayEmailAddress, out emailAddress)) {
                    displayEmailAddress = emailAddress.CanonicalEmailAddress;
                    colorIndex = emailAddress.ColorIndex;
                }
            }

            return Util.ColorForUser (colorIndex);
        }

        public void CreateAttendeesButtons (UIView parentView)
        {

            ClearView (parentView);
            int counter = 0;
            int SPACING = 0;

            UIImageView attendeesAccessoryImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 23, 24.5f, 10, 16));
            attendeesAccessoryImage.Image = Util.MakeArrow (A.Color_NachoBlue);

            if (0 == c.attendees.Count) {
                UILabel noAttendeeDetailTextLabel = new UILabel (new RectangleF (25, 10, SCREEN_WIDTH - 50, 15));
                noAttendeeDetailTextLabel.Font = A.Font_AvenirNextRegular14;
                noAttendeeDetailTextLabel.Text = "This event has no attendees";
                noAttendeeDetailTextLabel.TextColor = UIColor.LightGray;
                parentView.Add (noAttendeeDetailTextLabel);
            } else if (5 >= c.attendees.Count) {
                foreach (var attendee in c.attendees) {
                    AttendeeButton (23 + SPACING, 10, 45, 45, EVENT_ATTENDEE_TAG + counter, parentView);
                    AttendeeNameLabel (23 + SPACING, 65, 45, 15, EVENT_ATTENDEE_LABEL_TAG + counter, parentView);

                    var attendeeResponseView = new UIView (new RectangleF (23 + SPACING + 27, 37, 20, 20));
                    attendeeResponseView.Tag = EVENT_ATTENDEE_LABEL_TAG + counter + 200;
                    attendeeResponseView.BackgroundColor = UIColor.White;
                    attendeeResponseView.Layer.CornerRadius = 10;

                    MakeEmptyCircle (attendeeResponseView);

                    UIImageView responseImageView = new UIImageView (new RectangleF (2.5f, 2.5f, 15, 15));
                    responseImageView.Tag = EVENT_ATTENDEE_LABEL_TAG + counter + 100;
                    attendeeResponseView.Add (responseImageView);
                    parentView.Add (attendeeResponseView);

                    counter++;
                    SPACING = SPACING + 55;
                }
                parentView.Add (attendeesAccessoryImage);
            } else {
                foreach (var attendee in c.attendees) {
                    AttendeeButton (23 + SPACING, 10, 45, 45, EVENT_ATTENDEE_TAG + counter, parentView);
                    AttendeeNameLabel (23 + SPACING, 65, 45, 15, EVENT_ATTENDEE_LABEL_TAG + counter, parentView);

                    var attendeeResponseView = new UIView (new RectangleF (23 + SPACING + 27, 37, 20, 20));
                    attendeeResponseView.Tag = EVENT_ATTENDEE_LABEL_TAG + counter + 200;
                    attendeeResponseView.BackgroundColor = UIColor.White;
                    attendeeResponseView.Layer.CornerRadius = 10;

                    MakeEmptyCircle (attendeeResponseView);

                    UIImageView responseImageView = new UIImageView (new RectangleF (2.5f, 2.5f, 15, 15));
                    responseImageView.Tag = EVENT_ATTENDEE_LABEL_TAG + counter + 100;
                    attendeeResponseView.Add (responseImageView);
                    parentView.Add (attendeeResponseView);

                    counter++;
                    if (4 == counter) {
                        break;
                    }
                    SPACING = SPACING + 55;
                }
                UIButton eventAttendeeDetailButton = UIButton.FromType (UIButtonType.RoundedRect);
                eventAttendeeDetailButton.Layer.CornerRadius = (45 / 2);
                eventAttendeeDetailButton.Layer.MasksToBounds = true;
                eventAttendeeDetailButton.Layer.BorderColor = A.Color_NachoBlack.CGColor;
                eventAttendeeDetailButton.Layer.BorderWidth = 1;
                eventAttendeeDetailButton.Frame = new RectangleF (243, 10, 45, 45);
                eventAttendeeDetailButton.Font = A.Font_AvenirNextRegular14;
                eventAttendeeDetailButton.SetTitleColor (A.Color_NachoBlack, UIControlState.Normal);
                eventAttendeeDetailButton.SetTitleColor (UIColor.LightGray, UIControlState.Selected);
                eventAttendeeDetailButton.Tag = EVENT_ATTENDEE_DETAIL_TAG;
                eventAttendeeDetailButton.TouchUpInside += (object sender, EventArgs e) => {
                    PerformSegue ("EventToEventAttendees", this);
                };
                parentView.Add (attendeesAccessoryImage);
                parentView.Add (eventAttendeeDetailButton);
            }


        }

        public UIImage GetImageForAttendeeResponse (McAttendee attendee)
        {
            var reponseImage = new UIImage ();
            if (attendee.AttendeeStatus == NcAttendeeStatus.Accept) {
                reponseImage = UIImage.FromBundle ("btn-mtng-accept-pressed");
                return reponseImage;
            }
            if (attendee.AttendeeStatus == NcAttendeeStatus.Tentative) {
                reponseImage = UIImage.FromBundle ("btn-mtng-tenative-pressed");
                return reponseImage;
            }
            if (attendee.AttendeeStatus == NcAttendeeStatus.Decline) {
                reponseImage = UIImage.FromBundle ("btn-mtng-decline-pressed");
                return reponseImage;
            }
            return null;
        }

        public void ClearView (UIView parentView)
        {
            foreach (var s in parentView.Subviews) {
                s.RemoveFromSuperview ();
            }
        }

        public void DismissView (bool fromMenu)
        {
            if (fromMenu) {
                this.RevealViewController ().RevealToggle (this);
            } else {
                NavigationController.PopViewControllerAnimated (true);
            }
            View.EndEditing (true);
        }

        public void MakeToolbar ()
        {
            NavigationController.Toolbar.BarTintColor = A.Color_NachoBlack;

            //acceptButton
            using (var acceptButtonImage = UIImage.FromBundle ("btn-mtng-accept")) {
                acceptButton.SetImage (acceptButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
            }
            using (var acceptPressedButtonImage = UIImage.FromBundle ("btn-mtng-accept-pressed")) {
                acceptButton.SetImage (acceptPressedButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Selected);
            }
            acceptButton.SetTitle ("", UIControlState.Normal);
            acceptButton.Frame = new RectangleF (25, 10, 24, 24);
            acceptButton.TintColor = UIColor.Clear;

            //tentativeButton
            using (var tentativeButtonImage = UIImage.FromBundle ("btn-mtng-tenative")) {
                tentativeButton.SetImage (tentativeButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);
            }
            using (var tentativePressedButtonImage = UIImage.FromBundle ("btn-mtng-tenative-pressed")) {
                tentativeButton.SetImage (tentativePressedButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Selected);
            }
            tentativeButton.SetTitle ("", UIControlState.Normal);
            tentativeButton.Frame = new RectangleF ((float)137.5, 10, 24, 24);
            tentativeButton.TintColor = UIColor.Clear;

            //declineButton
            using (var declineButtonImage = UIImage.FromBundle ("btn-mtng-decline")) {
                declineButton.SetImage (declineButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Normal);

            }
            using (var declinePressedButtonImage = UIImage.FromBundle ("btn-mtng-decline-pressed")) {
                declineButton.SetImage (declinePressedButtonImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal), UIControlState.Selected);
            }
            declineButton.SetTitle ("", UIControlState.Normal);
            declineButton.Frame = new RectangleF (325, 10, 24, 24);
            declineButton.TintColor = UIColor.Clear;

            var b1 = new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace);
            var b2 = new UIBarButtonItem (acceptButton);
            var b3 = new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace);
            var b4 = new UIBarButtonItem (tentativeButton);
            var b5 = new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace);
            var b6 = new UIBarButtonItem (declineButton);
            var b7 = new UIBarButtonItem (UIBarButtonSystemItem.FlexibleSpace);

            acceptButton.TouchUpInside += (object sender, EventArgs e) => {
                ToggleButtons ();
                acceptButton.Selected = true;
                UpdateStatus (NcResponseType.Accepted);
            };

            tentativeButton.TouchUpInside += (object sender, EventArgs e) => {
                ToggleButtons ();
                tentativeButton.Selected = true;
                UpdateStatus (NcResponseType.Tentative);
            };

            declineButton.TouchUpInside += (object sender, EventArgs e) => {
                ToggleButtons ();
                declineButton.Selected = true;
                UpdateStatus (NcResponseType.Declined);
            };
            this.SetToolbarItems (new UIBarButtonItem[] {
                b1, b2, b3, b4, b5, b6, b7
            }, false);
        }

        public class TupleList<T1, T2> : List<Tuple<T1, T2>>
        {
            public void Add (T1 item, T2 item2)
            {
                Add (new Tuple<T1, T2> (item, item2));
            }
        }

        public string UIntToString (uint min)
        {
            string time = "None";
            foreach (var pair in minList) {
                if (pair.Item1 == min) {
                    time = pair.Item2;
                }
            }
            return time;
        }

        protected string MakeRecurrenceString (List<McRecurrence> r)
        {
            McRecurrence rPattern = r.ElementAt (0);
            if (0 == rPattern.Type) { 
                if (1 < rPattern.Interval) {
                    return "repeats every " + rPattern.Interval.ToString ().ToLower () + " days";
                }
                return "repeats " + rPattern.Type.ToString ().ToLower ();
            }
            if ("Weekly" == rPattern.Type.ToString ()) { 
                bool hasInterval = false;
                string weekRecurrenceString = "repeats every ";
                if (1 < rPattern.Interval) {
                    weekRecurrenceString += rPattern.Interval.ToString ().ToLower () + " weeks";
                    hasInterval = true;
                }
                if (0 != rPattern.DayOfWeek) {
                    var dayValue = (byte)rPattern.DayOfWeek;
                    if (127 == dayValue) {
                        return "repeats at the end of every month";
                    }
                    if (62 == dayValue) {
                        return "repeats weekly on workdays";
                    }
                    if (65 == dayValue) {
                        return "repeats weekly on weekends";
                    }
                    bool isSunday = (dayValue & (1 << 0)) != 0;
                    bool isMonday = (dayValue & (1 << 1)) != 0;
                    bool isTuesday = (dayValue & (1 << 2)) != 0;
                    bool isWednesday = (dayValue & (1 << 3)) != 0;
                    bool isThursday = (dayValue & (1 << 4)) != 0;
                    bool isFriday = (dayValue & (1 << 5)) != 0;
                    bool isSaturday = (dayValue & (1 << 6)) != 0;
                    var s = new List<string> ();
                    if (isSunday) {
                        s.Add ("Sun");
                    }
                    if (isMonday) {
                        s.Add ("Mon");
                    }
                    if (isTuesday) {
                        s.Add ("Tue");
                    }
                    if (isWednesday) {
                        s.Add ("Wed");
                    }
                    if (isThursday) {
                        s.Add ("Thu");
                    }
                    if (isFriday) {
                        s.Add ("Fri");
                    }
                    if (isSaturday) {
                        s.Add ("Sat");
                    }
                    if (1 == s.Count) {
                        if (hasInterval) {
                            return weekRecurrenceString;
                        } else {
                            return "repeats weekly";
                        }
                    } else if (hasInterval) {
                        weekRecurrenceString += " on " + Util.MakeCommaSeparatedList (s);
                    } else {
                        weekRecurrenceString += "week on " + Util.MakeCommaSeparatedList (s);
                    }
                    return weekRecurrenceString;

                }
                return "repeats " + rPattern.Type.ToString ().ToLower ();
            }
            if ("Monthly" == rPattern.Type.ToString ()) {
                if (1 < rPattern.Interval) {
                    return "repeats every " + rPattern.Interval.ToString ().ToLower () + " months";
                }
                return "repeats " + rPattern.Type.ToString ().ToLower ();
            }
            if ("MonthlyOnDay" == rPattern.Type.ToString ()) {
                if (1 < rPattern.Interval) {
                    return "repeats every " + rPattern.Interval.ToString ().ToLower () + " months";
                }
                return "repeats on the " + Util.AddOrdinalSuffix ((Int32)rPattern.WeekOfMonth) + " " + rPattern.DayOfWeek.ToString () + " of every month";
            }
            if ("Yearly" == rPattern.Type.ToString ()) {
                if (1 < rPattern.Interval) {
                    return "repeats every " + rPattern.Interval.ToString ().ToLower () + " years";
                }
                return "repeats " + rPattern.Type.ToString ().ToLower ();
            }
            if ("YearlyOnDay" == rPattern.Type.ToString ()) {
                return "repeats every year on the " + Util.AddOrdinalSuffix ((Int32)rPattern.WeekOfMonth) + " " + rPattern.DayOfWeek.ToString ()
                + " of " + rPattern.MonthOfYear.ToString ();
            }
            return "Case error: " + rPattern.Type.ToString ();
        }

        protected void ScheduleNotification ()
        {
            Notif eventNotif = Notif.Instance;
            if (0 != c.Reminder) {
                var alertMessage = Util.MakeAlertMessage (c.Subject, c.Reminder);
                var fireTime = c.StartTime.AddMinutes (-c.Reminder);
                if (null != eventNotif.FindNotif (c.Id)) {
                    eventNotif.CancelNotif (c.Id);
                    eventNotif.ScheduleNotif (c.Id, fireTime, alertMessage);
                } else {
                    eventNotif.ScheduleNotif (c.Id, fireTime, alertMessage);
                }
                return;
            }
            if (null != eventNotif.FindNotif (c.Id)) {
                eventNotif.CancelNotif (c.Id);
            }
        }

        protected void SyncMeetingRequest ()
        {
            // TODO: If calendar changes folders
            if (0 == c.Id) {
                c.Insert (); // new entry
                folder.Link (c);
                BackEnd.Instance.CreateCalCmd (account.Id, c.Id, folder.Id);
            } else {
                c.Update ();
                BackEnd.Instance.UpdateCalCmd (account.Id, c.Id);
            }
        }

        protected void UpdateStatus (NcResponseType status)
        {
            BackEnd.Instance.RespondCalCmd (account.Id, c.Id, status);
        }

        public void UpdateAttendeeList (List<McAttendee> attendees)
        {
            c.attendees = attendees;
        }

        public void DismissINachoAttendeeListChooser (INachoAttendeeListChooser vc)
        {
            NcAssert.CaseError ();
        }

        public void UpdateAttachmentList (List<McAttachment> attachments)
        {
            this.attachments = attachments;
        }

        public void DismissINachoAttachmentListChooser (INachoAttachmentListChooser vc)
        {
            NcAssert.CaseError ();
        }
            
    }
}
