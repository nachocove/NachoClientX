// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using NachoCore.Model;
using CoreGraphics;
using NachoCore;
using NachoCore.SFDC;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class SalesforceSettingsViewController : NcUIViewControllerNoLeaks
    {
        McAccount account;


        public SalesforceSettingsViewController (IntPtr handle) : base (handle)
        {
        }


        public void SetAccount (McAccount account)
        {
            this.account = account;
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
        }

        public override void ViewDidAppear (bool animated)
        {
            if (this.NavigationController.RespondsToSelector (new ObjCRuntime.Selector ("interactivePopGestureRecognizer"))) {
                this.NavigationController.InteractivePopGestureRecognizer.Enabled = true;
                this.NavigationController.InteractivePopGestureRecognizer.Delegate = null;
            }
            base.ViewDidAppear (animated);
        }

        public override void ViewWillDisappear (bool animated)
        {
            View.EndEditing (true);
            base.ViewWillDisappear (animated);
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }


        static readonly nfloat HEIGHT = 50;
        static readonly nfloat INDENT = 25;

        protected UIView contentView;
        protected UIScrollView scrollView;
        UIBarButtonItem backButton;
        UIImageView accountImageView;
        UILabel EmailAddress;
        UISwitch DefaultEmailSwitch;
        UIButton DeleteAccountButton;
        UIView DeleteAccountBackgroundView;
        UIActivityIndicatorView DeleteAccountActivityIndicator;
        UISwitch AddBccSwitch;
        UIButton RefreshAccountButton;
        UIView RefreshAccountBackgroundView;
        UIActivityIndicatorView RefreshAccountActivityIndicator;

        protected override void CreateViewHierarchy ()
        {
            NavigationController.NavigationBar.Translucent = false;
            NavigationItem.Title = "Salesforce Settings";

            backButton = new NcUIBarButtonItem ();
            backButton.Image = UIImage.FromBundle ("nav-backarrow");
            backButton.TintColor = A.Color_NachoBlue;
            backButton.AccessibilityLabel = "Back";
            backButton.Clicked += BackButton_Clicked;

            NavigationItem.SetLeftBarButtonItem (backButton, true);

            View.BackgroundColor = A.Color_NachoBackgroundGray;

            scrollView = new UIScrollView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height));
            scrollView.AutoresizingMask = UIViewAutoresizing.FlexibleDimensions;
            scrollView.BackgroundColor = A.Color_NachoBackgroundGray;
            scrollView.ScrollEnabled = true;
            scrollView.AlwaysBounceVertical = true;
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;
            View.AddSubview (scrollView);

            contentView = new UIView (Util.CardContentRectangle (View.Frame.Width, View.Frame.Height));
            contentView.Layer.CornerRadius = A.Card_Corner_Radius;
            contentView.BackgroundColor = UIColor.White;
            scrollView.AddSubview (contentView);

            accountImageView = new UIImageView (new CGRect (12, 15, 50, 50));
            accountImageView.Layer.CornerRadius = 25;
            accountImageView.Layer.MasksToBounds = true;
            accountImageView.ContentMode = UIViewContentMode.ScaleAspectFill;
            contentView.AddSubview (accountImageView);

            using (var image = Util.ImageForAccount (account)) {
                accountImageView.Image = image;
            }

            EmailAddress = new UILabel (new CGRect (75, 12, contentView.Frame.Width - 75, 50));
            EmailAddress.Text = account.EmailAddr;
            EmailAddress.Font = A.Font_AvenirNextRegular17;
            EmailAddress.TextColor = A.Color_NachoBlack;
            contentView.AddSubview (EmailAddress);

            nfloat yOffset = NMath.Max (accountImageView.Frame.Bottom, EmailAddress.Frame.Bottom);

            Util.AddHorizontalLine (INDENT, yOffset, contentView.Frame.Width - INDENT, A.Color_NachoBorderGray, contentView);

            var addBccLabel = new UILabel (new CGRect (INDENT, yOffset, contentView.Frame.Width, HEIGHT));
            addBccLabel.Font = A.Font_AvenirNextRegular14;
            addBccLabel.TextAlignment = UITextAlignment.Left;
            addBccLabel.TextColor = A.Color_NachoDarkText;
            addBccLabel.Text = "Automatically Add Bcc";
            addBccLabel.SizeToFit ();
            ViewFramer.Create (addBccLabel).Height (HEIGHT);

            AddBccSwitch = new UISwitch ();
            ViewFramer.Create (AddBccSwitch).RightAlignX (contentView.Frame.Width - INDENT);
            ViewFramer.Create (AddBccSwitch).CenterY (yOffset, HEIGHT);

            AddBccSwitch.ValueChanged += AddBccSwitch_ValueChanged;

            contentView.AddSubview (addBccLabel);
            contentView.AddSubview (AddBccSwitch);

            yOffset = addBccLabel.Frame.Bottom;

            Util.AddHorizontalLine (INDENT, yOffset, contentView.Frame.Width - INDENT, A.Color_NachoBorderGray, contentView);

            RefreshAccountButton = UIButton.FromType (UIButtonType.System);
            RefreshAccountButton.Frame = new CGRect (INDENT, yOffset, contentView.Frame.Width, HEIGHT);
            Util.AddButtonImage (RefreshAccountButton, "folder-folder", UIControlState.Normal);
            RefreshAccountButton.TitleEdgeInsets = new UIEdgeInsets (0, 28, 0, 0);
            RefreshAccountButton.SetTitle ("Refresh Contacts", UIControlState.Normal);
            RefreshAccountButton.AccessibilityLabel = "Refresh Contacts";
            RefreshAccountButton.Font = A.Font_AvenirNextRegular14;
            RefreshAccountButton.HorizontalAlignment = UIControlContentHorizontalAlignment.Left;
            RefreshAccountButton.TouchUpInside += RefreshAccountButton_TouchUpInside;
            contentView.AddSubview (RefreshAccountButton);
            yOffset = RefreshAccountButton.Frame.Bottom;

            ViewFramer.Create (contentView).Height (yOffset);

            // Delete Account Spinner - Keeping this separate from the validate credential spinner 
            RefreshAccountBackgroundView = new UIView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height));
            RefreshAccountBackgroundView.BackgroundColor = UIColor.DarkGray.ColorWithAlpha (.6f);
            RefreshAccountBackgroundView.Hidden = true;
            RefreshAccountBackgroundView.Alpha = 0.0f;
            View.AddSubview (RefreshAccountBackgroundView);

            UIView RefreshAlertMimicView = new UIView (new CGRect (RefreshAccountBackgroundView.Frame.Width / 2 - 90, RefreshAccountBackgroundView.Frame.Height / 2 - 80, 180, 110));
            RefreshAlertMimicView.BackgroundColor = UIColor.White;
            RefreshAlertMimicView.Layer.CornerRadius = 6.0f;
            RefreshAccountBackgroundView.AddSubview (RefreshAlertMimicView);

            UILabel RefreshAccountStatusMessage = new UILabel (new CGRect (8, 10, RefreshAlertMimicView.Frame.Width - 16, 25));
            RefreshAccountStatusMessage.BackgroundColor = UIColor.White;
            RefreshAccountStatusMessage.Alpha = 1.0f;
            RefreshAccountStatusMessage.Font = UIFont.SystemFontOfSize (17);
            RefreshAccountStatusMessage.TextColor = UIColor.Black;
            RefreshAccountStatusMessage.Text = "Refresh Contacts";
            RefreshAccountStatusMessage.TextAlignment = UITextAlignment.Center;
            RefreshAlertMimicView.AddSubview (RefreshAccountStatusMessage);

            RefreshAccountActivityIndicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);
            RefreshAccountActivityIndicator.Frame = new CGRect (RefreshAlertMimicView.Frame.Width / 2 - 20, RefreshAccountStatusMessage.Frame.Bottom + 15, 40, 40);
            RefreshAccountActivityIndicator.Color = A.Color_SystemBlue;
            RefreshAccountActivityIndicator.Alpha = 1.0f;
            RefreshAccountActivityIndicator.StartAnimating ();
            RefreshAlertMimicView.AddSubview (RefreshAccountActivityIndicator);

            Util.AddHorizontalLine (INDENT, yOffset, contentView.Frame.Width - INDENT, A.Color_NachoBorderGray, contentView);

            DeleteAccountButton = UIButton.FromType (UIButtonType.System);
            DeleteAccountButton.Frame = new CGRect (INDENT, yOffset, contentView.Frame.Width, HEIGHT);
            Util.AddButtonImage (DeleteAccountButton, "email-delete-two", UIControlState.Normal);
            DeleteAccountButton.TitleEdgeInsets = new UIEdgeInsets (0, 28, 0, 0);
            DeleteAccountButton.SetTitle ("Delete This Account", UIControlState.Normal);
            DeleteAccountButton.AccessibilityLabel = "Delete Account";
            DeleteAccountButton.Font = A.Font_AvenirNextRegular14;
            DeleteAccountButton.HorizontalAlignment = UIControlContentHorizontalAlignment.Left;
            DeleteAccountButton.TouchUpInside += DeleteAccountButton_TouchUpInside;
            ;
            contentView.AddSubview (DeleteAccountButton);
            yOffset = DeleteAccountButton.Frame.Bottom;

            ViewFramer.Create (contentView).Height (yOffset);

            // Delete Account Spinner - Keeping this separate from the validate credential spinner 
            DeleteAccountBackgroundView = new UIView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height));
            DeleteAccountBackgroundView.BackgroundColor = UIColor.DarkGray.ColorWithAlpha (.6f);
            DeleteAccountBackgroundView.Hidden = true;
            DeleteAccountBackgroundView.Alpha = 0.0f;
            View.AddSubview (DeleteAccountBackgroundView);

            UIView AlertMimicView = new UIView (new CGRect (DeleteAccountBackgroundView.Frame.Width / 2 - 90, DeleteAccountBackgroundView.Frame.Height / 2 - 80, 180, 110));
            AlertMimicView.BackgroundColor = UIColor.White;
            AlertMimicView.Layer.CornerRadius = 6.0f;
            DeleteAccountBackgroundView.AddSubview (AlertMimicView);

            UILabel DeleteAccountStatusMessage = new UILabel (new CGRect (8, 10, AlertMimicView.Frame.Width - 16, 25));
            DeleteAccountStatusMessage.BackgroundColor = UIColor.White;
            DeleteAccountStatusMessage.Alpha = 1.0f;
            DeleteAccountStatusMessage.Font = UIFont.SystemFontOfSize (17);
            DeleteAccountStatusMessage.TextColor = UIColor.Black;
            DeleteAccountStatusMessage.Text = "Deleting Account";
            DeleteAccountStatusMessage.TextAlignment = UITextAlignment.Center;
            AlertMimicView.AddSubview (DeleteAccountStatusMessage);

            DeleteAccountActivityIndicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);
            DeleteAccountActivityIndicator.Frame = new CGRect (AlertMimicView.Frame.Width / 2 - 20, DeleteAccountStatusMessage.Frame.Bottom + 15, 40, 40);
            DeleteAccountActivityIndicator.Color = A.Color_SystemBlue;
            DeleteAccountActivityIndicator.Alpha = 1.0f;
            DeleteAccountActivityIndicator.StartAnimating ();
            AlertMimicView.AddSubview (DeleteAccountActivityIndicator);

        }

        void AddBccSwitch_ValueChanged (object sender, EventArgs e)
        {
            SalesForceProtoControl.SetShouldAddBccToEmail (account.Id, AddBccSwitch.On);
        }

        void RefreshAccountButton_TouchUpInside (object sender, EventArgs e)
        {
            BackEnd.Instance.SyncCmd (account.Id, 0);
            ToggleRefreshAccountSpinnerView ();
            rearmRefreshTimer (10);

        }

        protected void EndRefreshingOnUIThread (object sender)
        {
            NachoPlatform.InvokeOnUIThread.Instance.Invoke (() => {
                cancelRefreshTimer ();
            });
        }

        NcTimer refreshTimer;

        void rearmRefreshTimer (int seconds)
        {
            if (null != refreshTimer) {
                refreshTimer.Dispose ();
                refreshTimer = null;
            }
            refreshTimer = new NcTimer ("SalesforceSettingsViewController refresh", EndRefreshingOnUIThread, null, seconds * 1000, 0); 
        }

        void cancelRefreshTimer ()
        {
            ToggleRefreshAccountSpinnerView ();
            if (null != refreshTimer) {
                refreshTimer.Dispose ();
                refreshTimer = null;
            }
        }

        void ToggleRefreshAccountSpinnerView ()
        {
            RefreshAccountBackgroundView.Hidden = !RefreshAccountBackgroundView.Hidden;

            if (RefreshAccountBackgroundView.Hidden) {
                RefreshAccountActivityIndicator.StopAnimating ();
                RefreshAccountBackgroundView.Alpha = 0.0f;
            } else {
                UIView.Animate (.15, () => {
                    RefreshAccountBackgroundView.Alpha = 1.0f;
                });
                RefreshAccountActivityIndicator.StartAnimating ();
            }
        }

        void DeleteAccountButton_TouchUpInside (object sender, EventArgs e)
        {
            contentView.Hidden = true;
            backButton.Enabled = false;
            ToggleDeleteAccountSpinnerView ();
            Action action = () => {
                NcAccountHandler.Instance.RemoveAccount (account.Id);
                InvokeOnMainThread (() => {
                    backButton.Enabled = true;
                    ToggleDeleteAccountSpinnerView ();
                    // go back to settings screen
                    NavigationController.PopViewController (true);
                });
            };
            NcTask.Run (action, "RemoveAccount"); 
        }

        void ToggleDeleteAccountSpinnerView ()
        {
            DeleteAccountBackgroundView.Hidden = !DeleteAccountBackgroundView.Hidden;

            if (DeleteAccountBackgroundView.Hidden) {
                DeleteAccountActivityIndicator.StopAnimating ();
                DeleteAccountBackgroundView.Alpha = 0.0f;
            } else {
                UIView.Animate (.15, () => {
                    DeleteAccountBackgroundView.Alpha = 1.0f;
                });
                DeleteAccountActivityIndicator.StartAnimating ();
            }
        }

        protected override void ConfigureAndLayout ()
        {
          
            if (DefaultEmailSwitch != null) {
                var defaultEmailAccount = McAccount.GetDefaultAccount (McAccount.AccountCapabilityEnum.EmailSender);
                bool isDefaultEmail = defaultEmailAccount != null && account.Id == defaultEmailAccount.Id;
                DefaultEmailSwitch.SetState (isDefaultEmail, false);
                DefaultEmailSwitch.Enabled = !isDefaultEmail;
            }

            var contentViewWidth = contentView.Frame.Width;
            var contentViewHeight = contentView.Frame.Height;
            scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            contentView.Frame = new CGRect (A.Card_Horizontal_Indent, A.Card_Vertical_Indent, contentViewWidth, contentViewHeight);
            scrollView.ContentSize = new CGSize (contentView.Frame.Width + 2 * A.Card_Horizontal_Indent, contentView.Frame.Height + 2 * A.Card_Vertical_Indent);

            AddBccSwitch.SetState (SalesForceProtoControl.ShouldAddBccToEmail (account.Id), false);

        }

        protected override void OnKeyboardChanged ()
        {
            ConfigureAndLayout ();
        }

        protected override void Cleanup ()
        {
            backButton.Clicked -= BackButton_Clicked;

            accountImageView = null;

            DeleteAccountButton.TouchUpInside -= DeleteAccountButton_TouchUpInside;
            if (DefaultEmailSwitch != null) {
                DefaultEmailSwitch.ValueChanged -= AddBccSwitch_ValueChanged;
            }
        }

        void BackButton_Clicked (object sender, EventArgs e)
        {
            if (account.Id == NcApplication.Instance.Account.Id) {
                NcApplication.Instance.Account = McAccount.QueryById<McAccount> (account.Id);
            }
            NavigationController.PopViewController (true);
        }

    }
}
