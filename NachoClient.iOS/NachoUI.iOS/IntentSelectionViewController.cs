// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore.Brain;
using System.Drawing;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class IntentSelectionViewController : BlurryViewController, INachoIntentChooser
    {
        protected NcMessageIntent messageIntent;
        protected float yOffset;

        INachoIntentChooserParent owner;
        INachoDateControllerParent dateOwner;

        public IntentSelectionViewController (IntPtr handle) : base (handle)
        {

        }

        public void SetOwner (INachoIntentChooserParent owner)
        {
            this.owner = owner;
        }

        public void SetDateControllerOwner (INachoDateControllerParent dateOwner)
        {
            this.dateOwner = dateOwner;
        }

        public void DismissIntentChooser (bool animated, NSAction action)
        {
            DismissViewController (false, null);
        }

        public override void ViewDidLoad ()
        {
            messageIntent = new NcMessageIntent ();
            base.ViewDidLoad ();
            CreateView ();
        }

        public void CreateView ()
        {

            float viewHeight = 64 + (messageIntent.GetIntentList ().Count * 41);
            UIView viewBody = new UIView ();
            viewBody.Layer.CornerRadius = 8f;
            viewBody.Frame = new RectangleF (15, (View.Frame.Height - viewHeight) / 2.0f - 20, View.Frame.Width - 30, viewHeight);
            viewBody.ClipsToBounds = true;
            viewBody.BackgroundColor = UIColor.White;

            yOffset = 14;

            UILabel messageIntentsLabel = new UILabel (new RectangleF (viewBody.Frame.Width / 2 - 80, yOffset, 160, 25));
            messageIntentsLabel.Text = "Message Intents";
            messageIntentsLabel.TextAlignment = UITextAlignment.Center;
            messageIntentsLabel.Font = A.Font_AvenirNextRegular17;
            messageIntentsLabel.TextColor = A.Color_NachoDarkText;
            viewBody.Add (messageIntentsLabel);

            UIButton dismissView = new UIButton (new RectangleF (20, yOffset + 2, 20, 20));
            dismissView.SetImage (UIImage.FromBundle ("icn-close"), UIControlState.Normal);
            dismissView.TouchUpInside += (object sender, EventArgs e) => {
                DismissViewController (false, null);
            };
            viewBody.Add (dismissView);

            yOffset = messageIntentsLabel.Frame.Bottom + 16;

            Util.AddHorizontalLine (0, yOffset - 5, viewBody.Frame.Width, A.Color_NachoLightBorderGray, viewBody);

            int curItem = 0;
            foreach (var intent in messageIntent.GetIntentList ()) {
                curItem++;
                UIButton intentButton = new UIButton (new RectangleF (20, yOffset, viewBody.Frame.Width - 60, 40));
                intentButton.BackgroundColor = UIColor.White;
                intentButton.SetTitle (intent.value, UIControlState.Normal);
                intentButton.SetTitleColor (A.Color_NachoTextGray, UIControlState.Normal);
                intentButton.Font = A.Font_AvenirNextRegular14;
                intentButton.HorizontalAlignment = UIControlContentHorizontalAlignment.Left;
                intentButton.TouchUpInside += (object sender, EventArgs e) => {
                    owner.SelectIntent (intent);
                    DismissViewController (false, null);
                };

                if (intent.dueDateAllowed) {
                    UIButton dueDateButton = new UIButton (new RectangleF (viewBody.Frame.Width - 40, yOffset + 6f, 25, 25));
                    dueDateButton.SetImage (UIImage.FromBundle ("icn-defer"), UIControlState.Normal);
                    dueDateButton.TouchUpInside += (object sender, EventArgs e) => {
                        owner.SelectIntent (intent);
                        PerformSegue ("SegueToMessagePriority", this);
                    };
                    viewBody.Add (dueDateButton);
                }

                viewBody.Add (intentButton);
                if (curItem < messageIntent.GetIntentList ().Count) {
                    Util.AddHorizontalLine (20, intentButton.Frame.Bottom, viewBody.Frame.Width - 20, A.Color_NachoLightBorderGray, viewBody);
                }

                yOffset = intentButton.Frame.Bottom + 1;
            }

            View.Add (viewBody);
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            var blurry = segue.DestinationViewController as BlurryViewController;
            if (null != blurry) {
                blurry.CaptureView (this.View);
            }

            if (segue.Identifier == "SegueToMessagePriority") {
                var vc = (MessagePriorityViewController)segue.DestinationViewController;
                vc.SetOwner (dateOwner);
                vc.SetIntentSelector (this);
                return;
            }

            NcAssert.CaseError ("Not prepared for segue: " + segue.Identifier);
        }
    }
}
