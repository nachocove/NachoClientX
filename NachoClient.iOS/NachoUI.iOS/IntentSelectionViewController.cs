// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore.Brain;
using System.Drawing;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class IntentSelectionViewController : NcUIViewController, INachoIntentChooser
    {
        protected const float X_INDENT = 30;

        INachoIntentChooserParent owner;
        INachoDateControllerParent dateOwner;

        public IntentSelectionViewController (IntPtr handle) : base (handle)
        {

        }

        public void SetOwner (INachoIntentChooserParent owner)
        {
            this.owner = owner;
        }

        public void SetDateControllerOwner (INachoDateControllerParent dateOwner)
        {
            this.dateOwner = dateOwner;
        }

        public void DismissIntentChooser (bool animated, NSAction action)
        {
            DismissViewController (false, null);
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            CreateView ();
        }

        public void CreateView ()
        {
            UIView contentView = new UIView (View.Frame);
            contentView.BackgroundColor = A.Color_NachoGreen;

            int curItem = 0;
            float yOffset = 30;

            UILabel headerLabel = new UILabel (new RectangleF (contentView.Frame.Width / 2 - 75, yOffset, 150, 25));
            headerLabel.Text = "Message Intent";
            headerLabel.TextAlignment = UITextAlignment.Center;
            headerLabel.Font = A.Font_AvenirNextDemiBold17;
            headerLabel.TextColor = UIColor.White;
            contentView.Add (headerLabel);

            UIButton dismissView = new UIButton (new RectangleF (X_INDENT, yOffset, 25, 25));
            dismissView.SetImage (UIImage.FromBundle ("modal-close"), UIControlState.Normal);
            dismissView.TouchUpInside += (object sender, EventArgs e) => {
                DismissViewController (true, null);
            };
            contentView.Add (dismissView);

            yOffset = headerLabel.Frame.Bottom + 16;

            Util.AddHorizontalLine (0, yOffset, contentView.Frame.Width, UIColor.LightGray, contentView);

            yOffset += 2;

            var messageIntentList = NcMessageIntent.GetIntentList ();
            var tableView = new UITableView (new RectangleF (X_INDENT, yOffset, View.Frame.Width - (2 * X_INDENT), 44 * messageIntentList.Count));
            tableView.Source = new MessageIntentSource (this);
            tableView.BackgroundColor = A.Color_NachoGreen;
            contentView.AddSubview (tableView);

            View.AddSubview (contentView);
        }

        public void SelectMessageIntent (NcMessageIntent.MessageIntent messageIntent)
        {
            if (null != owner) {
                owner.SelectMessageIntent (messageIntent);
            }
            if (messageIntent.dueDateAllowed) {
                PerformSegue ("SegueToMessagePriority", new SegueHolder (null));
            } else {
                DismissViewController (true, null);
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "SegueToMessagePriority") {
                var vc = (MessagePriorityViewController)segue.DestinationViewController;
                vc.SetOwner (dateOwner);
                vc.SetIntentSelector (this);
                vc.SetDateControllerType (DateControllerType.Intent);
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        protected class MessageIntentSource : UITableViewSource
        {
            IntentSelectionViewController owner;

            public MessageIntentSource (IntentSelectionViewController owner)
            {
                this.owner = owner;
            }

            public override int NumberOfSections (UITableView tableView)
            {
                return 1;
            }

            public override int RowsInSection (UITableView tableView, int section)
            {
                return NcMessageIntent.GetIntentList ().Count;
            }

            public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
            {
                string cellIdentifier = "MessageIntentCellIdentifier";

                var cell = tableView.DequeueReusableCell (cellIdentifier);
                if (null == cell) {
                    cell = new UITableViewCell (UITableViewCellStyle.Default, cellIdentifier);
                    cell.BackgroundColor = A.Color_NachoGreen;
                    cell.TextLabel.TextColor = UIColor.White;
                    cell.TextLabel.Font = A.Font_AvenirNextRegular14;
                    using (var image = UIImage.FromBundle ("icn-defer")) {
                        cell.AccessoryView = new UIImageView (image);
                    }
                }

                var messageIntent = NcMessageIntent.GetIntentList () [indexPath.Row];
                cell.TextLabel.Text = messageIntent.value;
                cell.AccessoryView.Hidden = !messageIntent.dueDateAllowed;
                return cell;
            }

            public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
            {
                var cell = tableView.CellAt (indexPath);
                cell.Selected = false;

                var messageIntent = NcMessageIntent.GetIntentList () [indexPath.Row];
                if (null != owner) {
                    owner.SelectMessageIntent (messageIntent);
                }
            }

        }
    }
}
