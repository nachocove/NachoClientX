// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class LaunchViewController : NcUIViewController
    {
        AppDelegate appDelegate;

        float yOffset;
        float keyboardHeight;

        public LaunchViewController (IntPtr handle) : base (handle)
        {
            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            CreateView ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                this.NavigationController.SetNavigationBarHidden (true, false);
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextFieldTextDidChangeNotification, OnTextFieldChanged);
            }
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                this.NavigationController.SetNavigationBarHidden (false, false);
            }
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillHideNotification);
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillShowNotification);
                NSNotificationCenter.DefaultCenter.RemoveObserver (UITextField.TextFieldTextDidChangeNotification);
            }
        }

        public virtual bool HandlesKeyboardNotifications {
            get { return true; }
        }

        protected const int EMAIL_TEXTFIELD_TAG = 101;
        protected const int PASSWORD_TEXTFIELD_TAG = 102;
        protected const int SUBMIT_BUTTON_TAG = 103;
        protected const int ADVANCED_SIGNIN_BUTTON_TAG = 104;

        protected void CreateView ()
        {
            View.BackgroundColor = A.Color_NachoGreen;
            scrollView.BackgroundColor = A.Color_NachoGreen;
            contentView.BackgroundColor = A.Color_NachoGreen;

            yOffset = 90;

            UIImageView circleMail = new UIImageView (UIImage.FromBundle ("Loginscreen-1"));
            circleMail.Frame = new RectangleF (120, yOffset, 80, 80);
            contentView.AddSubview (circleMail);

            yOffset = circleMail.Frame.Bottom + 35;

            UILabel startLabel = new UILabel (new RectangleF (30, yOffset, View.Frame.Width - 60, 50));
            startLabel.Text = "Start by entering your Exchange email address and password.";
            startLabel.Lines = 2;
            startLabel.BackgroundColor = A.Color_NachoGreen;
            startLabel.TextColor = UIColor.White;
            startLabel.Font = A.Font_AvenirNextRegular17;
            startLabel.TextAlignment = UITextAlignment.Center;
            contentView.AddSubview (startLabel);

            yOffset = startLabel.Frame.Bottom + 32f;

            UIView emailBox = new UIView (new RectangleF (25, yOffset, View.Frame.Width - 50, 46));
            emailBox.BackgroundColor = UIColor.White;

            var emailField = new UITextField (new RectangleF (45, 0, emailBox.Frame.Width - 50, emailBox.Frame.Height));
            emailField.BackgroundColor = UIColor.White;
            emailField.Placeholder = "Email Address";
            emailField.Font = A.Font_AvenirNextRegular17;
            emailField.BorderStyle = UITextBorderStyle.None;
            emailField.TextAlignment = UITextAlignment.Left;
            emailField.KeyboardType = UIKeyboardType.EmailAddress;
            emailField.AutocapitalizationType = UITextAutocapitalizationType.None;
            emailField.AutocorrectionType = UITextAutocorrectionType.No;
            emailField.Tag = EMAIL_TEXTFIELD_TAG;
            emailBox.AddSubview (emailField);

            UIImageView mailImage = new UIImageView (UIImage.FromBundle ("Loginscreen-2"));
            mailImage.Frame = new RectangleF (15, 15, 16, 11);
            emailBox.AddSubview (mailImage);

            contentView.AddSubview (emailBox);

            yOffset = emailBox.Frame.Bottom + 4f;

            UIView passwordBox = new UIView (new RectangleF (25, yOffset, View.Frame.Width - 50, 46));
            passwordBox.BackgroundColor = UIColor.White;

            var passwordField = new UITextField (new RectangleF (45, 0, passwordBox.Frame.Width - 50, passwordBox.Frame.Height));
            passwordField.BackgroundColor = UIColor.White;
            passwordField.Placeholder = "Password";
            passwordField.Font = A.Font_AvenirNextRegular17;
            passwordField.BorderStyle = UITextBorderStyle.None;
            passwordField.TextAlignment = UITextAlignment.Left;
            passwordField.SecureTextEntry = true;
            passwordField.KeyboardType = UIKeyboardType.Default;
            passwordField.AutocapitalizationType = UITextAutocapitalizationType.None;
            passwordField.AutocorrectionType = UITextAutocorrectionType.No;
            passwordField.Tag = PASSWORD_TEXTFIELD_TAG;
            passwordBox.AddSubview (passwordField);
            passwordBox.UserInteractionEnabled = true;

            UIImageView lockImage = new UIImageView (UIImage.FromBundle ("Loginscreen-3"));
            lockImage.Frame = new RectangleF (15, 15, 14, 15);
            passwordBox.AddSubview (lockImage);

            contentView.AddSubview (passwordBox);

            yOffset = passwordBox.Frame.Bottom + 40f;

            var submitButton = new UIButton (new System.Drawing.RectangleF (25, yOffset, View.Frame.Width - 50, 46));
            submitButton.BackgroundColor = A.Color_NachoBlue;
            submitButton.TitleLabel.TextAlignment = UITextAlignment.Center;
            submitButton.SetTitle ("Submit", UIControlState.Normal);
            submitButton.TitleLabel.TextColor = UIColor.White;
            submitButton.TitleLabel.Font = A.Font_AvenirNextDemiBold17;
            submitButton.Layer.CornerRadius = 4f;
            submitButton.Layer.MasksToBounds = true;
            submitButton.Tag = SUBMIT_BUTTON_TAG;
            contentView.AddSubview (submitButton);

            yOffset = submitButton.Frame.Bottom + 20f;

            submitButton.TouchUpInside += delegate {
                if (EnterFullConfiguration ()) {
                    PerformSegue (StartupViewController.NextSegue (), this);
                }
            };

            var advancedButton = new UIButton (new RectangleF (0, yOffset, View.Frame.Width, 20));
            advancedButton.BackgroundColor = A.Color_NachoGreen;
            advancedButton.SetTitle ("Advanced Sign In", UIControlState.Normal);
            advancedButton.TitleLabel.TextColor = A.Color_NachoYellow;
            advancedButton.TitleLabel.Font = A.Font_AvenirNextRegular14;
            advancedButton.Tag = ADVANCED_SIGNIN_BUTTON_TAG;
            contentView.AddSubview (advancedButton);
            advancedButton.TouchUpInside += (object sender, EventArgs e) => {
                PerformSegue ("SegueToAdvancedLogin", this);
            };

            emailField.ShouldReturn += (textField) => {
                passwordField.BecomeFirstResponder();
                return true;
            };
            passwordField.ShouldReturn += (textField) => {
                submitButton.SendActionForControlEvents(UIControlEvent.TouchUpInside);
                return true;
            };

            yOffset = advancedButton.Frame.Bottom + 20;

            UIImageView loginTriangles = new UIImageView (UIImage.FromBundle ("Bootscreen-5"));
            loginTriangles.Frame = new RectangleF (0, yOffset, 320, 39);
            contentView.AddSubview (loginTriangles);

            yOffset = loginTriangles.Frame.Bottom;

            LayoutView ();
        }

        protected void LayoutView ()
        {
            scrollView.Frame = new RectangleF (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            var contentFrame = new RectangleF (0, 0, View.Frame.Width, yOffset);
            contentView.Frame = contentFrame;
            scrollView.ContentSize = contentFrame.Size;
        }

        private bool EnterFullConfiguration ()
        {
            var emailTextField = (UITextField)contentView.ViewWithTag (EMAIL_TEXTFIELD_TAG);
            var passwordTextField = (UITextField)contentView.ViewWithTag (PASSWORD_TEXTFIELD_TAG);

            var email = emailTextField.Text;
            var password = passwordTextField.Text;

            if (!isValidEmail (email)) {
                emailTextField.TextColor = A.Color_NachoRed;
                return false;
            }

            NcModel.Instance.RunInTransaction (() => {
                // Need to regex-validate UI inputs.
                // You will always need to supply user credentials (until certs, for sure).

                var cred = new McCred () { Username = email, Password = password };
                cred.Insert ();
                int serverId = 0;
                // You will always need to supply the user's email address.
                appDelegate.Account = new McAccount () { EmailAddr = email };
                appDelegate.Account.CredId = cred.Id;
                appDelegate.Account.ServerId = serverId;
                appDelegate.Account.Signature = "Sent from Nacho Mail";
                appDelegate.Account.Insert ();
                Telemetry.RecordAccountEmailAddress (appDelegate.Account);
                // Maintain the state of our progress
                LoginHelpers.SetHasProvidedCreds (appDelegate.Account.Id, true);
            });
            BackEnd.Instance.Start (appDelegate.Account.Id);
            return true;
        }

        bool isValidEmail (string email)
        {
            RegexUtilities regexUtil = new RegexUtilities ();
            return regexUtil.IsValidEmail (email);
        }

        public void maybeEnableConnect ()
        {
            var emailTextField = (UITextField)contentView.ViewWithTag (EMAIL_TEXTFIELD_TAG);
            var passwordTextField = (UITextField)contentView.ViewWithTag (PASSWORD_TEXTFIELD_TAG);

            var email = emailTextField.Text;
            var password = passwordTextField.Text;

            var shouldWe = ((0 < email.Length) && (0 < password.Length));

            var submitButton = (UIButton)contentView.ViewWithTag (SUBMIT_BUTTON_TAG);
            submitButton.Enabled = shouldWe;
            submitButton.Alpha = (shouldWe ? 1.0f : 0.5f);
        }

        private void OnTextFieldChanged (NSNotification notification)
        {
            maybeEnableConnect ();
        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {
                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;
                //Start an animation, using values from the keyboard
                UIView.Animate (0, () => {
                    UIView.BeginAnimations ("AnimateForKeyboard");
                    UIView.SetAnimationBeginsFromCurrentState (true);
                    UIView.SetAnimationDuration (UIKeyboard.AnimationDurationFromNotification (notification));
                    UIView.SetAnimationCurve ((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification (notification));
                    //Pass the notification, calculating keyboard height, etc.
                    bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                    if (visible) {
                        var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
                        OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                    } else {
                        var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);
                        OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                    }
                }, () => OnKeyboardChangeCompleted ());
                ;
            }
        }

        /// <summary>
        /// Override this method to apply custom logic when the keyboard is shown/hidden
        /// </summary>
        /// <param name='visible'>
        /// If the keyboard is visible
        /// </param>
        /// <param name='height'>
        /// Calculated height of the keyboard (width not generally needed here)
        /// </param>
        protected virtual void OnKeyboardChanged (bool visible, float height)
        {
            var newHeight = (visible ? height + 15 : 0);

            if (newHeight == keyboardHeight) {
                return;
            }
            keyboardHeight = newHeight;

            LayoutView ();

            var advancedButton = contentView.ViewWithTag (ADVANCED_SIGNIN_BUTTON_TAG);
            scrollView.ScrollRectToVisible (advancedButton.Frame, false);
        }

        protected void OnKeyboardChangeCompleted ()
        {

        }
    }
}
