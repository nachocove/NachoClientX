// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class LaunchViewController : NcUIViewController
    {
        AppDelegate appDelegate;
        UIButton submitButton;

        public LaunchViewController (IntPtr handle) : base (handle)
        {
            appDelegate = (AppDelegate)UIApplication.SharedApplication.Delegate;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            stylizeFormControls ();

            NavigationItem.SetHidesBackButton (true, true);

            getUserName ();
            getPassword ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            NavigationController.SetNavigationBarHidden (true, false);
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NavigationController.SetNavigationBarHidden (false, false);
        }

        private void EnterFullConfiguration ()
        {
            NcModel.Instance.RunInTransaction (() => {
                // Need to regex-validate UI inputs.
                // You will always need to supply user credentials (until certs, for sure).

                var cred = new McCred () { Username = txtUserName.Text, Password = txtPassword.Text };
                cred.Insert ();
                int serverId = 0;
                // You will always need to supply the user's email address.
                appDelegate.Account = new McAccount () { EmailAddr = txtUserName.Text };
                // The account object is the "top", pointing to credential, server, and opaque protocol state.
                appDelegate.Account.CredId = cred.Id;
                appDelegate.Account.ServerId = serverId;
                appDelegate.Account.Insert ();

                LoginHelpers.SetHasProvidedCreds (appDelegate.Account.Id, true);
            });
            BackEnd.Instance.Start (appDelegate.Account.Id);
        }

        public void stylizeFormControls ()
        {
            View.BackgroundColor = A.Color_NachoGreen;
            SignInView signInView = new SignInView (new System.Drawing.RectangleF (View.Frame.X, View.Frame.Y, View.Frame.Width, View.Frame.Height));

            if (View.Frame.Height == 568) {
                addSplashTriangle (signInView);
            }
            addNachoLogo (signInView);
            formatUserName (signInView);
            formatPassword (signInView);
            configureAndAddSubmitButton (signInView);
            haveEnteredEmailAndPass ();
            signInView.addStartLabel ();
            configureAndAddAdvancedButton (signInView);
            View.Add (signInView);
        }

        void addSplashTriangle (SignInView view)
        {
            UIImageView triangleSplash = new UIImageView (UIImage.FromBundle ("Splash-BG"));
            triangleSplash.Frame = new System.Drawing.RectangleF (0, View.Frame.Height - 693, triangleSplash.Frame.Width, triangleSplash.Frame.Height);
            view.Add (triangleSplash);
        }

        void addNachoLogo (SignInView view)
        {
            UIImageView nachoLogo = new UIImageView (UIImage.FromBundle ("iPhoneIcon"));
            float yVal;
            if (View.Frame.Height == 568) {
                yVal = 34;
            } else {
                yVal = -5;
            }
            nachoLogo.Frame = new System.Drawing.RectangleF (View.Frame.Width / 2 - 43f, yVal, 86, 86);
            nachoLogo.Alpha = 1;
            nachoLogo.Layer.CornerRadius = 86 / 2f;
            nachoLogo.Layer.MasksToBounds = true;
            nachoLogo.Layer.BorderColor = UIColor.LightGray.CGColor;
            nachoLogo.Layer.BorderWidth = .15f;
            nachoLogo.Layer.ShadowRadius = 8;
            nachoLogo.Layer.ShadowOffset = new System.Drawing.SizeF (0, 1);
            nachoLogo.Layer.ShadowColor = UIColor.Black.CGColor;
            view.Add (nachoLogo);
        }

        void formatUserName (SignInView view)
        {
            txtUserName.BorderStyle = UITextBorderStyle.None;
            txtUserName.TextAlignment = UITextAlignment.Left;
            view.AddEmailField (txtUserName);
        }

        void formatPassword (SignInView view)
        {
            txtPassword.BorderStyle = UITextBorderStyle.None;
            txtPassword.TextAlignment = UITextAlignment.Left;
            view.AddPasswordField (txtPassword);
        }

        void configureAndAddSubmitButton (SignInView view)
        {
            submitButton = new UIButton (new System.Drawing.RectangleF (25, View.Frame.Height / 2 + 11, View.Frame.Width - 50, 45));
            submitButton.TouchUpInside += delegate {

                if (!haveEnteredEmailAndPass ()) {
//                    if(txtUserName.Text.Length == 0){
//                        txtUserName.Text = "Required";
//                        txtUserName.TextColor = A.Color_NachoRed;
//                    }
                } else if (!isValidEmail (txtUserName.Text)) {
                    txtUserName.TextColor = A.Color_NachoRed;
                } else {
                    EnterFullConfiguration ();
                    PerformSegue(StartupViewController.NextSegue(), this);
                }
            };
            view.configureSubmitButton (submitButton);
        }

        bool isValidEmail (string email)
        {
            RegexUtilities regexUtil = new RegexUtilities ();
            return regexUtil.IsValidEmail (email);
        }

        void configureAndAddAdvancedButton (SignInView view)
        {
            UIButton advancedSignInButton = new UIButton ();
            view.configureAdvancedButton (advancedSignInButton);
            advancedSignInButton.TouchUpInside += (object sender, EventArgs e) => {
                PerformSegue ("SegueToAdvancedLogin", this);
            };
        }

        void getUserName ()
        {
            this.txtUserName.ShouldReturn += (textField) => {
                haveEnteredEmailAndPass ();
                if (txtUserName.Text.Contains ("Hello")) {
                    Log.Info (Log.LOG_UI, "Hello"); 
                }
                if (textField.Text != "Required") {
                    textField.TextColor = UIColor.Black;
                }
                textField.ResignFirstResponder (); 
                return true;
            };
        }

        void getPassword ()
        {
            this.txtPassword.ShouldReturn += (textField) => { 
                haveEnteredEmailAndPass ();
                if (txtPassword.Text.Contains ("Hello")) {
                    Log.Info (Log.LOG_UI, "Hello"); 
                }
                textField.ResignFirstResponder (); 
                return true;
            };
        }

        public bool haveEnteredEmailAndPass ()
        {
            if (0 == txtUserName.Text.Length || 0 == txtPassword.Text.Length) {
                enableConnect (false);
                return false;
            } else {
                enableConnect (true);
                return true;
            }
        }

        public void enableConnect (bool shouldWe)
        {
            if (true == shouldWe) {
                submitButton.Enabled = true;
                submitButton.Alpha = 1.0f;
            } else {
                submitButton.Enabled = false;
                submitButton.Alpha = .5f;
            }
        }
    }
}
