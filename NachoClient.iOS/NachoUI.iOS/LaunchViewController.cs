// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;

using Foundation;
using UIKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class LaunchViewController : NcUIViewControllerNoLeaks
    {
        bool shortScreen;
        bool largeScreen;

        protected UILabel startLabel;
        protected UIImageView circleMail;
        protected UIButton submitButton;
        protected UIImageView loginTriangles;

        protected bool hasCompletedInitialAnimation = false;

        public LaunchViewController (IntPtr handle) : base (handle)
        {
        }

        public static void StartAccountSetup (UIViewController fromViewController)
        {
            var storyboard = UIStoryboard.FromName ("MainStoryboard_iPhone", null);
            var toViewController = (AdvancedLoginViewController)storyboard.InstantiateViewController ("AdvancedLoginViewController");
            var segue = new FadeCustomSegue ("", fromViewController, toViewController);
            segue.Perform ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                this.NavigationController.SetNavigationBarHidden (true, false);
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);

            if (!hasCompletedInitialAnimation) {
                UIView.AnimateKeyframes (1.6, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {

                    UIView.AddKeyframeWithRelativeStartTime (0, .5, () => {
                        if (!largeScreen) {
                            circleMail.Transform = CGAffineTransform.MakeScale (2.0f / 3.0f, 2.0f / 3.0f);
                        } else {
                            circleMail.Transform = CGAffineTransform.MakeScale (4.0f / 5.0f, 4.0f / 5.0f);
                        }
                        circleMail.Center = new CGPoint (View.Frame.Width / 2, View.Frame.Height / 4.369f - (shortScreen ? 40 : 0));
                    });

                    UIView.AddKeyframeWithRelativeStartTime (.5, .5, () => {
                        startLabel.Alpha = 1.0f;
                        submitButton.Alpha = 1.0f;
                    });

                }, ((bool finished) => {
                    hasCompletedInitialAnimation = true;
                }));
            }
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
                this.NavigationController.SetNavigationBarHidden (false, false);
            }
            NSNotificationCenter.DefaultCenter.RemoveObserver (UITextField.TextFieldTextDidChangeNotification);
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return true;
            }
        }

        protected override void CreateViewHierarchy ()
        {
            View.BackgroundColor = A.Color_NachoGreen;
            scrollView.BackgroundColor = A.Color_NachoGreen;
            contentView.BackgroundColor = A.Color_NachoGreen;

            shortScreen = (500 > View.Frame.Height);
            largeScreen = (600 < View.Frame.Height);

            circleMail = new UIImageView ();
            using (var circleImage = UIImage.FromBundle (Util.GetImage ("Bootscreen-1"))) {
                circleMail.Image = circleImage;
            }
            circleMail.Frame = new CGRect (View.Frame.Width / 2 - (circleMail.Image.Size.Width / 2), (shortScreen ? 155 : 200) + (largeScreen ? 74 : 0), circleMail.Image.Size.Width, circleMail.Image.Size.Height);
            contentView.AddSubview (circleMail);

            var yOffset = View.Frame.Height - 343 - (shortScreen ? 20 : 40);

            startLabel = new UILabel (new CGRect (30, yOffset, View.Frame.Width - 60, 50));
            startLabel.Text = "Start by choosing your email service provider.";
            startLabel.Lines = 2;
            startLabel.BackgroundColor = A.Color_NachoGreen;
            startLabel.TextColor = UIColor.White;
            startLabel.Font = A.Font_AvenirNextRegular17;
            startLabel.TextAlignment = UITextAlignment.Center;
            startLabel.Alpha = 0.0f;
            contentView.AddSubview (startLabel);

            yOffset = startLabel.Frame.Bottom + 20;

            submitButton = Util.BlueButton ("Get Started", View.Frame.Width);
            ViewFramer.Create (submitButton).Y (yOffset);
            submitButton.TouchUpInside += SubmitButtonTouchUpInside;
            submitButton.Alpha = 0.0f;
            contentView.AddSubview (submitButton);

            yOffset = submitButton.Frame.Bottom + 20f;

            scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height );
            CGRect contentFrame;
            contentFrame = new CGRect (0, 0, View.Frame.Width, yOffset);
            contentView.Frame = contentFrame;
            scrollView.ContentSize = contentFrame.Size;

            // Anchor loginTriangles on the bottom
            loginTriangles = new UIImageView ();
            using (var bootImage = UIImage.FromBundle (Util.GetImage ("Bootscreen-5"))) {
                loginTriangles.Image = bootImage;
            }
            loginTriangles.Frame = new CGRect (0, View.Frame.Height - loginTriangles.Image.Size.Height, loginTriangles.Image.Size.Width, loginTriangles.Image.Size.Height);
            View.AddSubview (loginTriangles);
        }

        protected override void ConfigureAndLayout ()
        {
            Log.Info (Log.LOG_UI, "LaunchViewController: starting fresh");
            ConfigureAndLayoutInternal ();
        }

        /// <summary>
        /// Hides the Advances & Customer Support buttons when the service table is visible
        /// </summary>
        protected void ConfigureAndLayoutInternal ()
        {
            UIView.AnimateKeyframes (1, 0, UIViewKeyframeAnimationOptions.OverrideInheritedDuration, () => {
                UIView.AddKeyframeWithRelativeStartTime (0, 1, () => {
                    circleMail.Alpha = 1;
                });
            }, ((bool finished) => {
                ;
            }));
        }

        protected void SubmitButtonTouchUpInside (object sender, EventArgs e)
        {
            PerformSegue ("SegueToAdvancedLogin", this);
        }

        protected override void Cleanup ()
        {
            submitButton.TouchUpInside -= SubmitButtonTouchUpInside;
            submitButton = null;
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("SegueToSupport")) {
                return;
            }
            if (segue.Identifier.Equals ("SegueToAdvancedLogin")) {
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }
    }
}
