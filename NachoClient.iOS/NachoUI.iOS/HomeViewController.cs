// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;
using SWRevealViewControllerBinding;

namespace NachoClient.iOS
{
    public partial class HomeViewController : NcUIViewController
    {
        UIPageViewController pageController;

        public HomeViewController (IntPtr handle) : base (handle)
        {
        }

        /// <summary>
        /// On first run, push the modal LaunchViewController to get credentials.
        /// </summary>
        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            /*
            // ideally we get rid of Navcontroller and have a dismiss button in toolbar
            // that said, for now, leave the NachoNow navigation controller so we can exit
            // the tutorial.
               
            UIBarButtonItem dismissButton = new UIBarButtonItem (UIBarButtonSystemItem.Done);
            dismissButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("HomeToNachoNow", this);
            };
            NavigationItem.RightBarButtonItem = dismissButton;

            this.NavigationController.NavigationBar.Translucent = true;
            this.NavigationController.NavigationBar.BackgroundColor = UIColor.Clear;
            */

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();

            // Multiple buttons on the left side
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };
            using (var nachoImage = UIImage.FromBundle ("Nacho-Cove-Icon")) {
                nachoButton.Image = nachoImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal);
            }
            nachoButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("HomeToNachoNow", this);
            };

            // Help & demo pages
            InitializePageViewController ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
           if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }

        }

        public void InitializePageViewController ()
        {
            // Initialize the first page
            HomePageController firstPageController = new HomePageController (0);
           

            this.pageController = new UIPageViewController (UIPageViewControllerTransitionStyle.Scroll, 
                UIPageViewControllerNavigationOrientation.Horizontal, UIPageViewControllerSpineLocation.None);

            this.pageController.SetViewControllers (new UIViewController[] { firstPageController }, UIPageViewControllerNavigationDirection.Forward, 
                false, s => {
            });
            this.NavigationController.NavigationBarHidden = false;

            this.pageController.DataSource = new PageDataSource (this);

            this.pageController.View.Frame = this.View.Bounds;
            this.View.AddSubview (this.pageController.View);

        }

        /// <summary>
        /// Gets the total pages in the "Book".
        /// </summary>
        /// <value>
        /// The total pages in the "Book".
        /// </value>
        public int TotalPages {
            get {
                return 4;
            }
        }

        private class PageDataSource : UIPageViewControllerDataSource
        {
            public PageDataSource (HomeViewController parentController)
            {
                this.parentController = parentController;
            }

            private HomeViewController parentController;

            public override UIViewController GetPreviousViewController (UIPageViewController pageViewController, UIViewController referenceViewController)
            {

                HomePageController currentPageController = referenceViewController as HomePageController;

                // Determine if we are on the first page
                if (currentPageController.PageIndex <= 0) {
                    return null;
                } else {
                    int previousPageIndex = currentPageController.PageIndex - 1;
                    return new HomePageController (previousPageIndex);
                }

            }

            public override UIViewController GetNextViewController (UIPageViewController pageViewController, UIViewController referenceViewController)
            {
                HomePageController currentPageController = referenceViewController as HomePageController;

                // Determine if we are on the last page
                if (currentPageController.PageIndex >= (this.parentController.TotalPages - 1)) {
                    return null;
                } else {
                    int nextPageIndex = currentPageController.PageIndex + 1;
                    return new HomePageController (nextPageIndex);
                }

            }

            public override int GetPresentationCount (UIPageViewController pageViewController)
            {
                // NOTE: Don't call the base implementation on a Model class
                // see http://docs.xamarin.com/guides/ios/application_fundamentals/delegates,_protocols,_and_events
                //throw new NotImplementedException ();
                return 4;
            }
            public override int GetPresentationIndex (UIPageViewController pageViewController)
            {
                // NOTE: Don't call the base implementation on a Model class
                // see http://docs.xamarin.com/guides/ios/application_fundamentals/delegates,_protocols,_and_events
                return 0;
            }
         
        }
    }
}
