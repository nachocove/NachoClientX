// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.EventKit;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class CalendarViewController : NcUIViewController, INachoCalendarItemEditorParent, ICalendarTableViewSourceDelegate
    {
        INachoCalendar calendar;
        protected CalendarTableViewSource calendarSource;
        public DateBarView DateDotView = new DateBarView ();

        public bool UseDeviceCalendar;
        protected bool adjustScrollPosition = true;


        public CalendarViewController (IntPtr handle) : base (handle)
        {
            var a = UILabel.AppearanceWhenContainedIn (typeof(UITableViewHeaderFooterView), typeof(CalendarViewController));
            a.TextColor = UIColor.LightGray;
        }


        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            //this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // Multiple buttons on the left side
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };
            using (var nachoImage = UIImage.FromBundle ("Nacho-Cove-Icon")) {
                nachoButton.Image = nachoImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal);
            }
            nachoButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("CalendarToNachoNow", this);
            };

            calendarSource = new CalendarTableViewSource ();
            calendarSource.owner = this;
            calendarSource.SetCalendar (NcCalendarManager.Instance);
            calendarTableView.Source = calendarSource;

            var titleView = new UIView (new RectangleF (0, 0, 70, 44));
            var titleLabel = new UILabel (new RectangleF (0, 0, 70, 44));
            titleLabel.Font = A.Font_AvenirNextDemiBold17;
            titleLabel.AdjustsFontSizeToFitWidth = true;
            titleLabel.TextColor = UIColor.White;
            titleLabel.Text = "Calendar";
            titleView.Add (titleLabel);

            UITapGestureRecognizer doubletap = new UITapGestureRecognizer();
            doubletap.NumberOfTapsRequired = 2; // double tap
            doubletap.AddTarget (this, new MonoTouch.ObjCRuntime.Selector("DoubleTapSelector:"));
            titleView.AddGestureRecognizer (doubletap);
            this.NavigationItem.TitleView = titleView;
            DateBarView backgroundDateBarView = new DateBarView ();
            DateDotView.Frame = (new RectangleF (0, 0, 320, 78));
            DateDotView.ClipsToBounds = true;
            DateDotView.BackgroundColor =  UIColor.White;

            UIPanGestureRecognizer DateDotPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotPan (obj);
            });
            DateDotPanGestureRecognizer.Enabled = true;
            DateDotPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotPanGestureRecognizer);
            DateDotPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            this.View.AddSubview (DateDotView);

            DateDotView.SetOwner (this);
            DateDotView.MakeDayLabels ();
            DateDotView.MakeDateButtons ();
            DateDotView.UpdateButtons ();
            currentDate = DateDotView.ViewDate;
            Console.WriteLine("InitialDate: " + DateDotView.ViewDate.ToString());

            // We must request permission to access the user's calendar
            // This will prompt the user on platforms that ask, or it will validate
            // manifest permissions on platforms that declare their required permissions.

            calendar = NcCalendarManager.Instance;
            calendarTableView.ReloadData ();

            // Watch for changes from the back end
            NcApplication.Instance.StatusIndEvent += (object sender, EventArgs e) => {
                var s = (StatusIndEventArgs)e;
                if (NcResult.SubKindEnum.Info_CalendarSetChanged == s.Status.SubKind) {
                    calendar.Refresh ();
                    calendarTableView.ReloadData ();
                }
            };
        }



        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }

            if (adjustScrollPosition && (calendar.NumberOfDays () > 0)) {
                adjustScrollPosition = false;
                var i = calendar.IndexOfDate (DateTime.UtcNow);
                if (i >= 0) {
                    var p = NSIndexPath.FromItemSection (0, i);
                    calendarTableView.ScrollToRow (p, UITableViewScrollPosition.Top, false);
                }
            }
        }

        /// <summary>
        /// Prepares for segue.
        /// </summary>
        /// <param name="segue">Segue in charge</param>
        /// <param name="sender">Typically the cell that was clicked.</param>
        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "NachoNowToCalendarItem") {
                CalendarItemViewController vc = (CalendarItemViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                var c = holder.value as McCalendar;
                if (null == c) {
                    vc.SetCalendarItem (null, CalendarItemEditorAction.create);
                } else {
                    vc.SetCalendarItem (c, CalendarItemEditorAction.view);
                }
                vc.SetOwner (this);
                return;
            }
//            if (segue.Identifier.Equals ("CalendarToNewCalendarItem")) {
//                CalendarItemViewController dvc = (CalendarItemViewController)segue.DestinationViewController;
//                dvc.SetCalendarItem (null, CalendarItemEditorAction.create);
//                dvc.SetOwner (this);
//                return;
//            }
            if (segue.Identifier.Equals ("CalendarToNachoNow")) {
                // Nothing to do
                return;
            }
            NcAssert.CaseError ();
        }

        public void PerformSegueForDelegate (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (true, null);
        }


        public static UIImageView copyImage = new UIImageView (new RectangleF (0, 0, 320, 78));
        public float startingX = 0;
        public float xOffset = 0;
        public int todayOffset = 0;
        public bool directionFlagSet = false;
        public int directionFlag = 0;
        public DateTime currentDate = new DateTime ();

        /// <summary>
        /// Gesture handler for date dots pan/swipe
        /// </summary>
        private void DateDotPan (UIPanGestureRecognizer obj)
        {
            if (UIGestureRecognizerState.Began == obj.State) {
                Console.WriteLine ("~~~~~~~~~~~~~~~~~~~~~Beginning of Pan~~~~~~~~~~~~~~~~~~~~~");
                startingX = obj.TranslationInView (this.View).X;
                var Image = Util.caputureView (DateDotView);
                copyImage.Image = Image;
                this.View.AddSubview (copyImage);
                this.View.BringSubviewToFront (copyImage);
                Image.Dispose ();
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {

                xOffset = obj.TranslationInView (this.View).X;
                if (0 > xOffset) { //Swipe left
                    if (!directionFlagSet & directionFlag != 1) {
                        directionFlag = 1;
                        DateDotView.ViewDate = currentDate.AddDays (7);
                        DateDotView.UpdateButtons ();
                        Console.WriteLine ("After leftPan currentDate: " + currentDate);
                        Console.WriteLine ("After leftPan DateDotView.ViewDate: " + DateDotView.ViewDate);

                    }

                    var difference = Math.Abs (xOffset - startingX);
                    copyImage.Center = new PointF ((DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new PointF (UIScreen.MainScreen.Bounds.Right + (DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                } 
                else { //Swipe right
                    if (!directionFlagSet & directionFlag != 2) {
                        directionFlag = 2;
                        DateDotView.ViewDate = currentDate.AddDays (-7);
                        DateDotView.UpdateButtons ();
                        Console.WriteLine ("After rightPan currentDate: " + currentDate);
                        Console.WriteLine ("After rightPan DateDotView.ViewDate: " + DateDotView.ViewDate);
                    }

                    var difference = Math.Abs (xOffset - startingX);
                    copyImage.Center = new PointF ((DateDotView.Frame.Width / 2) + difference, 39);
                    DateDotView.Center = new PointF (UIScreen.MainScreen.Bounds.Left - (DateDotView.Frame.Width / 2) + difference, 39);
                }
                return;
            }

            if (UIGestureRecognizerState.Ended == obj.State) {

                Console.WriteLine ("Before Swipe Animation currentDate: " + currentDate);
                Console.WriteLine ("Before Swipe Animation DateDotView.ViewDate: " + DateDotView.ViewDate);
                if (xOffset < -(DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X < -500) { 
                    Console.WriteLine ("#### WENT LEFT");
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImage.Center = new PointF (UIScreen.MainScreen.Bounds.Left - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {

                        }
                    );
                    todayOffset--;
                    currentDate = currentDate.AddDays (7);
                    DateDotView.ViewDate = currentDate;
                } else if (xOffset > (DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X > 500) {
                    Console.WriteLine ("#### WENT RIGHT");
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImage.Center = new PointF (UIScreen.MainScreen.Bounds.Right + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {

                        }
                    );
                    todayOffset++;
                    currentDate = currentDate.AddDays (-7);
                    DateDotView.ViewDate = currentDate;
                } else {
                    Console.WriteLine ("#### STAYED");
                    DateDotView.ViewDate = currentDate;

                    DateDotView.UpdateButtons ();
                    if (0 > xOffset) {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                this.View.BringSubviewToFront (copyImage);
                                copyImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new PointF (UIScreen.MainScreen.Bounds.Right + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));


                            },
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                this.View.BringSubviewToFront (DateDotView);
                            }
                        );
                    } 
                    else {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                this.View.BringSubviewToFront (copyImage);
                                copyImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new PointF (UIScreen.MainScreen.Bounds.Left - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));


                            },
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                this.View.BringSubviewToFront (DateDotView);
                            }
                        );

                    }
                }
                Console.WriteLine ("After Swipe Animation currentDate: " + currentDate);
                Console.WriteLine ("After Swipe Animation DateDotView.ViewDate: " + DateDotView.ViewDate);
                directionFlag = 0;
                Console.WriteLine ("~~~~~~~~~~~~~~~~~~~~~~~~End of Pan~~~~~~~~~~~~~~~~~~~~~~~~");
                return;
            }
        }

        [MonoTouch.Foundation.Export("DoubleTapSelector:")]
        public void OnDoubleTap (UIGestureRecognizer sender) {
            var Image = Util.caputureView (DateDotView);
            copyImage.Image = Image;
            this.View.AddSubview (copyImage);
            this.View.BringSubviewToFront (copyImage);
            Image.Dispose ();

            if (0 > todayOffset) {
            
                DateDotView.ViewDate = DateTime.Today;
                DateDotView.UpdateButtons ();
                copyImage.Center = new PointF ((DateDotView.Frame.Width / 2), 39);
                DateDotView.Center = new PointF (UIScreen.MainScreen.Bounds.Left - (DateDotView.Frame.Width / 2), 39);
                UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        copyImage.Center = new PointF (UIScreen.MainScreen.Bounds.Right + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    },
                    () => {

                    }
                );
                DateDotView.ViewDate = DateTime.Today;
                currentDate = DateDotView.ViewDate;
                todayOffset = 0;
            }
            if (0 < todayOffset) {
            
                DateDotView.ViewDate = DateTime.Today;
                DateDotView.UpdateButtons ();
                copyImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                DateDotView.Center = new PointF (UIScreen.MainScreen.Bounds.Right + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                    () => {
                        copyImage.Center = new PointF (UIScreen.MainScreen.Bounds.Left - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    },
                    () => {

                    }
                );

                currentDate = DateDotView.ViewDate;
                todayOffset = 0;
            }
        }

        public void ScrollToDate(DateBarView view, int buttonLabel) {
            var difference = view.ViewDate.Day - buttonLabel;
            var date = view.ViewDate.AddDays (-difference);
            int index = DateBarView.IndexOfDayOfWeek (date.DayOfWeek.ToString ());
            view.ToggleButtons (index);
            calendarSource.ScrollToDate (calendarTableView, date);
        }
    
    
    }




}
