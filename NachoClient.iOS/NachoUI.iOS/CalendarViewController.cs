// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using System.Collections.Generic;
using Foundation;
using UIKit;
using EventKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using MimeKit;

namespace NachoClient.iOS
{
    public partial class CalendarViewController : NcUIViewController, ICalendarTableViewSourceDelegate, IAccountSwitching
    {
        protected CalendarTableViewSource calendarSource;
        protected INcEventProvider eventCalendarMap;
        protected UITableView calendarTableView;
        NcUIBarButtonItem todayButton;
        protected DateTime todayButtonDate;
        public DateBarView DateDotView;
        public DateTime selectedDate = new DateTime ();
        public nint selectedDateTag = 0;
        public nint todayWeekTag = 0;
        public nint todayMonthTag = 0;
        protected static int dateBarHeight = 97;
        protected static int dateBarRowHeight = 60;
        protected static nfloat screenWidth = UIScreen.MainScreen.Bounds.Width;
        protected static nfloat screenRight = UIScreen.MainScreen.Bounds.Right;
        protected static nfloat screenLeft = UIScreen.MainScreen.Bounds.Left;

        UIPanGestureRecognizer DateDotWeekPanGestureRecognizer = null;
        UIPanGestureRecognizer DateDotToggleOpenMonthPanGestureRecognizer = null;
        UIPanGestureRecognizer DateDotMonthViewPanGestureRecognizer = null;

        public static bool BasicView = false;
        protected bool firstTime = true;

        public CalendarViewController () : base ()
        {
            var a = UILabel.AppearanceWhenContainedIn (typeof(UITableViewHeaderFooterView), typeof(CalendarViewController));
            a.TextColor = UIColor.LightGray;

            eventCalendarMap = NachoPlatform.Calendars.Instance.EventProviderInstance;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Uncomment to hide <More
            // if (null != NavigationItem) {
            //     NavigationItem.SetHidesBackButton (true, false);
            // }
                
            todayButton = new NcUIBarButtonItem ();
            todayButton.AccessibilityLabel = "Today";
            todayButton.Clicked += (object sender, EventArgs e) => {
                ReturnToToday ();
            };
            todayButtonDate = DateTime.MinValue;
            UpdateDateInTodayButton ();

            var addEventButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (addEventButton, "cal-add");
            addEventButton.AccessibilityLabel = "New meeting";
            addEventButton.Clicked += (object sender, EventArgs e) => {
                CreateEvent ();
            };

            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { addEventButton, todayButton };

            // Adjust the icon; calendar covers all account
            SwitchToAccount (NcApplication.Instance.Account);

            // We must request permission to access the user's calendar
            // This will prompt the user on platforms that ask, or it will validate
            // manifest permissions on platforms that declare their required permissions.
            CreateView ();
            ConfigureBasicView ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;

            eventCalendarMap.UiRefresh = () => {
                ReloadDataWithoutScrolling ();
                UpdateDateDotView ();
            };

            ReloadDataWithoutScrolling ();
            UpdateDateDotView ();
            UpdateDateInTodayButton ();

            if (firstTime) {
                firstTime = false;
                calendarSource.ScrollToDate (calendarTableView, DateTime.Today);
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            PermissionManager.DealWithCalendarPermission ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
            eventCalendarMap.UiRefresh = null;
        }

        public void CreateEvent (DateTime startDate)
        {
            var vc = new EditEventViewController ();
            vc.SetStartingDate (startDate);
            vc.SetCalendarItem (null);
            var navigationController = new UINavigationController (vc);
            Util.ConfigureNavBar (false, navigationController);
            PresentViewController (navigationController, true, null);
        }

        void CreateEvent ()
        {
            var vc = new EditEventViewController ();
            vc.SetCalendarItem (null);
            var navigationController = new UINavigationController (vc);
            Util.ConfigureNavBar (false, navigationController);
            PresentViewController (navigationController, true, null);
        }

        public void ShowEvent (McEvent calendarEvent)
        {
            var vc = new EventViewController ();
            vc.SetCalendarItem (calendarEvent);
            NavigationController.PushViewController (vc, true);
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            switch (s.Status.SubKind) {

            case NcResult.SubKindEnum.Info_ExecutionContextChanged:
                if (NcApplication.ExecutionContextEnum.Foreground == NcApplication.Instance.ExecutionContext) {
                    UpdateDateInTodayButton ();
                }
                break;
            }
        }

        /// <summary>
        /// When ReloadData() results is new table entries or in table entries going away,
        /// the visible portion of the table might shift significantly.  This function
        /// attempts to scroll the view back to where it was before ReloadData() was called.
        /// </summary>
        protected void ReloadDataWithoutScrolling ()
        {
            var visibleRows = calendarTableView.IndexPathsForVisibleRows;

            if (null == visibleRows || 0 == visibleRows.Length) {

                // No actual events are visible.  Section headers only.  Figure out which section
                // is at the top (which is not trivial), then scroll that section to the top
                // after reloading the data.  (With the zero-height dummy row that has been added
                // to each day, there should always be visible rows, so this code isn't needed
                // anymore.  But I am leaving it here just in case.)
                nint topSection = 0;
                var visibleArea = calendarTableView.Bounds;
                nint numSections = calendarSource.NumberOfSections (calendarTableView);
                for (nint i = 0; i < numSections; ++i) {
                    var sectionBounds = calendarTableView.RectForSection (i);
                    if (visibleArea.IntersectsWith (sectionBounds)) {
                        topSection = i;
                        break;
                    }
                }

                calendarTableView.ReloadData ();

                calendarTableView.ScrollToRow (NSIndexPath.FromItemSection (NSRange.NotFound, topSection), UITableViewScrollPosition.Top, false);

            } else {

                calendarTableView.ReloadData ();

                // Pick the row that was near the middle of the visible rows, and make sure that row is still visible.

                NSIndexPath scrollToRow = visibleRows [visibleRows.Length / 2];

                nint numSections = calendarSource.NumberOfSections (calendarTableView);
                if (scrollToRow.Section >= numSections) {
                    // The number of days being shown has decreased.  Scroll to the last day.
                    scrollToRow = NSIndexPath.FromItemSection (NSRange.NotFound, numSections - 1);
                } else {
                    nint numRows = calendarSource.RowsInSection (calendarTableView, scrollToRow.Section);
                    if (scrollToRow.Row >= numRows) {
                        // The number of events on our target day has decreased.  Scroll to the last event on that day.
                        scrollToRow = NSIndexPath.FromItemSection (0 == numRows ? NSRange.NotFound : numRows - 1, scrollToRow.Section);
                    }
                }

                calendarTableView.ScrollToRow (scrollToRow, UITableViewScrollPosition.None, false);
            }
        }

        protected void UpdateDateDotView ()
        {
            if (BasicView) {
                DateDotView.UpdateButtons ();
            } else {
                DateDotView.UpdateButtonsMonth ();
            }
        }

        protected void ConfigureBasicView ()
        {
            // Enabled gestures
            DateDotWeekPanGestureRecognizer.Enabled = true;
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = true;
            BasicView = true;
        }

        protected void ConfigureMonthView ()
        {
            DateDotMonthViewPanGestureRecognizer.Enabled = true;
            BasicView = false;
        }

        protected void CreateView ()
        {
            NavigationController.NavigationBar.Translucent = false;

            calendarSource = new CalendarTableViewSource ();
            calendarSource.owner = this;
            calendarSource.SetCalendar (eventCalendarMap);

            calendarTableView = new UITableView ();
            ConfigureCalendarTableSize (1);
            calendarTableView.Source = calendarSource;
            calendarTableView.SeparatorColor = A.Color_NachoBorderGray;
            calendarTableView.AccessibilityLabel = "Calendar";

            DateDotView = new DateBarView (View, eventCalendarMap);
            DateDotView.SetOwner (this);
            DateDotView.InitializeDateBar ();

            DateDotWeekPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotWeekPan (obj);
            });
            DateDotWeekPanGestureRecognizer.Enabled = false;
            DateDotWeekPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotWeekPanGestureRecognizer);

            DateDotToggleOpenMonthPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotToggleOpenMonthPan (obj);
            });
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
            DateDotToggleOpenMonthPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotToggleOpenMonthPanGestureRecognizer);
            DateDotToggleOpenMonthPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };

            DateDotMonthViewPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotMonthViewPan (obj);
            });
            DateDotMonthViewPanGestureRecognizer.Enabled = false;
            DateDotMonthViewPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotMonthViewPanGestureRecognizer);
            DateDotMonthViewPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            copyImageView = new UIImageView (new CGRect (0, 0, screenWidth, DateDotView.Frame.Height));

            View.AddSubview (copyImageView);
            View.AddSubview (DateDotView);
            View.AddSubview (calendarTableView);


            DateDotView.ViewDate = DateTime.Today;
            currentDate = DateTime.Today;
            selectedDate = DateTime.Today;

            todayMonthTag = DateDotView.GetMonthTag (DateTime.Today);
            DateDotView.UpdateButtons ();

        }

        protected void UpdateDateInTodayButton ()
        {
            // Change the number in the "Today" button if necessary.
            DateTime today = DateTime.Today;
            if (today != todayButtonDate) {
                todayButtonDate = today;
                Util.SetAutomaticImageForButton (todayButton, Util.DrawTodayButtonImage (todayButtonDate.Day.ToString ()));
            }
        }

        protected void DisableGestureRecognizers ()
        {
            DateDotWeekPanGestureRecognizer.Enabled = false;
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
            DateDotMonthViewPanGestureRecognizer.Enabled = false;
        }

        public static UIImageView copyImageView;
        public nfloat startingX = 0;
        public nfloat xOffset = 0;
        public int directionFlag = 0;
        public DateTime currentDate = new DateTime ();

        /// <summary>
        /// Gesture handler for date dots pan/swipe
        /// </summary>
        private void DateDotWeekPan (UIPanGestureRecognizer obj)
        {
            if (UIGestureRecognizerState.Began == obj.State) {
                startingX = obj.TranslationInView (this.View).X;
                var Image = Util.captureView (DateDotView);

                copyImageView.Image = Image;
                Image.Dispose ();
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                xOffset = obj.TranslationInView (this.View).X;
                //offset must be greater than |5| to be sure user is swiping horizontially rather than vertically
                if ((5 < xOffset) || (-5 > xOffset)) {
                    DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
                    if (0 > xOffset) { //Swipe left
                        if (directionFlag != 1) {
                            this.View.BringSubviewToFront (copyImageView);
                            this.View.BringSubviewToFront (calendarTableView);
                            directionFlag = 1;
                            DateDotView.ViewDate = currentDate.AddDays (7);
                            DateDotView.ToggleButtons (-1);
                            DateDotView.UpdateButtons ();
                            DateDotView.ViewDate = currentDate;
                        }

                        var difference = NMath.Abs (xOffset - startingX);
                        copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                    } else { //Swipe right
                        if (directionFlag != 2) {
                            this.View.BringSubviewToFront (copyImageView);
                            this.View.BringSubviewToFront (calendarTableView);
                            directionFlag = 2;
                            DateDotView.ViewDate = currentDate.AddDays (-7);
                            DateDotView.ToggleButtons (-1);
                            DateDotView.UpdateButtons ();
                            DateDotView.ViewDate = currentDate;
                        }

                        var difference = NMath.Abs (xOffset - startingX);
                        copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                    }
                }
                return;
            }

            if (UIGestureRecognizerState.Ended == obj.State || UIGestureRecognizerState.Cancelled == obj.State) {
                if (xOffset < -(DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X < -500) { 
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            this.View.BringSubviewToFront (calendarTableView);
                        }
                    );
                    currentDate = currentDate.AddDays (7);
                    DateDotView.ViewDate = currentDate;

                } else if (xOffset > (DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X > 500) {
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            this.View.BringSubviewToFront (calendarTableView);
                        }
                    );
                    currentDate = currentDate.AddDays (-7);
                    DateDotView.ViewDate = currentDate;
                } else {
                    DateDotView.ViewDate = currentDate;
                    DateDotView.UpdateButtons ();
                    this.View.BringSubviewToFront (DateDotView);
                    this.View.BringSubviewToFront (calendarTableView);

                    if (-5 > xOffset && copyImageView.Center.X != DateDotView.Center.X) {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            },
                            () => {
                                DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            }
                        );
                    } else if (5 < xOffset && copyImageView.Center.X != DateDotView.Center.X) {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            },
                            () => {
                                DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            }
                        );

                    } else {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            },
                            () => {
                            }
                        );
                    }
                }

                ConfigureBasicView ();
                directionFlag = 0;
                return;
            }
        }

        public nfloat startingXMonth = 0;
        private bool isClosing = false;
        private bool isPanning = false;
        private bool startingTableYIsSet = false;

        private void DateDotMonthViewPan (UIPanGestureRecognizer obj)
        {
            int rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
            if (UIGestureRecognizerState.Began == obj.State) {
                startingXMonth = obj.TranslationInView (this.View).X;
                var Image = Util.captureView (DateDotView);
                copyImageView.Image = Image;
                Image.Dispose ();
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                yOffset = obj.TranslationInView (this.View).Y;
                xOffset = obj.TranslationInView (this.View).X;

                if ((yOffset < -5) && (!isPanning)) {
                    ConfigureCalendarTableSize (1);
                    if (!startingTableYIsSet) {
                        tableStartingY = calendarTableView.Center.Y + dateBarHeight + 1 + ((rows - 3) * dateBarRowHeight);
                        startingTableYIsSet = true;
                    }
                    if ((dateBarHeight + 1 + ((rows - 3) * dateBarRowHeight)) + yOffset >= 5) {
                        calendarTableView.Center = new CGPoint (calendarTableView.Center.X, tableStartingY + yOffset);
                    } 
                    isClosing = true;
                    return;
                } else if (((5 < xOffset) || (-5 > xOffset)) && (!isClosing)) {
                    this.View.BringSubviewToFront (copyImageView);
                    this.View.BringSubviewToFront (calendarTableView);
                    if (0 > xOffset) { //Swipe left
                        if (directionFlag != 1) {
                            directionFlag = 1;
                            DateDotView.ViewDate = currentDate.AddMonths (1);
                        }

                        var difference = NMath.Abs (xOffset - startingXMonth);
                        copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                    } else { //Swipe right
                        if (directionFlag != 2) {
                            directionFlag = 2;
                            DateDotView.ViewDate = currentDate.AddMonths (-1);
                        }

                        var difference = NMath.Abs (xOffset - startingXMonth);
                        copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                    }
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    isPanning = true;
                    return;
                }
            }
            if (UIGestureRecognizerState.Ended == obj.State || UIGestureRecognizerState.Cancelled == obj.State) {
                if (isClosing) {
                    if ((yOffset < -60) || (obj.VelocityInView (DateDotView).Y < -500)) {
                        UIView.Animate (.5, 0, UIViewAnimationOptions.CurveEaseOut,
                            () => {
                                DateDotView.Center = new CGPoint ((screenWidth / 2), (DateDotView.Frame.Height / 2));
                                ConfigureCalendarTableSize (1);

                                if ((DateDotView.ViewDate.Month != selectedDate.Month) || ((DateDotView.ViewDate.Month != selectedDate.Month) && (DateDotView.ViewDate.Year != selectedDate.Year))) {
                                    DateDotView.ViewDate = DateDotView.GetFirstDay (DateDotView.ViewDate);
                                    currentDate = DateDotView.ViewDate;
                                } else {
                                    DateDotView.ViewDate = selectedDate;
                                    currentDate = selectedDate;
                                }
                                DateDotView.ToggleButtons (-1);
                                DateDotView.UpdateButtons ();
                            },
                            () => {
                                DisableGestureRecognizers ();
                                ConfigureBasicView ();
                            }
                        );
                    } else if ((yOffset >= -60)) {
                        UIView.Animate (.5, 0, UIViewAnimationOptions.CurveEaseOut,
                            () => {
                                ConfigureCalendarTableSize (rows);
                            },
                            () => {
                                View.BringSubviewToFront (calendarTableView);
                                DisableGestureRecognizers ();
                                ConfigureMonthView ();
                            }
                        );
                    } 
                    startingTableYIsSet = false;
                } else if (isPanning) {
                    if ((xOffset < -(DateDotView.Frame.Width / 3)) || (((xOffset < -(DateDotView.Frame.Width / 5)) && (obj.VelocityInView (DateDotView).X < -500)))) { 
                        UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                copyImageView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                ConfigureCalendarTableSize (rows);
                            },
                            () => {
                            }
                        );
                        currentDate = currentDate.AddMonths (1);
                        DateDotView.ViewDate = currentDate;

                    } else if ((xOffset > (DateDotView.Frame.Width / 3)) || (((xOffset > (DateDotView.Frame.Width / 5)) && (obj.VelocityInView (DateDotView).X > 500)))) {
                        UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                copyImageView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                ConfigureCalendarTableSize (rows);
                            },
                            () => {
                            }
                        );
                        currentDate = currentDate.AddMonths (-1);
                        DateDotView.ViewDate = currentDate;
                    } else if ((xOffset < (DateDotView.Frame.Width / 3)) && (xOffset > -(DateDotView.Frame.Width / 3))) {
                        DateDotView.ViewDate = currentDate;
                        DateDotView.UpdateButtonsMonth ();
                        if (0 >= xOffset && copyImageView.Center.X != DateDotView.Center.X) {
                            UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                                () => {
                                    copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                    DateDotView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                },
                                () => {
                                    DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                    copyImageView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                }
                            );
                        } else if (0 < xOffset && copyImageView.Center.X != DateDotView.Center.X) {
                            UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                                () => {
                                    copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                    DateDotView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                },
                                () => {
                                    DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                    copyImageView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                }
                            );
                        } else {
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        }
                    }
                    this.View.BringSubviewToFront (DateDotView);
                    this.View.BringSubviewToFront (calendarTableView);
                    ConfigureMonthView ();
                    directionFlag = 0;
                }
                isClosing = false;
                isPanning = false;
                return;
            }  
        }

        nfloat yOffset = 0;
        nfloat tableStartingY;

        private void DateDotToggleOpenMonthPan (UIPanGestureRecognizer obj)
        {
            int rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
            if (UIGestureRecognizerState.Began == obj.State) {
                tableStartingY = calendarTableView.Center.Y;
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                yOffset = obj.TranslationInView (this.View).Y;

                if (yOffset > 5) {
                    DateDotWeekPanGestureRecognizer.Enabled = false;
                    DateDotMonthViewPanGestureRecognizer.Enabled = false;
                    if ((dateBarHeight + 1 + ((rows - 3) * dateBarRowHeight)) > yOffset) {
                        calendarTableView.Center = new CGPoint (calendarTableView.Center.X, tableStartingY + yOffset);
                    }
                }
                return;
            }

            if (UIGestureRecognizerState.Ended == obj.State || UIGestureRecognizerState.Cancelled == obj.State) {
                if (yOffset > 60 || obj.VelocityInView (DateDotView).Y > 500) {
                    UIView.Animate (.3, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureCalendarTableSize (rows);
                            View.BringSubviewToFront (calendarTableView);
                            DateDotView.UpdateButtonsMonth ();
                        },
                        () => {
                            DisableGestureRecognizers ();
                            ConfigureMonthView ();
                        }
                    );
                } else {
                    UIView.Animate (.3, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureCalendarTableSize (1);
                        },
                        () => {
                            DisableGestureRecognizers ();
                            ConfigureBasicView ();
                        }
                    );
                }
                return;
            }
        }

        protected void ConfigureCalendarTableSize (int rows)
        {
            switch (rows) {
            case 4: 
                calendarTableView.Frame = CalendarTableFourSize ();
                break;
            case 5:
                calendarTableView.Frame = CalendarTableFiveSize ();
                break;
            case 6:
                calendarTableView.Frame = CalendarTableSixSize ();
                break;
            default:
                calendarTableView.Frame = CalendarTableFullSize ();
                break;
            }
        }

        protected CGRect CalendarTableFullSize ()
        {
            var parentFrame = View.Frame;
            var rect = new CGRect (0, dateBarHeight, parentFrame.Width, parentFrame.Height - dateBarHeight);
            return rect;
        }

        protected CGRect CalendarTableFourSize ()
        {
            var parentFrame = View.Frame;
            var rect = new CGRect (0, dateBarHeight + (3 * dateBarRowHeight), parentFrame.Width, parentFrame.Height - (dateBarHeight + (3 * dateBarRowHeight)));
            return rect;
        }

        protected CGRect CalendarTableFiveSize ()
        {
            var parentFrame = View.Frame;
            var rect = new CGRect (0, dateBarHeight + (4 * dateBarRowHeight), parentFrame.Width, parentFrame.Height - (dateBarHeight + (4 * dateBarRowHeight)));
            return rect;
        }

        protected CGRect CalendarTableSixSize ()
        {
            var parentFrame = View.Frame;
            var rect = new CGRect (0, dateBarHeight + (5 * dateBarRowHeight), parentFrame.Width, parentFrame.Height - (dateBarHeight + (5 * dateBarRowHeight)));
            return rect;
        }

        public void ScrollToDate (DateBarView view, UIButton button)
        {
            var tempDate = view.ViewDate;
            var label = button.TitleLabel.Text.ToString ();
            if (!BasicView) {
                var Image = Util.captureView (DateDotView);
                copyImageView.Image = Image;

                Image.Dispose ();
                if (106 > button.Tag && 23 <= Convert.ToInt32 (label)) {
                    this.View.BringSubviewToFront (copyImageView);
                    this.View.BringSubviewToFront (calendarTableView);
                    tempDate = view.ViewDate.AddMonths (-1);
                    var difference = tempDate.Day - Convert.ToInt32 (label);
                    var date = tempDate.AddDays (-difference);
                    selectedDate = date;
                    selectedDateTag = DateDotView.GetMonthTag (view.ViewDate);
                    DateDotView.ViewDate = selectedDate;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            ConfigureCalendarTableSize (rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                    calendarSource.ScrollToDate (calendarTableView, selectedDate);

                } else if (128 < button.Tag && 1 <= Convert.ToInt32 (label) && 6 >= Convert.ToInt32 (label)) {
                    this.View.BringSubviewToFront (copyImageView);
                    this.View.BringSubviewToFront (calendarTableView);
                    tempDate = tempDate.AddMonths (1);
                    var difference = tempDate.Day - Convert.ToInt32 (label);
                    var date = tempDate.AddDays (-difference);
                    selectedDate = date;
                    selectedDateTag = DateDotView.GetMonthTag (view.ViewDate);
                    DateDotView.ViewDate = selectedDate;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    var rows = DateDotView.RowsInAMonth (selectedDate);
                    copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            ConfigureCalendarTableSize (rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                    calendarSource.ScrollToDate (calendarTableView, selectedDate);

                } else {
                    var difference = view.ViewDate.Day - Convert.ToInt32 (label);
                    var date = view.ViewDate.AddDays (-difference);
                    selectedDate = date;
                    currentDate = selectedDate;
                    selectedDateTag = button.Tag;
                    calendarSource.ScrollToDate (calendarTableView, date);
                }
            } else {
                var difference = view.ViewDate.Day - Convert.ToInt32 (label);
                var date = view.ViewDate;
                if (-10 > difference) {
                    date = date.AddDays (-difference);
                    date = date.AddMonths (-1);
                } else if (10 < difference) {
                    date = date.AddDays (-difference);
                    date = date.AddMonths (1);
                } else {
                    date = view.ViewDate.AddDays (-difference);
                }
                selectedDate = date;
                currentDate = selectedDate;
                selectedDateTag = button.Tag;
                calendarSource.ScrollToDate (calendarTableView, date);
            }
            this.View.BringSubviewToFront (DateDotView);
            this.View.BringSubviewToFront (calendarTableView);
        }

        public void ReturnToToday ()
        {
            int returnWeek = DateDotView.IsButtonInWeek (todayWeekTag, DateTime.Today, DateDotView.ViewDate);
            var day = DateDotView.ViewDate.Day;
            var firstDay = DateDotView.ViewDate.AddDays (-day + 1); 
            int returnMonth = DateDotView.IsButtonInMonth (todayMonthTag, DateTime.Today, firstDay);
            if (BasicView) {
                var Image = Util.captureView (DateDotView);
                copyImageView.Image = Image;
                this.View.BringSubviewToFront (copyImageView);
                this.View.BringSubviewToFront (calendarTableView);
                Image.Dispose ();

                if (-1 == returnWeek) {

                    ResetDatePickerWeekToToday ();
                    copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            ConfigureCalendarTableSize (1);
                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else if (1 == returnWeek) {

                    ResetDatePickerWeekToToday ();
                    copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            ConfigureCalendarTableSize (1);
                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else {
                    if (selectedDateTag != todayWeekTag) {
                        ResetDatePickerWeekToToday ();
                    }
                }

            } else {
                var Image = Util.captureView (DateDotView);
                copyImageView.Image = Image;
                this.View.BringSubviewToFront (copyImageView);
                this.View.BringSubviewToFront (calendarTableView);
                Image.Dispose ();

                if (1 == returnMonth) {

                    ResetDatePickerMonthToToday ();
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            ConfigureCalendarTableSize (rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else if (-1 == returnMonth) {

                    ResetDatePickerMonthToToday ();
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    copyImageView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new CGPoint (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new CGPoint (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new CGPoint ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            ConfigureCalendarTableSize (rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else {
                    if (selectedDateTag != todayMonthTag) {
                        ResetDatePickerMonthToToday ();
                    }
                }
            }
            this.View.BringSubviewToFront (DateDotView);
            this.View.BringSubviewToFront (calendarTableView);
            calendarSource.ScrollToDate (calendarTableView, DateTime.Today);

        }

        public void ResetDatePickerMonthToToday ()
        {
            DateDotView.ViewDate = DateTime.Today;
            selectedDate = DateTime.Today;
            selectedDateTag = todayMonthTag;
            DateDotView.ToggleButtons (-1);
            DateDotView.UpdateButtonsMonth ();
        }

        public void ResetDatePickerWeekToToday ()
        {
            DateDotView.ViewDate = DateTime.Today;
            selectedDate = DateTime.Today;
            selectedDateTag = todayWeekTag;
            DateDotView.ToggleButtons (-1);
            DateDotView.UpdateButtons ();
        }

        // ICalendarTableViewSourceDelegate
        public void SendRunningLateMessage (int eventId)
        {
            var calendarInvite = CalendarHelper.GetMcCalendarRootForEvent (eventId);
            if (null != calendarInvite) {
                var account = McAccount.EmailAccountForCalendar (calendarInvite);
                var message = McEmailMessage.MessageWithSubject (account, calendarInvite.Subject);
                message.To = calendarInvite.OrganizerEmail;
                var composeViewController = new MessageComposeViewController (account);
                composeViewController.Composer.InitialText = "Running late";
                composeViewController.Composer.Message = message;
                composeViewController.Present ();
            }
        }

        // ICalendarTableViewSourceDelegate
        public void ForwardInvite (int eventId)
        {
            var calendarInvite = CalendarHelper.GetMcCalendarRootForEvent (eventId);
            if (null != calendarInvite) {
                var account = McAccount.EmailAccountForCalendar (calendarInvite);
                var composeViewController = new MessageComposeViewController (account);
                composeViewController.Composer.RelatedCalendarItem  = calendarInvite;
                composeViewController.Composer.Message = McEmailMessage.MessageWithSubject (account, "Fwd: " + calendarInvite.Subject);
                composeViewController.Present ();
            }
        }

        // ICalendarTableViewSourceDelegate
        public void CalendarTableViewScrollingEnded ()
        {
            calendarSource.MaybeExtendTableView (calendarTableView);
        }

        public void SwitchToAccount (McAccount account)
        {
        }
    }

}
