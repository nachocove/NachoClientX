// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.EventKit;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class CalendarViewController : UITableViewController, IUISearchDisplayDelegate, IUISearchBarDelegate
    {
        INachoCalendar calendar;
        public bool UseDeviceCalendar;
        protected bool adjustScrollPosition = true;

        /// <summary>
        ///  Must match the id in the prototype cell.
        /// </summary>
        static readonly NSString CalendarToCalendarItemSegueID = new NSString ("CalendarToCalendarItem");

        public CalendarViewController (IntPtr handle) : base (handle)
        {
            var a = UILabel.AppearanceWhenContainedIn (typeof(UITableViewHeaderFooterView), typeof(CalendarViewController));
            a.TextColor = UIColor.LightGray;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // Multiple buttons on the left side
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };
            using (var nachoImage = UIImage.FromBundle ("Nacho-Cove-Icon")) {
                nachoButton.Image = nachoImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal);
            }
            nachoButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("CalendarToNachoNow", this);
            };

            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { addButton, searchButton };

            searchButton.Clicked += (object sender, EventArgs e) => {
                if (!SearchDisplayController.Active) {
                    SearchDisplayController.SearchBar.BecomeFirstResponder ();
                }
            };
                
            // We must request permission to access the user's calendar
            // This will prompt the user on platforms that ask, or it will validate
            // manifest permissions on platforms that declare their required permissions.

            calendar = NcCalendarManager.Instance;
            TableView.ReloadData ();

            // Watch for changes from the back end
            BackEnd.Instance.StatusIndEvent += (object sender, EventArgs e) => {
                var s = (StatusIndEventArgs)e;
                if (NcResult.SubKindEnum.Info_CalendarSetChanged == s.Status.SubKind) {
                    calendar.Refresh ();
                    TableView.ReloadData ();
                }
            };
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            if (adjustScrollPosition &&  (calendar.NumberOfDays() > 0)) {
                adjustScrollPosition = false;
                var i = calendar.IndexOfDate (DateTime.UtcNow);
                if (i >= 0) {
                    var p = NSIndexPath.FromItemSection (0, i);
                    TableView.ScrollToRow (p, UITableViewScrollPosition.Top, false);
                }
            }
        }

        /// <summary>
        /// Prepares for segue.
        /// </summary>
        /// <param name="segue">Segue in charge</param>
        /// <param name="sender">Typically the cell that was clicked.</param>
        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            // The "+" button segues with CalendarToNewCalendarItem
            // Cells segue with CellSegueID, CalendarToCalendarItem
            if (segue.Identifier.Equals (CalendarToCalendarItemSegueID)) {
                UITableViewCell cell = (UITableViewCell)sender;
                NSIndexPath indexPath = TableView.IndexPathForCell (cell);
                McCalendar calendarItem = calendar.GetCalendarItem (indexPath.Section, indexPath.Row);
                CalendarItemViewController destinationController = (CalendarItemViewController)segue.DestinationViewController;
                destinationController.calendarItem = calendarItem;
                destinationController.Title = Pretty.SubjectString(calendarItem.Subject);
            }
        }

        public override int NumberOfSections (UITableView tableView)
        {
            if (null == calendar) {
                return 0;
            } else {
                return calendar.NumberOfDays ();
            }
        }

        public override int RowsInSection (UITableView tableview, int section)
        {
            if (null == calendar) {
                return 0;
            } else {
                return calendar.NumberOfItemsForDay (section);
            }
        }

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = TableView.DequeueReusableCell (CalendarToCalendarItemSegueID);
            // Should always get a prototype cell
            NachoCore.NachoAssert.True (null != cell);

            McCalendar c = calendar.GetCalendarItem (indexPath.Section, indexPath.Row);

            UILabel startLabel = (UILabel)cell.ViewWithTag (1);
            UILabel durationLabel = (UILabel)cell.ViewWithTag (2);
            UIImageView calendarImage = (UIImageView)cell.ViewWithTag (3);
            UILabel titleLabel = (UILabel)cell.ViewWithTag (4);

            if (c.AllDayEvent) {
                startLabel.Text = "ALL DAY";
                durationLabel.Text = "";
            } else {
                startLabel.Text = Pretty.ShortTimeString (c.StartTime);
                durationLabel.Text = Pretty.CompactDuration (c);
            }
            calendarImage.Image = NachoClient.Util.DotWithColor (UIColor.Green);
            var titleLabelFrame = titleLabel.Frame;
            titleLabelFrame.Width = cell.Frame.Width - titleLabel.Frame.Left;
            titleLabel.Frame = titleLabelFrame;
            titleLabel.Text = c.Subject;
            titleLabel.SizeToFit ();

            return cell;
        }

        public override string TitleForHeader (UITableView tableView, int section)
        {
            DateTime d = calendar.GetDayDate (section);
            return Pretty.FullDateString (d).ToUpper ();
        }
    }
}
