// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.EventKit;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class CalendarViewController : NcUIViewController, INachoCalendarItemEditorParent, ICalendarTableViewSourceDelegate
    {
        INachoCalendar calendar;
        protected CalendarTableViewSource calendarSource;

        public bool UseDeviceCalendar;
        protected bool adjustScrollPosition = true;

        public CalendarViewController (IntPtr handle) : base (handle)
        {
            var a = UILabel.AppearanceWhenContainedIn (typeof(UITableViewHeaderFooterView), typeof(CalendarViewController));
            a.TextColor = UIColor.LightGray;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // Multiple buttons on the left side
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };
            using (var nachoImage = UIImage.FromBundle ("Nacho-Cove-Icon")) {
                nachoButton.Image = nachoImage.ImageWithRenderingMode (UIImageRenderingMode.AlwaysOriginal);
            }
            nachoButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("CalendarToNachoNow", this);
            };

            calendarSource = new CalendarTableViewSource ();
            calendarSource.owner = this;
            calendarSource.SetCalendar (NcCalendarManager.Instance);
            calendarTableView.Source = calendarSource;
                
            // We must request permission to access the user's calendar
            // This will prompt the user on platforms that ask, or it will validate
            // manifest permissions on platforms that declare their required permissions.

            calendar = NcCalendarManager.Instance;
            calendarTableView.ReloadData ();

            // Watch for changes from the back end
            NcApplication.Instance.StatusIndEvent += (object sender, EventArgs e) => {
                var s = (StatusIndEventArgs)e;
                if (NcResult.SubKindEnum.Info_CalendarSetChanged == s.Status.SubKind) {
                    calendar.Refresh ();
                    calendarTableView.ReloadData ();
                }
            };
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }

            if (adjustScrollPosition && (calendar.NumberOfDays () > 0)) {
                adjustScrollPosition = false;
                var i = calendar.IndexOfDate (DateTime.UtcNow);
                if (i >= 0) {
                    var p = NSIndexPath.FromItemSection (0, i);
                    calendarTableView.ScrollToRow (p, UITableViewScrollPosition.Top, false);
                }
            }
        }

        /// <summary>
        /// Prepares for segue.
        /// </summary>
        /// <param name="segue">Segue in charge</param>
        /// <param name="sender">Typically the cell that was clicked.</param>
        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "NachoNowToCalendarItem") {
                CalendarItemViewController vc = (CalendarItemViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                var c = holder.value as McCalendar;
                if (null == c) {
                    vc.SetCalendarItem (null, CalendarItemEditorAction.create);
                } else {
                    vc.SetCalendarItem (c, CalendarItemEditorAction.view);
                }
                vc.SetOwner (this);
                return;
            }
//            if (segue.Identifier.Equals ("CalendarToNewCalendarItem")) {
//                CalendarItemViewController dvc = (CalendarItemViewController)segue.DestinationViewController;
//                dvc.SetCalendarItem (null, CalendarItemEditorAction.create);
//                dvc.SetOwner (this);
//                return;
//            }
            if (segue.Identifier.Equals ("CalendarToNachoNow")) {
                // Nothing to do
                return;
            }
            NcAssert.CaseError ();
        }

        public void PerformSegueForDelegate (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (true, null);
        }

    }
}
