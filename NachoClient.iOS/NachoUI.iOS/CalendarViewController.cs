// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.EventKit;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class CalendarViewController : NcUIViewController, INachoCalendarItemEditorParent, ICalendarTableViewSourceDelegate
    {
        INachoCalendar calendar;
        protected CalendarTableViewSource calendarSource;
        public DateBarView DateDotView = new DateBarView ();
        public DateTime selectedDate = new DateTime ();
        public int selectedDateTag = 0;
        public int todayWeekTag = 0;
        public int todayMonthTag = 0;
        protected static int dateBarHeight = 78;
        protected static int dateBarRowHeight = 46;
        protected static float screenWidth = UIScreen.MainScreen.Bounds.Width;
        protected static float screenRight = UIScreen.MainScreen.Bounds.Right;
        protected static float screenLeft = UIScreen.MainScreen.Bounds.Left;

        UIPanGestureRecognizer DateDotWeekPanGestureRecognizer = null;
        UIPanGestureRecognizer DateDotMonthPanGestureRecognizer = null;
        UIPanGestureRecognizer DateDotToggleOpenMonthPanGestureRecognizer = null;
        UIPanGestureRecognizer DateDotToggleCloseMonthPanGestureRecognizer = null;

        public static bool BasicView = false;
        public bool UseDeviceCalendar;
        protected bool adjustScrollPosition = true;

        public CalendarViewController (IntPtr handle) : base (handle)
        {
            var a = UILabel.AppearanceWhenContainedIn (typeof(UITableViewHeaderFooterView), typeof(CalendarViewController));
            a.TextColor = UIColor.LightGray;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();
            //this.View.AddGestureRecognizer (this.RevealViewController ().PanGestureRecognizer);

            // Multiple buttons on the left side
            NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] { revealButton, nachoButton };
            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { newCalEventButton, todayButton };
            nachoButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("CalendarToNachoNow", this);
            };
            todayButton.Clicked += (object sender, EventArgs e) => {
                ReturnToToday ();
            };
            newCalEventButton.Clicked += (object sender, EventArgs e) => {

            };

            calendarSource = new CalendarTableViewSource ();
            calendarSource.owner = this;
            calendarSource.SetCalendar (NcCalendarManager.Instance);
            calendarTableView.Source = calendarSource;

            // We must request permission to access the user's calendar
            // This will prompt the user on platforms that ask, or it will validate
            // manifest permissions on platforms that declare their required permissions.

            calendar = NcCalendarManager.Instance;
            calendarTableView.ReloadData ();

            // Watch for changes from the back end
            NcApplication.Instance.StatusIndEvent += (object sender, EventArgs e) => {
                var s = (StatusIndEventArgs)e;
                if (NcResult.SubKindEnum.Info_CalendarSetChanged == s.Status.SubKind) {
                    calendar.Refresh ();
                    calendarTableView.ReloadData ();
                }
            };

            var titleView = new UIView (new RectangleF (0, 0, (dateBarHeight - 8), 44));
            var titleLabel = new UILabel (new RectangleF (0, 0, (dateBarHeight - 8), 44));
            titleLabel.Font = A.Font_AvenirNextDemiBold17;
            titleLabel.AdjustsFontSizeToFitWidth = true;
            titleLabel.TextColor = UIColor.White;
            titleLabel.Text = "Calendar";
            titleView.Add (titleLabel);

            this.NavigationItem.TitleView = titleView;
            DateDotView.Frame = (new RectangleF (0, 0, View.Frame.Width, dateBarHeight));
            DateDotView.ClipsToBounds = true;
            DateDotView.BackgroundColor = UIColor.White;

            DateDotWeekPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotWeekPan (obj);
            });
            DateDotWeekPanGestureRecognizer.Enabled = false;
            DateDotWeekPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotWeekPanGestureRecognizer);

            DateDotToggleOpenMonthPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotToggleOpenMonthPan (obj);
            });
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
            DateDotToggleOpenMonthPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotToggleOpenMonthPanGestureRecognizer);
            DateDotToggleOpenMonthPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };

            DateDotToggleCloseMonthPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotToggleCloseMonthPan (obj);
            });
            DateDotToggleCloseMonthPanGestureRecognizer.Enabled = false;
            DateDotToggleCloseMonthPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotToggleCloseMonthPanGestureRecognizer);
            DateDotToggleCloseMonthPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };

            DateDotMonthPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotMonthPan (obj);
            });
            DateDotMonthPanGestureRecognizer.Enabled = false;
            DateDotMonthPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotMonthPanGestureRecognizer);
            DateDotMonthPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            this.View.AddSubview (DateDotView);

            DateDotView.SetOwner (this);
            DateDotView.MakeDayLabels ();
            DateDotView.MakeDateDotButtons ();

            DateDotView.ViewDate = DateTime.Today;
            currentDate = DateTime.Today;
            selectedDate = DateTime.Today;

            todayMonthTag = DateDotView.GetMonthTag (DateTime.Today);
            DateDotView.UpdateButtons ();
            View.BringSubviewToFront (DateDotView);
            ConfigureBasicView ();
            Console.Write ("screenWidth: " + screenWidth);


        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }

            if (adjustScrollPosition && (calendar.NumberOfDays () > 0)) {
                adjustScrollPosition = false;
                var i = calendar.IndexOfDate (DateTime.Today);
                if (i >= 0) {
                    var p = NSIndexPath.FromItemSection (0, i);
                    calendarTableView.ScrollToRow (p, UITableViewScrollPosition.Top, false);
                }
            }

            //calendarSource.ScrollToDate (calendarTableView, DateTime.Today);

        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            //calendarSource.ScrollToDate (calendarTableView, DateTime.Today);
        }

        /// <summary>
        /// Prepares for segue.
        /// </summary>
        /// <param name="segue">Segue in charge</param>
        /// <param name="sender">Typically the cell that was clicked.</param>
        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "NachoNowToCalendarItem") {
                CalendarItemViewController vc = (CalendarItemViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                var c = holder.value as McCalendar;
                if (null == c) {
                    vc.SetCalendarItem (null, CalendarItemEditorAction.create);
                } else {
                    vc.SetCalendarItem (c, CalendarItemEditorAction.view);
                }
                vc.SetOwner (this);
                return;
            }
//            if (segue.Identifier.Equals ("CalendarToNewCalendarItem")) {
//                CalendarItemViewController dvc = (CalendarItemViewController)segue.DestinationViewController;
//                dvc.SetCalendarItem (null, CalendarItemEditorAction.create);
//                dvc.SetOwner (this);
//                return;
//            }
            if (segue.Identifier.Equals ("CalendarToNachoNow")) {
                // Nothing to do
                return;
            }
            NcAssert.CaseError ();
        }

        public void PerformSegueForDelegate (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (true, null);
        }

        protected void ConfigureBasicView ()
        {
            // Enabled gestures
            DateDotWeekPanGestureRecognizer.Enabled = true;
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = true;
            BasicView = true;
        }

        protected void ConfigureMonthView ()
        {
            DateDotMonthPanGestureRecognizer.Enabled = true;
            DateDotToggleCloseMonthPanGestureRecognizer.Enabled = true;
            BasicView = false;
        }

        protected void DisableGestureRecognizers ()
        {
            DateDotWeekPanGestureRecognizer.Enabled = false;
            DateDotMonthPanGestureRecognizer.Enabled = false;
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
            DateDotToggleCloseMonthPanGestureRecognizer.Enabled = false;
        }

        public static UIImageView copyWeekImage = new UIImageView (new RectangleF (0, 0, screenWidth, dateBarHeight));
        public float startingX = 0;
        public float xOffset = 0;
        public int directionFlag = 0;
        public DateTime currentDate = new DateTime ();

        /// <summary>
        /// Gesture handler for date dots pan/swipe
        /// </summary>
        private void DateDotWeekPan (UIPanGestureRecognizer obj)
        {
            if (UIGestureRecognizerState.Began == obj.State) {
                startingX = obj.TranslationInView (this.View).X;
                var Image = Util.caputureView (DateDotView);
                copyWeekImage.Image = Image;
                Image.Dispose ();
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                xOffset = obj.TranslationInView (this.View).X;
                //offset must be greater than |5| to be sure user is swiping horizontially rather than vertically
                if ((5 < xOffset) || (-5 > xOffset)) {
                    DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
                    if (0 > xOffset) { //Swipe left
                        if (directionFlag != 1) {

                            this.View.AddSubview (copyWeekImage);
                            this.View.BringSubviewToFront (copyWeekImage);
                            directionFlag = 1;
                            DateDotView.ViewDate = currentDate.AddDays (7);
                            DateDotView.ToggleButtons (-1);
                            DateDotView.UpdateButtons ();
                            DateDotView.ViewDate = currentDate;
                        }

                        var difference = Math.Abs (xOffset - startingX);
                        copyWeekImage.Center = new PointF ((DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                    } else { //Swipe right
                        if (directionFlag != 2) {
                            this.View.AddSubview (copyWeekImage);
                            this.View.BringSubviewToFront (copyWeekImage);
                            directionFlag = 2;
                            DateDotView.ViewDate = currentDate.AddDays (-7);
                            DateDotView.ToggleButtons (-1);
                            DateDotView.UpdateButtons ();
                            DateDotView.ViewDate = currentDate;
                        }

                        var difference = Math.Abs (xOffset - startingX);
                        copyWeekImage.Center = new PointF ((DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                    }
                }
                return;
            }

            if (UIGestureRecognizerState.Ended == obj.State) {
                if (xOffset < -(DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X < -500) { 
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyWeekImage.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                        }
                    );
                    currentDate = currentDate.AddDays (7);
                    DateDotView.ViewDate = currentDate;

                } else if (xOffset > (DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X > 500) {
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyWeekImage.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                        }
                    );
                    currentDate = currentDate.AddDays (-7);
                    DateDotView.ViewDate = currentDate;
                } else {
                    DateDotView.ViewDate = currentDate;
                    DateDotView.UpdateButtons ();
                    if (0 > xOffset) {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                this.View.BringSubviewToFront (copyWeekImage);
                                copyWeekImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            },
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                this.View.BringSubviewToFront (DateDotView);
                            }
                        );
                    } else {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                this.View.BringSubviewToFront (copyWeekImage);
                                copyWeekImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            },
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                this.View.BringSubviewToFront (DateDotView);
                            }
                        );

                    }
                }

                ConfigureBasicView ();
                directionFlag = 0;
                return;
            }
        }

        public static UIImageView copyMonthImage = new UIImageView (new RectangleF (0, 0, screenWidth, 300));
        public float startingXMonth = 0;
        public float xOffsetMonth = 0;

        private void DateDotMonthPan (UIPanGestureRecognizer obj)
        {
            if (UIGestureRecognizerState.Began == obj.State) {
                startingXMonth = obj.TranslationInView (this.View).X;
                var Image = Util.caputureView (DateDotView);
                copyMonthImage.Image = Image;
                Image.Dispose ();
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                xOffset = obj.TranslationInView (this.View).X;
                //offset must be greater than |5| to be sure user is swiping vertically rather than horizontially
                if ((5 < xOffset) || (-5 > xOffset)) {
                    this.View.AddSubview (copyMonthImage);
                    this.View.BringSubviewToFront (copyMonthImage);
                    this.View.BringSubviewToFront (calendarTableView);

                    DateDotToggleCloseMonthPanGestureRecognizer.Enabled = false;
                    if (0 > xOffset) { //Swipe left
                        if (directionFlag != 1) {
                            directionFlag = 1;
                            DateDotView.ViewDate = currentDate.AddMonths (1);
                            DateDotView.ToggleButtons (-1);
                            DateDotView.UpdateButtonsMonth ();
                        }

                        var difference = Math.Abs (xOffset - startingXMonth);
                        copyMonthImage.Center = new PointF ((DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2) + 5);
                        DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2) + 5);
                    } else { //Swipe right
                        if (directionFlag != 2) {
                            directionFlag = 2;
                            DateDotView.ViewDate = currentDate.AddMonths (-1);
                            DateDotView.ToggleButtons (-1);
                            DateDotView.UpdateButtonsMonth ();

                        }

                        var difference = Math.Abs (xOffset - startingXMonth);
                        copyMonthImage.Center = new PointF ((DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2) + 5);
                        DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2) + 5);
                    }
                }
                return;
            }

            if (UIGestureRecognizerState.Ended == obj.State) {
                if (xOffset < -(DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X < -500) { 
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyMonthImage.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            ConfigureCalendarTableSize(rows);
                        },
                        () => {
                            this.View.BringSubviewToFront (DateDotView);
                            this.View.BringSubviewToFront (calendarTableView);

                        }
                    );
                    currentDate = currentDate.AddMonths (1);
                    DateDotView.ViewDate = currentDate;

                } else if (xOffset > (DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X > 500) {
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyMonthImage.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            ConfigureCalendarTableSize(rows);
                        },
                        () => {
                            this.View.BringSubviewToFront (DateDotView);
                            this.View.BringSubviewToFront (calendarTableView);

                        }
                    );
                    currentDate = currentDate.AddMonths (-1);
                    DateDotView.ViewDate = currentDate;
                } else {
                    DateDotView.ViewDate = currentDate;
                    DateDotView.UpdateButtonsMonth ();
                    if (0 > xOffset) {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                this.View.BringSubviewToFront (copyMonthImage);
                                this.View.BringSubviewToFront (calendarTableView);
                                copyMonthImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                                DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            },
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                                copyMonthImage.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                                this.View.BringSubviewToFront (DateDotView);
                                this.View.BringSubviewToFront (calendarTableView);
                            }
                        );
                    } else {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                this.View.BringSubviewToFront (copyMonthImage);
                                this.View.BringSubviewToFront (calendarTableView);
                                copyMonthImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                                DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            },
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                                copyMonthImage.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                                this.View.BringSubviewToFront (DateDotView);
                                this.View.BringSubviewToFront (calendarTableView);
                            }
                        );

                    }
                }
                ConfigureMonthView ();
                directionFlag = 0;
                return;
            }
        }

        float yOffset = 0;
        bool UpdateMB = false;

        private void DateDotToggleOpenMonthPan (UIPanGestureRecognizer obj)
        {
            int rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
            if (UIGestureRecognizerState.Began == obj.State) {
                UpdateMB = false;
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                yOffset = obj.TranslationInView (this.View).Y;

                if (yOffset > 5) {
                    if (!UpdateMB) {
                        DateDotView.MakeDateVisable ();
                        UIView.Animate (.2, 0, UIViewAnimationOptions.CurveEaseOut,
                            () => {
                                DateDotView.Center = new PointF ((screenWidth/2), 44);
                            },
                            () => {
                            }
                        );
                        UpdateMB = true;
                    }
                    DateDotWeekPanGestureRecognizer.Enabled = false;
                    DateDotMonthPanGestureRecognizer.Enabled = false;
                    if ((dateBarRowHeight * (rows - 1)) - 3 > yOffset) {
                        calendarTableView.Center = new PointF ((View.Frame.Width/2), (float)291.5 + yOffset);
                    }
                }
                return;
            }

            if (UIGestureRecognizerState.Ended == obj.State) {
                if (yOffset > 60 || obj.VelocityInView (DateDotView).Y > 500) {
                    UIView.Animate (.5, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {

                            DateDotView.Frame = new RectangleF (0, 5, View.Frame.Width, (dateBarHeight - 8) + (dateBarRowHeight * (rows)));
                            calendarTableView.Center = new PointF ((View.Frame.Width/2), (float)288.5 + (dateBarRowHeight * (rows - 1)));
                            View.BringSubviewToFront (calendarTableView);
                            copyMonthImage.Hidden = false;
                            DateDotMonthPanGestureRecognizer.Enabled = true;
                            DateDotView.UpdateButtonsMonth ();
                        },
                        () => {
                            DisableGestureRecognizers ();
                            ConfigureMonthView ();
                            ConfigureCalendarTableSize(rows);
                        }
                    );
                } else {
                    UIView.Animate (.5, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {

                            DateDotView.Frame = new RectangleF (0, 0, View.Frame.Width, dateBarHeight);
                            DateDotView.Center = new PointF ((screenWidth/2), (dateBarHeight/2));
                            calendarTableView.Center = new PointF ((View.Frame.Width/2), (float)291.5);
                            copyMonthImage.Hidden = true;
                            DateDotView.ViewWithTag (200).Hidden = true;
                            DateDotWeekPanGestureRecognizer.Enabled = true;

                        },
                        () => {
                            DisableGestureRecognizers ();
                            ConfigureBasicView ();
                            calendarTableView.Frame = CalendarTableFullSize ();
                        }
                    );
                }

                return;
            }
        }

        private void DateDotToggleCloseMonthPan (UIPanGestureRecognizer obj)
        {
            int rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
            if (UIGestureRecognizerState.Began == obj.State) {

                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                yOffset = obj.TranslationInView (this.View).Y;
                if (yOffset < -5) {
                    calendarTableView.Frame = CalendarTableFullSize ();
                    DateDotMonthPanGestureRecognizer.Enabled = false;
                    if (288.5 + (dateBarRowHeight * (rows - 1)) + yOffset < 288.5 + (dateBarRowHeight * (rows - 1)) && 288.5 + (dateBarRowHeight * (rows - 1)) + yOffset > 291.5) {
                        calendarTableView.Center = new PointF ((View.Frame.Width/2), (float)288.5 + (dateBarRowHeight * (rows - 1)) + yOffset);
                    }
                    return;
                }
            }

            if (UIGestureRecognizerState.Ended == obj.State) {
                if  ((yOffset < -60) || (((yOffset < -5) && (obj.VelocityInView (DateDotView).Y < -500)))) {
                    UIView.Animate (.5, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            DateDotView.Frame = new RectangleF (0, 0, View.Frame.Width, dateBarHeight);
                            DateDotView.Center = new PointF ((screenWidth/2), (dateBarHeight/2));
                            calendarTableView.Center = new PointF ((View.Frame.Width/2), (float)291.5);
                            copyMonthImage.Hidden = true;
                            DisableGestureRecognizers ();
                            ConfigureBasicView ();
                            DateDotView.ViewWithTag (200).Hidden = true;
                            if ((DateDotView.ViewDate.Month != selectedDate.Month) || ((DateDotView.ViewDate.Month != selectedDate.Month) && (DateDotView.ViewDate.Year != selectedDate.Year))) {
                                DateDotView.ViewDate = DateDotView.GetFirstDay (DateDotView.ViewDate);
                                DateDotView.ToggleButtons (-1);
                                currentDate = DateDotView.ViewDate;
                            } else {
                                DateDotView.ViewDate = selectedDate;
                                DateDotView.ToggleButtons (-1);
                                DateDotView.UpdateButtons ();
                                currentDate = selectedDate;
                            }
                        },
                        () => {
                            calendarTableView.Frame = CalendarTableFullSize ();
                        }
                    );
                } else if (yOffset >= -60) {
                    UIView.Animate (.5, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            DateDotView.Frame = new RectangleF (0, 5, View.Frame.Width, (dateBarHeight - 8) + (dateBarRowHeight * (rows)));
                            DateDotView.Center = new PointF ((screenWidth/2), (screenWidth/2) - 5);
                            calendarTableView.Center = new PointF ((View.Frame.Width/2), (float)288.5 + (dateBarRowHeight * (rows - 1)));
                            View.BringSubviewToFront (calendarTableView);
                            copyMonthImage.Hidden = false;
                            DisableGestureRecognizers ();
                            ConfigureMonthView ();
                        },
                        () => {
                            currentDate = selectedDate;
                            ConfigureCalendarTableSize(rows);
                           
                        }
                    );
                }
                return;
            }
        }

        protected void ConfigureCalendarTableSize(int rows){
            if (4 == rows){
                calendarTableView.Frame = CalendarTableFourSize ();
            }
            if (5 == rows){
                calendarTableView.Frame = CalendarTableFiveSize ();
            }
            if (6 == rows){
                calendarTableView.Frame = CalendarTableSixSize ();
            }
        }

        protected RectangleF CalendarTableFullSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, dateBarHeight, parentFrame.Width, 426);
            return rect;
        }

        protected RectangleF CalendarTableFourSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 213, parentFrame.Width, 291);
            return rect;
        }

        protected RectangleF CalendarTableFiveSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 259, parentFrame.Width, 245);
            return rect;
        }

        protected RectangleF CalendarTableSixSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 305, parentFrame.Width, 199);
            return rect;
        }

        public void ScrollToDate (DateBarView view, UIButton button)
        {
            var tempDate = view.ViewDate;
            var label = button.TitleLabel.Text.ToString ();
            if (false == BasicView) {
                int sameMonth = 100; 
                if (106 > button.Tag && 23 <= Convert.ToInt32 (label)) {
                    tempDate = view.ViewDate.AddMonths (-1);
                    var difference = tempDate.Day - Convert.ToInt32 (label);
                    var date = tempDate.AddDays (-difference);
                    selectedDate = date;
                    var viewDateTag = DateDotView.GetMonthTag (view.ViewDate);
                    sameMonth = DateDotView.IsButtonInMonth (viewDateTag, view.ViewDate, date);
                    if (date.Month != view.ViewDate.Month && 0 == sameMonth) {
                        currentDate = view.ViewDate;
                    } else {
                        currentDate = selectedDate;
                    }
                    selectedDateTag = button.Tag;
                    view.ToggleButtons (selectedDateTag);
                    calendarSource.ScrollToDate (calendarTableView, date);

                } else if (128 < button.Tag && 1 <= Convert.ToInt32 (label) && 6 >= Convert.ToInt32 (label)) {
                    tempDate = view.ViewDate.AddMonths (1);
                    var difference = tempDate.Day - Convert.ToInt32 (label);
                    var date = tempDate.AddDays (-difference);
                    selectedDate = date;
                    var viewDateTag = DateDotView.GetMonthTag (view.ViewDate);
                    sameMonth = DateDotView.IsButtonInMonth (viewDateTag, view.ViewDate, date);
                    if (date.Month != view.ViewDate.Month && 0 == sameMonth) {
                        currentDate = view.ViewDate;
                    } else {
                        currentDate = selectedDate;
                    }
                    selectedDateTag = button.Tag;
                    view.ToggleButtons (selectedDateTag);
                    calendarSource.ScrollToDate (calendarTableView, date);

                } else {
                    var difference = view.ViewDate.Day - Convert.ToInt32 (label);
                    var date = view.ViewDate.AddDays (-difference);
                    selectedDate = date;
                    currentDate = selectedDate;
                    selectedDateTag = button.Tag;
                    calendarSource.ScrollToDate (calendarTableView, date);

                }
            } else {
                var difference = view.ViewDate.Day - Convert.ToInt32 (label);
                var date = view.ViewDate;
                if (-10 > difference) {
                    date = date.AddMonths (-1);
                    date = date.AddDays (-difference);

                } else if (10 < difference) {
                    date = date.AddMonths (1);
                    date = date.AddDays (-difference);

                } else {
                    date = view.ViewDate.AddDays (-difference);
                }
                selectedDate = date;
                currentDate = selectedDate;
                selectedDateTag = button.Tag;
                calendarSource.ScrollToDate (calendarTableView, date);
            }
        }

        public void ReturnToToday ()
        {
            int returnWeek = DateDotView.IsButtonInWeek (todayWeekTag, DateTime.Today, DateDotView.ViewDate);
            int returnMonth = DateDotView.IsButtonInMonth (todayMonthTag, DateTime.Today, DateDotView.ViewDate);
            if (BasicView) {
                var Image = Util.caputureView (DateDotView);
                copyWeekImage.Image = Image;
                this.View.AddSubview (copyWeekImage);
                this.View.BringSubviewToFront (copyWeekImage);
                Image.Dispose ();

                if (-1 == returnWeek) {

                    DateDotView.ViewDate = DateTime.Today;
                    selectedDate = DateTime.Today;
                    selectedDateTag = todayWeekTag;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtons ();
                    copyWeekImage.Center = new PointF ((DateDotView.Frame.Width / 2), (dateBarHeight/2));
                    DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (dateBarHeight/2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyWeekImage.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            calendarTableView.Frame = CalendarTableFullSize ();
                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else if (1 == returnWeek) {

                    DateDotView.ViewDate = DateTime.Today;
                    selectedDate = DateTime.Today;
                    selectedDateTag = todayWeekTag;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtons ();
                    copyWeekImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyWeekImage.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            calendarTableView.Frame = CalendarTableFullSize ();
                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else {
                    if (selectedDateTag != todayWeekTag) {
                        DateDotView.ViewDate = DateTime.Today;
                        selectedDate = DateTime.Today;
                        selectedDateTag = todayWeekTag;
                        DateDotView.ToggleButtons (-1);
                        DateDotView.UpdateButtons ();
                    }
                    this.View.BringSubviewToFront (DateDotView);
                }


            } else {

                var Image = Util.caputureView (DateDotView);
                copyMonthImage.Image = Image;
                this.View.AddSubview (copyMonthImage);
                this.View.BringSubviewToFront (copyMonthImage);
                this.View.BringSubviewToFront (calendarTableView);
                Image.Dispose ();

                if (-1 == returnMonth) {

                    DateDotView.ViewDate = DateTime.Today;
                    selectedDate = DateTime.Today;
                    selectedDateTag = todayMonthTag;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    copyMonthImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                    DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyMonthImage.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            ConfigureCalendarTableSize(rows);
                        },
                        () => {

                        }
                    );

                    currentDate = DateDotView.ViewDate;
                } else if (1 == returnMonth) {

                    DateDotView.ViewDate = DateTime.Today;
                    selectedDate = DateTime.Today;
                    selectedDateTag = todayMonthTag;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    copyMonthImage.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                    DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyMonthImage.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2) + 5);
                            ConfigureCalendarTableSize(rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else {
                    if (selectedDateTag != todayMonthTag) {
                        DateDotView.ViewDate = DateTime.Today;
                        selectedDate = DateTime.Today;
                        selectedDateTag = todayMonthTag;
                        DateDotView.ToggleButtons (-1);
                        DateDotView.UpdateButtonsMonth ();
                    }
                    this.View.BringSubviewToFront (DateDotView);
                    this.View.BringSubviewToFront (calendarTableView);
                }
            }
            calendarSource.ScrollToDate (calendarTableView, DateTime.Today);
        }

    }

}
