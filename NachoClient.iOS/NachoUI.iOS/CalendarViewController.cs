// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using System.Collections.Generic;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.EventKit;
using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;
using MimeKit;

namespace NachoClient.iOS
{
    public partial class CalendarViewController : NcUIViewController, INachoCalendarItemEditorParent, ICalendarTableViewSourceDelegate
    {
        protected CalendarTableViewSource calendarSource;
        protected UITableView calendarTableView;
        public DateBarView DateDotView;
        public DateTime selectedDate = new DateTime ();
        public int selectedDateTag = 0;
        public int todayWeekTag = 0;
        public int todayMonthTag = 0;
        protected static int dateBarHeight = 78 + 5;
        protected static int dateBarRowHeight = 46;
        protected static float screenWidth = UIScreen.MainScreen.Bounds.Width;
        protected static float screenRight = UIScreen.MainScreen.Bounds.Right;
        protected static float screenLeft = UIScreen.MainScreen.Bounds.Left;

        UIPanGestureRecognizer DateDotWeekPanGestureRecognizer = null;
        UIPanGestureRecognizer DateDotToggleOpenMonthPanGestureRecognizer = null;
        UIPanGestureRecognizer DateDotMonthViewPanGestureRecognizer = null;

        public static bool BasicView = false;
        public bool UseDeviceCalendar;
        protected bool adjustScrollPosition = true;

        public CalendarViewController (IntPtr handle) : base (handle)
        {
            var a = UILabel.AppearanceWhenContainedIn (typeof(UITableViewHeaderFooterView), typeof(CalendarViewController));
            a.TextColor = UIColor.LightGray;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            if (null != NavigationItem) {
                NavigationItem.SetHidesBackButton (true, false);
            }

            var dateButton = UIButton.FromType (UIButtonType.Custom);
            dateButton.Frame = new RectangleF (0, 0, 22, 22);
            using (var image = UIImage.FromBundle ("calendar-empty-cal")) {
                dateButton.SetBackgroundImage (image, UIControlState.Normal);
            }
            // The icon center is a little off so adjust the text downward.
            dateButton.VerticalAlignment = UIControlContentVerticalAlignment.Bottom;
            dateButton.SetTitle (DateTime.Today.Day.ToString (), UIControlState.Normal);
            dateButton.SetTitleColor (A.Color_NachoBlue, UIControlState.Normal);
            dateButton.Font = A.Font_AvenirNextRegular12;
            dateButton.TouchUpInside += (object sender, EventArgs e) => {
                ReturnToToday ();
            };
                
            var todayButton = new UIBarButtonItem (dateButton);

            var addEventButton = new UIBarButtonItem ();
            Util.SetAutomaticImageForButton (addEventButton, "cal-add");
            addEventButton.Clicked += (object sender, EventArgs e) => {
                PerformSegue ("CalendarToEditEventView", new SegueHolder (null));
            };
                
            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { addEventButton, todayButton };

            // We must request permission to access the user's calendar
            // This will prompt the user on platforms that ask, or it will validate
            // manifest permissions on platforms that declare their required permissions.
            CreateView ();
            ConfigureBasicView ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            calendarSource.Refresh ();
            calendarTableView.ReloadData ();

            if (adjustScrollPosition) {
                adjustScrollPosition = false;
                calendarSource.ScrollToDate (calendarTableView, DateTime.Today);
            }
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            calendarSource.Refresh ();
            calendarTableView.ReloadData ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
        }

        /// <summary>
        /// Prepares for segue.
        /// </summary>
        /// <param name="segue">Segue in charge</param>
        /// <param name="sender">Typically the cell that was clicked.</param>
        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "NachoNowToEventView") {
                var vc = (EventViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                var e = holder.value as McEvent;
                vc.SetCalendarItem (e);
                return;
            }

            if (segue.Identifier.Equals ("SegueToNachoNow")) {
                // Nothing to do
                return;
            }

            if (segue.Identifier.Equals ("CalendarToEmailCompose")) {
                var dc = (MessageComposeViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                var c = holder.value as McCalendar;
                dc.SetEmailPresetFields (new NcEmailAddress (NcEmailAddress.Kind.To, c.OrganizerEmail), c.Subject, "Running late");
                return;
            }

            /// Event Forward WIP
//            if (segue.Identifier.Equals ("CalendarToEmailCompose")) {
//                var dc = (MessageComposeViewController)segue.DestinationViewController;
//                var holder = sender as SegueHolder;
//                var c = holder.value as McCalendar;
//                dc.SetCalendarInvite (c);
//                dc.SetEmailPresetFields (null, "FWD: " + c.Subject, "");
//                return;
//            }

            if (segue.Identifier == "CalendarToEditEventView") {
                var vc = (EditEventViewController)segue.DestinationViewController;
                var holder = sender as SegueHolder;
                if (holder.value != null) {
                    var dt = (DateTime)holder.value;
                    vc.SetStartingDate (dt);
                }
                vc.SetCalendarItem (null);
                vc.SetOwner (this);
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_CalendarSetChanged == s.Status.SubKind) {
                calendarSource.Refresh ();
                calendarTableView.ReloadData ();
            }
            if (NcResult.SubKindEnum.Info_EventSetChanged == s.Status.SubKind) {
                calendarSource.Refresh ();
                calendarTableView.ReloadData ();
            }
        }

        public void PerformSegueForDelegate (string identifier, NSObject sender)
        {
            PerformSegue (identifier, sender);
        }

        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (true, null);
        }

        protected void ConfigureBasicView ()
        {
            // Enabled gestures
            DateDotWeekPanGestureRecognizer.Enabled = true;
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = true;
            BasicView = true;
        }

        protected void ConfigureMonthView ()
        {
            DateDotMonthViewPanGestureRecognizer.Enabled = true;
            BasicView = false;
        }

        protected void CreateView ()
        {
            NavigationController.NavigationBar.Translucent = false;

            calendarSource = new CalendarTableViewSource ();
            calendarSource.owner = this;
            calendarSource.SetCalendar (NcEventManager.Instance);

            calendarTableView = new UITableView ();
            ConfigureCalendarTableSize (1);
            calendarTableView.Source = calendarSource;
            calendarTableView.SeparatorColor = A.Color_NachoBorderGray;

            NavigationItem.Title = "Calendar";

            DateDotView = new DateBarView (View);

            DateDotWeekPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotWeekPan (obj);
            });
            DateDotWeekPanGestureRecognizer.Enabled = false;
            DateDotWeekPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotWeekPanGestureRecognizer);

            DateDotToggleOpenMonthPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotToggleOpenMonthPan (obj);
            });
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
            DateDotToggleOpenMonthPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotToggleOpenMonthPanGestureRecognizer);
            DateDotToggleOpenMonthPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };

            DateDotMonthViewPanGestureRecognizer = new UIPanGestureRecognizer ((UIPanGestureRecognizer obj) => {
                DateDotMonthViewPan (obj);
            });
            DateDotMonthViewPanGestureRecognizer.Enabled = false;
            DateDotMonthViewPanGestureRecognizer.MaximumNumberOfTouches = 1;
            DateDotView.AddGestureRecognizer (DateDotMonthViewPanGestureRecognizer);
            DateDotMonthViewPanGestureRecognizer.ShouldRecognizeSimultaneously = delegate {
                return true;
            };
            copyImageView = new UIImageView (new RectangleF (0, 0, screenWidth, DateDotView.Frame.Height));

            View.AddSubview (copyImageView);
            View.AddSubview (DateDotView);
            View.AddSubview (calendarTableView);

            DateDotView.SetOwner (this);

            DateDotView.ViewDate = DateTime.Today;
            currentDate = DateTime.Today;
            selectedDate = DateTime.Today;

            todayMonthTag = DateDotView.GetMonthTag (DateTime.Today);
            DateDotView.UpdateButtons ();

        }

        protected void DisableGestureRecognizers ()
        {
            DateDotWeekPanGestureRecognizer.Enabled = false;
            DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
            DateDotMonthViewPanGestureRecognizer.Enabled = false;
        }

        public static UIImageView copyImageView;
        public float startingX = 0;
        public float xOffset = 0;
        public int directionFlag = 0;
        public DateTime currentDate = new DateTime ();

        /// <summary>
        /// Gesture handler for date dots pan/swipe
        /// </summary>
        private void DateDotWeekPan (UIPanGestureRecognizer obj)
        {
            if (UIGestureRecognizerState.Began == obj.State) {
                startingX = obj.TranslationInView (this.View).X;
                var Image = Util.captureView (DateDotView);

                copyImageView.Image = Image;
                Image.Dispose ();
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                xOffset = obj.TranslationInView (this.View).X;
                //offset must be greater than |5| to be sure user is swiping horizontially rather than vertically
                if ((5 < xOffset) || (-5 > xOffset)) {
                    DateDotToggleOpenMonthPanGestureRecognizer.Enabled = false;
                    if (0 > xOffset) { //Swipe left
                        if (directionFlag != 1) {
                            this.View.BringSubviewToFront (copyImageView);
                            this.View.BringSubviewToFront (calendarTableView);
                            directionFlag = 1;
                            DateDotView.ViewDate = currentDate.AddDays (7);
                            DateDotView.ToggleButtons (-1);
                            DateDotView.UpdateButtons ();
                            DateDotView.ViewDate = currentDate;
                        }

                        var difference = Math.Abs (xOffset - startingX);
                        copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                    } else { //Swipe right
                        if (directionFlag != 2) {
                            this.View.BringSubviewToFront (copyImageView);
                            this.View.BringSubviewToFront (calendarTableView);
                            directionFlag = 2;
                            DateDotView.ViewDate = currentDate.AddDays (-7);
                            DateDotView.ToggleButtons (-1);
                            DateDotView.UpdateButtons ();
                            DateDotView.ViewDate = currentDate;
                        }

                        var difference = Math.Abs (xOffset - startingX);
                        copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                    }
                }
                return;
            }

            if (UIGestureRecognizerState.Ended == obj.State) {
                if (xOffset < -(DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X < -500) { 
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            this.View.BringSubviewToFront (calendarTableView);
                        }
                    );
                    currentDate = currentDate.AddDays (7);
                    DateDotView.ViewDate = currentDate;

                } else if (xOffset > (DateDotView.Frame.Width / 3) || obj.VelocityInView (DateDotView).X > 500) {
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            this.View.BringSubviewToFront (calendarTableView);
                        }
                    );
                    currentDate = currentDate.AddDays (-7);
                    DateDotView.ViewDate = currentDate;
                } else {
                    DateDotView.ViewDate = currentDate;
                    DateDotView.UpdateButtons ();
                    this.View.BringSubviewToFront (DateDotView);
                    this.View.BringSubviewToFront (calendarTableView);

                    if (-5 > xOffset && copyImageView.Center.X != DateDotView.Center.X) {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            },
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            }
                        );
                    } else if (5 < xOffset && copyImageView.Center.X != DateDotView.Center.X) {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            },
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            }
                        );

                    } else {
                        UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            },
                            () => {
                            }
                        );
                    }
                }

                ConfigureBasicView ();
                directionFlag = 0;
                return;
            }
        }
            
        public float startingXMonth = 0;
        private bool isClosing = false;
        private bool isPanning = false;
        private bool startingTableYIsSet = false;

        private void DateDotMonthViewPan (UIPanGestureRecognizer obj)
        {
            int rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
            if (UIGestureRecognizerState.Began == obj.State) {
                startingXMonth = obj.TranslationInView (this.View).X;
                var Image = Util.captureView (DateDotView);
                copyImageView.Image = Image;
                Image.Dispose ();
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                yOffset = obj.TranslationInView (this.View).Y;
                xOffset = obj.TranslationInView (this.View).X;

                if ((yOffset < -5) && (!isPanning)) {
                    ConfigureCalendarTableSize (1);
                    if (!startingTableYIsSet) {
                        tableStartingY = calendarTableView.Center.Y + dateBarHeight + 1 + ((rows - 3) * dateBarRowHeight);
                        startingTableYIsSet = true;
                    }
                    if ((dateBarHeight + 1 + ((rows - 3) * dateBarRowHeight)) + yOffset >= 5) {
                        calendarTableView.Center = new PointF (calendarTableView.Center.X, tableStartingY + yOffset);
                    } 
                    isClosing = true;
                    return;
                } else if (((5 < xOffset) || (-5 > xOffset)) && (!isClosing)) {
                    this.View.BringSubviewToFront (copyImageView);
                    this.View.BringSubviewToFront (calendarTableView);
                    if (0 > xOffset) { //Swipe left
                        if (directionFlag != 1) {
                            directionFlag = 1;
                            DateDotView.ViewDate = currentDate.AddMonths (1);
                        }

                        var difference = Math.Abs (xOffset - startingXMonth);
                        copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2) - difference, (DateDotView.Frame.Height / 2));
                    } else { //Swipe right
                        if (directionFlag != 2) {
                            directionFlag = 2;
                            DateDotView.ViewDate = currentDate.AddMonths (-1);
                        }

                        var difference = Math.Abs (xOffset - startingXMonth);
                        copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                        DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2) + difference, (DateDotView.Frame.Height / 2));
                    }
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    isPanning = true;
                    return;
                }
            }
            if (UIGestureRecognizerState.Ended == obj.State) {
                if (isClosing) {
                    if ((yOffset < -60) || (obj.VelocityInView (DateDotView).Y < -500)) {
                        UIView.Animate (.5, 0, UIViewAnimationOptions.CurveEaseOut,
                            () => {
                                DateDotView.Center = new PointF ((screenWidth / 2), (DateDotView.Frame.Height / 2));
                                ConfigureCalendarTableSize (1);

                                if ((DateDotView.ViewDate.Month != selectedDate.Month) || ((DateDotView.ViewDate.Month != selectedDate.Month) && (DateDotView.ViewDate.Year != selectedDate.Year))) {
                                    DateDotView.ViewDate = DateDotView.GetFirstDay (DateDotView.ViewDate);
                                    currentDate = DateDotView.ViewDate;
                                } else {
                                    DateDotView.ViewDate = selectedDate;
                                    currentDate = selectedDate;
                                }
                                DateDotView.ToggleButtons (-1);
                                DateDotView.UpdateButtons ();
                            },
                            () => {
                                DisableGestureRecognizers ();
                                ConfigureBasicView ();
                            }
                        );
                    } else if ((yOffset >= -60)) {
                        UIView.Animate (.5, 0, UIViewAnimationOptions.CurveEaseOut,
                            () => {
                                ConfigureCalendarTableSize (rows);
                            },
                            () => {
                                View.BringSubviewToFront (calendarTableView);
                                DisableGestureRecognizers ();
                                ConfigureMonthView ();
                            }
                        );
                    } 
                    startingTableYIsSet = false;
                } else if (isPanning) {
                    if ((xOffset < -(DateDotView.Frame.Width / 3)) || (((xOffset < -(DateDotView.Frame.Width / 5)) && (obj.VelocityInView (DateDotView).X < -500)))) { 
                        UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                copyImageView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                ConfigureCalendarTableSize (rows);
                            },
                            () => {
                            }
                        );
                        currentDate = currentDate.AddMonths (1);
                        DateDotView.ViewDate = currentDate;

                    } else if ((xOffset > (DateDotView.Frame.Width / 3)) || (((xOffset > (DateDotView.Frame.Width / 5)) && (obj.VelocityInView (DateDotView).X > 500)))) {
                        UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                            () => {
                                copyImageView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                ConfigureCalendarTableSize (rows);
                            },
                            () => {
                            }
                        );
                        currentDate = currentDate.AddMonths (-1);
                        DateDotView.ViewDate = currentDate;
                    } else if ((xOffset < (DateDotView.Frame.Width / 3)) && (xOffset > -(DateDotView.Frame.Width / 3))) {
                        DateDotView.ViewDate = currentDate;
                        DateDotView.UpdateButtonsMonth ();
                        if (0 >= xOffset && copyImageView.Center.X != DateDotView.Center.X) {
                            UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                                () => {
                                    copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                    DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                },
                                () => {
                                    DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                    copyImageView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                }
                            );
                        } else if (0 < xOffset && copyImageView.Center.X != DateDotView.Center.X) {
                            UIView.Animate (.3, 0, UIViewAnimationOptions.CurveLinear,
                                () => {
                                    copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                    DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                },
                                () => {
                                    DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                    copyImageView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                                }
                            );
                        } else {
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        }
                    }
                    this.View.BringSubviewToFront (DateDotView);
                    this.View.BringSubviewToFront (calendarTableView);
                    ConfigureMonthView ();
                    directionFlag = 0;
                }
                isClosing = false;
                isPanning = false;
                return;
            }  
        }

        float yOffset = 0;
        float tableStartingY;

        private void DateDotToggleOpenMonthPan (UIPanGestureRecognizer obj)
        {
            int rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
            if (UIGestureRecognizerState.Began == obj.State) {
                tableStartingY = calendarTableView.Center.Y;
                return;
            }

            if (UIGestureRecognizerState.Changed == obj.State) {
                yOffset = obj.TranslationInView (this.View).Y;

                if (yOffset > 5) {
                    DateDotWeekPanGestureRecognizer.Enabled = false;
                    DateDotMonthViewPanGestureRecognizer.Enabled = false;
                    if ((dateBarHeight + 1 + ((rows - 3) * dateBarRowHeight)) > yOffset) {
                        calendarTableView.Center = new PointF (calendarTableView.Center.X, tableStartingY + yOffset);
                    }
                }
                return;
            }

            if (UIGestureRecognizerState.Ended == obj.State) {
                if (yOffset > 60 || obj.VelocityInView (DateDotView).Y > 500) {
                    UIView.Animate (.3, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureCalendarTableSize(rows);
                            View.BringSubviewToFront (calendarTableView);
                            DateDotView.UpdateButtonsMonth ();
                        },
                        () => {
                            DisableGestureRecognizers ();
                            ConfigureMonthView ();
                        }
                    );
                } else {
                    UIView.Animate (.3, 0, UIViewAnimationOptions.CurveEaseOut,
                        () => {
                            ConfigureCalendarTableSize (1);
                        },
                        () => {
                            DisableGestureRecognizers ();
                            ConfigureBasicView ();
                        }
                    );
                }
                return;
            }
        }

        protected void ConfigureCalendarTableSize (int rows)
        {
            switch (rows) {
            case 4: 
                calendarTableView.Frame = CalendarTableFourSize ();
                break;
            case 5:
                calendarTableView.Frame = CalendarTableFiveSize ();
                break;
            case 6:
                calendarTableView.Frame = CalendarTableSixSize ();
                break;
            default:
                calendarTableView.Frame = CalendarTableFullSize ();
                break;
            }
        }

        protected RectangleF CalendarTableFullSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, dateBarHeight, parentFrame.Width, parentFrame.Height - dateBarHeight);
            return rect;
        }

        protected RectangleF CalendarTableFourSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 75 + (3 * dateBarRowHeight), parentFrame.Width, parentFrame.Height - (75 + (3 * dateBarRowHeight)));
            return rect;
        }

        protected RectangleF CalendarTableFiveSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 75 + (4 * dateBarRowHeight), parentFrame.Width, parentFrame.Height - (75 + (4 * dateBarRowHeight)));
            return rect;
        }

        protected RectangleF CalendarTableSixSize ()
        {
            var parentFrame = View.Frame;
            var rect = new RectangleF (0, 75 + (5 * dateBarRowHeight), parentFrame.Width, parentFrame.Height - (75 + (5 * dateBarRowHeight)));
            return rect;
        }

        public void ScrollToDate (DateBarView view, UIButton button)
        {
            var tempDate = view.ViewDate;
            var label = button.TitleLabel.Text.ToString ();
            if (!BasicView) {
                var Image = Util.captureView (DateDotView);
                copyImageView.Image = Image;

                Image.Dispose ();
                if (106 > button.Tag && 23 <= Convert.ToInt32 (label)) {
                    this.View.BringSubviewToFront (copyImageView);
                    this.View.BringSubviewToFront (calendarTableView);
                    tempDate = view.ViewDate.AddMonths (-1);
                    var difference = tempDate.Day - Convert.ToInt32 (label);
                    var date = tempDate.AddDays (-difference);
                    selectedDate = date;
                    selectedDateTag = DateDotView.GetMonthTag (view.ViewDate);
                    DateDotView.ViewDate = selectedDate;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            ConfigureCalendarTableSize (rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                    calendarSource.ScrollToDate (calendarTableView, selectedDate);

                } else if (128 < button.Tag && 1 <= Convert.ToInt32 (label) && 6 >= Convert.ToInt32 (label)) {
                    this.View.BringSubviewToFront (copyImageView);
                    this.View.BringSubviewToFront (calendarTableView);
                    tempDate = tempDate.AddMonths (1);
                    var difference = tempDate.Day - Convert.ToInt32 (label);
                    var date = tempDate.AddDays (-difference);
                    selectedDate = date;
                    selectedDateTag = DateDotView.GetMonthTag (view.ViewDate);
                    DateDotView.ViewDate = selectedDate;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    var rows = DateDotView.RowsInAMonth (selectedDate);
                    copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            ConfigureCalendarTableSize (rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                    calendarSource.ScrollToDate (calendarTableView, selectedDate);

                } else {
                    var difference = view.ViewDate.Day - Convert.ToInt32 (label);
                    var date = view.ViewDate.AddDays (-difference);
                    selectedDate = date;
                    currentDate = selectedDate;
                    selectedDateTag = button.Tag;
                    calendarSource.ScrollToDate (calendarTableView, date);
                }
            } else {
                var difference = view.ViewDate.Day - Convert.ToInt32 (label);
                var date = view.ViewDate;
                if (-10 > difference) {
                    date = date.AddDays (-difference);
                    date = date.AddMonths (-1);
                } else if (10 < difference) {
                    date = date.AddDays (-difference);
                    date = date.AddMonths (1);
                } else {
                    date = view.ViewDate.AddDays (-difference);
                }
                selectedDate = date;
                currentDate = selectedDate;
                selectedDateTag = button.Tag;
                calendarSource.ScrollToDate (calendarTableView, date);
            }
            this.View.BringSubviewToFront (DateDotView);
            this.View.BringSubviewToFront (calendarTableView);
        }

        public void ReturnToToday ()
        {
            int returnWeek = DateDotView.IsButtonInWeek (todayWeekTag, DateTime.Today, DateDotView.ViewDate);
            var day = DateDotView.ViewDate.Day;
            var firstDay = DateDotView.ViewDate.AddDays (-day + 1); 
            int returnMonth = DateDotView.IsButtonInMonth (todayMonthTag, DateTime.Today, firstDay);
            if (BasicView) {
                var Image = Util.captureView (DateDotView);
                copyImageView.Image = Image;
                this.View.BringSubviewToFront (copyImageView);
                this.View.BringSubviewToFront (calendarTableView);
                Image.Dispose ();

                if (-1 == returnWeek) {

                    DateDotView.ViewDate = DateTime.Today;
                    selectedDate = DateTime.Today;
                    selectedDateTag = todayWeekTag;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtons ();
                    copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            ConfigureCalendarTableSize (1);
                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else if (1 == returnWeek) {

                    DateDotView.ViewDate = DateTime.Today;
                    selectedDate = DateTime.Today;
                    selectedDateTag = todayWeekTag;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtons ();
                    copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                        },
                        () => {
                            ConfigureCalendarTableSize (1);
                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else {
                    if (selectedDateTag != todayWeekTag) {
                        DateDotView.ViewDate = DateTime.Today;
                        selectedDate = DateTime.Today;
                        selectedDateTag = todayWeekTag;
                        DateDotView.ToggleButtons (-1);
                        DateDotView.UpdateButtons ();
                    }
                }

            } else {
                var Image = Util.captureView (DateDotView);
                copyImageView.Image = Image;
                this.View.BringSubviewToFront (copyImageView);
                this.View.BringSubviewToFront (calendarTableView);
                Image.Dispose ();

                if (-1 == returnMonth) {

                    DateDotView.ViewDate = DateTime.Today;
                    selectedDate = DateTime.Today;
                    selectedDateTag = todayMonthTag;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            ConfigureCalendarTableSize (rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else if (1 == returnMonth) {

                    DateDotView.ViewDate = DateTime.Today;
                    selectedDate = DateTime.Today;
                    selectedDateTag = todayMonthTag;
                    DateDotView.ToggleButtons (-1);
                    DateDotView.UpdateButtonsMonth ();
                    var rows = DateDotView.RowsInAMonth (DateDotView.ViewDate);
                    copyImageView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    DateDotView.Center = new PointF (screenRight + (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                    UIView.Animate (.2, 0, UIViewAnimationOptions.CurveLinear,
                        () => {
                            copyImageView.Center = new PointF (screenLeft - (DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            DateDotView.Center = new PointF ((DateDotView.Frame.Width / 2), (DateDotView.Frame.Height / 2));
                            ConfigureCalendarTableSize (rows);
                        },
                        () => {

                        }
                    );
                    currentDate = DateDotView.ViewDate;
                } else {
                    if (selectedDateTag != todayMonthTag) {
                        DateDotView.ViewDate = DateTime.Today;
                        selectedDate = DateTime.Today;
                        selectedDateTag = todayMonthTag;
                        DateDotView.ToggleButtons (-1);
                        DateDotView.UpdateButtonsMonth ();
                    }
                }
            }
            this.View.BringSubviewToFront (DateDotView);
            this.View.BringSubviewToFront (calendarTableView);
            calendarSource.ScrollToDate (calendarTableView, DateTime.Today);

        }

        // ICalendarTableViewSourceDelegate
        public void SendRunningLateMessage (int eventId)
        {
            var c = CalendarHelper.GetMcCalendarRootForEvent (eventId);
            if (null != c) {
                PerformSegue ("CalendarToEmailCompose", new SegueHolder (c));
            }
        }

        // ICalendarTableViewSourceDelegate
        public void ForwardInvite (int eventId)
        {
//            var c = CalendarHelper.GetMcCalendarRootForEvent (eventId);
//            if (null != c) {
//                PerformSegue ("CalendarToEmailCompose", new SegueHolder (c));
//            }
        }

        // ICalendarTableViewSourceDelegate
        public void CalendarTableViewScrollingEnded ()
        {
            calendarSource.MaybeExtendTableView (calendarTableView);
        }
            
    }

}
