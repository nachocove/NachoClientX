// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Xamarin.Contacts;
using NachoCore.Utils;
using NachoCore.Model;
using NachoCore;
using MCSwipeTableViewCellBinding;

namespace NachoClient.iOS
{
    public partial class ContactChooserViewController : NcUIViewController, IUITableViewDelegate, IUITextFieldDelegate, INachoContactChooser
    {
        // Interface
        protected McAccount account;
        protected NcEmailAddress address;
        protected NachoContactType contactType;
        protected INachoContactChooserDelegate owner;
        protected UIButton cancelSearchButton;
        protected UITextField autoCompleteTextField;
        protected UITableView resultsTableView;
        // Internal state
        List<McContactEmailAddressAttribute> searchResults;
        // ContactTableViewSource is used solely to create & config a cell
        ContactsTableViewSource contactTableViewSource;
        string contactSearchToken;

        protected const string ContactCellReuseIdentifier = "ContactCell";

        public void SetOwner (INachoContactChooserDelegate owner, NcEmailAddress address, NachoContactType contactType)
        {
            this.owner = owner;
            this.address = address;
            this.contactType = contactType;
        }

        public ContactChooserViewController (IntPtr handle) : base (handle)
        {
        }

        public ContactChooserViewController () : base ()
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            NcAssert.True (null != owner);
            NcAssert.True (null != address);

            account = NcModel.Instance.Db.Table<McAccount> ().Where (x => x.AccountType == McAccount.AccountTypeEnum.Exchange).FirstOrDefault ();

            contactTableViewSource = new ContactsTableViewSource ();

            CreateView ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            NachoClient.Util.HighPriority ();
            resultsTableView.ReloadData ();
            NachoClient.Util.RegularPriority ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
            CancelSearchIfActive ();
        }

        public void CreateView ()
        {
            Util.SetBackButton (NavigationController, NavigationItem, A.Color_NachoBlue);

            UIView inputView = new UIView (new RectangleF (0, 0, 320, 44));
            inputView.BackgroundColor = A.Color_NachoBackgroundGray;

            resultsTableView = new UITableView (new RectangleF (0, 44, 320, View.Frame.Height - 44));
            resultsTableView.SeparatorColor = A.Color_NachoBorderGray;
            resultsTableView.Source = new ContactChooserDataSource (this);

            cancelSearchButton = new UIButton (UIButtonType.RoundedRect);
            cancelSearchButton.Frame = new RectangleF (View.Frame.Width - 58, 6, 50, 32);
            cancelSearchButton.SetTitle ("Cancel", UIControlState.Normal);
            cancelSearchButton.Font = A.Font_AvenirNextMedium14;
            cancelSearchButton.SetTitleColor (A.Color_NachoIconGray, UIControlState.Normal);
            cancelSearchButton.TouchUpInside += (object sender, EventArgs e) => {
                CancelSelected ();
            };
            inputView.Add (cancelSearchButton);

            UIView textInputView = new UIView (new RectangleF (8, 6, 246, 32));
            textInputView.BackgroundColor = UIColor.White;
            textInputView.Layer.CornerRadius = 4;

            autoCompleteTextField = new UITextField (new RectangleF (6, 0, 234, 32));
            autoCompleteTextField.BackgroundColor = UIColor.White;
            autoCompleteTextField.Font = A.Font_AvenirNextMedium14;
            autoCompleteTextField.ClearButtonMode = UITextFieldViewMode.Always;
            autoCompleteTextField.TintColor = A.Color_NachoIconGray;

            // Update the auto-complete on each keystroke
            autoCompleteTextField.EditingChanged += delegate {
                KickoffSearchApi (0, autoCompleteTextField.Text);
                UpdateAutocompleteResults (0, autoCompleteTextField.Text);
            };

            // Finish up when the Done key is selected
            autoCompleteTextField.ShouldReturn = ((textField) => {
                DoneSelected (textField);
                return false;
            });

            autoCompleteTextField.Text = address.address;
            UpdateAutocompleteResults (0, address.address);

            autoCompleteTextField.BecomeFirstResponder ();
            textInputView.Add (autoCompleteTextField);
            inputView.Add (textInputView);

            View.Add (inputView);
            View.Add (resultsTableView);
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;
            if (NcResult.SubKindEnum.Info_SearchCommandSucceeded == s.Status.SubKind) {
                Log.Debug (Log.LOG_UI, "StatusIndicatorCallback: Info_SearchCommandSucceeded");
                UpdateAutocompleteResults (0, autoCompleteTextField.Text);
            }
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("ContactChooserToContactSearch")) {
                ContactSearchViewController destinationController = (ContactSearchViewController)segue.DestinationViewController;
                destinationController.owner = this;
                destinationController.initialSearchString = autoCompleteTextField.Text;
                return;
            }
            Log.Info (Log.LOG_UI, "Unhandled segue identifer {0}", segue.Identifier);
            NcAssert.CaseError ();
        }

        protected void UpdateEmailAddress (McContact contact, string address)
        {
            this.address.contact = contact;
            this.address.address = address;
            owner.UpdateEmailAddress (this.address);
        }

        /// <summary>
        /// DoneSelected mean return the typed-in contact.
        /// </summary>
        public void DoneSelected (UITextField textField)
        {
            if ((null == textField.Text) || (0 == textField.Text.Length)) {
                owner.DeleteEmailAddress (address);
            } else {
                UpdateEmailAddress (null, textField.Text);
            }
            owner = null;
            NavigationController.PopViewControllerAnimated (true);
        }

        public void CancelSelected ()
        {
            NavigationController.PopViewControllerAnimated (true);
        }

        /// <summary>
        /// Updates the search results.
        /// Return false if an asynch update is triggers.
        /// For async, the table and view should be updated in UpdateSearchResultsCallback.  
        /// </summary>
        /// <returns><c>true</c>, if search results are updated, <c>false</c> otherwise.</returns>
        /// <param name="forSearchOption">Index of the selected tab.</param>
        /// <param name="forSearchString">The prefix string to search for.</param>
        public void UpdateAutocompleteResults (int forSearchOption, string forSearchString)
        {
            if (null == forSearchString) {
                searchResults = null;
                NachoClient.Util.HighPriority ();
                resultsTableView.ReloadData ();
                NachoClient.Util.RegularPriority ();
                return;
            }
            new System.Threading.Thread (new System.Threading.ThreadStart (() => {
                var results = McContact.SearchAllContactItems (forSearchString);
                InvokeOnMainThread (() => {
                    searchResults = results;
                    NachoClient.Util.HighPriority ();
                    resultsTableView.ReloadData ();
                    NachoClient.Util.RegularPriority ();
                });
            })).Start ();
        }

        protected void KickoffSearchApi (int forSearchOption, string forSearchString)
        {
            if (String.IsNullOrEmpty (contactSearchToken)) {
                contactSearchToken = BackEnd.Instance.StartSearchContactsReq (account.Id, forSearchString, null);
            } else {
                BackEnd.Instance.SearchContactsReq (account.Id, forSearchString, null, contactSearchToken);
            }
        }

        public void DoublePop (ContactSearchViewController vc, McContact contact)
        {
            UpdateEmailAddress (contact, contact.GetEmailAddress ());
            vc.owner = null;
            vc.NavigationController.PopViewControllerAnimated (false);
            NavigationController.PopViewControllerAnimated (true);
        }

        public class ContactChooserDataSource : UITableViewSource
        {
            ContactChooserViewController Owner;

            public ContactChooserDataSource (ContactChooserViewController owner)
            {
                Owner = owner;
            }

            public override int NumberOfSections (UITableView tableView)
            {
                return 1;
            }

            public override int RowsInSection (UITableView tableview, int section)
            {
                if (null != Owner.searchResults) {
                    return Owner.searchResults.Count;
                } else {
                    return 0;
                }
            }

            public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
            {
                return Owner.contactTableViewSource.GetHeightForRow (tableView, indexPath);
            }

            public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
            {
                var contact = Owner.searchResults [indexPath.Row].GetContact ();
                var cell = Owner.contactTableViewSource.CreateCell (contact);
                Owner.contactTableViewSource.ConfigureCell (cell, contact);
                return cell;
            }

            public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
            {
                McContact contact;

                contact = Owner.searchResults [indexPath.Row].GetContact ();

                Owner.CancelSearchIfActive ();

                // TODO: require phone numbers in contact chooser
                NcAssert.True (0 == (Owner.contactType & NachoContactType.PhoneNumberRequired));

                if (NachoContactType.EmailRequired == (Owner.contactType & NachoContactType.EmailRequired)) {
                    if (String.IsNullOrEmpty (contact.GetEmailAddress ())) {
                        Owner.ComplainAboutMissingEmailAddress (contact);
                        return;
                    }
                }

                Owner.UpdateEmailAddress (contact, contact.GetEmailAddress ());

                Owner.owner = null;
                Owner.NavigationController.PopViewControllerAnimated (true);
            }

        }

        string complaintTitle = "Email Address Missing";
        string complaintMessage = "You've selected a contact who does not have an email address.  Would you like to edit this contact?";

        void ComplainAboutMissingEmailAddress (McContact contact)
        {
            UIAlertView alert = new UIAlertView (complaintTitle, complaintMessage, null, "No", new string[] { "Edit contact" });
            alert.Clicked += (s, b) => {
                if (1 == b.ButtonIndex) {
                    PerformSegue ("ContactChooserToContactView", new SegueHolder (contact));
                }
            };
            alert.Show ();
        }

        protected void CancelSearchIfActive ()
        {
            if (!String.IsNullOrEmpty (contactSearchToken)) {
                BackEnd.Instance.Cancel (account.Id, contactSearchToken);
                contactSearchToken = null;
            }
        }
    }
}
