// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Xamarin.Contacts;
using NachoCore;
using NachoCore.Model;

namespace NachoClient.iOS
{
    public partial class ContactChooserViewController : UIViewController, IUITextFieldDelegate
    {
        // Interface
        public int ownerIndex;
        public ComposeViewController owner;
        // Internal state
        INachoContacts contacts;
        List<McContact> autocompleteResults = null;

        public ContactChooserViewController (IntPtr handle) : base (handle)
        {
        }

        public ContactChooserViewController () : base ()
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Manage the button toggles thru To, Cc, and Bcc
            ToButton.TouchUpInside += (object sender, EventArgs e) => {
                switch (NcEmailAddress.ToKind (ToButton.TitleLabel.Text)) {
                case NcEmailAddress.Kind.To:
                    SetToButtonLabel (NcEmailAddress.Kind.Cc);
                    break;
                case NcEmailAddress.Kind.Cc:
                    SetToButtonLabel (NcEmailAddress.Kind.Bcc);
                    break;
                case NcEmailAddress.Kind.Bcc:
                    SetToButtonLabel (NcEmailAddress.Kind.To);
                    break;
                default:
                    NachoAssert.CaseError ();
                    break;
                }
            };

            // Update the auto-complete on each keystroke
            AutocompleteTextField.EditingChanged += delegate {
                UpdateAutocompleteResults (0, AutocompleteTextField.Text);
                TableView.ReloadData ();
            };

            // Finish up when the Done key is selected
            AutocompleteTextField.ShouldReturn = ((textField) => {
                DoneSelected (textField);
                return false;
            });

            TableView.WeakDelegate = this;
            TableView.DataSource = new ContactChooserDataSource (this);

            contacts = new NachoContacts ();

            var c = owner.GetEmailAddress (ownerIndex);
            NachoAssert.True (null != c);

            AutocompleteTextField.Text = c.address;
            UpdateAutocompleteResults (0, c.address);
            SetToButtonLabel (c.kind);
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("ContactChooserToContactSearch")) {
                ContactSearchViewController destinationController = (ContactSearchViewController)segue.DestinationViewController;
                destinationController.owner = this;
                destinationController.initialSearchString = AutocompleteTextField.Text;
            }
        }

        protected void SetToButtonLabel (NcEmailAddress.Kind k)
        {
            switch (k) {
            case NcEmailAddress.Kind.To:
                ToButton.SetTitle ("To:", UIControlState.Normal);
                break;
            case NcEmailAddress.Kind.Cc:
                ToButton.SetTitle ("Cc:", UIControlState.Normal);
                break;
            case NcEmailAddress.Kind.Bcc:
                ToButton.SetTitle ("Bcc:", UIControlState.Normal);
                break;
            default:
                NachoAssert.CaseError ();
                break;
            }
        }

        /// <summary>
        /// RowSelected means return the selected contact.
        /// </summary>
        [Export ("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {
            McContact contact = autocompleteResults.ElementAt (indexPath.Row);

            // TODO: Proper implementation of address
            var e = new NcEmailAddress (NcEmailAddress.ToKind (ToButton.TitleLabel.Text));
            e.address = contact.DisplayEmailAddress;
            e.contact = contact;

            owner.ReplaceEmailAddress (ownerIndex, e);

            NavigationController.PopViewControllerAnimated (true);
        }

        /// <summary>
        /// DoneSelected mean return the typed-in contact.
        /// </summary>
        public void DoneSelected (UITextField textField)
        {
            if ((null == textField.Text) || (0 == textField.Text.Length)) {
                owner.DeleteEmailAddress (ownerIndex);
            } else {
                // TODO: Proper implementation of address
                var e = new NcEmailAddress (NcEmailAddress.ToKind (ToButton.TitleLabel.Text));
                e.address = textField.Text;
                e.contact = null;
                owner.ReplaceEmailAddress (ownerIndex, e);
            }
            NavigationController.PopViewControllerAnimated (true);
        }

        /// <summary>
        /// Updates the search results.
        /// Return false if an asynch update is triggers.
        /// For async, the table and view should be updated in UpdateSearchResultsCallback.  
        /// </summary>
        /// <returns><c>true</c>, if search results are updated, <c>false</c> otherwise.</returns>
        /// <param name="forSearchOption">Index of the selected tab.</param>
        /// <param name="forSearchString">The prefix string to search for.</param>
        public bool UpdateAutocompleteResults (int forSearchOption, string forSearchString)
        {
            // TODO: Make this work like EAS
            autocompleteResults = new List<McContact> ();
            if ((null == forSearchString) || (0 == forSearchString.Length)) {
                return true;
            }
            for (int i = 0; i < contacts.Count (); i++) {
                McContact c = contacts.GetContact (i);
                if (StartsWithIgnoringNull (forSearchString, c.FirstName)) {
                    autocompleteResults.Add (c);
                    continue;
                }
                if (StartsWithIgnoringNull (forSearchString, c.LastName)) {
                    autocompleteResults.Add (c);
                    continue;
                }
                foreach (var e in c.EmailAddresses) {
                    if (StartsWithIgnoringNull (forSearchString, e.Value)) {
                        autocompleteResults.Add (c);
                        break;
                    }
                }
            }
            return true;
        }

        protected bool StartsWithIgnoringNull (string prefix, string target)
        {
            NachoCore.NachoAssert.True (null != prefix);
            // Can't match a field that doesn't exist
            if (null == target) {
                return false;
            }
            // TODO: Verify that we really want InvariantCultureIgnoreCase
            return target.StartsWith (prefix, StringComparison.InvariantCultureIgnoreCase);
        }

        public void SetSearchResult(string address, McContact contact)
        {
            AutocompleteTextField.Text = address;
            autocompleteResults = new List<McContact> ();
            autocompleteResults.Add (contact);
            TableView.ReloadData ();
        }

        public class ContactChooserDelegate : UITableViewDelegate
        {
            public ContactChooserDelegate ()
            {
            }
        }

        public class ContactChooserDataSource : UITableViewDataSource
        {
            ContactChooserViewController Owner;

            public ContactChooserDataSource (ContactChooserViewController owner)
            {
                Owner = owner;
            }

            public override int NumberOfSections (UITableView tableView)
            {
                return 1;
            }

            public override int RowsInSection (UITableView tableview, int section)
            {
                return ((Owner.autocompleteResults == null) ? 0 : Owner.autocompleteResults.Count ());
            }

            public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
            {
                McContact contact = Owner.autocompleteResults.ElementAt (indexPath.Row);

                var displayName = contact.DisplayName;
                var displayEmailAddress = contact.DisplayEmailAddress;

                if (displayName.Equals (displayEmailAddress)) {
                    UITableViewCell cell = tableView.DequeueReusableCell ("Basic");
                    NachoCore.NachoAssert.True (null != cell);
                    cell.TextLabel.Text = displayName;
                    return cell;
                } else {
                    UITableViewCell cell = tableView.DequeueReusableCell ("Subtitle");
                    NachoCore.NachoAssert.True (null != cell);
                    cell.TextLabel.Text = displayName;
                    cell.DetailTextLabel.Text = displayEmailAddress;
                    return cell;  
                }
            }
        }
    }
}
