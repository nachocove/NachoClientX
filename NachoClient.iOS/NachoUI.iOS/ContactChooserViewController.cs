// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using Xamarin.Contacts;
using NachoCore.Utils;
using NachoCore.Model;
using NachoCore;

namespace NachoClient.iOS
{
    public partial class ContactChooserViewController : UIViewController, IUITableViewDelegate, IUITextFieldDelegate, INachoContactChooser
    {
        // Interface
        protected NcEmailAddress address;
        protected NachoContactType contactType;
        protected INachoContactChooserDelegate owner;
        // Internal state
        List<McContactStringAttribute> searchResults;
        INachoContacts firstList;
        INachoContacts secondList;

        public void SetOwner (INachoContactChooserDelegate owner, NcEmailAddress address, NachoContactType contactType)
        {
            this.owner = owner;
            this.address = address;
            this.contactType = contactType;
        }

        public ContactChooserViewController (IntPtr handle) : base (handle)
        {
        }

        public ContactChooserViewController () : base ()
        {
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            NachoAssert.True (null != owner);
            NachoAssert.True (null != address);

            // Manage the button toggles thru To, Cc, and Bcc
            ToButton.TouchUpInside += (object sender, EventArgs e) => {
                switch (NcEmailAddress.ToKind (ToButton.TitleLabel.Text)) {
                case NcEmailAddress.Kind.To:
                    SetToButtonLabel (NcEmailAddress.Kind.Cc);
                    break;
                case NcEmailAddress.Kind.Cc:
                    SetToButtonLabel (NcEmailAddress.Kind.Bcc);
                    break;
                case NcEmailAddress.Kind.Bcc:
                    SetToButtonLabel (NcEmailAddress.Kind.To);
                    break;
                case NcEmailAddress.Kind.Required:
                    SetToButtonLabel (NcEmailAddress.Kind.Optional);
                    break;
                case NcEmailAddress.Kind.Optional:
                    SetToButtonLabel (NcEmailAddress.Kind.Resource);
                    break;
                case NcEmailAddress.Kind.Resource:
                    SetToButtonLabel (NcEmailAddress.Kind.Required);
                    break;
                case NcEmailAddress.Kind.Unknown:
                    SetToButtonLabel (NcEmailAddress.Kind.Required);
                    break;
                default:
                    NachoAssert.CaseError ();
                    break;
                }
            };

            // Update the auto-complete on each keystroke
            AutocompleteTextField.EditingChanged += delegate {
                UpdateAutocompleteResults (0, AutocompleteTextField.Text);
                TableView.ReloadData ();
            };

            // Finish up when the Done key is selected
            AutocompleteTextField.ShouldReturn = ((textField) => {
                DoneSelected (textField);
                return false;
            });

            TableView.WeakDelegate = this;
            TableView.DataSource = new ContactChooserDataSource (this);


            AutocompleteTextField.Text = address.address;
            UpdateAutocompleteResults (0, address.address);
            SetToButtonLabel (address.kind);

            AutocompleteTextField.BecomeFirstResponder ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
            NcContactManager.Instance.ContactsChanged += ContactsChangedCallback;
            firstList = NcContactManager.Instance.GetHotNachoContacts ();
            secondList = NcContactManager.Instance.GetNachoContacts ();
            if ((null == firstList) || (0 == firstList.Count ())) {
                firstList = secondList;
                secondList = null;
            }
            TableView.ReloadData ();
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            NcContactManager.Instance.ContactsChanged -= ContactsChangedCallback;
        }

        public void ContactsChangedCallback (object sender, EventArgs e)
        {
            firstList = NcContactManager.Instance.GetHotNachoContacts ();
            secondList = NcContactManager.Instance.GetNachoContacts ();
            if ((null == firstList) || (0 == firstList.Count ())) {
                firstList = secondList;
                secondList = null;
            }
            TableView.ReloadData ();
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier.Equals ("ContactChooserToContactSearch")) {
                ContactSearchViewController destinationController = (ContactSearchViewController)segue.DestinationViewController;
                destinationController.owner = this;
                destinationController.initialSearchString = AutocompleteTextField.Text;
            }
            if (segue.Identifier.Equals ("ContactChooserToContactView")) {
                var holder = (SegueHolder)sender;
                ContactViewController destinationController = (ContactViewController)segue.DestinationViewController;
                destinationController.editing = false;
                destinationController.contact = (McContact)holder.value;
            }
        }

        protected void SetToButtonLabel (NcEmailAddress.Kind k)
        {
            switch (k) {
            case NcEmailAddress.Kind.To:
                ToButton.SetTitle ("To:", UIControlState.Normal);
                break;
            case NcEmailAddress.Kind.Cc:
                ToButton.SetTitle ("Cc:", UIControlState.Normal);
                break;
            case NcEmailAddress.Kind.Bcc:
                ToButton.SetTitle ("Bcc:", UIControlState.Normal);
                break;
            case NcEmailAddress.Kind.Required:
                ToButton.SetTitle ("Req", UIControlState.Normal);
                break;
            case NcEmailAddress.Kind.Optional:
                ToButton.SetTitle ("Opt:", UIControlState.Normal);
                break;
            case NcEmailAddress.Kind.Resource:
                ToButton.SetTitle ("Res:", UIControlState.Normal);
                break;
            case NcEmailAddress.Kind.Unknown:
                ToButton.SetTitle ("Unk:", UIControlState.Normal);
                break;
            default:
                NachoAssert.CaseError ();
                break;
            }
        }

        /// <summary>
        /// RowSelected means return the selected contact.
        /// </summary>
        [Export ("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {
            McContact contact;

            if (null != searchResults) {
                contact = searchResults [indexPath.Row].GetContact ();
            } else {
                if (0 == indexPath.Section) {
                    contact = firstList.GetContactIndex (indexPath.Row).GetContact ();
                } else {
                    contact = secondList.GetContactIndex (indexPath.Row).GetContact ();
                }
            }

            // TODO: require phone numbers in contact chooser
            NachoAssert.True (0 == (contactType & NachoContactType.PhoneNumberRequired));

            if (NachoContactType.EmailRequired == (contactType & NachoContactType.EmailRequired)) {
                if (null == contact.DisplayEmailAddress) {
                    ComplainAboutMissingEmailAddress (contact);
                    return;
                }
            }

            UpdateEmailAddress (contact, contact.DisplayEmailAddress);

            owner = null;
            NavigationController.PopViewControllerAnimated (true);
        }

        protected void UpdateEmailAddress (McContact contact, string address)
        {
            this.address.contact = contact;
            this.address.address = address;
            this.address.kind = NcEmailAddress.ToKind (ToButton.TitleLabel.Text);
            owner.UpdateEmailAddress (this.address);
        }

        [Export ("scrollViewWillBeginDragging:")]
        public void ScrollViewWillBeginDragging (UIScrollView scrollView)
        {
            AutocompleteTextField.ResignFirstResponder ();
        }

        /// <summary>
        /// DoneSelected mean return the typed-in contact.
        /// </summary>
        public void DoneSelected (UITextField textField)
        {
            if ((null == textField.Text) || (0 == textField.Text.Length)) {
                owner.DeleteEmailAddress (address);
            } else {
                UpdateEmailAddress (null, textField.Text);
            }
            owner = null;
            NavigationController.PopViewControllerAnimated (true);
        }

        /// <summary>
        /// Updates the search results.
        /// Return false if an asynch update is triggers.
        /// For async, the table and view should be updated in UpdateSearchResultsCallback.  
        /// </summary>
        /// <returns><c>true</c>, if search results are updated, <c>false</c> otherwise.</returns>
        /// <param name="forSearchOption">Index of the selected tab.</param>
        /// <param name="forSearchString">The prefix string to search for.</param>
        public bool UpdateAutocompleteResults (int forSearchOption, string forSearchString)
        {
            if (null == forSearchString) {
                searchResults = null;
                return true;
            }
            // TODO: Make this work like EAS
            var account = NcModel.Instance.Db.Table<McAccount> ().First ();
            searchResults = McContact.SearchAllContactItems (account.Id, forSearchString);
            return true;
        }

        public void DoublePop (ContactSearchViewController vc, McContact contact)
        {
            UpdateEmailAddress (contact, contact.DisplayEmailAddress);
            vc.owner = null;
            vc.NavigationController.PopViewControllerAnimated (false);
            NavigationController.PopViewControllerAnimated (true);
        }

        public class ContactChooserDataSource : UITableViewDataSource
        {
            ContactChooserViewController Owner;

            public ContactChooserDataSource (ContactChooserViewController owner)
            {
                Owner = owner;
            }

            public override int NumberOfSections (UITableView tableView)
            {
                if (null != Owner.searchResults) {
                    return 1;
                } else {
                    if (null == Owner.secondList) {
                        return 1;
                    } else {
                        return 2;
                    }
                }
  
            }

            public override int RowsInSection (UITableView tableview, int section)
            {
                if (null != Owner.searchResults) {
                    NachoAssert.True (0 == section);
                    return Owner.searchResults.Count;
                }

                if (0 == section) {
                    return Owner.firstList.Count ();
                } else {
                    return Owner.secondList.Count ();
                }  
            }

            public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
            {
                McContact contact;

                if (null != Owner.searchResults) {
                    contact = Owner.searchResults [indexPath.Row].GetContact ();
                } else {
                    if (0 == indexPath.Section) {
                        contact = Owner.firstList.GetContactIndex (indexPath.Row).GetContact ();
                    } else {
                        contact = Owner.secondList.GetContactIndex (indexPath.Row).GetContact ();

                    }
                }

                UITableViewCell cell = null;
                var displayName = contact.DisplayName;
                var displayEmailAddress = contact.DisplayEmailAddress;

                if (null == displayName) {
                    cell = tableView.DequeueReusableCell ("Basic");
                    NachoCore.NachoAssert.True (null != cell);
                    cell.TextLabel.Text = "";
                    return cell;
                }

                if (displayName.Equals (displayEmailAddress)) {
                    cell = tableView.DequeueReusableCell ("Basic");
                    NachoCore.NachoAssert.True (null != cell);
                    cell.TextLabel.Text = displayName;
                    return cell;
                }

                cell = tableView.DequeueReusableCell ("Subtitle");
                NachoCore.NachoAssert.True (null != cell);
                cell.TextLabel.Text = displayName;
                cell.DetailTextLabel.Text = displayEmailAddress;
                return cell;  
            }
        }

        string complaintTitle = "Email Address Missing";
        string complaintMessage = "You've selected a contact that does not have an email address.  Would you like to edit this contact?";

        void ComplainAboutMissingEmailAddress (McContact contact)
        {
            UIAlertView alert = new UIAlertView (complaintTitle, complaintMessage, null, "OK", new string[] { "Edit contact" });
            alert.Clicked += (s, b) => {
                if (1 == b.ButtonIndex) {
                    PerformSegue ("ContactChooserToContactView", new SegueHolder (contact));
                }
            };
            alert.Show ();
        }
    }
}
