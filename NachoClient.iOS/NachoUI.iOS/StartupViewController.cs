// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using SWRevealViewControllerBinding;
using NachoCore;
using NachoCore.Model;

namespace NachoClient.iOS
{
    public partial class StartupViewController : NcUIViewController
    {
        bool hasSynced;
        bool hasCreds;
        bool hasViewedTutorial;

        public StartupViewController (IntPtr handle) : base (handle)
        {
        }

        /// <summary>
        /// On first run, push the modal LaunchViewController to get credentials.
        /// </summary>
        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            // Navigation
            revealButton.Action = new MonoTouch.ObjCRuntime.Selector ("revealToggle:");
            revealButton.Target = this.RevealViewController ();

//            bool hasCredsToo = false;
//            if (0 != NcModel.Instance.Db.Table<McAccount> ().Where (x => x.AccountType == McAccount.AccountTypeEnum.Exchange).Count ()) {
//                hasCredsToo = true;
//            }
            // Initial view

            setSyncBit ();
            setViewTutorialBit ();
            setHasCredsBit ();

            if (!hasCreds) {
                PerformSegue ("StartupToLaunch", this); // modal
                PerformSegue ("StartupToHome", this);  // launch the documentation
            } else if (!hasViewedTutorial) {
                PerformSegue ("StartupToHome", this);
            } else if (!hasSynced) {
                PerformSegue ("StartupToAdvanced", this);
            } else {
                PerformSegue ("StartupToNachoNow", this); // push
            }
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }
        }

        public void setSyncBit()
        {
            string hasSyncedFoldersVal = McMutables.Get ("ASYNC", "hasSyncedFolders");
            if (null != hasSyncedFoldersVal) {
                if (hasSyncedFoldersVal == "1") {
                    hasSynced = true;
                } else {
                    hasSynced = false;
                }
            } else {
                hasSynced = false;
            }
        }

        public void setViewTutorialBit()
        {
            string hasViewedTutorialVal = McMutables.Get ("TUTORIAL", "hasViewedTutorial");
            if (null != hasViewedTutorialVal) {
                if (hasViewedTutorialVal == "1") {
                    hasViewedTutorial = true;
                } else {
                    hasViewedTutorial = false;
                }
            } else {
                hasViewedTutorial = false;
            }
        }

        public void setHasCredsBit()
        {
            string hasSetCredsVal = McMutables.Get ("CREDS", "hasEnteredCreds");
            if (null != hasSetCredsVal) {
                if (hasSetCredsVal == "1") {
                    hasCreds = true;
                } else {
                    hasCreds = false;
                }
            } else {
                hasCreds = false;
            }
        }
    }
}
