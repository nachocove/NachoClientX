// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using CoreGraphics;
using System.Collections.Generic;
using Foundation;

//using MonoTouch.CoreGraphics;
using UIKit;
using NachoCore.Model;
using NachoCore.Utils;
using NachoCore;
using NachoCore.Brain;
using NachoPlatform;
using NachoCore.Index;

namespace NachoClient.iOS
{
    
    public class MessageListViewController : NachoTableViewController, INachoFolderChooserParent
    {
        #region Constants

        const string MessageCellIdentifier = "MessageCellIdentifier";
        const string UnavailableCellIdentifier = "UnavailableCellIdentifier";

        public const string MessageRefreshTaskName = "MessageListViewController_RefreshMessages";

        #endregion

        #region Properties

        public bool PopsWhenEmpty;

        NachoEmailMessages Messages;

        UIBarButtonItem NewMessageButton;
        UIBarButtonItem EditTableButton;
        UIBarButtonItem DoneSwipingButton;
        UIBarButtonItem CancelEditingButton;

        UIBarButtonItem MoveButton;
        UIBarButtonItem DeleteButton;
        UIBarButtonItem ArchiveButton;
        UIBarButtonItem MarkButton;

        MessageListFilterBar FilterBar;
        UITableView _TableView;
        public override UITableView TableView {
            get {
                return _TableView;
            }
            set {
                base.TableView = _TableView = value;
            }
        }

        int NumberOfPreviewLines = 3;
        protected bool HasLoadedOnce;
        bool HasAppearedOnce;
        bool IsListeningForStatusInd;
        List<string> SyncTokens;
        int SyncTimeoutSeconds = 30;
        NcTimer SyncTimeoutTimer;

        Dictionary<int, int> SelectedAccounts;

        #endregion

        #region Constructors

        public MessageListViewController () : base (UITableViewStyle.Plain)
        {
            using (var image = UIImage.FromBundle ("contact-newemail")) {
                NewMessageButton = new NcUIBarButtonItem (image, UIBarButtonItemStyle.Plain, NewMessage);
            }
            using (var image = UIImage.FromBundle ("folder-edit")) {
                EditTableButton = new NcUIBarButtonItem (image, UIBarButtonItemStyle.Plain, EditTable);
                EditTableButton.AccessibilityLabel = "Folder edit";
            }
            CancelEditingButton = new UIBarButtonItem ("Cancel", UIBarButtonItemStyle.Plain, CancelEditingTable);
            DoneSwipingButton = new UIBarButtonItem ("Done", UIBarButtonItemStyle.Plain, EndSwiping);

            NavigationItem.BackBarButtonItem = new UIBarButtonItem ();
            NavigationItem.BackBarButtonItem.Title = "";

            UpdateNavigationItem ();
        }

        #endregion

        #region Public API

        public void SetEmailMessages (NachoEmailMessages messages)
        {
            Messages = messages;
        }

        #endregion

        #region View Lifecycle
            
        public override void LoadView ()
        {
            base.LoadView ();
            TableView.RowHeight = MessageCell.PreferredHeight (NumberOfPreviewLines, A.Font_AvenirNextDemiBold17, A.Font_AvenirNextRegular14);
            TableView.AllowsMultipleSelectionDuringEditing = true;
            TableView.RegisterClassForCellReuse (typeof(MessageCell), MessageCellIdentifier);
            TableView.RegisterClassForCellReuse (typeof(SwipeTableViewCell), UnavailableCellIdentifier);
            TableView.AccessibilityLabel = "Message list";
            TableView.TintColor = A.Color_NachoGreen;
            TableView.BackgroundColor = UIColor.White;

            var view = new UIView (new CGRect (0.0f, 0.0f, 320.0f, 320.0f));
            view.BackgroundColor = UIColor.White;

            FilterBar = new MessageListFilterBar (new CGRect (0.0f, 0.0f, view.Bounds.Width, MessageListFilterBar.PreferredHeight));
            FilterBar.AutoresizingMask = UIViewAutoresizing.FlexibleWidth;
            FilterBar.BackgroundColor = A.Color_NachoBackgroundGray;

            TableView.Frame = new CGRect (0.0f, FilterBar.Frame.Height, view.Bounds.Width, view.Bounds.Height - FilterBar.Frame.Height);
            TableView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight;
            _TableView = TableView;

            view.AddSubview (TableView);
            view.AddSubview (FilterBar);

            View = view;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            EnableRefreshControl ();
            UpdateFilterBar ();
            Reload ();
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
            if (SyncTokens != null) {
                CheckForSyncComplete ();
            }
            if (HasAppearedOnce && !TableView.Editing) {
                Reload ();
            }
            StartListeningForStatusInd ();
            HasAppearedOnce = true;
        }

        public override void ViewDidDisappear (bool animated)
        {
            StopListeningForStatusInd ();
            base.ViewDidDisappear (animated);
        }

        #endregion

        #region User Actions (Except Table Delegate)

        protected override void HandleRefreshControlEvent (object sender, EventArgs e)
        {
            StartSync ();
        }

        void NewMessage (object sender, EventArgs e)
        {
            ComposeMessage ();
        }

        void EditTable (object sender, EventArgs e)
        {
            StartEditingTable ();
        }

        void CancelEditingTable (object sender, EventArgs e)
        {
            CancelEditingTable ();
        }

        void EndSwiping (object sender, EventArgs e)
        {
            EndSwiping ();
        }

        void FilterAll ()
        {
            Messages.FilterSetting = FolderFilterOptions.All;
            Reload ();
        }

        void FilterHot ()
        {
            Messages.FilterSetting = FolderFilterOptions.Hot;
            Reload ();
        }

        void FilterUnread ()
        {
            Messages.FilterSetting = FolderFilterOptions.Unread;
            Reload ();
        }

        void FilterFocus ()
        {
            Messages.FilterSetting = FolderFilterOptions.Focused;
            Reload ();
        }

        void MarkMessageAsRead (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message != null) {
                EmailHelper.MarkAsRead (message, true);
                message.IsRead = true;
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message);
                }
            }
        }

        void MarkMessageAsUnread (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message != null) {
                EmailHelper.MarkAsUnread (message, true);
                message.IsRead = false;
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message);
                }
            }
        }

        void MarkMessageAsHot (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message != null) {
                message.UserAction = NachoCore.Utils.ScoringHelpers.ToggleHotOrNot (message);
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message);
                }
            }
        }

        void MarkMessageAsUnhot (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message != null) {
                message.UserAction = NachoCore.Utils.ScoringHelpers.ToggleHotOrNot (message);
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null) {
                    cell.SetMessage (message);
                }
            }
        }

        void DeleteMessage (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                if (Messages.HasOutboxSemantics ()) {
                    EmailHelper.DeleteEmailThreadFromOutbox (thread);
                } else if (Messages.HasDraftsSemantics ()) {
                    EmailHelper.DeleteEmailThreadFromDrafts (thread);
                } else {
                    NcAssert.NotNull (thread);
                    Log.Debug (Log.LOG_UI, "DeleteMessage");
                    NcEmailArchiver.Delete (thread);
                }
                // TODO: remove from Messages & update table immediately?  Or wait for status ind?
            }
        }

        void ArchiveMessage (NSIndexPath indexPath)
        {
            DidEndSwiping (TableView, indexPath);
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                NcAssert.NotNull (thread);
                NcEmailArchiver.Archive (thread);
                // TODO: remove from Messages & update table immediately?  Or wait for status ind?
            }
        }

        void ShowMoreActionsForMessage (NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            var thread = Messages.GetEmailThread (indexPath.Row);
            if (message != null) {
                var alertView = UIAlertController.Create (null, null, UIAlertControllerStyle.ActionSheet);
                alertView.AddAction(UIAlertAction.Create("Move", UIAlertActionStyle.Default, (UIAlertAction action) => { ShowFoldersForMove(thread, message); }));
                alertView.AddAction (UIAlertAction.Create ("Quick Reply", UIAlertActionStyle.Default, (UIAlertAction action) => { QuickReply(message); }));
                alertView.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (UIAlertAction action) => { }));
                PresentViewController (alertView, true, null);
            }
        }

        void ShowFoldersForMove (McEmailMessageThread thread, McEmailMessage selectedMessage)
        {
            var vc = new FoldersViewController ();
            var accountId = selectedMessage.AccountId;
            NcAssert.False (0 == accountId);
            vc.SetOwner (this, true, accountId, thread);
            PresentViewController (vc, true, null);
        }

        public void FolderSelected (INachoFolderChooser vc, McFolder folder, object cookie)
        {
            var messageThread = cookie as McEmailMessageThread;
            if (messageThread != null) {
                NcAssert.NotNull (messageThread);
                NcEmailArchiver.Move (messageThread, folder);
                // TODO: remove from Messages & update table immediately?  Or wait for status ind?
            } else {
                NcEmailArchiver.Move (SelectedMessages (), folder);
                CancelEditingTable ();
            }
        }

        void QuickReply (McEmailMessage message)
        {
            var thread = new McEmailMessageThread ();
            thread.FirstMessageId = message.Id;
            var composeViewController = new MessageComposeViewController (McAccount.QueryById<McAccount> (message.AccountId));
            composeViewController.StartWithQuickResponse = true;
            composeViewController.Composer.RelatedThread = thread;
            composeViewController.Present ();
        }

        void ShowFoldersForMovingSelectedMessages (object sender, EventArgs e)
        {
            var vc = new FoldersViewController ();
            var accountId = SelectedAccounts.Keys.First ();
            NcAssert.False (0 == accountId);
            vc.SetOwner (this, true, accountId, null);
            PresentViewController (vc, true, null);
        }

        void ArchiveSelectedMessages (object sender, EventArgs e)
        {
            NcEmailArchiver.Archive (SelectedMessages ());
            CancelEditingTable ();
        }

        void DeleteSelectedMessages (object sender, EventArgs e)
        {
            NcEmailArchiver.Delete (SelectedMessages ());
            CancelEditingTable ();
        }

        void MarkSelectedMessages (object sender, EventArgs e)
        {
            var alertView = UIAlertController.Create (String.Format ("Mark {0} messages", TableView.IndexPathsForSelectedRows.Length), null, UIAlertControllerStyle.ActionSheet);
            alertView.AddAction(UIAlertAction.Create("As Read", UIAlertActionStyle.Default, MarkSelectedMessagesAsRead));
            alertView.AddAction(UIAlertAction.Create("As Unread", UIAlertActionStyle.Default, MarkSelectedMessagesAsUnread));
            alertView.AddAction (UIAlertAction.Create ("As Hot", UIAlertActionStyle.Default, MarkSelectedMessagesAsHot));
            alertView.AddAction (UIAlertAction.Create ("As Not Hot", UIAlertActionStyle.Default, MarkSelectedMessagesAsNotHot));
            alertView.AddAction (UIAlertAction.Create ("Cancel", UIAlertActionStyle.Cancel, (UIAlertAction action) => { }));
            PresentViewController (alertView, true, null);
        }

        void MarkSelectedMessagesAsRead (UIAlertAction action)
        {
            // TODO:
        }

        void MarkSelectedMessagesAsUnread (UIAlertAction action)
        {
            // TODO:
        }

        void MarkSelectedMessagesAsHot (UIAlertAction action)
        {
            // TODO:
        }

        void MarkSelectedMessagesAsNotHot (UIAlertAction action)
        {
            // TODO:
        }

        #endregion

        #region Reloading Messages

        protected void Reload ()
        {
            if (IsShowingRefreshIndicator) {
                RefreshIndicator.StartAnimating ();
            }
            Messages.ClearCache ();
            if (Messages.HasBackgroundRefresh ()) {
                Messages.BackgroundRefresh (HandleReloadResults);
            } else {
                NcTask.Run (() => {
                    List<int> adds;
                    List<int> deletes;
                    bool changed = Messages.Refresh (out adds, out deletes);
                    BeginInvokeOnMainThread(() => {
                        HandleReloadResults (changed, adds, deletes);
                    });
                }, MessageRefreshTaskName);
            }
        }

        void HandleReloadResults (bool changed, List<int> adds, List<int> deletes)
        {
            if (IsShowingRefreshIndicator && SyncTokens == null) {
                EndRefreshing ();
            }
            if (!HasLoadedOnce) {
                HasLoadedOnce = true;
                TableView.ReloadData ();
            } else if (changed) {
                Util.UpdateTable (TableView, adds, deletes);
            }
        }

        void UpdateVisibleRows ()
        {
            foreach (var indexPath in TableView.IndexPathsForVisibleRows) {
                var message = Messages.GetCachedMessage (indexPath.Row);
                var cell = TableView.CellAt (indexPath) as MessageCell;
                if (cell != null && message != null) {
                    cell.SetMessage (message);
                }
            }
        }

        #endregion

        #region Table Delegate & Data Source

        public override nint NumberOfSections (UITableView tableView)
        {
            return 1;
        }

        public override nint RowsInSection (UITableView tableView, nint section)
        {
            if (Messages == null) {
                return 0;
            }
            return Messages.Count ();
        }

        public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message == null) {
                return tableView.DequeueReusableCell (UnavailableCellIdentifier);
            }
            var cell = tableView.DequeueReusableCell (MessageCellIdentifier) as MessageCell;
            cell.SetMessage (message);
            cell.NumberOfPreviewLines = NumberOfPreviewLines;
            if (Messages.IncludesMultipleAccounts ()) {
                cell.IndicatorColor = Util.ColorForAccount (message.AccountId);
            } else {
                cell.IndicatorColor = null;
            }
            return cell;
        }

        public override NSIndexPath WillSelectRow (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message == null) {
                return null;
            }
            return base.WillSelectRow (tableView, indexPath);
        }

        public override bool ShouldHighlightRow (UITableView tableView, NSIndexPath rowIndexPath)
        {
            var message = Messages.GetCachedMessage (rowIndexPath.Row);
            if (message == null) {
                return false;
            }
            return base.ShouldHighlightRow (tableView, rowIndexPath);
        }

        public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
        {
            if (TableView.Editing) {
                var message = Messages.GetCachedMessage (indexPath.Row);
                if (!SelectedAccounts.ContainsKey (message.AccountId)) {
                    SelectedAccounts [message.AccountId] = 0;
                }
                SelectedAccounts [message.AccountId] += 1;
                UpdateToolbarEnabled ();
            } else {
                var thread = Messages.GetEmailThread (indexPath.Row);
                if (thread != null) {
                    if (Messages.HasDraftsSemantics ()) {
                        ComposeDraft (thread.SingleMessageSpecialCase ());
                    } else if (Messages.HasOutboxSemantics ()) {
                        // TODO
                        // DealWithThreadInOutbox (messageThread);
                    } else if (thread.HasMultipleMessages ()) {
                        ShowThread (thread);
                    } else {
                        ShowMessage (thread);
                    }
                }
            }
        }

        public override void RowDeselected (UITableView tableView, NSIndexPath indexPath)
        {
            if (TableView.Editing) {
                var message = Messages.GetCachedMessage (indexPath.Row);
                SelectedAccounts [message.AccountId] -= 1;
                if (SelectedAccounts [message.AccountId] == 0) {
                    SelectedAccounts.Remove (message.AccountId);
                }
                UpdateToolbarEnabled ();
            }
        }

        public override List<SwipeTableRowAction> ActionsForSwipingRightInRow (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message != null) {
                var actions = new List<SwipeTableRowAction> ();
                if (!Messages.HasOutboxSemantics () && !Messages.HasDraftsSemantics ()) {
                    if (message.IsRead) {
                        actions.Add (new SwipeTableRowAction ("Unread", UIImage.FromBundle ("gen-unread-msgs"), UIColor.FromRGB (0x00, 0xC8, 0x9D), MarkMessageAsUnread));
                    } else {
                        actions.Add (new SwipeTableRowAction ("Read", UIImage.FromBundle ("gen-unread-msgs"), UIColor.FromRGB (0x00, 0xC8, 0x9D), MarkMessageAsRead));
                    }
                    if (message.isHot ()) {
                        actions.Add (new SwipeTableRowAction ("Not Hot", UIImage.FromBundle ("email-not-hot"), UIColor.FromRGB (0xE6, 0x59, 0x59), MarkMessageAsUnhot));
                    } else {
                        actions.Add (new SwipeTableRowAction ("Hot", UIImage.FromBundle ("email-hot"), UIColor.FromRGB (0xE6, 0x59, 0x59), MarkMessageAsHot));
                    }
                }
                return actions;
            }
            return null;
        }

        public override List<SwipeTableRowAction> ActionsForSwipingLeftInRow (UITableView tableView, NSIndexPath indexPath)
        {
            var message = Messages.GetCachedMessage (indexPath.Row);
            if (message != null) {
                var actions = new List<SwipeTableRowAction> ();
                actions.Add (new SwipeTableRowAction ("Delete", UIImage.FromBundle ("email-delete-swipe"), UIColor.FromRGB (0xd2, 0x47, 0x47), DeleteMessage));
                if (!Messages.HasOutboxSemantics () && !Messages.HasDraftsSemantics ()) {
                    actions.Add (new SwipeTableRowAction ("Archive", UIImage.FromBundle ("email-archive-swipe"), UIColor.FromRGB (0x01, 0xb2, 0xcd), ArchiveMessage));
                    actions.Add (new SwipeTableRowAction ("More", UIImage.FromBundle ("gen-more-active"), UIColor.FromRGB (0x4F, 0x64, 0x6D), ShowMoreActionsForMessage));
                }
                return actions;
            }
            return null;
        }

        public override void WillBeginSwiping (UITableView tableView, NSIndexPath indexPath)
        {
            base.WillBeginSwiping (tableView, indexPath);
            UpdateNavigationItem ();
        }

        public override void DidEndSwiping (UITableView tableView, NSIndexPath indexPath)
        {
            base.DidEndSwiping (tableView, indexPath);
            UpdateNavigationItem ();
        }

        #endregion

        #region System Events

        void StartListeningForStatusInd ()
        {
            if (!IsListeningForStatusInd) {
                IsListeningForStatusInd = true;
                NcApplication.Instance.StatusIndEvent += StatusIndCallback;
            }
        }

        void StopListeningForStatusInd ()
        {
            if (IsListeningForStatusInd) {
                NcApplication.Instance.StatusIndEvent -= StatusIndCallback;
                IsListeningForStatusInd = false;
            }
        }

        void StatusIndCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if (s.Account == null || (Messages != null && Messages.IsCompatibleWithAccount (s.Account))) {

                bool isVisible = IsViewLoaded && View.Window != null;

                switch (s.Status.SubKind) {
                case NcResult.SubKindEnum.Info_EmailMessageSetChanged:
                    if (isVisible) {
                        Reload ();
                    }
                    break;
                case NcResult.SubKindEnum.Info_EmailMessageSetFlagSucceeded:
                case NcResult.SubKindEnum.Info_EmailMessageClearFlagSucceeded:
                case NcResult.SubKindEnum.Info_EmailMessageScoreUpdated:
                case NcResult.SubKindEnum.Info_EmailMessageChanged:
                case NcResult.SubKindEnum.Info_SystemTimeZoneChanged:
                    if (isVisible) {
                        UpdateVisibleRows ();
                    }
                    break;
                case NcResult.SubKindEnum.Error_SyncFailed:
                case NcResult.SubKindEnum.Info_SyncSucceeded:
                    if (SyncTokens != null) {
                        if (s.Tokens != null) {
                            foreach (var token in s.Tokens) {
                                SyncTokens.Remove (token);
                            }
                        }
                        if (SyncTokens.Count == 0) {
                            SyncTimeoutTimer.Dispose ();
                            SyncTimeoutTimer = null;
                            SyncTokens = null;
                            EndRefreshing ();
                        }
                    }
                    break;
                }
            }
        }

        void CheckForSyncComplete ()
        {
            var tokens = new List<string> (SyncTokens);
            foreach (var token in tokens) {
                var pendings = McPending.QueryByToken (NcApplication.Instance.Account.Id, token);
                if (pendings.Count() > 0) {
                    var pending = pendings.First ();
                    if (pending.State == McPending.StateEnum.Failed || pending.State == McPending.StateEnum.Deleted) {
                        SyncTokens.Remove (token);
                    }
                }
            }
            if (SyncTokens.Count == 0) {
                SyncTokens = null;
                EndRefreshing ();
            }
        }

        void HandleSyncTimeout (object state)
        {
            SyncTokens = null;
            SyncTimeoutTimer = null;
            BeginInvokeOnMainThread (() => {
                EndRefreshing ();
            });
        }

        #endregion

        #region Private Helpers

        protected void UpdateFilterBar ()
        {
            if (!Messages.HasFilterSemantics () || Messages.PossibleFilterSettings.Length < 2) {
                // TODO: hide filter
            } else {
                // TODO: show filter

                var items = new List<MessageFilterBarItem> ();
                var filters = Messages.PossibleFilterSettingsMask;
                MessageFilterBarItem selectedItem = null;

                if (filters.HasFlag (FolderFilterOptions.All)) {
                    items.Add (new MessageFilterBarItem ("All", UIImage.FromBundle ("email-filter-all"), FilterAll));
                    if (Messages.FilterSetting == FolderFilterOptions.All) {
                        selectedItem = items.Last ();
                    }
                }
                if (filters.HasFlag (FolderFilterOptions.Hot)) {
                    items.Add (new MessageFilterBarItem ("Hot", UIImage.FromBundle ("email-hot"), FilterHot));
                    if (Messages.FilterSetting == FolderFilterOptions.Hot) {
                        selectedItem = items.Last ();
                    }
                }
                if (filters.HasFlag (FolderFilterOptions.Unread)) {
                    items.Add (new MessageFilterBarItem ("Unread", UIImage.FromBundle ("email-filter-unread"), FilterUnread));
                    if (Messages.FilterSetting == FolderFilterOptions.Unread) {
                        selectedItem = items.Last ();
                    }
                }
                if (filters.HasFlag (FolderFilterOptions.Focused)) {
                    items.Add (new MessageFilterBarItem ("Focus", UIImage.FromBundle ("email-filter-focus"), FilterFocus));
                    if (Messages.FilterSetting == FolderFilterOptions.Focused) {
                        selectedItem = items.Last ();
                    }
                }

                FilterBar.SetItems (items.ToArray());
                FilterBar.SelectItem (selectedItem);
            }
        }

        void ComposeMessage ()
        {
            var composeViewController = new MessageComposeViewController (NcApplication.Instance.DefaultEmailAccount);
            composeViewController.Present ();
        }

        void ComposeDraft (McEmailMessage draft)
        {
            var account = McAccount.EmailAccountForMessage (draft);
            var composeViewController = new MessageComposeViewController (account);
            composeViewController.Composer.Message = draft;
            composeViewController.Present ();
        }

        void ShowThread (McEmailMessageThread thread)
        {
            var vc = new MessageThreadViewController ();
            vc.SetEmailMessages (Messages.GetAdapterForThread (thread));
            NavigationController.PushViewController (vc, true);
        }

        void ShowMessage (McEmailMessageThread thread)
        {
            var messageViewController = new MessageViewController ();
            messageViewController.SetSingleMessageThread (thread);
            NavigationController.PushViewController (messageViewController, true);
        }

        void UpdateNavigationItem ()
        {
            if (SwipingIndexPath != null) {
                NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                    DoneSwipingButton
                };
            } else if (IsViewLoaded && TableView.Editing) {
                NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                    CancelEditingButton
                };
            } else {
                NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                    NewMessageButton,
                    EditTableButton
                };
            }
        }

        void UpdateToolbarEnabled ()
        {
            var paths = TableView.IndexPathsForSelectedRows;
            var hasSelection = paths != null && paths.Length > 0;

            MarkButton.Enabled = hasSelection;
            MoveButton.Enabled = SelectedAccounts.Count == 1;
            ArchiveButton.Enabled = hasSelection;
            DeleteButton.Enabled = hasSelection;
        }

        List<McEmailMessage> SelectedMessages ()
        {
            var messages = new List<McEmailMessage> ();
            foreach (var indexPath in TableView.IndexPathsForSelectedRows) {
                var thread = Messages.GetEmailThread (indexPath.Row);
                if (thread != null) {
                    foreach (var message in thread) {
                        messages.Add (message);
                    }
                }
            }
            return messages;
        }

        void CancelEditingTable ()
        {
            TableView.SetEditing (false, true);
            UpdateNavigationItem ();
            NavigationController.SetToolbarHidden (true, true);
        }

        void StartEditingTable ()
        {
            SelectedAccounts = new Dictionary<int, int> ();
            TableView.SetEditing(true, true);
            UpdateNavigationItem ();
            MoveButton = new UIBarButtonItem ("Move", UIBarButtonItemStyle.Plain, ShowFoldersForMovingSelectedMessages);
            ArchiveButton = new UIBarButtonItem ("Archive", UIBarButtonItemStyle.Plain, ArchiveSelectedMessages);
            DeleteButton = new UIBarButtonItem ("Delete", UIBarButtonItemStyle.Plain, DeleteSelectedMessages);
            MarkButton = new UIBarButtonItem ("Mark", UIBarButtonItemStyle.Plain, MarkSelectedMessages);
            if (Messages.HasOutboxSemantics () || Messages.HasDraftsSemantics ()) {
                ToolbarItems = new UIBarButtonItem[] {
                    DeleteButton
                };
            } else {
                ToolbarItems = new UIBarButtonItem[] {
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    // Mark multi select functionality not yet enabled
                    // MarkButton,
                    // new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    MoveButton,
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    ArchiveButton,
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace),
                    DeleteButton,
                    new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace)
                };
            }
            UpdateToolbarEnabled ();
            NavigationController.SetToolbarHidden (false, true);
        }

        void StartSync ()
        {
            var result = Messages.StartSync ();
            if (result.isError ()) {
                Reload ();
            }else{
                var tokens = result.Value as string;
                if (tokens == null) {
                    EndRefreshing ();
                }else{
                    RefreshIndicator.StartAnimating ();
                    SyncTokens = new List<string> (tokens.Split (new char[] { ',' }));
                    SyncTimeoutTimer = new NcTimer ("MessageListViewController_SyncTimeout", HandleSyncTimeout, null, SyncTimeoutSeconds * 1000, 0);
                }
            }
        }

        #endregion

        #region Folder Chooser Parent (for Move)

        // The folder chooser should really just close itself, but it's easier to just add this than change its interface
        public void DismissChildFolderChooser (INachoFolderChooser vc)
        {
            DismissViewController (true, null);
        }

        #endregion

    }

    public class MessageCell : SwipeTableViewCell
    {
        
        UIImageView UnreadIndicator;
        UIView _ColorIndicatorView;
        UIView ColorIndicatorView {
            get {
                if (_ColorIndicatorView == null) {
                    _ColorIndicatorView = new UIView ();
                    ContentView.AddSubview (ColorIndicatorView);
                }
                return _ColorIndicatorView;
            }
        }
        public UIColor IndicatorColor {
            get {
                if (_ColorIndicatorView != null) {
                    return _ColorIndicatorView.BackgroundColor;
                }
                return null;
            }
            set {
                if (value == null) {
                    if (_ColorIndicatorView != null) {
                        _ColorIndicatorView.RemoveFromSuperview ();
                        _ColorIndicatorView = null;
                    }
                } else {
                    if (_ColorIndicatorView == null) {
                        SetNeedsLayout ();
                    }
                    ColorIndicatorView.BackgroundColor = value;
                }
            }
        }
        PortraitView PortraitView;
        UILabel DateLabel;
        nfloat PortraitSize = 40.0f;
        nfloat RightPadding = 10.0f;
        nfloat ColorIndicatorSize = 3.0f;
        UIEdgeInsets ColorIndicatorInsets = new UIEdgeInsets (1.0f, 0.0f, 1.0f, 7.0f);

        static NSAttributedString _HotAttachmentString;
        static NSAttributedString HotAttachmentString {
            get {
                if (_HotAttachmentString == null) {
                    _HotAttachmentString = NSAttributedString.CreateFrom (new HotAttachment());
                }
                return _HotAttachmentString;
            }
        }

        static NSAttributedString _AttachAttachmentString;
        static NSAttributedString AttachAttachmentString {
            get {
                if (_AttachAttachmentString == null) {
                    _AttachAttachmentString = NSAttributedString.CreateFrom (new AttachAttachment());
                }
                return _AttachAttachmentString;
            }
        }

        public nint NumberOfPreviewLines {
            get {
                return DetailTextLabel.Lines;
            }
            set {
                if (value != DetailTextLabel.Lines) {
                    DetailTextLabel.Lines = value;
                    SetNeedsLayout ();
                }
            }
        }

        public MessageCell (IntPtr handle) : base (handle)
        {
            DetailTextSpacing = 0.0f;

            TextLabel.Font = A.Font_AvenirNextDemiBold17;
            TextLabel.TextColor = A.Color_NachoGreen;
            DetailTextLabel.Font = A.Font_AvenirNextRegular14;
            DetailTextLabel.TextColor = A.Color_NachoTextGray;
            DetailTextLabel.Lines = 3;

            DateLabel = new UILabel ();
            DateLabel.Font = A.Font_AvenirNextRegular14;
            DateLabel.TextColor = A.Color_NachoTextGray;
            ContentView.AddSubview (DateLabel);
            
            PortraitView = new PortraitView (new CGRect (0.0f, 0.0f, PortraitSize, PortraitSize));
            ContentView.AddSubview (PortraitView);

            using (var image = UIImage.FromBundle ("chat-stat-online")) {
                UnreadIndicator = new UIImageView (image);
            }
            UnreadIndicator.Hidden = true;
            ContentView.AddSubview (UnreadIndicator);

            SeparatorInset = new UIEdgeInsets (0.0f, 64.0f, 0.0f, 0.0f);
        }

        public void SetMessage (McEmailMessage message)
        {
            PortraitView.SetPortrait (message.cachedPortraitId, message.cachedFromColor, message.cachedFromLetters);
            DateLabel.Text = Pretty.TimeWithDecreasingPrecision (message.DateReceived);
            TextLabel.Text = Pretty.SenderString (message.From);
            int subjectLength;
            var previewText = Pretty.MessagePreview (message, out subjectLength);
            using (var attributedPreview = new NSMutableAttributedString (previewText)) {
                if (subjectLength > 0) {
                    attributedPreview.AddAttribute (UIStringAttributeKey.Font, A.Font_AvenirNextMedium14.WithSize(DetailTextLabel.Font.PointSize), new NSRange(0, subjectLength));
                    attributedPreview.AddAttribute (UIStringAttributeKey.ForegroundColor, A.Color_NachoGreen, new NSRange(0, subjectLength));
                }
                if (message.isHot ()) {
                    attributedPreview.Replace (new NSRange (0, 0), " ");
                    attributedPreview.Insert (HotAttachmentString, 0);
                    subjectLength += 2;
                }
                if (message.cachedHasAttachments) {
                    attributedPreview.Replace (new NSRange (subjectLength, 0), " ");
                    attributedPreview.Insert (AttachAttachmentString, subjectLength + 1);
                    // TODO: add space after if subjectLength was originally 0
                }
                DetailTextLabel.AttributedText = attributedPreview;
            }
            UnreadIndicator.Hidden = message.IsRead;
        }

        public override void LayoutSubviews ()
        {
            var rightPadding = RightPadding + (_ColorIndicatorView != null ? ColorIndicatorInsets.Right : 0.0f);
            base.LayoutSubviews ();
            var dateSize = DateLabel.SizeThatFits (new CGSize (0.0f, 0.0f));
            dateSize.Height = DateLabel.Font.RoundedLineHeight (1.0f);
            var textHeight = TextLabel.Font.RoundedLineHeight (1.0f);
            var detailTextHeight = (nfloat)Math.Ceiling (DetailTextLabel.Font.LineHeight * DetailTextLabel.Lines);
            var totalTextHeight = textHeight + DetailTextSpacing + detailTextHeight;
            var textTop = (Bounds.Height - totalTextHeight) / 2.0f;
            var detailWidth = ContentView.Bounds.Width - rightPadding - SeparatorInset.Left;
            var detailHeight = DetailTextLabel.SizeThatFits (new CGSize (detailWidth, 0.0f)).Height;

            CGRect frame;

            frame = DateLabel.Frame;
            frame.X = ContentView.Bounds.Width - dateSize.Width - rightPadding;
            frame.Y = textTop + (TextLabel.Font.Ascender - DateLabel.Font.Ascender);
            frame.Width = dateSize.Width;
            frame.Height = dateSize.Height;
            DateLabel.Frame = frame;

            frame = TextLabel.Frame;
            frame.X = SeparatorInset.Left;
            frame.Y = textTop;
            frame.Width = DateLabel.Frame.X - frame.X - RightPadding;
            frame.Height = textHeight;
            TextLabel.Frame = frame;

            frame = DetailTextLabel.Frame;
            frame.X = TextLabel.Frame.X;
            frame.Y = TextLabel.Frame.Y + TextLabel.Frame.Height + DetailTextSpacing;
            frame.Width = detailWidth;
            frame.Height = detailHeight;
            DetailTextLabel.Frame = frame;

            PortraitView.Center = new CGPoint (SeparatorInset.Left / 2.0f, textTop * 2.0f + PortraitView.Frame.Height / 2.0f);
            UnreadIndicator.Center = new CGPoint (PortraitView.Frame.X + PortraitView.Frame.Width - UnreadIndicator.Frame.Width / 2.0f, PortraitView.Frame.Y + UnreadIndicator.Frame.Height / 2.0f);

            if (_ColorIndicatorView != null) {
                _ColorIndicatorView.Frame = new CGRect (ContentView.Bounds.Width - ColorIndicatorInsets.Right - ColorIndicatorSize, ColorIndicatorInsets.Top, ColorIndicatorSize, ContentView.Bounds.Height - ColorIndicatorInsets.Top - ColorIndicatorInsets.Bottom);
            }
        }

        public static nfloat PreferredHeight (int numberOfPreviewLines, UIFont mainFont, UIFont previewFont)
        {
            var detailSpacing = 0.0f;
            var topPadding = 7.0f;
            var textHeight = mainFont.RoundedLineHeight (1.0f);
            var detailHeight = (nfloat)Math.Ceiling (previewFont.LineHeight * numberOfPreviewLines);
            return textHeight + detailHeight + detailSpacing + topPadding * 2.0f;
        }

        private class SubjectAttachment : NSTextAttachment
        {
            public SubjectAttachment () : base ()
            {
            }

            public override CGRect GetAttachmentBounds (NSTextContainer textContainer, CGRect proposedLineFragment, CGPoint glyphPosition, nuint characterIndex)
            {
                var font = A.Font_AvenirNextRegular14;
                nfloat offset = 2.0f;
                nfloat size = proposedLineFragment.Size.Height - 2.0f * offset;
                return new CGRect (0.0f, font.Descender + offset, size, size);
            }
        }

        private class HotAttachment : SubjectAttachment
        {
            public HotAttachment () : base ()
            {
                Image = UIImage.FromBundle("email-hot");
            }
        }

        private class AttachAttachment : SubjectAttachment
        {
            public AttachAttachment () : base ()
            {
                Image = UIImage.FromBundle("email-icn-attachment");
            }
        }

    }

    public partial class MessageListViewController_Old : NcUITableViewController, IUISearchDisplayDelegate, IUISearchBarDelegate, INachoCalendarItemEditorParent, INachoFolderChooserParent, MessageTableViewSourceDelegate
    {
        MessageTableViewSource messageSource;
        MessageTableViewSource searchResultsSource;
        EmailSearch emailSearcher;
        protected UIBarButtonItem composeMailButton;
        protected UIBarButtonItem multiSelectButton;
        protected UIBarButtonItem cancelSelectedButton;
        protected UIBarButtonItem archiveButton;
        protected UIBarButtonItem deleteButton;
        protected UIBarButtonItem searchButton;
        protected UIBarButtonItem moveButton;
        protected UIBarButtonItem backButton;
        protected UIBarButtonItem filterButton;

        protected UISearchBar searchBar;
        protected UISearchDisplayController searchDisplayController;

        public bool HasAccountSwitcher;
        public bool PopsWhenEmpty;

        SwitchAccountButton switchAccountButton;

        protected const string UICellReuseIdentifier = "UICell";
        protected const string EmailMessageReuseIdentifier = "EmailMessage";

        protected bool threadsNeedsRefresh;
        protected NcCapture ReloadCapture;
        private string ReloadCaptureName;

        bool StatusIndCallbackIsSet = false;

        public void SetEmailMessages (NachoEmailMessages messageThreads)
        {
            this.messageSource.SetEmailMessages (messageThreads, "No messages");
        }

        public MessageListViewController_Old () : base ()
        {
            messageSource = new MessageTableViewSource (this);
        }

        public MessageListViewController_Old (IntPtr handle) : base (handle)
        {
            messageSource = new MessageTableViewSource (this);
        }

        public override void LoadView ()
        {
            base.LoadView ();
            if (TableView == null) {
                TableView = new UITableView (new CGRect (0.0f, 0.0f, 320.0f, 320.0f), UITableViewStyle.Plain);
                View = TableView;
            }
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            NavigationController.NavigationBar.Translucent = false;

            if (HasAccountSwitcher) {
                switchAccountButton = new SwitchAccountButton (SwitchAccountButtonPressed);
                NavigationItem.TitleView = switchAccountButton;
                switchAccountButton.SetAccountImage (NcApplication.Instance.Account);
            }

            TableView.AccessibilityLabel = "Message list";

            ReloadCaptureName = "MessageListViewController.Reload";
            NcCapture.AddKind (ReloadCaptureName);
            ReloadCapture = NcCapture.Create (ReloadCaptureName);

            composeMailButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (composeMailButton, "contact-newemail");
            composeMailButton.AccessibilityLabel = "New message";
            composeMailButton.Clicked += (object sender, EventArgs e) => {
                ComposeMessage ();
            };

            multiSelectButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (multiSelectButton, "folder-edit");
            multiSelectButton.AccessibilityLabel = "Folder edit";
            multiSelectButton.Clicked += (object sender, EventArgs e) => {
                messageSource.MultiSelectEnable (TableView);
            };

            cancelSelectedButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (cancelSelectedButton, "gen-close");
            cancelSelectedButton.AccessibilityLabel = "Close";
            cancelSelectedButton.Clicked += (object sender, EventArgs e) => {
                messageSource.MultiSelectCancel (TableView);
            };

            archiveButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (archiveButton, "gen-archive");
            archiveButton.AccessibilityLabel = "Archive";
            archiveButton.Clicked += (object sender, EventArgs e) => {
                messageSource.MultiSelectArchive (TableView);
            };

            deleteButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (deleteButton, "gen-delete-all");
            deleteButton.AccessibilityLabel = "Delete";
            deleteButton.Clicked += (object sender, EventArgs e) => {
                messageSource.MultiSelectDelete (TableView);
            };

            moveButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (moveButton, "folder-move");
            moveButton.AccessibilityLabel = "Move";
            moveButton.Clicked += (object sender, EventArgs e) => {
                MoveSelected ();
            };

            filterButton = new NcUIBarButtonItem ();
            Util.SetAutomaticImageForButton (filterButton, "gen-read-list");
            filterButton.AccessibilityLabel = "Filter";
            filterButton.Clicked += (object sender, EventArgs e) => {
                var messages = messageSource.GetNachoEmailMessages ();
                var actions = new List<NcAlertAction> ();
                foreach (var value in messages.PossibleFilterSettings) {
                    actions.Add (new NcAlertAction (Folder_Helpers.FilterShortString (value), () => {
                        SetFilter (value);
                    }));
                }
                actions.Add (new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
                NcActionSheet.Show (filterButton, this, "Message Filter", null, actions.ToArray ());
            };

            searchButton = new NcUIBarButtonItem (UIBarButtonSystemItem.Search);
            searchButton.AccessibilityLabel = "Search";
            searchButton.Clicked += onClickSearchButton;

            TableView.SeparatorColor = A.Color_NachoBackgroundGray;

            View.BackgroundColor = A.Color_NachoBackgroundGray;

            TableView.Source = messageSource.GetTableViewSource ();

            CustomizeBackButton ();
            MultiSelectToggle (messageSource, false);

            RefreshControl = new UIRefreshControl ();
            RefreshControl.Hidden = true;
            RefreshControl.TintColor = A.Color_NachoGreen;
            RefreshControl.AttributedTitle = new NSAttributedString ("Refreshing...");
            RefreshControl.ValueChanged += (object sender, EventArgs e) => {
                var nr = messageSource.GetNachoEmailMessages ().StartSync ();
                rearmRefreshTimer (NachoSyncResult.DoesNotSync (nr) ? 3 : 10);
                RefreshControl.BeginRefreshing ();
            };

            searchBar = new UISearchBar ();
            searchBar.Delegate = this;
            searchDisplayController = new UISearchDisplayController (searchBar, this);
            emailSearcher = new EmailSearch ((string searchString, List<McEmailMessageThread> results) => {
                UpdateSearchResults ();
            });
            searchResultsSource = new MessageTableViewSource (this);
            searchResultsSource.SetEmailMessages (emailSearcher, "");
            searchDisplayController.SearchResultsSource = searchResultsSource.GetTableViewSource ();
            searchDisplayController.SearchResultsTableView.RowHeight = 126;
            searchDisplayController.SearchResultsTableView.SeparatorColor = A.Color_NachoBackgroundGray;
            searchDisplayController.SearchResultsTableView.BackgroundColor = A.Color_NachoBackgroundGray;

            View.AddSubview (searchBar);

            Util.ConfigureNavBar (false, this.NavigationController);

            SetRowHeight ();

            StatusIndCallbackIsSet = true;
            NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;

            // Load when view becomes visible
            threadsNeedsRefresh = true;
        }

        void SetFilter (FolderFilterOptions value)
        {
            var messages = messageSource.GetNachoEmailMessages ();
            messages.FilterSetting = value;
            RefreshThreadsIfVisible ();
        }

        protected virtual void SetRowHeight ()
        {
            TableView.RowHeight = MessageTableViewConstants.NORMAL_ROW_HEIGHT;
            searchDisplayController.SearchResultsTableView.RowHeight = MessageTableViewConstants.NORMAL_ROW_HEIGHT;
        }

        protected void EndRefreshingOnUIThread (object sender)
        {
            NachoPlatform.InvokeOnUIThread.Instance.Invoke (() => {
                if (RefreshControl.Refreshing) {
                    RefreshControl.EndRefreshing ();
                }
            });
        }

        NcTimer refreshTimer;

        void rearmRefreshTimer (int seconds)
        {
            if (null != refreshTimer) {
                refreshTimer.Dispose ();
                refreshTimer = null;
            }
            refreshTimer = new NcTimer ("MessageListViewController refresh", EndRefreshingOnUIThread, null, seconds * 1000, 0); 
        }

        void cancelRefreshTimer ()
        {
            if (RefreshControl.Refreshing) {
                EndRefreshingOnUIThread (null);
            }
            if (null != refreshTimer) {
                refreshTimer.Dispose ();
                refreshTimer = null;
            }
        }

        protected virtual void CustomizeBackButton ()
        {
        }

        public void MultiSelectToggle (MessageTableViewSource source, bool enabled)
        {
            if (enabled) {
                var msg = messageSource.GetNachoEmailMessages ();
                if (msg.HasOutboxSemantics () || msg.HasDraftsSemantics ()) {
                    NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                        deleteButton,
                    };
                } else {
                    NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                        deleteButton,
                        moveButton,
                        archiveButton,
                    };
                }
                NavigationItem.HidesBackButton = true;
                NavigationItem.SetLeftBarButtonItem (cancelSelectedButton, false);
            } else {
                NavigationItem.RightBarButtonItems = new UIBarButtonItem[] {
                    composeMailButton,
                    multiSelectButton,
                };
                if (null == backButton) {
                    NavigationItem.HidesBackButton = false;
                    NavigationItem.LeftItemsSupplementBackButton = true;
                    if (messageSource.GetNachoEmailMessages ().HasFilterSemantics ()) {
                        NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] {
                            searchButton,
                            filterButton,
                        };
                    } else {
                        NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] {
                            searchButton,
                        };
                    }
                } else {
                    NavigationItem.HidesBackButton = true;
                    if (messageSource.GetNachoEmailMessages ().HasFilterSemantics ()) {
                        NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] {
                            backButton,
                            searchButton,
                            filterButton,
                        };
                    } else {
                        NavigationItem.LeftBarButtonItems = new UIBarButtonItem[] {
                            backButton,
                            searchButton,
                        };
                    }
                }
            }
        }

        public void MultiSelectChange (MessageTableViewSource source, int count, bool multipleAccounts)
        {
            archiveButton.Enabled = (count != 0);
            deleteButton.Enabled = (count != 0);
            moveButton.Enabled = (count != 0) && !multipleAccounts;
        }

        public int GetFirstVisibleRow ()
        {       
            var paths = TableView.IndexPathsForVisibleRows; // Must be on UI thread
            if (null == paths) {
                return -1;
            }
            var path = paths.FirstOrDefault ();
            if (null == path) {
                return -1;
            }
            return path.Row;
        }

        protected void RefreshMessage (int id)
        {
            messageSource.EmailMessageChanged (TableView, id);
        }

        protected void RefreshThreadsIfVisible ()
        {
            threadsNeedsRefresh = true;
            if (!this.IsVisible ()) {
                return;
            }
            if (searchDisplayController.Active) {
                return;
            }
            MaybeRefreshThreads ();
        }

        protected void MaybeRefreshThreads ()
        {
            if (threadsNeedsRefresh) {
                threadsNeedsRefresh = false;
                messageSource.BackgroundRefreshEmailMessages ((bool changed, List<int> adds, List<int> deletes) => {
                    bool refreshVisibleCells = true;
                    if (changed) {
                        Util.UpdateTable (TableView, adds, deletes);
                        refreshVisibleCells = false;
                    }
                    if (messageSource.NoMessageThreads ()) {
                        if (PopsWhenEmpty && NavigationController.TopViewController == this) {
                            NavigationController.PopViewController (true);
                        }
                    }
                    if (searchDisplayController.Active) {
                        UpdateSearchResults ();
                        refreshVisibleCells = false;
                    }
                    if (refreshVisibleCells) {
                        messageSource.ReconfigureVisibleCells (TableView);
                    }
                });
            } else {
                messageSource.ReconfigureVisibleCells (TableView);
            }
        }

        McAccount currentAccount;

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);

            // Account switched
            if ((null == currentAccount) || (currentAccount.Id != NcApplication.Instance.Account.Id)) {
                if (searchDisplayController.Active) {
                    searchDisplayController.Active = false;
                }
                CancelSearchIfActive ();
                if (HasAccountSwitcher) {
                    SwitchToAccount (NcApplication.Instance.Account);
                }
            }
            currentAccount = NcApplication.Instance.Account;
                
            if (HasAccountSwitcher) {
                switchAccountButton.SetAccountImage (NcApplication.Instance.Account);
            }

            if (!StatusIndCallbackIsSet) {
                StatusIndCallbackIsSet = true;
                NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
            }

            // TODO: Figure this out
            // When this view is loaded directly from the tab bar,
            // the first time the view is displayed, the content
            // offset is set such that the refresh controller is
            // visible.  The second time this view is presented
            // the content offset is set to properly.
            if (0 > TableView.ContentOffset.Y) {
                TableView.ContentOffset = new CGPoint (0, 0);
            }
            if (null != this.NavigationController) {
                this.NavigationController.ToolbarHidden = true;
            }

            NavigationItem.Title = messageSource.GetNachoEmailMessages ().DisplayName ();

            MaybeRefreshThreads ();
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
        }

        public override void ViewWillDisappear (bool animated)
        {
            base.ViewWillDisappear (animated);
            cancelRefreshTimer ();
            CancelSearchIfActive ();
        }

        public override void ViewDidDisappear (bool animated)
        {
            base.ViewDidDisappear (animated);
            if (this.IsViewLoaded && null == this.NavigationController) {
                NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
                StatusIndCallbackIsSet = false;
                threadsNeedsRefresh = true;
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if (null != s.Account) {
                // KLUDGE - always handle for unified account
                if (McAccount.GetUnifiedAccount ().Id != NcApplication.Instance.Account.Id) {
                    var m = messageSource.GetNachoEmailMessages ();
                    if ((null == m) || !m.IsCompatibleWithAccount (s.Account)) {
                        return;
                    }
                }
                Log.Debug (Log.LOG_UI, "StatusIndicatorCallback: {0}", s.Status.SubKind);

            }
            switch (s.Status.SubKind) {
            case NcResult.SubKindEnum.Info_EmailMessageSetChanged:
            case NcResult.SubKindEnum.Info_EmailMessageSetFlagSucceeded:
            case NcResult.SubKindEnum.Info_EmailMessageClearFlagSucceeded:
            case NcResult.SubKindEnum.Info_EmailMessageScoreUpdated:
            case NcResult.SubKindEnum.Info_SystemTimeZoneChanged:
                RefreshThreadsIfVisible ();
                break;
            case NcResult.SubKindEnum.Info_EmailMessageChanged:
                if (s.Status.Value is int) {
                    RefreshMessage ((int)s.Status.Value);
                }
                break;
            case NcResult.SubKindEnum.Error_SyncFailed:
            case NcResult.SubKindEnum.Info_SyncSucceeded:
                cancelRefreshTimer ();
                break;
            }
        }

        public void MoveThread (McEmailMessageThread thread)
        {
            var vc = new FoldersViewController ();
            var message = thread.FirstMessage ();
            if (message != null) {
                vc.SetOwner (this, true, message.AccountId, thread);
                PresentViewController (vc, true, null);
            }
        }

        void MoveSelected ()
        {
            var vc = new FoldersViewController ();
            var accountId = messageSource.MultiSelectAccount (TableView);
            NcAssert.False (0 == accountId);
            vc.SetOwner (this, true, accountId, TableView);
            PresentViewController (vc, true, null);
        }

        ///  IMessageTableViewSourceDelegate
        public void MessageThreadSelected (McEmailMessageThread messageThread)
        {
            var msg = messageSource.GetNachoEmailMessages ();
            if (msg.HasDraftsSemantics ()) {
                ComposeDraft (messageThread.SingleMessageSpecialCase ());
            } else if (msg.HasOutboxSemantics ()) {
                DealWithThreadInOutbox (messageThread);
            } else if (messageThread.HasMultipleMessages ()) {
                ShowThread (messageThread);
            } else {
                ShowMessage (messageThread);
            }
        }

        void ShowThread (McEmailMessageThread thread)
        {
            var vc = new MessageThreadViewController ();
            vc.SetEmailMessages (messageSource.GetNachoEmailMessages ().GetAdapterForThread (thread));
            NavigationController.PushViewController (vc, true);
        }

        void ShowMessage (McEmailMessageThread thread)
        {
            var messageViewController = new MessageViewController ();
            messageViewController.SetSingleMessageThread (thread);
            NavigationController.PushViewController (messageViewController, true);
        }

        public void DealWithThreadInOutbox (McEmailMessageThread messageThread)
        {
            var message = messageThread.SingleMessageSpecialCase ();
            if (null == message) {
                return;
            }

            var pending = McPending.QueryByEmailMessageId (message.AccountId, message.Id);
            if ((null == pending) || (NcResult.KindEnum.Error != pending.ResultKind)) {
                var copy = EmailHelper.MoveFromOutboxToDrafts (message);
                ComposeDraft (copy);
                return;
            }

            string errorString;
            if (!ErrorHelper.ErrorStringForSubkind (pending.ResultSubKind, out errorString)) {
                errorString = String.Format ("(ErrorCode={0}", pending.ResultSubKind);
            }
            var messageString = "There was a problem sending this message.  You can resend this message or open it in the drafts folder.";
            var alertString = String.Format ("{0}\n{1}", messageString, errorString);
            NcAlertView.Show (this, "Edit Message", alertString,
                new NcAlertAction ("OK", NcAlertActionStyle.Cancel, () => {
                    var copy = EmailHelper.MoveFromOutboxToDrafts (message);
                    ComposeDraft (copy);
                    return;
                }));
        }

        /// <summary>
        /// INachoCalendarItemEditorParent Delegate
        /// </summary>
        public void DismissChildCalendarItemEditor (INachoCalendarItemEditor vc)
        {
            vc.SetOwner (null);
            vc.DismissCalendarItemEditor (true, null);
        }

        /// <summary>
        /// INachoFolderChooser Delegate
        /// </summary>
        public void DismissChildFolderChooser (INachoFolderChooser vc)
        {
            vc.SetOwner (null, false, 0, null);
            vc.DismissFolderChooser (false, null);
        }

        /// <summary>
        /// INachoFolderChooser Delegate
        /// </summary>
        public void FolderSelected (INachoFolderChooser vc, McFolder folder, object cookie)
        {
            if (null != messageSource) {
                messageSource.FolderSelected (vc, folder, cookie);
            }
            vc.DismissFolderChooser (true, null);
        }

        protected void BackShouldSwitchToFolders ()
        {
            using (var image = UIImage.FromBundle ("nav-backarrow")) {
//                backButton = new NcUIBarButtonItem (image, UIBarButtonItemStyle.Plain, onClickBackButton);
                var button = UIButton.FromType (UIButtonType.System);
                button.Frame = new CGRect (0, 0, 70, 30);
                button.SetTitle ("Mail", UIControlState.Normal);
                button.AccessibilityLabel = "Back";
                button.SetTitleColor (UIColor.White, UIControlState.Normal);
                button.SetImage (image, UIControlState.Normal);
                button.Font = UINavigationBar.Appearance.TitleTextAttributes.Font;
                backButton = new UIBarButtonItem (button);
                button.TouchUpInside += onClickBackButton;
            }
        }

        protected void onClickBackButton (object sender, EventArgs e)
        {
            var nachoTabBar = Util.GetActiveTabBar ();
            nachoTabBar.SwitchToFolders ();
        }

        protected void onClickSearchButton (object sender, EventArgs e)
        {
            searchBar.Hidden = false;
            searchBar.BecomeFirstResponder ();
            emailSearcher.EnterSearchMode (NcApplication.Instance.Account);
        }

        [Export ("searchBar:textDidChange:")]
        public void TextChanged (UISearchBar searchBar, string searchText)
        {
            emailSearcher.SearchFor (searchBar.Text);
        }

        [Export ("searchBarSearchButtonClicked:")]
        public void SearchButtonClicked (UISearchBar searchBar)
        {
            if (null == NcApplication.Instance.Account) {
                return;
            }
            emailSearcher.StartServerSearch ();
        }

        [Export ("searchBarCancelButtonClicked:")]
        public void CancelButtonClicked (UISearchBar searchBar)
        {
            emailSearcher.ExitSearchMode ();
            searchDisplayController.Active = false;
            searchBar.Hidden = true;
        }

        // After status ind
        protected void UpdateSearchResults ()
        {
            List<int> adds;
            List<int> deletes;
            NcAssert.NotNull (searchResultsSource, "UpdateSearchResults: searchResultsSource is null");
            searchResultsSource.RefreshEmailMessages (out adds, out deletes);
            NcAssert.NotNull (searchDisplayController, "UpdateSearchResults: searchDisplayController is null");
            if (null != searchDisplayController.SearchResultsTableView) {
                searchDisplayController.SearchResultsTableView.ReloadData ();
            }
        }

        protected void CancelSearchIfActive ()
        {
            emailSearcher.ExitSearchMode ();
        }

        void SwitchAccountButtonPressed ()
        {
            SwitchAccountViewController.ShowDropdown (this, SwitchToAccount);
        }

        protected virtual NachoEmailMessages GetNachoEmailMessages (int accountId)
        {
            return NcEmailManager.Inbox (accountId);
        }

        void SwitchToAccount (McAccount account)
        {
            if (searchDisplayController.Active) {
                searchDisplayController.Active = false;
            }
            messageSource.MultiSelectCancel (TableView);
            switchAccountButton.SetAccountImage (account);
            SetEmailMessages (GetNachoEmailMessages (account.Id));
            MultiSelectToggle (messageSource, false);
            List<int> adds;
            List<int> deletes;
            messageSource.RefreshEmailMessages (out adds, out deletes);
            threadsNeedsRefresh = false;
            TableView.ReloadData ();
        }

        void ComposeMessage ()
        {
            var composeViewController = new MessageComposeViewController (NcApplication.Instance.DefaultEmailAccount);
            composeViewController.Present ();
        }

        void ComposeDraft (McEmailMessage draft)
        {
            var account = McAccount.EmailAccountForMessage (draft);
            var composeViewController = new MessageComposeViewController (account);
            composeViewController.Composer.Message = draft;
            composeViewController.Present ();
        }

        public void RespondToMessageThread (McEmailMessageThread thread, EmailHelper.Action action)
        {
            ComposeResponse (thread, action);
        }

        private void ComposeResponse (McEmailMessageThread thread, EmailHelper.Action action)
        {
            var message = thread.FirstMessageSpecialCase ();
            var account = McAccount.EmailAccountForMessage (message);
            var composeViewController = new MessageComposeViewController (account);
            composeViewController.Composer.Kind = action;
            composeViewController.Composer.RelatedThread = thread;
            composeViewController.Present ();
        }
    }

}
