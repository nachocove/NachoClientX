// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using System.IO;
using CoreGraphics;
using System.Collections.Generic;

using NachoCore;
using NachoCore.Model;

namespace NachoClient.iOS
{
    public partial class ChooseCalendarViewController : NcUIViewControllerNoLeaks
    {

        protected NachoFolders Calendars;
        protected int selectedCalIndex = 0;
        List<McFolder> calFolderList = new List<McFolder> ();

        public ChooseCalendarViewController (IntPtr handle) : base (handle)
        {
        }

        public void SetCalendars (NachoFolders calendars)
        {
            this.Calendars = calendars;
            int i = 0;
            while (i < this.Calendars.Count ()) {
                McFolder c = Calendars.GetFolder (i);
                calFolderList.Add (c);
                i++;
            }
        }

        public int GetCalIndex ()
        {
            return this.selectedCalIndex;
        }

        public void SetSelectedCalIndex (int selectedIndex)
        {
            this.selectedCalIndex = selectedIndex;
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        UITableView tableView;
        CalendarChoicesSource source;

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();
            CreateViewHierarchy ();
        }

        protected override void CreateViewHierarchy ()
        {
            NavigationItem.Title = "Calendars";
            Util.SetBackButton (NavigationController, NavigationItem, A.Color_NachoBlue);

            tableView = new UITableView (View.Frame, UITableViewStyle.Grouped);
            tableView.ScrollEnabled = true;
            source = new CalendarChoicesSource (this, calFolderList);
            tableView.Source = source;
            tableView.BackgroundColor = A.Color_NachoBackgroundGray;
            tableView.AccessibilityLabel = "Choose calendar";

            View.Add (tableView);
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
        }

        protected override void ConfigureAndLayout ()
        {
        }

        protected override void Cleanup ()
        {
            tableView.Source = null;
            tableView.Dispose ();
            tableView = null;
            source = null;
        }

        public void Done ()
        {
            NavigationController.PopViewController (true);
        }

        protected class CalendarChoicesSource : UITableViewSource
        {
            ChooseCalendarViewController owner;
            List<McFolder> calFolderList = new List<McFolder> ();

            public CalendarChoicesSource (ChooseCalendarViewController owner, List<McFolder> calFolderList)
            {
                this.owner = owner;
                this.calFolderList = calFolderList;
            }

            public override nint NumberOfSections (UITableView tableView)
            {
                return 1;
            }

            public override nint RowsInSection (UITableView tableview, nint section)
            {
                return this.calFolderList.Count;
            }

            public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
            {
                const string cellId = "Choice";

                var cell = tableView.DequeueReusableCell (cellId);
                if (null == cell) {
                    cell = new UITableViewCell (UITableViewCellStyle.Default, cellId);
                    if (indexPath.Row == owner.selectedCalIndex) {
                        using (var image = UIImage.FromBundle ("gen-checkbox-checked")) {
                            cell.ImageView.Image = image;
                        }
                    } else {
                        using (var image = UIImage.FromBundle ("gen-checkbox")) {
                            cell.ImageView.Image = image;
                        }
                    }
                    cell.TextLabel.TextColor = A.Color_NachoDarkText;
                    cell.TextLabel.Font = A.Font_AvenirNextMedium14;
                    cell.SelectionStyle = UITableViewCellSelectionStyle.Default;
                }
                cell.TextLabel.Text = calFolderList [indexPath.Row].DisplayName;
                return cell;
            }

            public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
            {
                owner.SetSelectedCalIndex (indexPath.Row);
                tableView.DeselectRow (indexPath, true);
                owner.Done ();
            }
        }
    }
}
