// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using System.IO;
using CoreGraphics;
using System.Collections.Generic;

using NachoCore;
using NachoCore.Model;
using NachoCore.Utils;

namespace NachoClient.iOS
{
    public partial class ChooseCalendarViewController : NcUIViewControllerNoLeaks
    {
        private List<Tuple<McAccount, NachoFolders>> calendars;
        private int selectedAccountIndex;
        private int selectedFolderIndex;

        private UITableView tableView;

        public ChooseCalendarViewController (IntPtr handle) : base (handle)
        {
        }

        public void SetCalendars (List<Tuple<McAccount, NachoFolders>> calendars, McFolder selectedCalendar)
        {
            this.calendars = calendars;

            for (int a = 0; a < calendars.Count; ++a) {
                var accountCalendars = calendars [a].Item2;
                for (int f = 0; f < accountCalendars.Count(); ++f) {
                    if (accountCalendars.GetFolder(f).Id == selectedCalendar.Id) {
                        selectedAccountIndex = a;
                        selectedFolderIndex = f;
                        return;
                    }
                }
            }

            Log.Info (Log.LOG_UI,
                "The selected calendar that was passed to ChooseCalendarViewController.SetCalendars is not in the set of candidate calendars.");
            selectedAccountIndex = 0;
            selectedFolderIndex = 0;
        }

        public McFolder GetSelectedCalendar ()
        {
            return calendars [selectedAccountIndex].Item2.GetFolder (selectedFolderIndex);
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        protected override void CreateViewHierarchy ()
        {
            NavigationItem.Title = "Calendars";
            Util.SetBackButton (NavigationController, NavigationItem, A.Color_NachoBlue);

            tableView = new UITableView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height), UITableViewStyle.Grouped);
            tableView.AutoresizingMask = UIViewAutoresizing.FlexibleDimensions;
            tableView.ScrollEnabled = true;
            tableView.BackgroundColor = A.Color_NachoBackgroundGray;
            tableView.AccessibilityLabel = "Choose calendar";
            View.AddSubview (tableView);
        }

        protected override void ConfigureAndLayout ()
        {
            tableView.Source = new CalendarChoicesSource (this);
        }

        protected override void Cleanup ()
        {
            tableView.Source = null;
            tableView = null;
        }

        public override void ViewDidAppear (bool animated)
        {
            base.ViewDidAppear (animated);
            tableView.ScrollToRow (NSIndexPath.FromRowSection (selectedFolderIndex, selectedAccountIndex), UITableViewScrollPosition.Middle, true);
        }

        private class CalendarChoicesSource : UITableViewSource
        {
            private ChooseCalendarViewController owner;

            public CalendarChoicesSource (ChooseCalendarViewController owner)
            {
                this.owner = owner;
            }

            public override nint NumberOfSections (UITableView tableView)
            {
                return owner.calendars.Count;
            }

            public override nint RowsInSection (UITableView tableview, nint section)
            {
                return owner.calendars [(int)section].Item2.Count ();
            }

            public override string TitleForHeader (UITableView tableView, nint section)
            {
                return owner.calendars [(int)section].Item1.DisplayName;
            }

            public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
            {
                const string cellId = "Choice";

                var cell = tableView.DequeueReusableCell (cellId);
                if (null == cell) {
                    cell = new UITableViewCell (UITableViewCellStyle.Default, cellId);
                    cell.TextLabel.TextColor = A.Color_NachoDarkText;
                    cell.TextLabel.Font = A.Font_AvenirNextMedium14;
                    cell.SelectionStyle = UITableViewCellSelectionStyle.Default;
                }
                cell.TextLabel.Text = owner.calendars [indexPath.Section].Item2.GetFolder (indexPath.Row).DisplayName;
                if (indexPath.Section == owner.selectedAccountIndex && indexPath.Row == owner.selectedFolderIndex) {
                    using (var image = UIImage.FromBundle ("gen-checkbox-checked")) {
                        cell.ImageView.Image = image;
                    }
                } else {
                    using (var image = UIImage.FromBundle ("gen-checkbox")) {
                        cell.ImageView.Image = image;
                    }
                }
                return cell;
            }

            public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
            {
                owner.selectedAccountIndex = indexPath.Section;
                owner.selectedFolderIndex = indexPath.Row;
                tableView.DeselectRow (indexPath, true);
                owner.NavigationController.PopViewController (true);
            }
        }
    }
}
