// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

using System.IO;
using System.Drawing;
using System.Collections.Generic;

using NachoCore;

namespace NachoClient.iOS
{
    public partial class ChooseCalendarViewController : NcUIViewController
    {

        protected NachoFolders Calendars;
        protected int selectedCalIndex = 0;

        UIColor separatorColor = new UIColor (.8f, .8f, .8f, .6f);
        protected static float SCREEN_WIDTH = UIScreen.MainScreen.Bounds.Width;
        protected int LINE_OFFSET = 30;
        protected int CELL_HEIGHT = 44;
        protected float TEXT_LINE_HEIGHT = 19.124f;
        UIColor solidTextColor = A.Color_NachoBlack;

        public ChooseCalendarViewController (IntPtr handle) : base (handle)
        {
        }

        public void SetCalendars (NachoFolders calendars)
        {
            this.Calendars = calendars;

        }

        public int GetCalIndex ()
        {
            return this.selectedCalIndex;
        }

        public override void ViewDidLoad ()
        {
            base.ViewDidLoad ();

            CreateCalendarView ();
            ConfigureCalendarView ();

        }


            
        protected void CreateCalendarView ()
        {

            AddCalLine (0, LINE_OFFSET, SCREEN_WIDTH, separatorColor);
            int i = 0;
            while (i < Calendars.Count ()) {
                var c = Calendars.GetFolder (i);
                // TODO: Get color from calendar
                MakeCalCheckCell (100 + i, c.DisplayName, 0f, LINE_OFFSET + (CELL_HEIGHT * i), SCREEN_WIDTH, CELL_HEIGHT);
                AddCalLine (0, LINE_OFFSET + (CELL_HEIGHT * i), SCREEN_WIDTH, separatorColor);
                i++;
            }


            //Content View
            contentView.Frame = new RectangleF (0, 0, SCREEN_WIDTH, (LINE_OFFSET * 3) + (CELL_HEIGHT * (Calendars.Count () + 1)));
            contentView.BackgroundColor = A.Color_NachoNowBackground;

            //Scroll View
            scrollView.BackgroundColor = A.Color_NachoNowBackground;
            scrollView.ContentSize = new SizeF (SCREEN_WIDTH, (LINE_OFFSET * 3) + (CELL_HEIGHT * (Calendars.Count () + 1)));


        }

        protected void ConfigureCalendarView ()
        {
            contentView.ViewWithTag (100 + selectedCalIndex).ViewWithTag (200 + selectedCalIndex).Hidden = false;

        }

        public void AddCalLine (float offset, float yVal, float width, UIColor color)
        {
            var lineUIView = new UIView (new RectangleF (offset, yVal, width, .5f));
            lineUIView.BackgroundColor = color;
            contentView.AddSubview (lineUIView);
        }



        public void MakeCalCheckCell (int tag, string label, float X, float Y, float Width, float Height)
        {
            UIView CheckCell = new UIView (new RectangleF (X, Y, Width, Height));
            CheckCell.BackgroundColor = UIColor.White;


            UILabel textLabel = new UILabel (new RectangleF (15, 12.438f, SCREEN_WIDTH / 2, TEXT_LINE_HEIGHT));
            textLabel.Text = label;
            textLabel.Font = A.Font_AvenirNextRegular14;
            textLabel.TextColor = solidTextColor;
            CheckCell.AddSubview (textLabel);

            UIImageView cellImage = new UIImageView (new RectangleF (SCREEN_WIDTH - 30, 14.5f, 15, 15));
            cellImage.Image = Util.MakeCheckmark (A.Color_NachoBlue);
            CheckCell.AddSubview (cellImage);
            cellImage.Tag = tag + 100;
            CheckCell.Tag = tag;

            var Tap = new UITapGestureRecognizer ();
            Tap.AddTarget (() => {
                if (cellImage.Hidden) {
                    ToggleChecks ();
                    cellImage.Hidden = false;
                    selectedCalIndex = CheckCell.Tag - 100;
                } 
                NavigationController.PopViewControllerAnimated (true);
            });
            CheckCell.AddGestureRecognizer (Tap);
            cellImage.Hidden = true;

            contentView.AddSubview (CheckCell);
        }

        public void ToggleChecks ()
        {
            int i = 0;
            while (i < Calendars.Count()) {
                contentView.ViewWithTag (101 + i).ViewWithTag (201 + i).Hidden = true;
                i++;
            }
        }
            
    }
}

