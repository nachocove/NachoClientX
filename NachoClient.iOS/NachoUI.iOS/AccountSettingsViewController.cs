// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CoreGraphics;
using NachoCore.Model;
using NachoCore.Utils;
using System.Linq;
using NachoCore;
using NachoPlatform;

namespace NachoClient.iOS
{
    public partial class AccountSettingsViewController : NcUIViewControllerNoLeaks
    {
        protected UIView contentView;
        protected UIScrollView scrollView;

        protected UIBarButtonItem editButton;
        protected UIBarButtonItem cancelButton;
        protected UIBarButtonItem saveButton;
        protected UIBarButtonItem backButton;
        protected UIButton deleteAccountButton;

        protected bool textFieldsEditable = false;

        protected static readonly nfloat HORIZONTAL_PADDING = 25f;
        protected static readonly nfloat SPACER = 15f;
        protected static readonly nfloat LABEL_VERTICAL_SPACER = 17f;
        protected static readonly nfloat LABEL_WIDTH = 90f;
        protected static readonly nfloat LABEL_HEIGHT = 17f;
        protected static readonly nfloat TEXTFIELD_HEIGHT = 50f;

        protected readonly UIColor LABEL_TEXT_COLOR = A.Color_NachoDarkText;
        protected readonly UIColor TEXT_FIELD_TEXT_COLOR = A.Color_NachoGreen;
        protected readonly UIFont TEXT_FIELD_FONT = A.Font_AvenirNextMedium14;

        protected const int ACCOUNT_NAME_TAG = 100;
        protected const int USERNAME_TAG = 101;
        protected const int PASSWORD_TAG = 102;
        protected const int EMAIL_TAG = 103;
        protected const int MAILSERVER_TAG = 104;
        protected const int CONFERENCE_TAG = 105;

        protected string originalAccountNameValue = "";
        protected string originalUsernameValue = "";
        protected string originalPasswordValue = "";
        protected string originalEmailValue = "";
        protected string originalMailServerValue = "";
        protected string originalConferenceValue = "";
        protected string originalSignatureValue = "";

        protected const int GREY_BACKGROUND_VIEW_TAG = 200;
        protected const int STATUS_VIEW_TAG = 201;
        protected const int DELETE_ACCOUNT_BACKGROUND_VIEW_TAG = 202;
        protected const int DELETE_ACCOUNT_SPINNER_TAG = 203;

        protected const int CANCEL_VALIDATION_BUTTON_TAG = 304;

        protected bool handleStatusEnums = true;

        UcNameValuePair SignatureBlock;
        UcNameValuePair DaysToSyncBlock;
        UcNameValuePair NotificationsBlock;
        UISwitch FastNotificationSwitch;

        protected nfloat yOffset;
        protected nfloat keyboardHeight;

        protected enum AccountIssue
        {
            None,
            InvalidHost,
            ErrorAuth,
            ErrorComm,
            ErrorUser,
        }

        protected AccountIssue accountIssue = AccountIssue.None;

        public AccountSettingsViewController (IntPtr handle) : base (handle)
        {
        }

        public override void ViewWillAppear (bool animated)
        {
            base.ViewWillAppear (animated);
        }

        public override void ViewDidAppear (bool animated)
        {
            CaptureOriginalSettings ();
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, OnKeyboardNotification);
                NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, OnKeyboardNotification);
            }
            if (this.NavigationController.RespondsToSelector (new ObjCRuntime.Selector ("interactivePopGestureRecognizer"))) {
                this.NavigationController.InteractivePopGestureRecognizer.Enabled = true;
                this.NavigationController.InteractivePopGestureRecognizer.Delegate = null;
            }
            base.ViewDidAppear (animated);
        }

        public override void ViewWillDisappear (bool animated)
        {
            if (HandlesKeyboardNotifications) {
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillHideNotification);
                NSNotificationCenter.DefaultCenter.RemoveObserver (UIKeyboard.WillShowNotification);
            }
            View.EndEditing (true);
            base.ViewWillDisappear (animated);
        }

        public override bool HidesBottomBarWhenPushed {
            get {
                return this.NavigationController.TopViewController == this;
            }
        }

        protected override void CreateViewHierarchy ()
        {
            NavigationController.NavigationBar.Translucent = false;
            NavigationItem.Title = "Account Settings";

            editButton = new NcUIBarButtonItem ();
            cancelButton = new NcUIBarButtonItem ();
            backButton = new NcUIBarButtonItem ();
            saveButton = new NcUIBarButtonItem ();

            editButton.Image = UIImage.FromBundle ("gen-edit");
            cancelButton.Image = UIImage.FromBundle ("icn-close");
            backButton.Image = UIImage.FromBundle ("nav-backarrow");
            saveButton.Title = "Done";

            editButton.AccessibilityLabel = "Edit";
            cancelButton.AccessibilityLabel = "Close";
            backButton.AccessibilityLabel = "Back";
            saveButton.AccessibilityLabel = "Save";

            backButton.TintColor = A.Color_NachoBlue;

            NavigationItem.SetLeftBarButtonItem (backButton, true);
            NavigationItem.SetRightBarButtonItem (editButton, true); 

            editButton.Clicked += EditButtonClicked;
            saveButton.Clicked += SaveButtonClicked;
            cancelButton.Clicked += CancelButtonClicked;
            backButton.Clicked += BackButtonClicked;

            View.BackgroundColor = A.Color_NachoBackgroundGray;

            scrollView = new UIScrollView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height));
            scrollView.BackgroundColor = A.Color_NachoBackgroundGray;
            scrollView.ScrollEnabled = true;
            scrollView.AlwaysBounceVertical = true;
            scrollView.KeyboardDismissMode = UIScrollViewKeyboardDismissMode.OnDrag;
            View.AddSubview (scrollView);

            contentView = new UIView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height));
            contentView.BackgroundColor = A.Color_NachoBackgroundGray;
            scrollView.AddSubview (contentView);

            UIView settingsView = new UIView (new CGRect (0, 20, View.Frame.Width, TEXTFIELD_HEIGHT * 7));
            settingsView.BackgroundColor = UIColor.White;
            settingsView.Layer.BorderColor = A.Color_NachoBorderGray.CGColor;
            settingsView.Layer.BorderWidth = .5f;

            yOffset = 0;

            UILabel nameLabel = new UILabel (new CGRect (HORIZONTAL_PADDING, yOffset + LABEL_VERTICAL_SPACER, LABEL_WIDTH, LABEL_HEIGHT));
            nameLabel.Font = A.Font_AvenirNextRegular14;
            nameLabel.TextAlignment = UITextAlignment.Left;
            nameLabel.TextColor = LABEL_TEXT_COLOR;
            nameLabel.Text = "Description";
            settingsView.Add (nameLabel);

            UITextField accountNameTextField = new UITextField (new CGRect (nameLabel.Frame.Right + SPACER, yOffset, View.Frame.Width - 149, TEXTFIELD_HEIGHT));
            accountNameTextField.Placeholder = "Exchange";
            accountNameTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            accountNameTextField.Font = TEXT_FIELD_FONT;
            accountNameTextField.TextAlignment = UITextAlignment.Left;
            accountNameTextField.Tag = ACCOUNT_NAME_TAG;
            accountNameTextField.ShouldReturn += TextFieldShouldReturn;
            settingsView.Add (accountNameTextField);

            yOffset = accountNameTextField.Frame.Bottom;

            Util.AddHorizontalLine (HORIZONTAL_PADDING, yOffset, settingsView.Frame.Width - HORIZONTAL_PADDING, A.Color_NachoBorderGray, settingsView);

            UILabel usernameLabel = new UILabel (new CGRect (HORIZONTAL_PADDING, yOffset + LABEL_VERTICAL_SPACER, nameLabel.Frame.Width, LABEL_HEIGHT));
            usernameLabel.Font = A.Font_AvenirNextRegular14;
            usernameLabel.TextAlignment = UITextAlignment.Left;
            usernameLabel.TextColor = LABEL_TEXT_COLOR;
            usernameLabel.Text = "Username";
            settingsView.Add (usernameLabel);

            UITextField usernameTextField = new UITextField (new CGRect (nameLabel.Frame.Right + SPACER, yOffset, accountNameTextField.Frame.Width, TEXTFIELD_HEIGHT));
            usernameTextField.Placeholder = "username";
            usernameTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            usernameTextField.Font = TEXT_FIELD_FONT;
            usernameTextField.TextAlignment = UITextAlignment.Left;
            usernameTextField.Tag = USERNAME_TAG;
            usernameTextField.ShouldReturn += TextFieldShouldReturn;
            settingsView.Add (usernameTextField);

            yOffset = usernameTextField.Frame.Bottom;

            Util.AddHorizontalLine (HORIZONTAL_PADDING, yOffset, settingsView.Frame.Width - HORIZONTAL_PADDING, A.Color_NachoBorderGray, settingsView);

            UILabel passwordLabel = new UILabel (new CGRect (HORIZONTAL_PADDING, yOffset + LABEL_VERTICAL_SPACER, nameLabel.Frame.Width, LABEL_HEIGHT));
            passwordLabel.Font = A.Font_AvenirNextRegular14;
            passwordLabel.TextAlignment = UITextAlignment.Left;
            passwordLabel.TextColor = LABEL_TEXT_COLOR;
            passwordLabel.Text = "Password";
            settingsView.Add (passwordLabel);

            UITextField passwordTextField = new UITextField (new CGRect (nameLabel.Frame.Right + SPACER, yOffset, accountNameTextField.Frame.Width, TEXTFIELD_HEIGHT));
            passwordTextField.Placeholder = "********";
            passwordTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            passwordTextField.Font = TEXT_FIELD_FONT;
            passwordTextField.TextAlignment = UITextAlignment.Left;
            passwordTextField.SecureTextEntry = true;
            passwordTextField.Tag = PASSWORD_TAG;
            passwordTextField.ShouldReturn += TextFieldShouldReturn;
            passwordTextField.ShouldChangeCharacters += ShouldChangeCharacters;
            settingsView.Add (passwordTextField);

            yOffset = passwordTextField.Frame.Bottom;

            Util.AddHorizontalLine (HORIZONTAL_PADDING, yOffset, settingsView.Frame.Width - HORIZONTAL_PADDING, A.Color_NachoBorderGray, settingsView);

            UILabel emailLabel = new UILabel (new CGRect (HORIZONTAL_PADDING, yOffset + LABEL_VERTICAL_SPACER, nameLabel.Frame.Width, LABEL_HEIGHT));
            emailLabel.Font = A.Font_AvenirNextRegular14;
            emailLabel.TextAlignment = UITextAlignment.Left;
            emailLabel.TextColor = LABEL_TEXT_COLOR;
            emailLabel.Text = "Email";
            settingsView.Add (emailLabel);

            UITextField emailTextField = new UITextField (new CGRect (nameLabel.Frame.Right + SPACER, yOffset, accountNameTextField.Frame.Width, TEXTFIELD_HEIGHT));
            emailTextField.Placeholder = "zachq@nachocove.com";
            emailTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            emailTextField.Font = TEXT_FIELD_FONT;
            emailTextField.TextAlignment = UITextAlignment.Left;
            emailTextField.Tag = EMAIL_TAG;
            emailTextField.ShouldReturn += TextFieldShouldReturn;
            settingsView.Add (emailTextField);

            yOffset = emailTextField.Frame.Bottom;

            Util.AddHorizontalLine (HORIZONTAL_PADDING, yOffset, settingsView.Frame.Width - HORIZONTAL_PADDING, A.Color_NachoBorderGray, settingsView);

            UILabel mailserverLabel = new UILabel (new CGRect (HORIZONTAL_PADDING, yOffset + LABEL_VERTICAL_SPACER, nameLabel.Frame.Width, LABEL_HEIGHT));
            mailserverLabel.Font = A.Font_AvenirNextRegular14;
            mailserverLabel.TextAlignment = UITextAlignment.Left;
            mailserverLabel.TextColor = LABEL_TEXT_COLOR;
            mailserverLabel.Text = "Mail Server";
            settingsView.Add (mailserverLabel);

            UITextField mailserverTextField = new UITextField (new CGRect (nameLabel.Frame.Right + SPACER, yOffset, accountNameTextField.Frame.Width, TEXTFIELD_HEIGHT));
            mailserverTextField.Placeholder = "outlook.office365.com";
            mailserverTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            mailserverTextField.Font = TEXT_FIELD_FONT;
            mailserverTextField.TextAlignment = UITextAlignment.Left;
            mailserverTextField.Tag = MAILSERVER_TAG;
            mailserverTextField.ShouldReturn += TextFieldShouldReturn;
            settingsView.Add (mailserverTextField);

            yOffset = mailserverTextField.Frame.Bottom;

            Util.AddHorizontalLine (HORIZONTAL_PADDING, yOffset, settingsView.Frame.Width - HORIZONTAL_PADDING, A.Color_NachoBorderGray, settingsView);

            UILabel conferencecallLabel = new UILabel (new CGRect (HORIZONTAL_PADDING, yOffset + 3f, nameLabel.Frame.Width, LABEL_HEIGHT + 25));

            conferencecallLabel.Font = A.Font_AvenirNextRegular14;
            conferencecallLabel.TextAlignment = UITextAlignment.Left;
            conferencecallLabel.TextColor = LABEL_TEXT_COLOR;
            conferencecallLabel.Text = "Conference Call Number";
            conferencecallLabel.Lines = 2;
            conferencecallLabel.LineBreakMode = UILineBreakMode.WordWrap;

            settingsView.Add (conferencecallLabel);

            UITextField conferencecallTextField = new UITextField (new CGRect (nameLabel.Frame.Right + SPACER, yOffset, accountNameTextField.Frame.Width, TEXTFIELD_HEIGHT));
            conferencecallTextField.Placeholder = "1928342-3";
            conferencecallTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            conferencecallTextField.Font = TEXT_FIELD_FONT;
            conferencecallTextField.TextAlignment = UITextAlignment.Left;
            conferencecallTextField.Tag = CONFERENCE_TAG;
            conferencecallTextField.ShouldReturn += TextFieldShouldReturn;
            settingsView.Add (conferencecallTextField);

            yOffset = conferencecallTextField.Frame.Bottom;

            Util.AddHorizontalLine (HORIZONTAL_PADDING, yOffset, settingsView.Frame.Width - HORIZONTAL_PADDING, A.Color_NachoBorderGray, settingsView);

            SignatureBlock = new UcNameValuePair (new CGRect (0, yOffset, View.Frame.Width, TEXTFIELD_HEIGHT), "Signature", HORIZONTAL_PADDING, 15, SignatureTapHandler);
            settingsView.AddSubview (SignatureBlock);

            contentView.AddSubview (settingsView);

            yOffset = settingsView.Frame.Bottom + 20;

            // Additional settings

            UIView additionalSettingsView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 3 * TEXTFIELD_HEIGHT));
            additionalSettingsView.BackgroundColor = UIColor.White;
            additionalSettingsView.Layer.BorderColor = A.Color_NachoBorderGray.CGColor;
            additionalSettingsView.Layer.BorderWidth = .5f;

            DaysToSyncBlock = new UcNameValuePair (new CGRect (0, 0, View.Frame.Width, TEXTFIELD_HEIGHT), "Days to sync", HORIZONTAL_PADDING, 15, DaysToSyncTapHandler);
            additionalSettingsView.AddSubview (DaysToSyncBlock);

            Util.AddHorizontalLine (HORIZONTAL_PADDING, TEXTFIELD_HEIGHT, settingsView.Frame.Width - HORIZONTAL_PADDING, A.Color_NachoBorderGray, additionalSettingsView);

            NotificationsBlock = new UcNameValuePair (new CGRect (0, TEXTFIELD_HEIGHT, View.Frame.Width, TEXTFIELD_HEIGHT), "Notifications", HORIZONTAL_PADDING, 15, NotificationsTapHandler);
            additionalSettingsView.AddSubview (NotificationsBlock);

            var fastNotificationOffset = 2 * TEXTFIELD_HEIGHT;
            Util.AddHorizontalLine (HORIZONTAL_PADDING, fastNotificationOffset, settingsView.Frame.Width - HORIZONTAL_PADDING, A.Color_NachoBorderGray, additionalSettingsView);

            var fastNotificationLabel = new UILabel ();
            fastNotificationLabel.Font = A.Font_AvenirNextRegular14;
            fastNotificationLabel.TextAlignment = UITextAlignment.Left;
            fastNotificationLabel.TextColor = LABEL_TEXT_COLOR;
            fastNotificationLabel.Text = "Fast Notification";
            fastNotificationLabel.SizeToFit ();
            ViewFramer.Create (fastNotificationLabel).X (HORIZONTAL_PADDING).CenterY (fastNotificationOffset, TEXTFIELD_HEIGHT);

            FastNotificationSwitch = new UISwitch ();
            ViewFramer.Create (FastNotificationSwitch).RightAlignX (settingsView.Frame.Width - HORIZONTAL_PADDING);
            ViewFramer.Create (FastNotificationSwitch).CenterY (fastNotificationOffset, TEXTFIELD_HEIGHT);

            FastNotificationSwitch.ValueChanged += FastNotificationSwitchChangedHandler;

            additionalSettingsView.AddSubview (fastNotificationLabel);
            additionalSettingsView.AddSubview (FastNotificationSwitch);

            contentView.AddSubview (additionalSettingsView);

            yOffset = additionalSettingsView.Frame.Bottom + 20;

            UIView deleteAccountView = new UIView (new CGRect (0, yOffset, View.Frame.Width, 44));
            deleteAccountView.BackgroundColor = UIColor.White;
            deleteAccountView.Layer.BorderColor = A.Color_NachoBorderGray.CGColor;
            deleteAccountView.Layer.BorderWidth = .5f;

            deleteAccountButton = UIButton.FromType (UIButtonType.System);
            deleteAccountButton.Frame = new CGRect (HORIZONTAL_PADDING, 0, deleteAccountView.Frame.Width, deleteAccountView.Frame.Height);
            Util.AddButtonImage (deleteAccountButton, "email-delete-two", UIControlState.Normal);
            deleteAccountButton.TitleEdgeInsets = new UIEdgeInsets (0, 28, 0, 0);
            deleteAccountButton.SetTitle ("Delete This Account", UIControlState.Normal);
            deleteAccountButton.AccessibilityLabel = "Delete Account";
            deleteAccountButton.Font = A.Font_AvenirNextRegular14;
            deleteAccountButton.HorizontalAlignment = UIControlContentHorizontalAlignment.Left;
            deleteAccountButton.TouchUpInside += onDeleteAccount;
            deleteAccountView.AddSubview (deleteAccountButton);

            // Fixme: delete account is still a test thing
            contentView.Add (deleteAccountView);

            yOffset = deleteAccountView.Frame.Bottom + A.Card_Vertical_Indent;

            UIView greyBackground = new UIView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height));
            greyBackground.BackgroundColor = UIColor.DarkGray;
            greyBackground.Alpha = .4f;
            greyBackground.Tag = GREY_BACKGROUND_VIEW_TAG;
            greyBackground.Hidden = true;
            View.Add (greyBackground);

            UIView statusView = new UIView (new CGRect (View.Frame.Width / 6, View.Frame.Height / 2 - 150, View.Frame.Width * 2 / 3, 150));
            statusView.Tag = STATUS_VIEW_TAG;
            statusView.Layer.CornerRadius = 7.0f;
            statusView.BackgroundColor = UIColor.White;
            statusView.Alpha = 1.0f;
            statusView.Hidden = true;

            UITextView statusMessage = new UITextView (new CGRect (8, 2, statusView.Frame.Width - 16, statusView.Frame.Height / 2.4f));
            statusMessage.BackgroundColor = UIColor.White;
            statusMessage.Alpha = 1.0f;
            statusMessage.Font = UIFont.SystemFontOfSize (17);
            statusMessage.TextColor = UIColor.Black;
            statusMessage.Text = "Validating Credentials";
            statusMessage.TextAlignment = UITextAlignment.Center;
            statusMessage.Editable = false;
            statusView.AddSubview (statusMessage);

            UIActivityIndicatorView theSpinner = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);
            theSpinner.Alpha = 1.0f;
            theSpinner.HidesWhenStopped = true;
            theSpinner.Frame = new CGRect (statusView.Frame.Width / 2 - 20, 50, 40, 40);
            theSpinner.Color = A.Color_SystemBlue;
            theSpinner.StartAnimating ();

            statusView.AddSubview (theSpinner);

            UIView cancelLine = new UIView (new CGRect (0, 105, statusView.Frame.Width, .5f));
            cancelLine.BackgroundColor = A.Color_NachoLightBorderGray;
            statusView.AddSubview (cancelLine);

            UIButton cancelValidation = new UIButton (new CGRect (0, 106, statusView.Frame.Width, 40));
            cancelValidation.Layer.CornerRadius = 10.0f;
            cancelValidation.BackgroundColor = UIColor.White;
            cancelValidation.TitleLabel.TextAlignment = UITextAlignment.Center;
            cancelValidation.SetTitle ("Cancel", UIControlState.Normal);
            cancelValidation.AccessibilityLabel = "Cancel";
            cancelValidation.SetTitleColor (A.Color_SystemBlue, UIControlState.Normal);
            cancelValidation.Tag = CANCEL_VALIDATION_BUTTON_TAG;
            statusView.AddSubview (cancelValidation);

            cancelValidation.TouchUpInside += CancelValidationButtonClicked;

            statusView.AddSubview (cancelValidation);
            View.AddSubview (statusView);

            // Delete Account Spinner - Keeping this separate from the validate credential spinner 
            UIView deleteAccountBackgroundView = new UIView (new CGRect (0, 0, View.Frame.Width, View.Frame.Height));
            deleteAccountBackgroundView.BackgroundColor = UIColor.DarkGray.ColorWithAlpha (.6f);
            deleteAccountBackgroundView.Tag = DELETE_ACCOUNT_BACKGROUND_VIEW_TAG;
            deleteAccountBackgroundView.Hidden = true;
            deleteAccountBackgroundView.Alpha = 0.0f;
            View.AddSubview (deleteAccountBackgroundView);

            UIView alertMimicView = new UIView (new CGRect (deleteAccountBackgroundView.Frame.Width / 2 - 90, deleteAccountBackgroundView.Frame.Height / 2 - 80, 180, 110));
            alertMimicView.BackgroundColor = UIColor.White;
            alertMimicView.Layer.CornerRadius = 6.0f;
            deleteAccountBackgroundView.AddSubview (alertMimicView);

            UILabel deleteAccountStatusMessage = new UILabel (new CGRect (8, 10, alertMimicView.Frame.Width - 16, 25));
            deleteAccountStatusMessage.BackgroundColor = UIColor.White;
            deleteAccountStatusMessage.Alpha = 1.0f;
            deleteAccountStatusMessage.Font = UIFont.SystemFontOfSize (17);
            deleteAccountStatusMessage.TextColor = UIColor.Black;
            deleteAccountStatusMessage.Text = "Deleting Account";
            deleteAccountStatusMessage.TextAlignment = UITextAlignment.Center;
            alertMimicView.AddSubview (deleteAccountStatusMessage);

            UIActivityIndicatorView deleteAccountActivityIndicator = new UIActivityIndicatorView (UIActivityIndicatorViewStyle.WhiteLarge);
            deleteAccountActivityIndicator.Frame = new CGRect (alertMimicView.Frame.Width / 2 - 20, deleteAccountStatusMessage.Frame.Bottom + 15, 40, 40);
            deleteAccountActivityIndicator.Color = A.Color_SystemBlue;
            deleteAccountActivityIndicator.Alpha = 1.0f;
            deleteAccountActivityIndicator.StartAnimating ();
            deleteAccountActivityIndicator.Tag = DELETE_ACCOUNT_SPINNER_TAG;
            alertMimicView.AddSubview (deleteAccountActivityIndicator);
        }

        protected override void ConfigureAndLayout ()
        {
            McAccount theAccount = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
            McServer theServer = McServer.QueryByAccountId<McServer> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();
            McCred theCred = McCred.QueryByAccountId<McCred> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();
            McConference theConference = McConference.QueryByAccountId <McConference> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();

            var accountNameTextField = (UITextField)View.ViewWithTag (ACCOUNT_NAME_TAG);
            var usernameTextField = (UITextField)View.ViewWithTag (USERNAME_TAG);
            var passwordTextField = (UITextField)View.ViewWithTag (PASSWORD_TAG);
            var emailTextField = (UITextField)View.ViewWithTag (EMAIL_TAG);
            var mailserverTextField = (UITextField)View.ViewWithTag (MAILSERVER_TAG);
            var conferenceTextField = (UITextField)View.ViewWithTag (CONFERENCE_TAG);

            if (!String.IsNullOrEmpty (theAccount.DisplayName)) {
                accountNameTextField.Text = theAccount.DisplayName;
            }

            if (!String.IsNullOrEmpty (theCred.Username)) {
                usernameTextField.Text = theCred.Username;
            }

            if (!String.IsNullOrEmpty (theCred.GetPassword ())) {
                passwordTextField.Text = theCred.GetPassword ();
            }

            if (!String.IsNullOrEmpty (theAccount.EmailAddr)) {
                emailTextField.Text = theAccount.EmailAddr;
            }

            if (null != theServer) {
                mailserverTextField.Text = theServer.Host;
                if (443 != theServer.Port) {
                    mailserverTextField.Text += ":" + theServer.Port.ToString ();
                }
            }

            if (null == theConference) {
                theConference = new McConference ();
                theConference.AccountId = LoginHelpers.GetCurrentAccountId ();
                theConference.DefaultPhoneNumber = "";
                theConference.Insert ();
            }

            if (!String.IsNullOrEmpty (theConference.DefaultPhoneNumber)) {
                conferenceTextField.Text = theConference.DefaultPhoneNumber;
            }

            SignatureBlock.SetValue (theAccount.Signature);

            DaysToSyncBlock.SetValue (Pretty.MaxAgeFilter (theAccount.DaysToSyncEmail));

            FastNotificationSwitch.SetState (theAccount.FastNotificationEnabled, false);

            NotificationsBlock.SetValue (Pretty.NotificationConfiguration (theAccount.NotificationConfiguration));

            accountNameTextField.Enabled = textFieldsEditable;
            usernameTextField.Enabled = textFieldsEditable;
            passwordTextField.Enabled = textFieldsEditable;
            emailTextField.Enabled = textFieldsEditable;
            mailserverTextField.Enabled = textFieldsEditable;
            conferenceTextField.Enabled = textFieldsEditable;

            ColorTextFields ();

            LayoutView ();
        }

        protected void LayoutView ()
        {
            scrollView.Frame = new CGRect (0, 0, View.Frame.Width, View.Frame.Height - keyboardHeight);
            contentView.Frame = new CGRect (0, 0, View.Frame.Width, yOffset);
            scrollView.ContentSize = contentView.Frame.Size;
        }

        public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.Identifier == "SettingsToNotificationChooser") {
                var vc = (NotificationChooserViewController)segue.DestinationViewController;
                McAccount theAccount = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
                vc.Setup (this, theAccount.Id, theAccount.NotificationConfiguration);
                return;
            }
        }

        protected void ColorTextFields ()
        {
            var usernameTextField = (UITextField)View.ViewWithTag (USERNAME_TAG);
            var passwordTextField = (UITextField)View.ViewWithTag (PASSWORD_TAG);
            var emailTextField = (UITextField)View.ViewWithTag (EMAIL_TAG);
            var mailserverTextField = (UITextField)View.ViewWithTag (MAILSERVER_TAG);

            usernameTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            passwordTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            emailTextField.TextColor = TEXT_FIELD_TEXT_COLOR;
            mailserverTextField.TextColor = TEXT_FIELD_TEXT_COLOR;

            switch (accountIssue) {
            case AccountIssue.ErrorAuth:
                usernameTextField.TextColor = A.Color_NachoRed;
                passwordTextField.TextColor = A.Color_NachoRed;
                break;
            case AccountIssue.ErrorComm:
                mailserverTextField.TextColor = A.Color_NachoRed;
                break;
            case AccountIssue.ErrorUser:
                usernameTextField.TextColor = A.Color_NachoRed;
                break;
            case AccountIssue.InvalidHost:
                mailserverTextField.TextColor = A.Color_NachoRed;
                break;
            default:
                break;
            }
        }

        protected bool DidUserEditAccount ()
        {
            var accountNameTextField = (UITextField)View.ViewWithTag (ACCOUNT_NAME_TAG);
            var usernameTextField = (UITextField)View.ViewWithTag (USERNAME_TAG);
            var passwordTextField = (UITextField)View.ViewWithTag (PASSWORD_TAG);
            var emailTextField = (UITextField)View.ViewWithTag (EMAIL_TAG);
            var mailserverTextField = (UITextField)View.ViewWithTag (MAILSERVER_TAG);
            var conferenceTextField = (UITextField)View.ViewWithTag (CONFERENCE_TAG);

            if (accountNameTextField.Text != originalAccountNameValue) {
                return true;
            }
            if (usernameTextField.Text != originalUsernameValue) {
                return true;
            }
            if (passwordTextField.Text != originalPasswordValue) {
                return true;
            }
            if (emailTextField.Text != originalEmailValue) {
                return true;
            }
            if (mailserverTextField.Text != originalMailServerValue) {
                return true;
            }
            if (conferenceTextField.Text != originalConferenceValue) {
                return true;
            }

            return false;
        }

        protected override void Cleanup ()
        {
            cancelButton.Clicked -= CancelButtonClicked;
            editButton.Clicked -= EditButtonClicked;
            saveButton.Clicked -= SaveButtonClicked;
            backButton.Clicked -= BackButtonClicked;
            deleteAccountButton.TouchUpInside -= onDeleteAccount;
            FastNotificationSwitch.ValueChanged -= FastNotificationSwitchChangedHandler;

            cancelButton = null;
            editButton = null;
            saveButton = null;
            backButton = null;

            var cancelValidationButton = (UIButton)View.ViewWithTag (CANCEL_VALIDATION_BUTTON_TAG);
            if (null != cancelValidationButton) {
                cancelValidationButton.TouchUpInside -= CancelValidationButtonClicked;
                cancelValidationButton = null;
            }

            SignatureBlock.Cleanup ();
            DaysToSyncBlock.Cleanup ();

            UITextField accountNameTextField = (UITextField)View.ViewWithTag (ACCOUNT_NAME_TAG);
            UITextField usernameTextField = (UITextField)View.ViewWithTag (USERNAME_TAG);
            UITextField passwordTextField = (UITextField)View.ViewWithTag (PASSWORD_TAG);
            UITextField emailTextField = (UITextField)View.ViewWithTag (EMAIL_TAG);
            UITextField mailServerTextField = (UITextField)View.ViewWithTag (MAILSERVER_TAG);
            UITextField conferenceTextField = (UITextField)View.ViewWithTag (CONFERENCE_TAG);

            accountNameTextField.ShouldReturn -= TextFieldShouldReturn;
            usernameTextField.ShouldReturn -= TextFieldShouldReturn;
            passwordTextField.ShouldReturn -= TextFieldShouldReturn;
            emailTextField.ShouldReturn -= TextFieldShouldReturn;
            mailServerTextField.ShouldReturn -= TextFieldShouldReturn;
            conferenceTextField.ShouldReturn -= TextFieldShouldReturn;

            passwordTextField.ShouldChangeCharacters -= ShouldChangeCharacters;

            accountNameTextField = null;
            usernameTextField = null;
            passwordTextField = null;
            emailTextField = null;
            mailServerTextField = null;
            conferenceTextField = null;
            SignatureBlock = null;
            DaysToSyncBlock = null;
        }

        protected void ValidateAndDisplayWaitingView ()
        {
            var usernameTextField = (UITextField)View.ViewWithTag (USERNAME_TAG);
            var passwordTextField = (UITextField)View.ViewWithTag (PASSWORD_TAG);
            var mailserverTextField = (UITextField)View.ViewWithTag (MAILSERVER_TAG);

            if (EmailHelper.ParseServerWhyEnum.Success_0 != EmailHelper.IsValidServer (mailserverTextField.Text.Trim ())) {
                accountIssue = AccountIssue.InvalidHost;
                ConfigureAndLayout ();
                return;
            }

            McServer testServer = new McServer ();
            SetHostAndPort (testServer, mailserverTextField.Text);

            McCred testCred = new McCred ();
            testCred.SetTestPassword (passwordTextField.Text);
            testCred.Username = (usernameTextField.Text);

            // TODO: Add more precise error messages based on NcResult
            if (!BackEnd.Instance.ValidateConfig (LoginHelpers.GetCurrentAccountId (), testServer, testCred).isOK ()) {
                NcAlertView.Show (this, "Network Error",
                    "A network issue is preventing your changes from being validated. Would you like to save your changes anyway?",
                    new NcAlertAction ("Save", () => {
                        SaveAccountSettings ();
                        ToggleEditing ();
                    }),
                    new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
            } else {
                NcApplication.Instance.StatusIndEvent += StatusIndicatorCallback;
                ShowStatusView ();
            }
        }

        public void StatusIndicatorTriggered ()
        {
            HideStatusView ();
            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
            if (handleStatusEnums) {
                HandleAccountIssue ();
            }
        }

        public void StatusIndicatorCallback (object sender, EventArgs e)
        {
            var s = (StatusIndEventArgs)e;

            if (NcResult.SubKindEnum.Info_ValidateConfigSucceeded == s.Status.SubKind) {
                accountIssue = AccountIssue.None;
                StatusIndicatorTriggered ();
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedComm == s.Status.SubKind) {
                accountIssue = AccountIssue.ErrorComm;
                StatusIndicatorTriggered ();
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedAuth == s.Status.SubKind) {
                accountIssue = AccountIssue.ErrorAuth;
                StatusIndicatorTriggered ();
            }
            if (NcResult.SubKindEnum.Error_ValidateConfigFailedUser == s.Status.SubKind) {
                accountIssue = AccountIssue.ErrorUser;
                StatusIndicatorTriggered ();
            }
        }

        public bool TextFieldShouldReturn (UITextField whatField)
        {
            View.EndEditing (true);
            return true;
        }

        public bool ShouldChangeCharacters (UITextField textField, NSRange range, string replacementString)
        {
            var updatedString = textField.Text.Substring (0, (int)range.Location) + replacementString + textField.Text.Substring ((int)(range.Location + range.Length));
            textField.Text = updatedString;
            return false;
        }

        protected void SaveButtonClicked (object sender, EventArgs e)
        {
            View.EndEditing (true);
            handleStatusEnums = true;
            ValidateAndDisplayWaitingView ();
        }

        protected void EditButtonClicked (object sender, EventArgs e)
        {
            ToggleEditing ();
        }

        protected void BackButtonClicked (object sender, EventArgs e)
        {
            NavigationController.PopViewController (true);
        }

        protected void CancelButtonClicked (object sender, EventArgs e)
        {
            if (DidUserEditAccount ()) {
                NcAlertView.Show (this, "Dismiss Changes", "If you leave this screen, your changes will not be saved.",
                    new NcAlertAction ("OK", () => {
                        ToggleEditing ();
                    }),
                    new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
            } else {
                ToggleEditing ();
            }
        }

        protected void CancelValidationButtonClicked (object sender, EventArgs e)
        {
            BackEnd.Instance.CancelValidateConfig (LoginHelpers.GetCurrentAccountId ());

            NcApplication.Instance.StatusIndEvent -= StatusIndicatorCallback;
            HideStatusView ();

            NcAlertView.Show (this, "Validation Cancelled",
                "Your settings have not been validated. Would you like to save them anyway?",
                new NcAlertAction ("Save", () => {
                    SaveAccountSettings ();
                    ToggleEditing ();
                }),
                new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
        }

        protected void CaptureOriginalSettings ()
        {
            McAccount theAccount = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
            McServer theServer = McServer.QueryByAccountId<McServer> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();
            McCred theCred = McCred.QueryByAccountId<McCred> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();
            McConference theConference = McConference.QueryByAccountId<McConference> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();

            if (null != theAccount.DisplayName) {
                originalAccountNameValue = theAccount.DisplayName;
            }
            if (null != theCred.Username) {
                originalUsernameValue = theCred.Username;
            }
            if (null != theCred.GetPassword ()) {
                originalPasswordValue = theCred.GetPassword ();
            }
            if (null != theAccount.EmailAddr) {
                originalEmailValue = theAccount.EmailAddr;
            }
            if (null != theServer) {
                originalMailServerValue = theServer.Host;
                if (443 != theServer.Port) {
                    originalMailServerValue += ":" + theServer.Port;
                }
            }
            if (null != theConference.DefaultPhoneNumber) {
                originalConferenceValue = theConference.DefaultPhoneNumber;
            }
        }

        protected void SignatureTapHandler (NSObject sender)
        {
            var gesture = sender as UIGestureRecognizer;
            if (null != gesture) {
                PerformSegue ("SegueToSignatureEdit", this);
            }
        }

        protected void DaysToSyncTapHandler (NSObject sender)
        {
            NcActionSheet.Show (View, this,
                new NcAlertAction (Pretty.MaxAgeFilter (NachoCore.ActiveSync.Xml.Provision.MaxAgeFilterCode.OneMonth_5), () => {
                    UpdateDaysToSync (LoginHelpers.GetCurrentAccountId (), NachoCore.ActiveSync.Xml.Provision.MaxAgeFilterCode.OneMonth_5);
                }),
                new NcAlertAction (Pretty.MaxAgeFilter (NachoCore.ActiveSync.Xml.Provision.MaxAgeFilterCode.SyncAll_0), () => {
                    UpdateDaysToSync (LoginHelpers.GetCurrentAccountId (), NachoCore.ActiveSync.Xml.Provision.MaxAgeFilterCode.SyncAll_0);
                }),
                new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null)
            );
        }

        protected void NotificationsTapHandler (NSObject sender)
        {
            var gesture = sender as UIGestureRecognizer;
            if (null != gesture) {
                PerformSegue ("SettingsToNotificationChooser", this);
            }
        }

        protected void FastNotificationSwitchChangedHandler (object sender, EventArgs e)
        {
            var account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
            account.FastNotificationEnabled = FastNotificationSwitch.On;
            account.Update ();
        }

        protected void UpdateDaysToSync (int accountId, NachoCore.ActiveSync.Xml.Provision.MaxAgeFilterCode code)
        {
            DaysToSyncBlock.SetValue (Pretty.MaxAgeFilter (code));
            var account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
            account.DaysToSyncEmail = code;
            account.Update ();
        }

        public void UpdateNotificationConfiguration (int accountId, McAccount.NotificationConfigurationEnum choice)
        {
            NotificationsBlock.SetValue (Pretty.NotificationConfiguration (choice));
            var account = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
            account.NotificationConfiguration = choice;
            account.Update ();
        }

        protected void HandleAccountIssue ()
        {
            string alertViewHeader = "";
            string alertViewMessage = "";

            switch (accountIssue) {
            case AccountIssue.ErrorAuth:
                alertViewHeader = "Invalid Credentials";
                alertViewMessage = "User name or password is incorrect. No emails can be sent or recieved. Save anyway?";
                break;
            case AccountIssue.ErrorComm:
                alertViewHeader = "Validation Failed";
                alertViewMessage = "This account may not be able to send or receive emails. Save anyway?";
                break;
            case AccountIssue.ErrorUser:
                alertViewHeader = "Invalid Username";
                alertViewMessage = "User name is incorrect. No emails can be sent or received. Save anyway?";
                break;
            case AccountIssue.None:
                SaveAccountSettings ();
                ToggleEditing ();
                return;
            default:
                break;
            }

            NcAlertView.Show (this, alertViewHeader, alertViewMessage,
                new NcAlertAction ("Save", () => {
                    SaveAccountSettings ();
                    ToggleEditing ();
                }),
                new NcAlertAction ("Cancel", NcAlertActionStyle.Cancel, null));
            
            handleStatusEnums = false;

            ColorTextFields ();
        }

        protected void ShowStatusView ()
        {
            UIView greyBackground = (UIView)View.ViewWithTag (GREY_BACKGROUND_VIEW_TAG); 
            UIView statusView = (UIView)View.ViewWithTag (STATUS_VIEW_TAG); 
            greyBackground.Hidden = false;
            statusView.Hidden = false;
        }

        protected void HideStatusView ()
        {
            UIView greyBackground = (UIView)View.ViewWithTag (GREY_BACKGROUND_VIEW_TAG);
            UIView statusView = (UIView)View.ViewWithTag (STATUS_VIEW_TAG);
            greyBackground.Hidden = true;
            statusView.Hidden = true;
        }

        protected void SaveAccountSettings ()
        {
            View.EndEditing (true);
            if (DidUserEditAccount ()) {
                var accountNameTextField = (UITextField)View.ViewWithTag (ACCOUNT_NAME_TAG);
                var usernameTextField = (UITextField)View.ViewWithTag (USERNAME_TAG);
                var passwordTextField = (UITextField)View.ViewWithTag (PASSWORD_TAG);
                var emailTextField = (UITextField)View.ViewWithTag (EMAIL_TAG);
                var mailserverTextField = (UITextField)View.ViewWithTag (MAILSERVER_TAG);
                var conferenceTextField = (UITextField)View.ViewWithTag (CONFERENCE_TAG);

                McAccount theAccount = McAccount.QueryById<McAccount> (LoginHelpers.GetCurrentAccountId ());
                McServer theServer = McServer.QueryByAccountId<McServer> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();
                McCred theCred = McCred.QueryByAccountId<McCred> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();
                McConference theConference = McConference.QueryByAccountId <McConference> (LoginHelpers.GetCurrentAccountId ()).FirstOrDefault ();

                theAccount.DisplayName = accountNameTextField.Text;
                theAccount.EmailAddr = emailTextField.Text;
                SetHostAndPort (theServer, mailserverTextField.Text);
                theCred.Username = usernameTextField.Text;
                theCred.UpdatePassword (passwordTextField.Text);
                theConference.DefaultPhoneNumber = conferenceTextField.Text;

                theAccount.Update ();
                theServer.Update ();
                theCred.Update ();
                theConference.Update ();

                NachoTabBarController.ReconfigureMoreTab ();
            }
        }

        //Should this be a helper? EmailHelper?
        protected void SetHostAndPort (McServer forServer, string serverText)
        {
            NcAssert.True (EmailHelper.ParseServerWhyEnum.Success_0 == EmailHelper.ParseServer (ref forServer, serverText));
        }

        protected void ToggleEditing ()
        {
            textFieldsEditable = !textFieldsEditable;
            if (textFieldsEditable) {
                NavigationItem.SetLeftBarButtonItem (cancelButton, true);
                NavigationItem.SetRightBarButtonItem (saveButton, true);
                UIView.Animate (1, () => {
                    NavigationItem.Title = "Edit Account";
                });
            } else {
                NavigationItem.SetLeftBarButtonItem (backButton, true);
                NavigationItem.SetRightBarButtonItem (editButton, true);
                UIView.Animate (1, () => {
                    NavigationItem.Title = "Account Settings";
                });
            }
            ConfigureAndLayout ();
        }

        void onDeleteAccount (object sender, EventArgs e)
        {
            backButton.Enabled = false;
            editButton.Enabled = false;
            ToggleDeleteAccountSpinnerView ();
            Action action = () => {
                NcAccountHandler.Instance.RemoveAccount ();
                InvokeOnMainThread (() => {
                    backButton.Enabled = true;
                    editButton.Enabled = true;
                    ToggleDeleteAccountSpinnerView ();
                    // go back to main screen
                    NcUIRedirector.Instance.GoBackToMainScreen ();  
                });
            };
            NcTask.Run (action, "RemoveAccount");
        }

        protected void ToggleDeleteAccountSpinnerView ()
        {
            UIView deleteAccountBackgroundView = (UIView)View.ViewWithTag (DELETE_ACCOUNT_BACKGROUND_VIEW_TAG);
            UIActivityIndicatorView deleteAccountActivityIndicator = (UIActivityIndicatorView)View.ViewWithTag (DELETE_ACCOUNT_SPINNER_TAG);

            deleteAccountBackgroundView.Hidden = !deleteAccountBackgroundView.Hidden;

            if (deleteAccountBackgroundView.Hidden) {
                deleteAccountActivityIndicator.StopAnimating ();
                deleteAccountBackgroundView.Alpha = 0.0f;
            } else {
                UIView.Animate (.15, () => {
                    deleteAccountBackgroundView.Alpha = 1.0f;
                });
                deleteAccountActivityIndicator.StartAnimating ();
            }
        }

        protected virtual void OnKeyboardChanged (bool visible, nfloat height)
        {
            var newHeight = (visible ? height : 0);

            if (newHeight == keyboardHeight) {
                return;
            }
            keyboardHeight = newHeight;

            LayoutView ();
        }

        public virtual bool HandlesKeyboardNotifications {
            get { return true; }
        }

        private void OnKeyboardNotification (NSNotification notification)
        {
            if (IsViewLoaded) {
                //Check if the keyboard is becoming visible
                bool visible = notification.Name == UIKeyboard.WillShowNotification;
                //Start an animation, using values from the keyboard
                UIView.BeginAnimations ("AnimateForKeyboard");
                UIView.SetAnimationBeginsFromCurrentState (true);
                UIView.SetAnimationDuration (UIKeyboard.AnimationDurationFromNotification (notification));
                UIView.SetAnimationCurve ((UIViewAnimationCurve)UIKeyboard.AnimationCurveFromNotification (notification));
                //Pass the notification, calculating keyboard height, etc.
                bool landscape = InterfaceOrientation == UIInterfaceOrientation.LandscapeLeft || InterfaceOrientation == UIInterfaceOrientation.LandscapeRight;
                if (visible) {
                    var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                } else {
                    var keyboardFrame = UIKeyboard.FrameBeginFromNotification (notification);
                    OnKeyboardChanged (visible, landscape ? keyboardFrame.Width : keyboardFrame.Height);
                }
                //Commit the animation
                UIView.CommitAnimations (); 
            }
        }
    }
}
