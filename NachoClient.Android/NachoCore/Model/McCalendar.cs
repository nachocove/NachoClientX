//  Copyright (C) 2014 Nacho Cove, Inc. All rights reserved.
//
using SQLite;
using System;
using System.Linq;
using System.Collections.Generic;
using NachoCore.Utils;

namespace NachoCore.Model
{
    public partial class McCalendar : McAbstrCalendarRoot
    {
        /// Implicit [Ignore]
        private List<McException> DbExceptions;
        /// Implicit [Ignore]
        private List<McRecurrence> DbRecurrences;

        /// Is a response to this meeting required? Calendar only.
        public bool ResponseRequested { get; set; }

        public bool ResponseRequestedIsSet { get; set; }

        /// The default is False.  Calendar only
        public bool DisallowNewTimeProposal { get; set; }

        public bool DisallowNewTimeProposalIsSet { get; set; }

        /// Name of the creator of the calendar item (optional). Calendar only.
        [MaxLength (256)]
        public string OrganizerName { get; set; }

        /// Email of the creator of the calendar item (optional). Calendar only.
        [MaxLength (256)]
        public string OrganizerEmail { get; set; }

        /// Unique 300 digit hexidecimal ID generated by the client. Calendar only.
        [MaxLength (300)]
        public string UID { get; set; }

        public static ClassCodeEnum GetClassCode ()
        {
            return McAbstrFolderEntry.ClassCodeEnum.Calendar;
        }

        protected bool HasReadAncillaryData;

        public McCalendar () : base ()
        {
            HasReadAncillaryData = false;
            DbExceptions = new List<McException> ();
            DbRecurrences = new List<McRecurrence> ();
        }

        [Ignore]
        public List<McException> exceptions {
            get {
                ReadAncillaryData ();
                return DbExceptions;
            }
            set {
                ReadAncillaryData ();
                DbExceptions = value;
            }
        }

        [Ignore]
        public List<McRecurrence> recurrences {
            get {
                ReadAncillaryData ();
                return DbRecurrences;
            }
            set {
                ReadAncillaryData ();
                DbRecurrences = value;
            }
        }

        private new NcResult ReadAncillaryData ()
        {
            base.ReadAncillaryData ();
            if (!HasReadAncillaryData) {
                HasReadAncillaryData = true;
                return ForceReadAncillaryData ();
            }
            return NcResult.OK ();
        }

        public new NcResult ForceReadAncillaryData ()
        {
            base.ForceReadAncillaryData();
            HasReadAncillaryData = true;
            DbExceptions = NcModel.Instance.Db.Table<McException> ().Where (x => x.CalendarId == Id).ToList ();
            DbRecurrences = NcModel.Instance.Db.Table<McRecurrence> ().Where (x => x.CalendarId == Id).ToList ();
            return NcResult.OK ();
        }

        public NcResult InsertAncillaryData (SQLiteConnection db)
        {
            NcAssert.True (0 < Id);

            foreach (var a in attendees) {
                a.SetParent (this);
                db.Insert (a);
            }
            foreach (var c in categories) {
                c.SetParent (this);
                db.Insert (c);
            }
            // TODO: Exceptions and recurrences

            // FIXME: Error handling
            return NcResult.OK ();
        }

        public override int Insert ()
        {
            // FIXME db transaction.
            int retval = base.Insert ();
            InsertAncillaryData (NcModel.Instance.Db);
            return retval;
        }

        public override int Update ()
        {
            int retval = base.Update ();
            UpdateAncillaryData (NcModel.Instance.Db);
            return retval;
        }

        public void UpdateAncillaryData (SQLiteConnection db)
        {
            ReadAncillaryData ();
            DeleteAncillaryData (db);
            InsertAncillaryData (db);
        }

        public override void DeleteAncillary ()
        {
            NcAssert.True (NcModel.Instance.IsInTransaction ());
            DeleteAncillaryData (NcModel.Instance.Db);
        }

        private NcResult DeleteAncillaryData (SQLiteConnection db)
        {
            // FIXME: Parent types
            var attendees = db.Table<McAttendee> ().Where (x => x.ParentId == Id).ToList ();
            foreach (var a in attendees) {
                a.Delete ();
            }
            // FIXME: Parent types
            categories = db.Table<McCalendarCategory> ().Where (x => x.ParentId == Id).ToList ();
            foreach (var c in categories) {
                c.Delete ();
            }

            // TODO: Support exceptions and recurrences

            // TODO: Add error processing
            return NcResult.OK ();
        }
    }
}

