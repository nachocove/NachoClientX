using SQLite;
using System;

namespace NachoCore.Model
{
    // Table of calendar and exception entries.
    // Table of attendees, refer back to entry they are attending (1 unique set per entry)
    // Table of categories, referring back to entry they are modifying (1 unique set per entry)
    // Table of timezones, referred to by the calendar entry

    public partial class NcCalendar
    {
        public const string ClassName = "NcCalendar";
        public const int CALENDAR = 0;
        public const int EXCEPTION = 1;

        [PrimaryKey, AutoIncrement, Unique]
        public int Id { get; set; }

        [Indexed]
        public string ServerId { get; set; }

        [Indexed]
        public int FolderId { get; set; }

        // Optimistic concurrency control
        public DateTime LastModified { get; set; }

        // Calendar or Exception
        public int Kind { get; set; }

        // Item runs for the entire day
        public bool AllDayEvent { get; set; }

        // When this item was created or modified (Compact DateTime, optional)
        public DateTime DTStamp { get; set; }

        // Start time of this item (Compact DateTime)
        public DateTime StartTime { get; set; }

        // End time of this item (Compact DateTime, optional)
        public DateTime EndTime { get; set; }

        // Number of minutes before start time to display a message (optional)
        public uint Reminder { get; set; }

        // TZ of the calendar item.  Calendar only.
        // Foreign key to TimeZone table.
        public int TimeZoneId { get; set; }

        // Subject of then calendar or exception item
        public string Subject { get; set; }

        [MaxLength(256)]
        // Location of the event (optional)
        public string Location { get; set; }

        // Recommended privacy policy for this item (optional)
        public NcSensitivity Sensitivity { get; set; }

        // Busy status of the meeting organizer (optional)
        public NcBusyStatus BusyStatus { get; set; }

        // None, Organizer, Tentative, ...
        public NcResponseType ResponseType;

        // Status of the meeting (optional)
        public NcMeetingStatus MeetingStatus { get; set; }

        // Is a response to this meeting required? Calendar only.
        public bool ResponseRequested { get; set; }

        // The time this user responded to the request
        public DateTime AppointmentReplyTime;

        // The default is False.  Calendar only
        public bool DisallowNewTimeProposal;

        [MaxLength(256)]
        // Name of the creator of the calendar item (optional). Calendar only.
        public string OrganizerName { get; set; }

        [MaxLength(256)]
        // Email of the creator of the calendar item (optional). Calendar only.
        public string OrganizerEmail { get; set; }

        // The GRUU for the UAC :)
        public string OnlineMeetingConfLink;

        // The URL for the online meeting
        public string OnlineMeetingExternalLink;

        // public NcAttendee[] Attendees;
        // public string[] Categories;
        // public NcException[] Exceptions; Calendar only.

        [Indexed, MaxLength(300)]
        // Unique 300 digit hexidecimal ID generated by the client. Calendar only.
        public string UID { get; set; }

        // Has this exception been deleted?  Exception only.
        public uint Deleted;

        // Start time of the original recurring meeting (Compact DateTime). Exception only.
        public DateTime ExceptionStartTime;

        // Index of Body container
        public int BodyId { get; set; }

        // How is the body stored on the server?  Calendar only.
        public int NativeBodyType { get; set; }

        // Recurrence.  Calendar only.
        // The following fields define the
        // Recurrence pattern of an event.

        public NcRecurrenceType Type { get; set; }

        // Maximum is 999
        public int Occurences { get; set; }

        // Interval between recurrences, range is 0 to 999
        public int Interval { get; set; }

        // The week of the month or the day of the month for the recurrence
        // WeekOfMonth must be between 1 and 5; 5 is the last week of the month.
        public int WeekOfMonth { get; set; }

        public NcDayOfWeek DayOfWeek { get; set; }

        // The month of the year for the recurrence, range is 1..12
        public int MonthOfYear { get; set; }

        // Compact DateTime
        public DateTime Until { get; set; }

        // The day of the month for the recurrence, range 1..31
        public int DayOfMonth { get; set; }

        public NcCalendarType CalendarType { get; set; }

        // Takes place on the embolismic (leap) month
        public bool isLeapMonth { get; set; }

        // Disambiguates recurrences across localities
        public int FirstDayOfWeek { get; set; }

        // End of Recurrence fields
       
    }

    // The attendee table is a big old list of non-unique names.
    // Each attendee record refers back to its Calendar record.
    public partial class NcAttendee
    {
        [PrimaryKey, AutoIncrement, Unique]
        public int Id { get; set; }

        [Indexed]
        public int CalendarId { get; set; }

        // Optimistic concurrency control
        public DateTime LastModified { get; set; }

        [MaxLength(256)]
        // Email address of attendee
        public string Email { get; set; }

        [MaxLength(256)]
        // Display name of attendee
        public string Name { get; set; }

        // Required, optional, resource
        public NcAttendeeType AttendeeType { get; set; }

        // Unknown, tentative, accept, ...
        public NcAttendeeStatus AttendeeStatus { get; set; }

    }

    // The category table represents a collection of categories
    // assigned to a calendar or exception item.
    public partial class NcCategory
    {
        [PrimaryKey, AutoIncrement, Unique]
        public int Id { get; set; }

        [Indexed]
        public int CalendarId { get; set; }

        // Optimistic concurrency control
        public DateTime LastModified { get; set; }

        [MaxLength(256)]
        // Name of category
        public string Name { get; set; }
       
    }

    public class NcTimeZone
    {
        [PrimaryKey, AutoIncrement, Unique]
        public int Id { get; set; }

        // Optimistic concurrency control
        public DateTime LastModified { get; set; }

        // The offset from UTC, in minutes;
        public int Bias { get; set; }

        // Optional TZ description as an array of 32 WCHARs
        public string StandardName { get; set; }

        // When the transition from DST to standard time occurs
        public System.DateTime StandardDate { get; set; }

        // Number of minutes to add to Bias during standard time
        public int StandardBias { get; set; }

        // Optional DST description as an array of 32 WCHARs
        public string DaylightName { get; set; }

        // When the transition from standard time to DST occurs
        public System.DateTime DaylightDate { get; set; }

        // Number of miniutes to add to Bias during DST
        public int DaylightBias { get; set; }

        public NcTimeZone()
        {
            LastModified = DateTime.UtcNow;
        }
           
    }

    public enum NcBusyStatus
    {
        Free = 0,
        Tentative = 1,
        Busy = 2,
        OutOfOffice = 3,
    }

    public enum NcSensitivity
    {
        Normal = 0,
        Personal = 1,
        Private = 2,
        Confidential = 3,
    }

    public enum NcMeetingStatus
    {
        Appointment = 0,
        // No attendees
        Meeting = 1,
        // The user is the meeting organizer
        ForwardedMeeting = 3,
        // The meeting was recieved from someone else
        MeetingCancelled = 5,
        // The user is the cancelled meeting's organizer
        ForwardedMeetingCancelled = 7,
        // The cancelled meeting was recieved from someone else
    }

    // Similar to NcResponseType
    public enum NcAttendeeStatus
    {
        ResponseUnknown = 0,
        // The user's response is unknown
        Tentative = 2,
        // The user is unsure about attending
        Accept = 3,
        // The user has accepted the meeting
        Decline = 4,
        // The user has decloned the meeting
        NotResponded = 5,
        // The user has not responded
    }

    // Similar to NcAttendeeStatus
    public enum NcResponseType
    {
        None = 0,
        // The user's response has not been received
        Organizer = 1,
        // The  user is the organizer; no reply is required
        Tentative = 2,
        // The user is unsure about attending
        Accepted = 3,
        // The user has accepted the meeting
        Declined = 4,
        // The user has declined the meeting
        NotResponded = 5,
        // The user has not responded
    }

    public enum NcAttendeeType
    {
        Unknown = 0,
        Required = 1,
        Optional = 2,
        Resource = 3,
    }

    public enum NcRecurrenceType
    {
        Daily = 0,
        Weekly = 1,
        Monthly = 2,
        MonthlyOnDay = 3,
        Yearly = 5,
        YearlyOnDay = 6,
    }

    public enum NcDayOfWeek
    {
        Sunday = 1,
        Monday = 2,
        Tuesday = 4,
        Wednesday = 8,
        Thursday = 16,
        Friday = 32,
        Weekdays = 62,
        Saturday = 64,
        WeekendDays = 65,
        LastDayOfTheMonth = 127,
        // special value in monthly or yearly recurrences
    }

    public enum NcFirstDayOfWeek
    {
        Sunday = 0,
        Monday = 1,
        Tuesday = 2,
        Wednesday = 3,
        Thursday = 4,
        Friday = 5,
        Saturday = 6,
    }

    public enum NcCalendarType
    {
        Default = 0,
        Gregorian = 1,
        GregorianUnitedStates = 2,
        JapaneseEmperorEra = 3,
        Taiwan = 4,
        KoreanTangunEra = 5,
        HijriArabicLunar = 6,
        Thai = 7,
        HebrewLunar = 8,
        GregorianMiddleEastFrench = 9,
        GregorianArabic = 10,
        GregorianTransliteratedEnglish = 11,
        GregorianTransliteratedFrench = 12,
        ReservedMustNotBeUsed = 13,
        JapaneseLunar = 14,
        ChineseLunar = 15,
        SakaEraReservedMustNotBeUsed = 16,
        ChineseLunarEtoReservedMustNotbeUsed = 17,
        KoreanLunarEtoReservedMustNotBeUsed = 18,
        JapaneseRokuyouLunarReservedMustNotBeUsed = 19,
        KoreanLunar = 20,
        ReservedMustNotBeUsed_21 = 21,
        ReservedmustNotBeUsed_22 = 22,
        UmalQuraReservedMustNotBeUsed = 23,
    }
      
    public partial class NcCalendar
    {
 
    }

    public partial class NcAttendee
    {
        public NcAttendee()
        {
        }

        public NcAttendee(int calendarId, string name, string email)
        {
            CalendarId = calendarId;
            LastModified = DateTime.UtcNow;
            Email = email;
            Name = name;
            AttendeeType = NcAttendeeType.Unknown;
            AttendeeStatus = NcAttendeeStatus.NotResponded;
        }
    }

    public partial class NcCategory
    {
        public NcCategory()
        {
        }

        public NcCategory(int calendarId, string name)
        {
            LastModified = DateTime.UtcNow;
            CalendarId = calendarId;
            Name = name;
        }
    }
}

